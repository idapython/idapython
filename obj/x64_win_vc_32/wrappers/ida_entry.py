# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""IDA Plugin SDK API wrapper: entry"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_entry
else:
    import _ida_entry

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func


def get_entry_qty(*args):
    r"""get_entry_qty() -> size_t"""
    return _ida_entry.get_entry_qty(*args)
AEF_UTF8 = _ida_entry.AEF_UTF8

AEF_IDBENC = _ida_entry.AEF_IDBENC


def add_entry(*args):
    r"""add_entry(ord, ea, name, makecode, flags=0) -> bool"""
    return _ida_entry.add_entry(*args)

def get_entry_ordinal(*args):
    r"""get_entry_ordinal(idx) -> uval_t"""
    return _ida_entry.get_entry_ordinal(*args)

def get_entry(*args):
    r"""get_entry(ord) -> ea_t"""
    return _ida_entry.get_entry(*args)

def get_entry_name(*args):
    r"""get_entry_name(ord) -> ssize_t"""
    return _ida_entry.get_entry_name(*args)

def rename_entry(*args):
    r"""rename_entry(ord, name, flags=0) -> bool"""
    return _ida_entry.rename_entry(*args)

def set_entry_forwarder(*args):
    r"""set_entry_forwarder(ord, name, flags=0) -> bool"""
    return _ida_entry.set_entry_forwarder(*args)

def get_entry_forwarder(*args):
    r"""get_entry_forwarder(ord) -> ssize_t"""
    return _ida_entry.get_entry_forwarder(*args)


