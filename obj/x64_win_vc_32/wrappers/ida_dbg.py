# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""IDA Plugin SDK API wrapper: dbg"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_dbg
else:
    import _ida_dbg

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

import ida_idd
import ida_range
class bpt_vec_t(object):
    r"""Proxy of C++ qvector< bpt_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> bpt_vec_t
        __init__(self, x) -> bpt_vec_t
        """
        _ida_dbg.bpt_vec_t_swiginit(self, _ida_dbg.new_bpt_vec_t(*args))
    __swig_destroy__ = _ida_dbg.delete_bpt_vec_t

    def push_back(self, *args):
        r"""
        push_back(self, x)
        push_back(self) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_push_back(self, *args)

    def pop_back(self, *args):
        r"""pop_back(self)"""
        return _ida_dbg.bpt_vec_t_pop_back(self, *args)

    def size(self, *args):
        r"""size(self) -> size_t"""
        return _ida_dbg.bpt_vec_t_size(self, *args)

    def empty(self, *args):
        r"""empty(self) -> bool"""
        return _ida_dbg.bpt_vec_t_empty(self, *args)

    def at(self, *args):
        r"""at(self, _idx) -> bpt_t"""
        return _ida_dbg.bpt_vec_t_at(self, *args)

    def qclear(self, *args):
        r"""qclear(self)"""
        return _ida_dbg.bpt_vec_t_qclear(self, *args)

    def clear(self, *args):
        r"""clear(self)"""
        return _ida_dbg.bpt_vec_t_clear(self, *args)

    def resize(self, *args):
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_dbg.bpt_vec_t_resize(self, *args)

    def grow(self, *args):
        r"""grow(self, x=bpt_t())"""
        return _ida_dbg.bpt_vec_t_grow(self, *args)

    def capacity(self, *args):
        r"""capacity(self) -> size_t"""
        return _ida_dbg.bpt_vec_t_capacity(self, *args)

    def reserve(self, *args):
        r"""reserve(self, cnt)"""
        return _ida_dbg.bpt_vec_t_reserve(self, *args)

    def truncate(self, *args):
        r"""truncate(self)"""
        return _ida_dbg.bpt_vec_t_truncate(self, *args)

    def swap(self, *args):
        r"""swap(self, r)"""
        return _ida_dbg.bpt_vec_t_swap(self, *args)

    def extract(self, *args):
        r"""extract(self) -> bpt_t"""
        return _ida_dbg.bpt_vec_t_extract(self, *args)

    def inject(self, *args):
        r"""inject(self, s, len)"""
        return _ida_dbg.bpt_vec_t_inject(self, *args)

    def begin(self, *args):
        r"""
        begin(self) -> bpt_t
        begin(self) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> bpt_t
        end(self) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_end(self, *args)

    def insert(self, *args):
        r"""insert(self, it, x) -> bpt_t"""
        return _ida_dbg.bpt_vec_t_insert(self, *args)

    def erase(self, *args):
        r"""
        erase(self, it) -> bpt_t
        erase(self, first, last) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_erase(self, *args)

    def __len__(self, *args):
        r"""__len__(self) -> size_t"""
        return _ida_dbg.bpt_vec_t___len__(self, *args)

    def __getitem__(self, *args):
        r"""__getitem__(self, i) -> bpt_t"""
        return _ida_dbg.bpt_vec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""__setitem__(self, i, v)"""
        return _ida_dbg.bpt_vec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register bpt_vec_t in _ida_dbg:
_ida_dbg.bpt_vec_t_swigregister(bpt_vec_t)

class tev_reg_values_t(object):
    r"""Proxy of C++ qvector< tev_reg_value_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> tev_reg_values_t
        __init__(self, x) -> tev_reg_values_t
        """
        _ida_dbg.tev_reg_values_t_swiginit(self, _ida_dbg.new_tev_reg_values_t(*args))
    __swig_destroy__ = _ida_dbg.delete_tev_reg_values_t

    def push_back(self, *args):
        r"""
        push_back(self, x)
        push_back(self) -> tev_reg_value_t
        """
        return _ida_dbg.tev_reg_values_t_push_back(self, *args)

    def pop_back(self, *args):
        r"""pop_back(self)"""
        return _ida_dbg.tev_reg_values_t_pop_back(self, *args)

    def size(self, *args):
        r"""size(self) -> size_t"""
        return _ida_dbg.tev_reg_values_t_size(self, *args)

    def empty(self, *args):
        r"""empty(self) -> bool"""
        return _ida_dbg.tev_reg_values_t_empty(self, *args)

    def at(self, *args):
        r"""at(self, _idx) -> tev_reg_value_t"""
        return _ida_dbg.tev_reg_values_t_at(self, *args)

    def qclear(self, *args):
        r"""qclear(self)"""
        return _ida_dbg.tev_reg_values_t_qclear(self, *args)

    def clear(self, *args):
        r"""clear(self)"""
        return _ida_dbg.tev_reg_values_t_clear(self, *args)

    def resize(self, *args):
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_dbg.tev_reg_values_t_resize(self, *args)

    def grow(self, *args):
        r"""grow(self, x=tev_reg_value_t())"""
        return _ida_dbg.tev_reg_values_t_grow(self, *args)

    def capacity(self, *args):
        r"""capacity(self) -> size_t"""
        return _ida_dbg.tev_reg_values_t_capacity(self, *args)

    def reserve(self, *args):
        r"""reserve(self, cnt)"""
        return _ida_dbg.tev_reg_values_t_reserve(self, *args)

    def truncate(self, *args):
        r"""truncate(self)"""
        return _ida_dbg.tev_reg_values_t_truncate(self, *args)

    def swap(self, *args):
        r"""swap(self, r)"""
        return _ida_dbg.tev_reg_values_t_swap(self, *args)

    def extract(self, *args):
        r"""extract(self) -> tev_reg_value_t"""
        return _ida_dbg.tev_reg_values_t_extract(self, *args)

    def inject(self, *args):
        r"""inject(self, s, len)"""
        return _ida_dbg.tev_reg_values_t_inject(self, *args)

    def begin(self, *args):
        r"""
        begin(self) -> tev_reg_value_t
        begin(self) -> tev_reg_value_t
        """
        return _ida_dbg.tev_reg_values_t_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> tev_reg_value_t
        end(self) -> tev_reg_value_t
        """
        return _ida_dbg.tev_reg_values_t_end(self, *args)

    def insert(self, *args):
        r"""insert(self, it, x) -> tev_reg_value_t"""
        return _ida_dbg.tev_reg_values_t_insert(self, *args)

    def erase(self, *args):
        r"""
        erase(self, it) -> tev_reg_value_t
        erase(self, first, last) -> tev_reg_value_t
        """
        return _ida_dbg.tev_reg_values_t_erase(self, *args)

    def __len__(self, *args):
        r"""__len__(self) -> size_t"""
        return _ida_dbg.tev_reg_values_t___len__(self, *args)

    def __getitem__(self, *args):
        r"""__getitem__(self, i) -> tev_reg_value_t"""
        return _ida_dbg.tev_reg_values_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""__setitem__(self, i, v)"""
        return _ida_dbg.tev_reg_values_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register tev_reg_values_t in _ida_dbg:
_ida_dbg.tev_reg_values_t_swigregister(tev_reg_values_t)

class tevinforeg_vec_t(object):
    r"""Proxy of C++ qvector< tev_info_reg_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> tevinforeg_vec_t
        __init__(self, x) -> tevinforeg_vec_t
        """
        _ida_dbg.tevinforeg_vec_t_swiginit(self, _ida_dbg.new_tevinforeg_vec_t(*args))
    __swig_destroy__ = _ida_dbg.delete_tevinforeg_vec_t

    def push_back(self, *args):
        r"""
        push_back(self, x)
        push_back(self) -> tev_info_reg_t
        """
        return _ida_dbg.tevinforeg_vec_t_push_back(self, *args)

    def pop_back(self, *args):
        r"""pop_back(self)"""
        return _ida_dbg.tevinforeg_vec_t_pop_back(self, *args)

    def size(self, *args):
        r"""size(self) -> size_t"""
        return _ida_dbg.tevinforeg_vec_t_size(self, *args)

    def empty(self, *args):
        r"""empty(self) -> bool"""
        return _ida_dbg.tevinforeg_vec_t_empty(self, *args)

    def at(self, *args):
        r"""at(self, _idx) -> tev_info_reg_t"""
        return _ida_dbg.tevinforeg_vec_t_at(self, *args)

    def qclear(self, *args):
        r"""qclear(self)"""
        return _ida_dbg.tevinforeg_vec_t_qclear(self, *args)

    def clear(self, *args):
        r"""clear(self)"""
        return _ida_dbg.tevinforeg_vec_t_clear(self, *args)

    def resize(self, *args):
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_dbg.tevinforeg_vec_t_resize(self, *args)

    def grow(self, *args):
        r"""grow(self, x=tev_info_reg_t())"""
        return _ida_dbg.tevinforeg_vec_t_grow(self, *args)

    def capacity(self, *args):
        r"""capacity(self) -> size_t"""
        return _ida_dbg.tevinforeg_vec_t_capacity(self, *args)

    def reserve(self, *args):
        r"""reserve(self, cnt)"""
        return _ida_dbg.tevinforeg_vec_t_reserve(self, *args)

    def truncate(self, *args):
        r"""truncate(self)"""
        return _ida_dbg.tevinforeg_vec_t_truncate(self, *args)

    def swap(self, *args):
        r"""swap(self, r)"""
        return _ida_dbg.tevinforeg_vec_t_swap(self, *args)

    def extract(self, *args):
        r"""extract(self) -> tev_info_reg_t"""
        return _ida_dbg.tevinforeg_vec_t_extract(self, *args)

    def inject(self, *args):
        r"""inject(self, s, len)"""
        return _ida_dbg.tevinforeg_vec_t_inject(self, *args)

    def begin(self, *args):
        r"""
        begin(self) -> tev_info_reg_t
        begin(self) -> tev_info_reg_t
        """
        return _ida_dbg.tevinforeg_vec_t_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> tev_info_reg_t
        end(self) -> tev_info_reg_t
        """
        return _ida_dbg.tevinforeg_vec_t_end(self, *args)

    def insert(self, *args):
        r"""insert(self, it, x) -> tev_info_reg_t"""
        return _ida_dbg.tevinforeg_vec_t_insert(self, *args)

    def erase(self, *args):
        r"""
        erase(self, it) -> tev_info_reg_t
        erase(self, first, last) -> tev_info_reg_t
        """
        return _ida_dbg.tevinforeg_vec_t_erase(self, *args)

    def __len__(self, *args):
        r"""__len__(self) -> size_t"""
        return _ida_dbg.tevinforeg_vec_t___len__(self, *args)

    def __getitem__(self, *args):
        r"""__getitem__(self, i) -> tev_info_reg_t"""
        return _ida_dbg.tevinforeg_vec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""__setitem__(self, i, v)"""
        return _ida_dbg.tevinforeg_vec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register tevinforeg_vec_t in _ida_dbg:
_ida_dbg.tevinforeg_vec_t_swigregister(tevinforeg_vec_t)

class memreg_infos_t(object):
    r"""Proxy of C++ qvector< memreg_info_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> memreg_infos_t
        __init__(self, x) -> memreg_infos_t
        """
        _ida_dbg.memreg_infos_t_swiginit(self, _ida_dbg.new_memreg_infos_t(*args))
    __swig_destroy__ = _ida_dbg.delete_memreg_infos_t

    def push_back(self, *args):
        r"""
        push_back(self, x)
        push_back(self) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_push_back(self, *args)

    def pop_back(self, *args):
        r"""pop_back(self)"""
        return _ida_dbg.memreg_infos_t_pop_back(self, *args)

    def size(self, *args):
        r"""size(self) -> size_t"""
        return _ida_dbg.memreg_infos_t_size(self, *args)

    def empty(self, *args):
        r"""empty(self) -> bool"""
        return _ida_dbg.memreg_infos_t_empty(self, *args)

    def at(self, *args):
        r"""at(self, _idx) -> memreg_info_t"""
        return _ida_dbg.memreg_infos_t_at(self, *args)

    def qclear(self, *args):
        r"""qclear(self)"""
        return _ida_dbg.memreg_infos_t_qclear(self, *args)

    def clear(self, *args):
        r"""clear(self)"""
        return _ida_dbg.memreg_infos_t_clear(self, *args)

    def resize(self, *args):
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_dbg.memreg_infos_t_resize(self, *args)

    def grow(self, *args):
        r"""grow(self, x=memreg_info_t())"""
        return _ida_dbg.memreg_infos_t_grow(self, *args)

    def capacity(self, *args):
        r"""capacity(self) -> size_t"""
        return _ida_dbg.memreg_infos_t_capacity(self, *args)

    def reserve(self, *args):
        r"""reserve(self, cnt)"""
        return _ida_dbg.memreg_infos_t_reserve(self, *args)

    def truncate(self, *args):
        r"""truncate(self)"""
        return _ida_dbg.memreg_infos_t_truncate(self, *args)

    def swap(self, *args):
        r"""swap(self, r)"""
        return _ida_dbg.memreg_infos_t_swap(self, *args)

    def extract(self, *args):
        r"""extract(self) -> memreg_info_t"""
        return _ida_dbg.memreg_infos_t_extract(self, *args)

    def inject(self, *args):
        r"""inject(self, s, len)"""
        return _ida_dbg.memreg_infos_t_inject(self, *args)

    def begin(self, *args):
        r"""
        begin(self) -> memreg_info_t
        begin(self) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> memreg_info_t
        end(self) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_end(self, *args)

    def insert(self, *args):
        r"""insert(self, it, x) -> memreg_info_t"""
        return _ida_dbg.memreg_infos_t_insert(self, *args)

    def erase(self, *args):
        r"""
        erase(self, it) -> memreg_info_t
        erase(self, first, last) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_erase(self, *args)

    def __len__(self, *args):
        r"""__len__(self) -> size_t"""
        return _ida_dbg.memreg_infos_t___len__(self, *args)

    def __getitem__(self, *args):
        r"""__getitem__(self, i) -> memreg_info_t"""
        return _ida_dbg.memreg_infos_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""__setitem__(self, i, v)"""
        return _ida_dbg.memreg_infos_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register memreg_infos_t in _ida_dbg:
_ida_dbg.memreg_infos_t_swigregister(memreg_infos_t)


def run_to(*args):
    r"""run_to(ea, pid=pid_t(-1), tid=0) -> bool"""
    return _ida_dbg.run_to(*args)

def request_run_to(*args):
    r"""request_run_to(ea, pid=pid_t(-1), tid=0) -> bool"""
    return _ida_dbg.request_run_to(*args)

def set_debugger_event_cond(*args):
    r"""set_debugger_event_cond(nonnul_cond)"""
    return _ida_dbg.set_debugger_event_cond(*args)

def diff_trace_file(*args):
    r"""diff_trace_file(nonnul_filename) -> bool"""
    return _ida_dbg.diff_trace_file(*args)
dbg_null = _ida_dbg.dbg_null

dbg_process_start = _ida_dbg.dbg_process_start

dbg_process_exit = _ida_dbg.dbg_process_exit

dbg_process_attach = _ida_dbg.dbg_process_attach

dbg_process_detach = _ida_dbg.dbg_process_detach

dbg_thread_start = _ida_dbg.dbg_thread_start

dbg_thread_exit = _ida_dbg.dbg_thread_exit

dbg_library_load = _ida_dbg.dbg_library_load

dbg_library_unload = _ida_dbg.dbg_library_unload

dbg_information = _ida_dbg.dbg_information

dbg_exception = _ida_dbg.dbg_exception

dbg_suspend_process = _ida_dbg.dbg_suspend_process

dbg_bpt = _ida_dbg.dbg_bpt

dbg_trace = _ida_dbg.dbg_trace

dbg_request_error = _ida_dbg.dbg_request_error

dbg_step_into = _ida_dbg.dbg_step_into

dbg_step_over = _ida_dbg.dbg_step_over

dbg_run_to = _ida_dbg.dbg_run_to

dbg_step_until_ret = _ida_dbg.dbg_step_until_ret

dbg_bpt_changed = _ida_dbg.dbg_bpt_changed

dbg_last = _ida_dbg.dbg_last

BPTEV_ADDED = _ida_dbg.BPTEV_ADDED

BPTEV_REMOVED = _ida_dbg.BPTEV_REMOVED

BPTEV_CHANGED = _ida_dbg.BPTEV_CHANGED


def run_requests(*args):
    r"""run_requests() -> bool"""
    return _ida_dbg.run_requests(*args)

def get_running_request(*args):
    r"""get_running_request() -> ui_notification_t"""
    return _ida_dbg.get_running_request(*args)

def is_request_running(*args):
    r"""is_request_running() -> bool"""
    return _ida_dbg.is_request_running(*args)

def get_running_notification(*args):
    r"""get_running_notification() -> dbg_notification_t"""
    return _ida_dbg.get_running_notification(*args)

def clear_requests_queue(*args):
    r"""clear_requests_queue()"""
    return _ida_dbg.clear_requests_queue(*args)

def get_process_state(*args):
    r"""get_process_state() -> int"""
    return _ida_dbg.get_process_state(*args)
DSTATE_SUSP = _ida_dbg.DSTATE_SUSP

DSTATE_NOTASK = _ida_dbg.DSTATE_NOTASK

DSTATE_RUN = _ida_dbg.DSTATE_RUN

DBGINV_MEMORY = _ida_dbg.DBGINV_MEMORY

DBGINV_MEMCFG = _ida_dbg.DBGINV_MEMCFG

DBGINV_REGS = _ida_dbg.DBGINV_REGS

DBGINV_ALL = _ida_dbg.DBGINV_ALL

DBGINV_REDRAW = _ida_dbg.DBGINV_REDRAW

DBGINV_NONE = _ida_dbg.DBGINV_NONE


def set_process_state(*args):
    r"""set_process_state(newstate, p_thid, dbginv) -> int"""
    return _ida_dbg.set_process_state(*args)

def invalidate_dbg_state(*args):
    r"""invalidate_dbg_state(dbginv) -> int"""
    return _ida_dbg.invalidate_dbg_state(*args)

def start_process(*args):
    r"""start_process(path=None, args=None, sdir=None) -> int"""
    return _ida_dbg.start_process(*args)

def request_start_process(*args):
    r"""request_start_process(path=None, args=None, sdir=None) -> int"""
    return _ida_dbg.request_start_process(*args)

def suspend_process(*args):
    r"""suspend_process() -> bool"""
    return _ida_dbg.suspend_process(*args)

def request_suspend_process(*args):
    r"""request_suspend_process() -> bool"""
    return _ida_dbg.request_suspend_process(*args)

def continue_process(*args):
    r"""continue_process() -> bool"""
    return _ida_dbg.continue_process(*args)

def request_continue_process(*args):
    r"""request_continue_process() -> bool"""
    return _ida_dbg.request_continue_process(*args)

def exit_process(*args):
    r"""exit_process() -> bool"""
    return _ida_dbg.exit_process(*args)

def request_exit_process(*args):
    r"""request_exit_process() -> bool"""
    return _ida_dbg.request_exit_process(*args)

def get_processes(*args):
    r"""get_processes(proclist) -> ssize_t"""
    return _ida_dbg.get_processes(*args)

def attach_process(*args):
    r"""attach_process(pid=pid_t(-1), event_id=-1) -> int"""
    return _ida_dbg.attach_process(*args)

def request_attach_process(*args):
    r"""request_attach_process(pid, event_id) -> int"""
    return _ida_dbg.request_attach_process(*args)

def detach_process(*args):
    r"""detach_process() -> bool"""
    return _ida_dbg.detach_process(*args)

def request_detach_process(*args):
    r"""request_detach_process() -> bool"""
    return _ida_dbg.request_detach_process(*args)

def is_debugger_busy(*args):
    r"""is_debugger_busy() -> bool"""
    return _ida_dbg.is_debugger_busy(*args)

def get_thread_qty(*args):
    r"""get_thread_qty() -> int"""
    return _ida_dbg.get_thread_qty(*args)

def getn_thread(*args):
    r"""getn_thread(n) -> thid_t"""
    return _ida_dbg.getn_thread(*args)

def get_current_thread(*args):
    r"""get_current_thread() -> thid_t"""
    return _ida_dbg.get_current_thread(*args)

def getn_thread_name(*args):
    r"""getn_thread_name(n) -> char const *"""
    return _ida_dbg.getn_thread_name(*args)

def select_thread(*args):
    r"""select_thread(tid) -> bool"""
    return _ida_dbg.select_thread(*args)

def request_select_thread(*args):
    r"""request_select_thread(tid) -> bool"""
    return _ida_dbg.request_select_thread(*args)

def suspend_thread(*args):
    r"""suspend_thread(tid) -> int"""
    return _ida_dbg.suspend_thread(*args)

def request_suspend_thread(*args):
    r"""request_suspend_thread(tid) -> int"""
    return _ida_dbg.request_suspend_thread(*args)

def resume_thread(*args):
    r"""resume_thread(tid) -> int"""
    return _ida_dbg.resume_thread(*args)

def request_resume_thread(*args):
    r"""request_resume_thread(tid) -> int"""
    return _ida_dbg.request_resume_thread(*args)

def get_first_module(*args):
    r"""get_first_module(modinfo) -> bool"""
    return _ida_dbg.get_first_module(*args)

def get_next_module(*args):
    r"""get_next_module(modinfo) -> bool"""
    return _ida_dbg.get_next_module(*args)

def step_into(*args):
    r"""step_into() -> bool"""
    return _ida_dbg.step_into(*args)

def request_step_into(*args):
    r"""request_step_into() -> bool"""
    return _ida_dbg.request_step_into(*args)

def step_over(*args):
    r"""step_over() -> bool"""
    return _ida_dbg.step_over(*args)

def request_step_over(*args):
    r"""request_step_over() -> bool"""
    return _ida_dbg.request_step_over(*args)

def step_until_ret(*args):
    r"""step_until_ret() -> bool"""
    return _ida_dbg.step_until_ret(*args)

def request_step_until_ret(*args):
    r"""request_step_until_ret() -> bool"""
    return _ida_dbg.request_step_until_ret(*args)

def set_resume_mode(*args):
    r"""set_resume_mode(tid, mode) -> bool"""
    return _ida_dbg.set_resume_mode(*args)

def request_set_resume_mode(*args):
    r"""request_set_resume_mode(tid, mode) -> bool"""
    return _ida_dbg.request_set_resume_mode(*args)

def get_dbg_reg_info(*args):
    r"""get_dbg_reg_info(regname, ri) -> bool"""
    return _ida_dbg.get_dbg_reg_info(*args)

def get_reg_val(*args):
    r"""
    get_reg_val(regname, regval) -> bool
    get_reg_val(regname, ival) -> bool
    """
    return _ida_dbg.get_reg_val(*args)

def get_sp_val(*args):
    r"""get_sp_val() -> bool"""
    return _ida_dbg.get_sp_val(*args)

def get_ip_val(*args):
    r"""get_ip_val() -> bool"""
    return _ida_dbg.get_ip_val(*args)

def request_set_reg_val(*args):
    r"""request_set_reg_val(regname, regval) -> bool"""
    return _ida_dbg.request_set_reg_val(*args)

def is_reg_integer(*args):
    r"""is_reg_integer(regname) -> bool"""
    return _ida_dbg.is_reg_integer(*args)

def is_reg_float(*args):
    r"""is_reg_float(regname) -> bool"""
    return _ida_dbg.is_reg_float(*args)

def is_reg_custom(*args):
    r"""is_reg_custom(regname) -> bool"""
    return _ida_dbg.is_reg_custom(*args)

def set_bptloc_string(*args):
    r"""set_bptloc_string(s) -> int"""
    return _ida_dbg.set_bptloc_string(*args)

def get_bptloc_string(*args):
    r"""get_bptloc_string(i) -> char const *"""
    return _ida_dbg.get_bptloc_string(*args)
BPLT_ABS = _ida_dbg.BPLT_ABS

BPLT_REL = _ida_dbg.BPLT_REL

BPLT_SYM = _ida_dbg.BPLT_SYM

BPLT_SRC = _ida_dbg.BPLT_SRC

class bpt_location_t(object):
    r"""Proxy of C++ bpt_location_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info = property(_ida_dbg.bpt_location_t_info_get, _ida_dbg.bpt_location_t_info_set, doc=r"""info""")
    index = property(_ida_dbg.bpt_location_t_index_get, _ida_dbg.bpt_location_t_index_set, doc=r"""index""")
    loctype = property(_ida_dbg.bpt_location_t_loctype_get, _ida_dbg.bpt_location_t_loctype_set, doc=r"""loctype""")

    def type(self, *args):
        r"""type(self) -> bpt_loctype_t"""
        return _ida_dbg.bpt_location_t_type(self, *args)

    def is_empty_path(self, *args):
        r"""is_empty_path(self) -> bool"""
        return _ida_dbg.bpt_location_t_is_empty_path(self, *args)

    def path(self, *args):
        r"""path(self) -> char const *"""
        return _ida_dbg.bpt_location_t_path(self, *args)

    def symbol(self, *args):
        r"""symbol(self) -> char const *"""
        return _ida_dbg.bpt_location_t_symbol(self, *args)

    def lineno(self, *args):
        r"""lineno(self) -> int"""
        return _ida_dbg.bpt_location_t_lineno(self, *args)

    def offset(self, *args):
        r"""offset(self) -> uval_t"""
        return _ida_dbg.bpt_location_t_offset(self, *args)

    def ea(self, *args):
        r"""ea(self) -> ea_t"""
        return _ida_dbg.bpt_location_t_ea(self, *args)

    def __init__(self, *args):
        r"""__init__(self) -> bpt_location_t"""
        _ida_dbg.bpt_location_t_swiginit(self, _ida_dbg.new_bpt_location_t(*args))

    def set_abs_bpt(self, *args):
        r"""set_abs_bpt(self, a)"""
        return _ida_dbg.bpt_location_t_set_abs_bpt(self, *args)

    def set_src_bpt(self, *args):
        r"""set_src_bpt(self, fn, _lineno)"""
        return _ida_dbg.bpt_location_t_set_src_bpt(self, *args)

    def set_sym_bpt(self, *args):
        r"""set_sym_bpt(self, _symbol, _offset=0)"""
        return _ida_dbg.bpt_location_t_set_sym_bpt(self, *args)

    def set_rel_bpt(self, *args):
        r"""set_rel_bpt(self, mod, _offset)"""
        return _ida_dbg.bpt_location_t_set_rel_bpt(self, *args)

    def compare(self, *args):
        r"""compare(self, r) -> int"""
        return _ida_dbg.bpt_location_t_compare(self, *args)

    def __eq__(self, *args):
        r"""__eq__(self, r) -> bool"""
        return _ida_dbg.bpt_location_t___eq__(self, *args)

    def __ne__(self, *args):
        r"""__ne__(self, r) -> bool"""
        return _ida_dbg.bpt_location_t___ne__(self, *args)

    def __lt__(self, *args):
        r"""__lt__(self, r) -> bool"""
        return _ida_dbg.bpt_location_t___lt__(self, *args)

    def __gt__(self, *args):
        r"""__gt__(self, r) -> bool"""
        return _ida_dbg.bpt_location_t___gt__(self, *args)

    def __le__(self, *args):
        r"""__le__(self, r) -> bool"""
        return _ida_dbg.bpt_location_t___le__(self, *args)

    def __ge__(self, *args):
        r"""__ge__(self, r) -> bool"""
        return _ida_dbg.bpt_location_t___ge__(self, *args)
    __swig_destroy__ = _ida_dbg.delete_bpt_location_t

# Register bpt_location_t in _ida_dbg:
_ida_dbg.bpt_location_t_swigregister(bpt_location_t)

class bpt_t(object):
    r"""Proxy of C++ bpt_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cb = property(_ida_dbg.bpt_t_cb_get, _ida_dbg.bpt_t_cb_set, doc=r"""cb""")
    loc = property(_ida_dbg.bpt_t_loc_get, _ida_dbg.bpt_t_loc_set, doc=r"""loc""")
    pid = property(_ida_dbg.bpt_t_pid_get, _ida_dbg.bpt_t_pid_set, doc=r"""pid""")
    tid = property(_ida_dbg.bpt_t_tid_get, _ida_dbg.bpt_t_tid_set, doc=r"""tid""")
    ea = property(_ida_dbg.bpt_t_ea_get, _ida_dbg.bpt_t_ea_set, doc=r"""ea""")
    type = property(_ida_dbg.bpt_t_type_get, _ida_dbg.bpt_t_type_set, doc=r"""type""")
    pass_count = property(_ida_dbg.bpt_t_pass_count_get, _ida_dbg.bpt_t_pass_count_set, doc=r"""pass_count""")
    flags = property(_ida_dbg.bpt_t_flags_get, _ida_dbg.bpt_t_flags_set, doc=r"""flags""")
    props = property(_ida_dbg.bpt_t_props_get, _ida_dbg.bpt_t_props_set, doc=r"""props""")
    size = property(_ida_dbg.bpt_t_size_get, _ida_dbg.bpt_t_size_set, doc=r"""size""")
    cndidx = property(_ida_dbg.bpt_t_cndidx_get, _ida_dbg.bpt_t_cndidx_set, doc=r"""cndidx""")

    def __init__(self, *args):
        r"""__init__(self) -> bpt_t"""
        _ida_dbg.bpt_t_swiginit(self, _ida_dbg.new_bpt_t(*args))

    def is_hwbpt(self, *args):
        r"""is_hwbpt(self) -> bool"""
        return _ida_dbg.bpt_t_is_hwbpt(self, *args)

    def enabled(self, *args):
        r"""enabled(self) -> bool"""
        return _ida_dbg.bpt_t_enabled(self, *args)

    def is_low_level(self, *args):
        r"""is_low_level(self) -> bool"""
        return _ida_dbg.bpt_t_is_low_level(self, *args)

    def badbpt(self, *args):
        r"""badbpt(self) -> bool"""
        return _ida_dbg.bpt_t_badbpt(self, *args)

    def listbpt(self, *args):
        r"""listbpt(self) -> bool"""
        return _ida_dbg.bpt_t_listbpt(self, *args)

    def is_compiled(self, *args):
        r"""is_compiled(self) -> bool"""
        return _ida_dbg.bpt_t_is_compiled(self, *args)

    def is_active(self, *args):
        r"""is_active(self) -> bool"""
        return _ida_dbg.bpt_t_is_active(self, *args)

    def is_partially_active(self, *args):
        r"""is_partially_active(self) -> bool"""
        return _ida_dbg.bpt_t_is_partially_active(self, *args)

    def is_inactive(self, *args):
        r"""is_inactive(self) -> bool"""
        return _ida_dbg.bpt_t_is_inactive(self, *args)

    def is_page_bpt(self, *args):
        r"""is_page_bpt(self) -> bool"""
        return _ida_dbg.bpt_t_is_page_bpt(self, *args)

    def get_size(self, *args):
        r"""get_size(self) -> int"""
        return _ida_dbg.bpt_t_get_size(self, *args)

    def set_abs_bpt(self, *args):
        r"""set_abs_bpt(self, a)"""
        return _ida_dbg.bpt_t_set_abs_bpt(self, *args)

    def set_src_bpt(self, *args):
        r"""set_src_bpt(self, fn, lineno)"""
        return _ida_dbg.bpt_t_set_src_bpt(self, *args)

    def set_sym_bpt(self, *args):
        r"""set_sym_bpt(self, sym, o)"""
        return _ida_dbg.bpt_t_set_sym_bpt(self, *args)

    def set_rel_bpt(self, *args):
        r"""set_rel_bpt(self, mod, o)"""
        return _ida_dbg.bpt_t_set_rel_bpt(self, *args)

    def is_absbpt(self, *args):
        r"""is_absbpt(self) -> bool"""
        return _ida_dbg.bpt_t_is_absbpt(self, *args)

    def is_relbpt(self, *args):
        r"""is_relbpt(self) -> bool"""
        return _ida_dbg.bpt_t_is_relbpt(self, *args)

    def is_symbpt(self, *args):
        r"""is_symbpt(self) -> bool"""
        return _ida_dbg.bpt_t_is_symbpt(self, *args)

    def is_srcbpt(self, *args):
        r"""is_srcbpt(self) -> bool"""
        return _ida_dbg.bpt_t_is_srcbpt(self, *args)

    def is_tracemodebpt(self, *args):
        r"""is_tracemodebpt(self) -> bool"""
        return _ida_dbg.bpt_t_is_tracemodebpt(self, *args)

    def is_traceonbpt(self, *args):
        r"""is_traceonbpt(self) -> bool"""
        return _ida_dbg.bpt_t_is_traceonbpt(self, *args)

    def is_traceoffbpt(self, *args):
        r"""is_traceoffbpt(self) -> bool"""
        return _ida_dbg.bpt_t_is_traceoffbpt(self, *args)

    def set_trace_action(self, *args):
        r"""set_trace_action(self, enable, trace_types) -> bool"""
        return _ida_dbg.bpt_t_set_trace_action(self, *args)

    def get_cnd_elang_idx(self, *args):
        r"""get_cnd_elang_idx(self) -> size_t"""
        return _ida_dbg.bpt_t_get_cnd_elang_idx(self, *args)
    condition = property(_ida_dbg.bpt_t_condition_get, _ida_dbg.bpt_t_condition_set, doc=r"""condition""")
    elang = property(_ida_dbg.bpt_t_elang_get, _ida_dbg.bpt_t_elang_set, doc=r"""elang""")
    __swig_destroy__ = _ida_dbg.delete_bpt_t

# Register bpt_t in _ida_dbg:
_ida_dbg.bpt_t_swigregister(bpt_t)
BPT_BRK = _ida_dbg.BPT_BRK

BPT_TRACE = _ida_dbg.BPT_TRACE

BPT_UPDMEM = _ida_dbg.BPT_UPDMEM

BPT_ENABLED = _ida_dbg.BPT_ENABLED

BPT_LOWCND = _ida_dbg.BPT_LOWCND

BPT_TRACEON = _ida_dbg.BPT_TRACEON

BPT_TRACE_INSN = _ida_dbg.BPT_TRACE_INSN

BPT_TRACE_FUNC = _ida_dbg.BPT_TRACE_FUNC

BPT_TRACE_BBLK = _ida_dbg.BPT_TRACE_BBLK

BPT_TRACE_TYPES = _ida_dbg.BPT_TRACE_TYPES

BPT_ELANG_MASK = _ida_dbg.BPT_ELANG_MASK

BPT_ELANG_SHIFT = _ida_dbg.BPT_ELANG_SHIFT

BKPT_BADBPT = _ida_dbg.BKPT_BADBPT

BKPT_LISTBPT = _ida_dbg.BKPT_LISTBPT

BKPT_TRACE = _ida_dbg.BKPT_TRACE

BKPT_ACTIVE = _ida_dbg.BKPT_ACTIVE

BKPT_PARTIAL = _ida_dbg.BKPT_PARTIAL

BKPT_CNDREADY = _ida_dbg.BKPT_CNDREADY

BKPT_FAKEPEND = _ida_dbg.BKPT_FAKEPEND

BKPT_PAGE = _ida_dbg.BKPT_PAGE


MOVBPT_OK = _ida_dbg.MOVBPT_OK

MOVBPT_NOT_FOUND = _ida_dbg.MOVBPT_NOT_FOUND

MOVBPT_DEST_BUSY = _ida_dbg.MOVBPT_DEST_BUSY

MOVBPT_BAD_TYPE = _ida_dbg.MOVBPT_BAD_TYPE


def get_bpt_qty(*args):
    r"""get_bpt_qty() -> int"""
    return _ida_dbg.get_bpt_qty(*args)

def getn_bpt(*args):
    r"""getn_bpt(n, bpt) -> bool"""
    return _ida_dbg.getn_bpt(*args)

def get_bpt(*args):
    r"""get_bpt(ea, bpt) -> bool"""
    return _ida_dbg.get_bpt(*args)

def exist_bpt(*args):
    r"""exist_bpt(ea) -> bool"""
    return _ida_dbg.exist_bpt(*args)

def add_bpt(*args):
    r"""
    add_bpt(ea, size=0, type=BPT_DEFAULT) -> bool
    add_bpt(bpt) -> bool
    """
    return _ida_dbg.add_bpt(*args)

def request_add_bpt(*args):
    r"""
    request_add_bpt(ea, size=0, type=BPT_DEFAULT) -> bool
    request_add_bpt(bpt) -> bool
    """
    return _ida_dbg.request_add_bpt(*args)

def del_bpt(*args):
    r"""
    del_bpt(ea) -> bool
    del_bpt(bptloc) -> bool
    """
    return _ida_dbg.del_bpt(*args)

def request_del_bpt(*args):
    r"""
    request_del_bpt(ea) -> bool
    request_del_bpt(bptloc) -> bool
    """
    return _ida_dbg.request_del_bpt(*args)

def update_bpt(*args):
    r"""update_bpt(bpt) -> bool"""
    return _ida_dbg.update_bpt(*args)

def find_bpt(*args):
    r"""find_bpt(bptloc, bpt) -> bool"""
    return _ida_dbg.find_bpt(*args)

def enable_bpt(*args):
    r"""
    enable_bpt(ea, enable=True) -> bool
    enable_bpt(bptloc, enable=True) -> bool
    """
    return _ida_dbg.enable_bpt(*args)

def disable_bpt(*args):
    r"""
    disable_bpt(ea) -> bool
    disable_bpt(bptloc) -> bool
    """
    return _ida_dbg.disable_bpt(*args)

def request_enable_bpt(*args):
    r"""
    request_enable_bpt(ea, enable=True) -> bool
    request_enable_bpt(bptloc, enable=True) -> bool
    """
    return _ida_dbg.request_enable_bpt(*args)

def request_disable_bpt(*args):
    r"""
    request_disable_bpt(ea) -> bool
    request_disable_bpt(bptloc) -> bool
    """
    return _ida_dbg.request_disable_bpt(*args)

def check_bpt(*args):
    r"""check_bpt(ea) -> int"""
    return _ida_dbg.check_bpt(*args)
BPTCK_NONE = _ida_dbg.BPTCK_NONE

BPTCK_NO = _ida_dbg.BPTCK_NO

BPTCK_YES = _ida_dbg.BPTCK_YES

BPTCK_ACT = _ida_dbg.BPTCK_ACT


def set_trace_size(*args):
    r"""set_trace_size(size) -> bool"""
    return _ida_dbg.set_trace_size(*args)

def clear_trace(*args):
    r"""clear_trace()"""
    return _ida_dbg.clear_trace(*args)

def request_clear_trace(*args):
    r"""request_clear_trace()"""
    return _ida_dbg.request_clear_trace(*args)

def is_step_trace_enabled(*args):
    r"""is_step_trace_enabled() -> bool"""
    return _ida_dbg.is_step_trace_enabled(*args)

def enable_step_trace(*args):
    r"""enable_step_trace(enable=True) -> bool"""
    return _ida_dbg.enable_step_trace(*args)

def disable_step_trace(*args):
    r"""disable_step_trace() -> bool"""
    return _ida_dbg.disable_step_trace(*args)

def request_enable_step_trace(*args):
    r"""request_enable_step_trace(enable=True) -> bool"""
    return _ida_dbg.request_enable_step_trace(*args)

def request_disable_step_trace(*args):
    r"""request_disable_step_trace() -> bool"""
    return _ida_dbg.request_disable_step_trace(*args)
ST_OVER_DEBUG_SEG = _ida_dbg.ST_OVER_DEBUG_SEG

ST_OVER_LIB_FUNC = _ida_dbg.ST_OVER_LIB_FUNC

ST_ALREADY_LOGGED = _ida_dbg.ST_ALREADY_LOGGED

ST_SKIP_LOOPS = _ida_dbg.ST_SKIP_LOOPS

ST_DIFFERENTIAL = _ida_dbg.ST_DIFFERENTIAL

ST_OPTIONS_MASK = _ida_dbg.ST_OPTIONS_MASK

ST_OPTIONS_DEFAULT = _ida_dbg.ST_OPTIONS_DEFAULT

FT_LOG_RET = _ida_dbg.FT_LOG_RET

BT_LOG_INSTS = _ida_dbg.BT_LOG_INSTS

IT_LOG_SAME_IP = _ida_dbg.IT_LOG_SAME_IP


def get_step_trace_options(*args):
    r"""get_step_trace_options() -> int"""
    return _ida_dbg.get_step_trace_options(*args)

def set_step_trace_options(*args):
    r"""set_step_trace_options(options)"""
    return _ida_dbg.set_step_trace_options(*args)

def request_set_step_trace_options(*args):
    r"""request_set_step_trace_options(options)"""
    return _ida_dbg.request_set_step_trace_options(*args)

def is_insn_trace_enabled(*args):
    r"""is_insn_trace_enabled() -> bool"""
    return _ida_dbg.is_insn_trace_enabled(*args)

def enable_insn_trace(*args):
    r"""enable_insn_trace(enable=True) -> bool"""
    return _ida_dbg.enable_insn_trace(*args)

def disable_insn_trace(*args):
    r"""disable_insn_trace() -> bool"""
    return _ida_dbg.disable_insn_trace(*args)

def request_enable_insn_trace(*args):
    r"""request_enable_insn_trace(enable=True) -> bool"""
    return _ida_dbg.request_enable_insn_trace(*args)

def request_disable_insn_trace(*args):
    r"""request_disable_insn_trace() -> bool"""
    return _ida_dbg.request_disable_insn_trace(*args)

def get_insn_trace_options(*args):
    r"""get_insn_trace_options() -> int"""
    return _ida_dbg.get_insn_trace_options(*args)

def set_insn_trace_options(*args):
    r"""set_insn_trace_options(options)"""
    return _ida_dbg.set_insn_trace_options(*args)

def request_set_insn_trace_options(*args):
    r"""request_set_insn_trace_options(options)"""
    return _ida_dbg.request_set_insn_trace_options(*args)

def is_func_trace_enabled(*args):
    r"""is_func_trace_enabled() -> bool"""
    return _ida_dbg.is_func_trace_enabled(*args)

def enable_func_trace(*args):
    r"""enable_func_trace(enable=True) -> bool"""
    return _ida_dbg.enable_func_trace(*args)

def disable_func_trace(*args):
    r"""disable_func_trace() -> bool"""
    return _ida_dbg.disable_func_trace(*args)

def request_enable_func_trace(*args):
    r"""request_enable_func_trace(enable=True) -> bool"""
    return _ida_dbg.request_enable_func_trace(*args)

def request_disable_func_trace(*args):
    r"""request_disable_func_trace() -> bool"""
    return _ida_dbg.request_disable_func_trace(*args)

def get_func_trace_options(*args):
    r"""get_func_trace_options() -> int"""
    return _ida_dbg.get_func_trace_options(*args)

def set_func_trace_options(*args):
    r"""set_func_trace_options(options)"""
    return _ida_dbg.set_func_trace_options(*args)

def request_set_func_trace_options(*args):
    r"""request_set_func_trace_options(options)"""
    return _ida_dbg.request_set_func_trace_options(*args)

def enable_bblk_trace(*args):
    r"""enable_bblk_trace(enable=True) -> bool"""
    return _ida_dbg.enable_bblk_trace(*args)

def disable_bblk_trace(*args):
    r"""disable_bblk_trace() -> bool"""
    return _ida_dbg.disable_bblk_trace(*args)

def request_enable_bblk_trace(*args):
    r"""request_enable_bblk_trace(enable=True) -> bool"""
    return _ida_dbg.request_enable_bblk_trace(*args)

def request_disable_bblk_trace(*args):
    r"""request_disable_bblk_trace() -> bool"""
    return _ida_dbg.request_disable_bblk_trace(*args)

def is_bblk_trace_enabled(*args):
    r"""is_bblk_trace_enabled() -> bool"""
    return _ida_dbg.is_bblk_trace_enabled(*args)

def get_bblk_trace_options(*args):
    r"""get_bblk_trace_options() -> int"""
    return _ida_dbg.get_bblk_trace_options(*args)

def set_bblk_trace_options(*args):
    r"""set_bblk_trace_options(options)"""
    return _ida_dbg.set_bblk_trace_options(*args)

def request_set_bblk_trace_options(*args):
    r"""request_set_bblk_trace_options(options)"""
    return _ida_dbg.request_set_bblk_trace_options(*args)
tev_none = _ida_dbg.tev_none

tev_insn = _ida_dbg.tev_insn

tev_call = _ida_dbg.tev_call

tev_ret = _ida_dbg.tev_ret

tev_bpt = _ida_dbg.tev_bpt

tev_mem = _ida_dbg.tev_mem

tev_event = _ida_dbg.tev_event

tev_max = _ida_dbg.tev_max

class tev_info_t(object):
    r"""Proxy of C++ tev_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_ida_dbg.tev_info_t_type_get, _ida_dbg.tev_info_t_type_set, doc=r"""type""")
    tid = property(_ida_dbg.tev_info_t_tid_get, _ida_dbg.tev_info_t_tid_set, doc=r"""tid""")
    ea = property(_ida_dbg.tev_info_t_ea_get, _ida_dbg.tev_info_t_ea_set, doc=r"""ea""")

    def __init__(self, *args):
        r"""__init__(self) -> tev_info_t"""
        _ida_dbg.tev_info_t_swiginit(self, _ida_dbg.new_tev_info_t(*args))
    __swig_destroy__ = _ida_dbg.delete_tev_info_t

# Register tev_info_t in _ida_dbg:
_ida_dbg.tev_info_t_swigregister(tev_info_t)

class memreg_info_t(object):
    r"""Proxy of C++ memreg_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea = property(_ida_dbg.memreg_info_t_ea_get, _ida_dbg.memreg_info_t_ea_set, doc=r"""ea""")

    def get_bytes(self, *args):
        r"""get_bytes(self) -> PyObject *"""
        return _ida_dbg.memreg_info_t_get_bytes(self, *args)

    bytes = property(get_bytes)


    def __init__(self, *args):
        r"""__init__(self) -> memreg_info_t"""
        _ida_dbg.memreg_info_t_swiginit(self, _ida_dbg.new_memreg_info_t(*args))
    __swig_destroy__ = _ida_dbg.delete_memreg_info_t

# Register memreg_info_t in _ida_dbg:
_ida_dbg.memreg_info_t_swigregister(memreg_info_t)


def get_tev_qty(*args):
    r"""get_tev_qty() -> int"""
    return _ida_dbg.get_tev_qty(*args)

def get_tev_info(*args):
    r"""get_tev_info(n, tev_info) -> bool"""
    return _ida_dbg.get_tev_info(*args)

def get_insn_tev_reg_val(*args):
    r"""get_insn_tev_reg_val(n, regname, regval) -> bool"""
    return _ida_dbg.get_insn_tev_reg_val(*args)

def get_insn_tev_reg_mem(*args):
    r"""get_insn_tev_reg_mem(n, memmap) -> bool"""
    return _ida_dbg.get_insn_tev_reg_mem(*args)

def get_insn_tev_reg_result(*args):
    r"""get_insn_tev_reg_result(n, regname, regval) -> bool"""
    return _ida_dbg.get_insn_tev_reg_result(*args)

def get_call_tev_callee(*args):
    r"""get_call_tev_callee(n) -> ea_t"""
    return _ida_dbg.get_call_tev_callee(*args)

def get_ret_tev_return(*args):
    r"""get_ret_tev_return(n) -> ea_t"""
    return _ida_dbg.get_ret_tev_return(*args)

def get_bpt_tev_ea(*args):
    r"""get_bpt_tev_ea(n) -> ea_t"""
    return _ida_dbg.get_bpt_tev_ea(*args)

def get_tev_memory_info(*args):
    r"""get_tev_memory_info(n, mi) -> bool"""
    return _ida_dbg.get_tev_memory_info(*args)

def get_tev_event(*args):
    r"""get_tev_event(n, d) -> bool"""
    return _ida_dbg.get_tev_event(*args)

def get_trace_base_address(*args):
    r"""get_trace_base_address() -> ea_t"""
    return _ida_dbg.get_trace_base_address(*args)

def set_trace_base_address(*args):
    r"""set_trace_base_address(ea)"""
    return _ida_dbg.set_trace_base_address(*args)

def dbg_add_thread(*args):
    r"""dbg_add_thread(tid)"""
    return _ida_dbg.dbg_add_thread(*args)

def dbg_del_thread(*args):
    r"""dbg_del_thread(tid)"""
    return _ida_dbg.dbg_del_thread(*args)

def dbg_add_tev(*args):
    r"""dbg_add_tev(type, tid, address)"""
    return _ida_dbg.dbg_add_tev(*args)
class tev_reg_value_t(object):
    r"""Proxy of C++ tev_reg_value_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_ida_dbg.tev_reg_value_t_value_get, _ida_dbg.tev_reg_value_t_value_set, doc=r"""value""")
    reg_idx = property(_ida_dbg.tev_reg_value_t_reg_idx_get, _ida_dbg.tev_reg_value_t_reg_idx_set, doc=r"""reg_idx""")

    def __init__(self, *args):
        r"""__init__(self, _reg_idx=-1, _value=uint64(-1)) -> tev_reg_value_t"""
        _ida_dbg.tev_reg_value_t_swiginit(self, _ida_dbg.new_tev_reg_value_t(*args))
    __swig_destroy__ = _ida_dbg.delete_tev_reg_value_t

# Register tev_reg_value_t in _ida_dbg:
_ida_dbg.tev_reg_value_t_swigregister(tev_reg_value_t)

class tev_info_reg_t(object):
    r"""Proxy of C++ tev_info_reg_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info = property(_ida_dbg.tev_info_reg_t_info_get, _ida_dbg.tev_info_reg_t_info_set, doc=r"""info""")
    registers = property(_ida_dbg.tev_info_reg_t_registers_get, _ida_dbg.tev_info_reg_t_registers_set, doc=r"""registers""")

    def __init__(self, *args):
        r"""__init__(self) -> tev_info_reg_t"""
        _ida_dbg.tev_info_reg_t_swiginit(self, _ida_dbg.new_tev_info_reg_t(*args))
    __swig_destroy__ = _ida_dbg.delete_tev_info_reg_t

# Register tev_info_reg_t in _ida_dbg:
_ida_dbg.tev_info_reg_t_swigregister(tev_info_reg_t)

SAVE_ALL_VALUES = _ida_dbg.SAVE_ALL_VALUES

SAVE_DIFF = _ida_dbg.SAVE_DIFF

SAVE_NONE = _ida_dbg.SAVE_NONE


def dbg_add_many_tevs(*args):
    r"""dbg_add_many_tevs(new_tevs) -> bool"""
    return _ida_dbg.dbg_add_many_tevs(*args)

def dbg_add_insn_tev(*args):
    r"""dbg_add_insn_tev(tid, ea, save=SAVE_DIFF) -> bool"""
    return _ida_dbg.dbg_add_insn_tev(*args)

def dbg_add_bpt_tev(*args):
    r"""dbg_add_bpt_tev(tid, ea, bp) -> bool"""
    return _ida_dbg.dbg_add_bpt_tev(*args)

def dbg_add_call_tev(*args):
    r"""dbg_add_call_tev(tid, caller, callee)"""
    return _ida_dbg.dbg_add_call_tev(*args)

def dbg_add_ret_tev(*args):
    r"""dbg_add_ret_tev(tid, ret_insn, return_to)"""
    return _ida_dbg.dbg_add_ret_tev(*args)

def dbg_add_debug_event(*args):
    r"""dbg_add_debug_event(event)"""
    return _ida_dbg.dbg_add_debug_event(*args)

def load_trace_file(*args):
    r"""load_trace_file(filename) -> bool"""
    return _ida_dbg.load_trace_file(*args)

def save_trace_file(*args):
    r"""save_trace_file(filename, description) -> bool"""
    return _ida_dbg.save_trace_file(*args)

def is_valid_trace_file(*args):
    r"""is_valid_trace_file(filename) -> bool"""
    return _ida_dbg.is_valid_trace_file(*args)

def set_trace_file_desc(*args):
    r"""set_trace_file_desc(filename, description) -> bool"""
    return _ida_dbg.set_trace_file_desc(*args)

def get_trace_file_desc(*args):
    r"""get_trace_file_desc(filename) -> bool"""
    return _ida_dbg.get_trace_file_desc(*args)

def choose_trace_file(*args):
    r"""choose_trace_file() -> bool"""
    return _ida_dbg.choose_trace_file(*args)

def graph_trace(*args):
    r"""graph_trace() -> bool"""
    return _ida_dbg.graph_trace(*args)

def set_highlight_trace_options(*args):
    r"""set_highlight_trace_options(hilight, color, diff)"""
    return _ida_dbg.set_highlight_trace_options(*args)

def set_trace_platform(*args):
    r"""set_trace_platform(platform)"""
    return _ida_dbg.set_trace_platform(*args)

def get_trace_platform(*args):
    r"""get_trace_platform() -> char const *"""
    return _ida_dbg.get_trace_platform(*args)
DEC_NOTASK = _ida_dbg.DEC_NOTASK

DEC_ERROR = _ida_dbg.DEC_ERROR

DEC_TIMEOUT = _ida_dbg.DEC_TIMEOUT

WFNE_ANY = _ida_dbg.WFNE_ANY

WFNE_SUSP = _ida_dbg.WFNE_SUSP

WFNE_SILENT = _ida_dbg.WFNE_SILENT

WFNE_CONT = _ida_dbg.WFNE_CONT

WFNE_NOWAIT = _ida_dbg.WFNE_NOWAIT

WFNE_USEC = _ida_dbg.WFNE_USEC

DOPT_SEGM_MSGS = _ida_dbg.DOPT_SEGM_MSGS

DOPT_START_BPT = _ida_dbg.DOPT_START_BPT

DOPT_THREAD_MSGS = _ida_dbg.DOPT_THREAD_MSGS

DOPT_THREAD_BPT = _ida_dbg.DOPT_THREAD_BPT

DOPT_BPT_MSGS = _ida_dbg.DOPT_BPT_MSGS

DOPT_LIB_MSGS = _ida_dbg.DOPT_LIB_MSGS

DOPT_LIB_BPT = _ida_dbg.DOPT_LIB_BPT

DOPT_INFO_MSGS = _ida_dbg.DOPT_INFO_MSGS

DOPT_INFO_BPT = _ida_dbg.DOPT_INFO_BPT

DOPT_REAL_MEMORY = _ida_dbg.DOPT_REAL_MEMORY

DOPT_REDO_STACK = _ida_dbg.DOPT_REDO_STACK

DOPT_ENTRY_BPT = _ida_dbg.DOPT_ENTRY_BPT

DOPT_EXCDLG = _ida_dbg.DOPT_EXCDLG

EXCDLG_NEVER = _ida_dbg.EXCDLG_NEVER

EXCDLG_UNKNOWN = _ida_dbg.EXCDLG_UNKNOWN

EXCDLG_ALWAYS = _ida_dbg.EXCDLG_ALWAYS

DOPT_LOAD_DINFO = _ida_dbg.DOPT_LOAD_DINFO

DOPT_END_BPT = _ida_dbg.DOPT_END_BPT

DOPT_TEMP_HWBPT = _ida_dbg.DOPT_TEMP_HWBPT


def wait_for_next_event(*args):
    r"""wait_for_next_event(wfne, timeout) -> dbg_event_code_t"""
    return _ida_dbg.wait_for_next_event(*args)

def get_debug_event(*args):
    r"""get_debug_event() -> debug_event_t"""
    return _ida_dbg.get_debug_event(*args)

def set_debugger_options(*args):
    r"""set_debugger_options(options) -> uint"""
    return _ida_dbg.set_debugger_options(*args)

def set_remote_debugger(*args):
    r"""set_remote_debugger(host, _pass, port=-1)"""
    return _ida_dbg.set_remote_debugger(*args)

def get_process_options(*args):
    r"""get_process_options(path, args, sdir, host, _pass, port)"""
    return _ida_dbg.get_process_options(*args)

def set_process_options(*args):
    r"""set_process_options(path, args, sdir, host, _pass, port)"""
    return _ida_dbg.set_process_options(*args)

def retrieve_exceptions(*args):
    r"""retrieve_exceptions() -> excvec_t"""
    return _ida_dbg.retrieve_exceptions(*args)

def store_exceptions(*args):
    r"""store_exceptions() -> bool"""
    return _ida_dbg.store_exceptions(*args)

def define_exception(*args):
    r"""define_exception(code, name, desc, flags) -> char const *"""
    return _ida_dbg.define_exception(*args)
class eval_ctx_t(object):
    r"""Proxy of C++ eval_ctx_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(self, _ea) -> eval_ctx_t"""
        _ida_dbg.eval_ctx_t_swiginit(self, _ida_dbg.new_eval_ctx_t(*args))
    ea = property(_ida_dbg.eval_ctx_t_ea_get, _ida_dbg.eval_ctx_t_ea_set, doc=r"""ea""")
    __swig_destroy__ = _ida_dbg.delete_eval_ctx_t

# Register eval_ctx_t in _ida_dbg:
_ida_dbg.eval_ctx_t_swigregister(eval_ctx_t)

SRCIT_NONE = _ida_dbg.SRCIT_NONE

SRCIT_MODULE = _ida_dbg.SRCIT_MODULE

SRCIT_FUNC = _ida_dbg.SRCIT_FUNC

SRCIT_STMT = _ida_dbg.SRCIT_STMT

SRCIT_EXPR = _ida_dbg.SRCIT_EXPR

SRCIT_STTVAR = _ida_dbg.SRCIT_STTVAR

SRCIT_LOCVAR = _ida_dbg.SRCIT_LOCVAR

SRCDBG_PROV_VERSION = _ida_dbg.SRCDBG_PROV_VERSION


def create_source_viewer(*args):
    r"""create_source_viewer(out_ccv, parent, custview, sf, lines, lnnum, colnum, flags) -> source_view_t *"""
    return _ida_dbg.create_source_viewer(*args)

def get_dbg_byte(*args):
    r"""get_dbg_byte(x, ea) -> bool"""
    return _ida_dbg.get_dbg_byte(*args)

def put_dbg_byte(*args):
    r"""put_dbg_byte(ea, x) -> bool"""
    return _ida_dbg.put_dbg_byte(*args)

def invalidate_dbgmem_config(*args):
    r"""invalidate_dbgmem_config()"""
    return _ida_dbg.invalidate_dbgmem_config(*args)

def invalidate_dbgmem_contents(*args):
    r"""invalidate_dbgmem_contents(ea, size)"""
    return _ida_dbg.invalidate_dbgmem_contents(*args)

def is_debugger_on(*args):
    r"""is_debugger_on() -> bool"""
    return _ida_dbg.is_debugger_on(*args)

def is_debugger_memory(*args):
    r"""is_debugger_memory(ea) -> bool"""
    return _ida_dbg.is_debugger_memory(*args)

def get_tev_ea(*args):
    r"""get_tev_ea(n) -> ea_t"""
    return _ida_dbg.get_tev_ea(*args)

def get_tev_type(*args):
    r"""get_tev_type(n) -> int"""
    return _ida_dbg.get_tev_type(*args)

def get_tev_tid(*args):
    r"""get_tev_tid(n) -> int"""
    return _ida_dbg.get_tev_tid(*args)

def get_module_info(*args):
    r"""get_module_info(ea, modinfo) -> bool"""
    return _ida_dbg.get_module_info(*args)

def bring_debugger_to_front(*args):
    r"""bring_debugger_to_front()"""
    return _ida_dbg.bring_debugger_to_front(*args)

def collect_stack_trace(*args):
    r"""collect_stack_trace(tid, trace) -> bool"""
    return _ida_dbg.collect_stack_trace(*args)

def get_debugger_event_cond(*args):
    r"""get_debugger_event_cond() -> char const *"""
    return _ida_dbg.get_debugger_event_cond(*args)

def load_debugger(*args):
    r"""load_debugger(dbgname, use_remote) -> bool"""
    return _ida_dbg.load_debugger(*args)

def set_manual_regions(*args):
    r"""set_manual_regions(ranges)"""
    return _ida_dbg.set_manual_regions(*args)

def edit_manual_regions(*args):
    r"""edit_manual_regions()"""
    return _ida_dbg.edit_manual_regions(*args)

def enable_manual_regions(*args):
    r"""enable_manual_regions(enable)"""
    return _ida_dbg.enable_manual_regions(*args)

def hide_all_bpts(*args):
    r"""hide_all_bpts() -> int"""
    return _ida_dbg.hide_all_bpts(*args)

def handle_debug_event(*args):
    r"""handle_debug_event(ev, rqflags) -> int"""
    return _ida_dbg.handle_debug_event(*args)

def add_virt_module(*args):
    r"""add_virt_module(mod) -> bool"""
    return _ida_dbg.add_virt_module(*args)

def del_virt_module(*args):
    r"""del_virt_module(base) -> bool"""
    return _ida_dbg.del_virt_module(*args)

def internal_ioctl(*args):
    r"""internal_ioctl(fn, buf, poutbuf, poutsize) -> int"""
    return _ida_dbg.internal_ioctl(*args)

def read_dbg_memory(*args):
    r"""read_dbg_memory(ea, buffer, size) -> ssize_t"""
    return _ida_dbg.read_dbg_memory(*args)

def get_reg_vals(*args):
    r"""get_reg_vals(tid, clsmask, values) -> int"""
    return _ida_dbg.get_reg_vals(*args)

def set_reg_val(*args):
    r"""
    set_reg_val(regname, regval) -> bool
    set_reg_val(regname, ival) -> bool
    set_reg_val(tid, regidx, value) -> int
    """
    return _ida_dbg.set_reg_val(*args)

def get_dbg_memory_info(*args):
    r"""get_dbg_memory_info(ranges) -> int"""
    return _ida_dbg.get_dbg_memory_info(*args)

def set_bpt_group(*args):
    r"""set_bpt_group(bpt, grp_name)"""
    return _ida_dbg.set_bpt_group(*args)

def set_bptloc_group(*args):
    r"""set_bptloc_group(bptloc, grp_name) -> bool"""
    return _ida_dbg.set_bptloc_group(*args)

def get_bpt_group(*args):
    r"""get_bpt_group(bptloc) -> bool"""
    return _ida_dbg.get_bpt_group(*args)

def rename_bptgrp(*args):
    r"""rename_bptgrp(old_name, new_name) -> bool"""
    return _ida_dbg.rename_bptgrp(*args)

def del_bptgrp(*args):
    r"""del_bptgrp(name) -> bool"""
    return _ida_dbg.del_bptgrp(*args)

def get_grp_bpts(*args):
    r"""get_grp_bpts(bpts, grp_name) -> ssize_t"""
    return _ida_dbg.get_grp_bpts(*args)

def get_srcinfo_provider(*args):
    r"""get_srcinfo_provider(name) -> srcinfo_provider_t *"""
    return _ida_dbg.get_srcinfo_provider(*args)

def get_global_var(*args):
    r"""get_global_var(prov, ea, name, out) -> bool"""
    return _ida_dbg.get_global_var(*args)

def get_local_var(*args):
    r"""get_local_var(prov, ea, name, out) -> bool"""
    return _ida_dbg.get_local_var(*args)

def get_local_vars(*args):
    r"""get_local_vars(prov, ea, out) -> bool"""
    return _ida_dbg.get_local_vars(*args)

def add_path_mapping(*args):
    r"""add_path_mapping(src, dst)"""
    return _ida_dbg.add_path_mapping(*args)

def get_current_source_file(*args):
    r"""get_current_source_file(path) -> bool"""
    return _ida_dbg.get_current_source_file(*args)

def get_current_source_line(*args):
    r"""get_current_source_line() -> int"""
    return _ida_dbg.get_current_source_line(*args)

def srcdbg_step_into(*args):
    r"""srcdbg_step_into() -> bool"""
    return _ida_dbg.srcdbg_step_into(*args)

def srcdbg_request_step_into(*args):
    r"""srcdbg_request_step_into() -> bool"""
    return _ida_dbg.srcdbg_request_step_into(*args)

def srcdbg_step_over(*args):
    r"""srcdbg_step_over() -> bool"""
    return _ida_dbg.srcdbg_step_over(*args)

def srcdbg_request_step_over(*args):
    r"""srcdbg_request_step_over() -> bool"""
    return _ida_dbg.srcdbg_request_step_over(*args)

def srcdbg_step_until_ret(*args):
    r"""srcdbg_step_until_ret() -> bool"""
    return _ida_dbg.srcdbg_step_until_ret(*args)

def srcdbg_request_step_until_ret(*args):
    r"""srcdbg_request_step_until_ret() -> bool"""
    return _ida_dbg.srcdbg_request_step_until_ret(*args)

def dbg_bin_search(*args):
    r"""dbg_bin_search(start_ea, end_ea, data, srch_flags) -> drc_t"""
    return _ida_dbg.dbg_bin_search(*args)

def dbg_can_query(*args):
    r"""dbg_can_query() -> bool"""
    return _ida_dbg.dbg_can_query(*args)

def get_manual_regions(*args):
    r"""
    get_manual_regions(ranges)
    get_manual_regions() -> PyObject *
    """
    return _ida_dbg.get_manual_regions(*args)

def dbg_is_loaded(*args):
    r"""dbg_is_loaded() -> bool"""
    return _ida_dbg.dbg_is_loaded(*args)

def refresh_debugger_memory(*args):
    r"""refresh_debugger_memory() -> PyObject *"""
    return _ida_dbg.refresh_debugger_memory(*args)
class DBG_Hooks(object):
    r"""Proxy of C++ DBG_Hooks class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ida_dbg.delete_DBG_Hooks

    def hook(self, *args):
        r"""hook(self) -> bool"""
        return _ida_dbg.DBG_Hooks_hook(self, *args)

    def unhook(self, *args):
        r"""unhook(self) -> bool"""
        return _ida_dbg.DBG_Hooks_unhook(self, *args)

    def dbg_process_start(self, *args):
        r"""dbg_process_start(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)"""
        return _ida_dbg.DBG_Hooks_dbg_process_start(self, *args)

    def dbg_process_exit(self, *args):
        r"""dbg_process_exit(self, pid, tid, ea, exit_code)"""
        return _ida_dbg.DBG_Hooks_dbg_process_exit(self, *args)

    def dbg_process_attach(self, *args):
        r"""dbg_process_attach(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)"""
        return _ida_dbg.DBG_Hooks_dbg_process_attach(self, *args)

    def dbg_process_detach(self, *args):
        r"""dbg_process_detach(self, pid, tid, ea)"""
        return _ida_dbg.DBG_Hooks_dbg_process_detach(self, *args)

    def dbg_thread_start(self, *args):
        r"""dbg_thread_start(self, pid, tid, ea)"""
        return _ida_dbg.DBG_Hooks_dbg_thread_start(self, *args)

    def dbg_thread_exit(self, *args):
        r"""dbg_thread_exit(self, pid, tid, ea, exit_code)"""
        return _ida_dbg.DBG_Hooks_dbg_thread_exit(self, *args)

    def dbg_library_load(self, *args):
        r"""dbg_library_load(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)"""
        return _ida_dbg.DBG_Hooks_dbg_library_load(self, *args)

    def dbg_library_unload(self, *args):
        r"""dbg_library_unload(self, pid, tid, ea, info)"""
        return _ida_dbg.DBG_Hooks_dbg_library_unload(self, *args)

    def dbg_information(self, *args):
        r"""dbg_information(self, pid, tid, ea, info)"""
        return _ida_dbg.DBG_Hooks_dbg_information(self, *args)

    def dbg_exception(self, *args):
        r"""dbg_exception(self, pid, tid, ea, exc_code, exc_can_cont, exc_ea, exc_info) -> int"""
        return _ida_dbg.DBG_Hooks_dbg_exception(self, *args)

    def dbg_suspend_process(self, *args):
        r"""dbg_suspend_process(self)"""
        return _ida_dbg.DBG_Hooks_dbg_suspend_process(self, *args)

    def dbg_bpt(self, *args):
        r"""dbg_bpt(self, tid, bptea) -> int"""
        return _ida_dbg.DBG_Hooks_dbg_bpt(self, *args)

    def dbg_trace(self, *args):
        r"""dbg_trace(self, tid, ip) -> int"""
        return _ida_dbg.DBG_Hooks_dbg_trace(self, *args)

    def dbg_request_error(self, *args):
        r"""dbg_request_error(self, failed_command, failed_dbg_notification)"""
        return _ida_dbg.DBG_Hooks_dbg_request_error(self, *args)

    def dbg_step_into(self, *args):
        r"""dbg_step_into(self)"""
        return _ida_dbg.DBG_Hooks_dbg_step_into(self, *args)

    def dbg_step_over(self, *args):
        r"""dbg_step_over(self)"""
        return _ida_dbg.DBG_Hooks_dbg_step_over(self, *args)

    def dbg_run_to(self, *args):
        r"""dbg_run_to(self, pid, tid, ea)"""
        return _ida_dbg.DBG_Hooks_dbg_run_to(self, *args)

    def dbg_step_until_ret(self, *args):
        r"""dbg_step_until_ret(self)"""
        return _ida_dbg.DBG_Hooks_dbg_step_until_ret(self, *args)

    def dbg_bpt_changed(self, *args):
        r"""dbg_bpt_changed(self, bptev_code, bpt)"""
        return _ida_dbg.DBG_Hooks_dbg_bpt_changed(self, *args)

    def __init__(self, *args):
        r"""__init__(self) -> DBG_Hooks"""
        if self.__class__ == DBG_Hooks:
            _self = None
        else:
            _self = self
        _ida_dbg.DBG_Hooks_swiginit(self, _ida_dbg.new_DBG_Hooks(_self, *args))
    def __disown__(self):
        self.this.disown()
        _ida_dbg.disown_DBG_Hooks(self)
        return weakref.proxy(self)

# Register DBG_Hooks in _ida_dbg:
_ida_dbg.DBG_Hooks_swigregister(DBG_Hooks)


def list_bptgrps(*args):
    r"""
    list_bptgrps(bptgrps) -> size_t
    list_bptgrps() -> PyObject *
    """
    return _ida_dbg.list_bptgrps(*args)

def move_bpt_to_grp(*args):
    r"""move_bpt_to_grp(bpt, grp_name)"""
    return _ida_dbg.move_bpt_to_grp(*args)

def internal_get_sreg_base(*args):
    r"""internal_get_sreg_base(tid, sreg_value) -> ea_t"""
    return _ida_dbg.internal_get_sreg_base(*args)

def write_dbg_memory(*args):
    r"""write_dbg_memory(ea, py_buf, size=size_t(-1)) -> ssize_t"""
    return _ida_dbg.write_dbg_memory(*args)

#<pycode(py_dbg)>
import ida_idaapi
import ida_idd
import ida_expr

def get_tev_reg_val(tev, reg):
    rv = ida_idd.regval_t()
    if get_insn_tev_reg_val(tev, reg, rv):
        if rv.rvtype == ida_idd.RVT_INT:
            return rv.ival

def get_tev_reg_mem_qty(tev):
    ti = tev_info_t()
    if get_tev_info(tev, ti):
        mis = memreg_infos_t()
        if get_insn_tev_reg_mem(tev, mis):
            return mis.size()

def get_tev_reg_mem(tev, idx):
    mis = memreg_infos_t()
    if get_insn_tev_reg_mem(tev, mis):
        if idx < mis.size():
            return mis[idx].bytes

def get_tev_reg_mem_ea(tev, idx):
    ti = tev_info_t()
    if get_tev_info(tev, ti):
        mis = memreg_infos_t()
        if get_insn_tev_reg_mem(tev, mis):
            if idx >= 0 and idx < mis.size():
                return mis[idx].ea

def send_dbg_command(command):
    """
    Send a direct command to the debugger backend, and
    retrieve the result as a string.

    Note: any double-quotes in 'command' must be backslash-escaped.
    Note: this only works with some debugger backends: Bochs, WinDbg, GDB.

    Returns: (True, <result string>) on success, or (False, <Error message string>) on failure
    """
    rv = ida_expr.idc_value_t()
    err = ida_expr.eval_idc_expr(rv, ida_idaapi.BADADDR, """send_dbg_command("%s");""" % command)
    if err:
        return False, "eval_idc_expr() failed: %s" % err
    vtype = ord(rv.vtype)
    if vtype == ida_expr.VT_STR:
        s = rv.c_str()
        if "IDC_FAILURE" in s:
            return False, "eval_idc_expr() reported an error: %s" % s
        return True, s
    elif vtype == ida_expr.VT_LONG:
        return True, str(rv.num)
    else:
        return False, "eval_idc_expr(): wrong return type: %d" % vtype

#</pycode(py_dbg)>


if _BC695:
    import ida_idd
    def get_process_info(n, pi):
        pis = ida_idd.procinfo_vec_t()
        cnt = get_processes(pis)
        if n >= cnt:
            return ida_idd.NO_PROCESS
        pi.name = pis[n].name
        pi.pid = pis[n].pid
        return pi.pid
    def get_process_qty():
        pis = ida_idd.procinfo_vec_t()
        return get_processes(pis)




