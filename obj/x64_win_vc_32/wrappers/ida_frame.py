# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""IDA Plugin SDK API wrapper: frame"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_frame
else:
    import _ida_frame

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

import ida_range
class xreflist_t(object):
    r"""Proxy of C++ qvector< xreflist_entry_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> xreflist_t
        __init__(self, x) -> xreflist_t
        """
        _ida_frame.xreflist_t_swiginit(self, _ida_frame.new_xreflist_t(*args))
    __swig_destroy__ = _ida_frame.delete_xreflist_t

    def push_back(self, *args):
        r"""
        push_back(self, x)
        push_back(self) -> xreflist_entry_t
        """
        return _ida_frame.xreflist_t_push_back(self, *args)

    def pop_back(self, *args):
        r"""pop_back(self)"""
        return _ida_frame.xreflist_t_pop_back(self, *args)

    def size(self, *args):
        r"""size(self) -> size_t"""
        return _ida_frame.xreflist_t_size(self, *args)

    def empty(self, *args):
        r"""empty(self) -> bool"""
        return _ida_frame.xreflist_t_empty(self, *args)

    def at(self, *args):
        r"""at(self, _idx) -> xreflist_entry_t"""
        return _ida_frame.xreflist_t_at(self, *args)

    def qclear(self, *args):
        r"""qclear(self)"""
        return _ida_frame.xreflist_t_qclear(self, *args)

    def clear(self, *args):
        r"""clear(self)"""
        return _ida_frame.xreflist_t_clear(self, *args)

    def resize(self, *args):
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_frame.xreflist_t_resize(self, *args)

    def grow(self, *args):
        r"""grow(self, x=xreflist_entry_t())"""
        return _ida_frame.xreflist_t_grow(self, *args)

    def capacity(self, *args):
        r"""capacity(self) -> size_t"""
        return _ida_frame.xreflist_t_capacity(self, *args)

    def reserve(self, *args):
        r"""reserve(self, cnt)"""
        return _ida_frame.xreflist_t_reserve(self, *args)

    def truncate(self, *args):
        r"""truncate(self)"""
        return _ida_frame.xreflist_t_truncate(self, *args)

    def swap(self, *args):
        r"""swap(self, r)"""
        return _ida_frame.xreflist_t_swap(self, *args)

    def extract(self, *args):
        r"""extract(self) -> xreflist_entry_t"""
        return _ida_frame.xreflist_t_extract(self, *args)

    def inject(self, *args):
        r"""inject(self, s, len)"""
        return _ida_frame.xreflist_t_inject(self, *args)

    def __eq__(self, *args):
        r"""__eq__(self, r) -> bool"""
        return _ida_frame.xreflist_t___eq__(self, *args)

    def __ne__(self, *args):
        r"""__ne__(self, r) -> bool"""
        return _ida_frame.xreflist_t___ne__(self, *args)

    def begin(self, *args):
        r"""
        begin(self) -> xreflist_entry_t
        begin(self) -> xreflist_entry_t
        """
        return _ida_frame.xreflist_t_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> xreflist_entry_t
        end(self) -> xreflist_entry_t
        """
        return _ida_frame.xreflist_t_end(self, *args)

    def insert(self, *args):
        r"""insert(self, it, x) -> xreflist_entry_t"""
        return _ida_frame.xreflist_t_insert(self, *args)

    def erase(self, *args):
        r"""
        erase(self, it) -> xreflist_entry_t
        erase(self, first, last) -> xreflist_entry_t
        """
        return _ida_frame.xreflist_t_erase(self, *args)

    def find(self, *args):
        r"""
        find(self, x) -> xreflist_entry_t
        find(self, x) -> xreflist_entry_t
        """
        return _ida_frame.xreflist_t_find(self, *args)

    def has(self, *args):
        r"""has(self, x) -> bool"""
        return _ida_frame.xreflist_t_has(self, *args)

    def add_unique(self, *args):
        r"""add_unique(self, x) -> bool"""
        return _ida_frame.xreflist_t_add_unique(self, *args)

    def _del(self, *args):
        r"""_del(self, x) -> bool"""
        return _ida_frame.xreflist_t__del(self, *args)

    def __len__(self, *args):
        r"""__len__(self) -> size_t"""
        return _ida_frame.xreflist_t___len__(self, *args)

    def __getitem__(self, *args):
        r"""__getitem__(self, i) -> xreflist_entry_t"""
        return _ida_frame.xreflist_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""__setitem__(self, i, v)"""
        return _ida_frame.xreflist_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register xreflist_t in _ida_frame:
_ida_frame.xreflist_t_swigregister(xreflist_t)


def get_stkvar(*args):
    r"""get_stkvar(insn, op, v) -> PyObject *"""
    return _ida_frame.get_stkvar(*args)
class stkpnt_t(object):
    r"""Proxy of C++ stkpnt_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea = property(_ida_frame.stkpnt_t_ea_get, _ida_frame.stkpnt_t_ea_set, doc=r"""ea""")
    spd = property(_ida_frame.stkpnt_t_spd_get, _ida_frame.stkpnt_t_spd_set, doc=r"""spd""")

    def __lt__(self, *args):
        r"""__lt__(self, r) -> bool"""
        return _ida_frame.stkpnt_t___lt__(self, *args)

    def __init__(self, *args):
        r"""__init__(self) -> stkpnt_t"""
        _ida_frame.stkpnt_t_swiginit(self, _ida_frame.new_stkpnt_t(*args))
    __swig_destroy__ = _ida_frame.delete_stkpnt_t

# Register stkpnt_t in _ida_frame:
_ida_frame.stkpnt_t_swigregister(stkpnt_t)

class stkpnts_t(object):
    r"""Proxy of C++ stkpnts_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(self) -> stkpnts_t"""
        _ida_frame.stkpnts_t_swiginit(self, _ida_frame.new_stkpnts_t(*args))
    __swig_destroy__ = _ida_frame.delete_stkpnts_t

# Register stkpnts_t in _ida_frame:
_ida_frame.stkpnts_t_swigregister(stkpnts_t)


def add_frame(*args):
    r"""add_frame(pfn, frsize, frregs, argsize) -> bool"""
    return _ida_frame.add_frame(*args)

def del_frame(*args):
    r"""del_frame(pfn) -> bool"""
    return _ida_frame.del_frame(*args)

def set_frame_size(*args):
    r"""set_frame_size(pfn, frsize, frregs, argsize) -> bool"""
    return _ida_frame.set_frame_size(*args)

def get_frame_size(*args):
    r"""get_frame_size(pfn) -> asize_t"""
    return _ida_frame.get_frame_size(*args)

def get_frame_retsize(*args):
    r"""get_frame_retsize(pfn) -> int"""
    return _ida_frame.get_frame_retsize(*args)
FPC_ARGS = _ida_frame.FPC_ARGS

FPC_RETADDR = _ida_frame.FPC_RETADDR

FPC_SAVREGS = _ida_frame.FPC_SAVREGS

FPC_LVARS = _ida_frame.FPC_LVARS


def get_frame_part(*args):
    r"""get_frame_part(range, pfn, part)"""
    return _ida_frame.get_frame_part(*args)

def frame_off_args(*args):
    r"""frame_off_args(pfn) -> ea_t"""
    return _ida_frame.frame_off_args(*args)

def frame_off_retaddr(*args):
    r"""frame_off_retaddr(pfn) -> ea_t"""
    return _ida_frame.frame_off_retaddr(*args)

def frame_off_savregs(*args):
    r"""frame_off_savregs(pfn) -> ea_t"""
    return _ida_frame.frame_off_savregs(*args)

def frame_off_lvars(*args):
    r"""frame_off_lvars(pfn) -> ea_t"""
    return _ida_frame.frame_off_lvars(*args)

def is_funcarg_off(*args):
    r"""is_funcarg_off(pfn, frameoff) -> bool"""
    return _ida_frame.is_funcarg_off(*args)

def lvar_off(*args):
    r"""lvar_off(pfn, frameoff) -> sval_t"""
    return _ida_frame.lvar_off(*args)

def get_frame(*args):
    r"""
    get_frame(pfn) -> struc_t
    get_frame(ea) -> struc_t *
    """
    return _ida_frame.get_frame(*args)

def update_fpd(*args):
    r"""update_fpd(pfn, fpd) -> bool"""
    return _ida_frame.update_fpd(*args)

def set_purged(*args):
    r"""set_purged(ea, nbytes, override_old_value) -> bool"""
    return _ida_frame.set_purged(*args)

def get_func_by_frame(*args):
    r"""get_func_by_frame(frame_id) -> ea_t"""
    return _ida_frame.get_func_by_frame(*args)
STKVAR_VALID_SIZE = _ida_frame.STKVAR_VALID_SIZE


def define_stkvar(*args):
    r"""define_stkvar(pfn, name, off, flags, ti, nbytes) -> bool"""
    return _ida_frame.define_stkvar(*args)

def build_stkvar_name(*args):
    r"""build_stkvar_name(pfn, v) -> ssize_t"""
    return _ida_frame.build_stkvar_name(*args)

def calc_stkvar_struc_offset(*args):
    r"""calc_stkvar_struc_offset(pfn, insn, n) -> ea_t"""
    return _ida_frame.calc_stkvar_struc_offset(*args)
class regvar_t(ida_range.range_t):
    r"""Proxy of C++ regvar_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    canon = property(_ida_frame.regvar_t_canon_get, _ida_frame.regvar_t_canon_set, doc=r"""canon""")
    user = property(_ida_frame.regvar_t_user_get, _ida_frame.regvar_t_user_set, doc=r"""user""")
    cmt = property(_ida_frame.regvar_t_cmt_get, _ida_frame.regvar_t_cmt_set, doc=r"""cmt""")

    def __init__(self, *args):
        r"""__init__(self) -> regvar_t"""
        _ida_frame.regvar_t_swiginit(self, _ida_frame.new_regvar_t(*args))
    __swig_destroy__ = _ida_frame.delete_regvar_t

# Register regvar_t in _ida_frame:
_ida_frame.regvar_t_swigregister(regvar_t)


def add_regvar(*args):
    r"""add_regvar(pfn, ea1, ea2, canon, user, cmt) -> int"""
    return _ida_frame.add_regvar(*args)
REGVAR_ERROR_OK = _ida_frame.REGVAR_ERROR_OK

REGVAR_ERROR_ARG = _ida_frame.REGVAR_ERROR_ARG

REGVAR_ERROR_RANGE = _ida_frame.REGVAR_ERROR_RANGE

REGVAR_ERROR_NAME = _ida_frame.REGVAR_ERROR_NAME


def find_regvar(*args):
    r"""
    find_regvar(pfn, ea1, ea2, canon, user) -> regvar_t
    find_regvar(pfn, ea, canon) -> regvar_t
    """
    return _ida_frame.find_regvar(*args)

def rename_regvar(*args):
    r"""rename_regvar(pfn, v, user) -> int"""
    return _ida_frame.rename_regvar(*args)

def set_regvar_cmt(*args):
    r"""set_regvar_cmt(pfn, v, cmt) -> int"""
    return _ida_frame.set_regvar_cmt(*args)

def del_regvar(*args):
    r"""del_regvar(pfn, ea1, ea2, canon) -> int"""
    return _ida_frame.del_regvar(*args)
class llabel_t(object):
    r"""Proxy of C++ llabel_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea = property(_ida_frame.llabel_t_ea_get, _ida_frame.llabel_t_ea_set, doc=r"""ea""")
    name = property(_ida_frame.llabel_t_name_get, _ida_frame.llabel_t_name_set, doc=r"""name""")

    def __init__(self, *args):
        r"""__init__(self) -> llabel_t"""
        _ida_frame.llabel_t_swiginit(self, _ida_frame.new_llabel_t(*args))
    __swig_destroy__ = _ida_frame.delete_llabel_t

# Register llabel_t in _ida_frame:
_ida_frame.llabel_t_swigregister(llabel_t)


def add_auto_stkpnt(*args):
    r"""add_auto_stkpnt(pfn, ea, delta) -> bool"""
    return _ida_frame.add_auto_stkpnt(*args)

def add_user_stkpnt(*args):
    r"""add_user_stkpnt(ea, delta) -> bool"""
    return _ida_frame.add_user_stkpnt(*args)

def del_stkpnt(*args):
    r"""del_stkpnt(pfn, ea) -> bool"""
    return _ida_frame.del_stkpnt(*args)

def get_spd(*args):
    r"""get_spd(pfn, ea) -> sval_t"""
    return _ida_frame.get_spd(*args)

def get_effective_spd(*args):
    r"""get_effective_spd(pfn, ea) -> sval_t"""
    return _ida_frame.get_effective_spd(*args)

def get_sp_delta(*args):
    r"""get_sp_delta(pfn, ea) -> sval_t"""
    return _ida_frame.get_sp_delta(*args)

def recalc_spd(*args):
    r"""recalc_spd(cur_ea) -> bool"""
    return _ida_frame.recalc_spd(*args)
class xreflist_entry_t(object):
    r"""Proxy of C++ xreflist_entry_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea = property(_ida_frame.xreflist_entry_t_ea_get, _ida_frame.xreflist_entry_t_ea_set, doc=r"""ea""")
    opnum = property(_ida_frame.xreflist_entry_t_opnum_get, _ida_frame.xreflist_entry_t_opnum_set, doc=r"""opnum""")
    type = property(_ida_frame.xreflist_entry_t_type_get, _ida_frame.xreflist_entry_t_type_set, doc=r"""type""")

    def __eq__(self, *args):
        r"""__eq__(self, r) -> bool"""
        return _ida_frame.xreflist_entry_t___eq__(self, *args)

    def __ne__(self, *args):
        r"""__ne__(self, r) -> bool"""
        return _ida_frame.xreflist_entry_t___ne__(self, *args)

    def __init__(self, *args):
        r"""__init__(self) -> xreflist_entry_t"""
        _ida_frame.xreflist_entry_t_swiginit(self, _ida_frame.new_xreflist_entry_t(*args))
    __swig_destroy__ = _ida_frame.delete_xreflist_entry_t

# Register xreflist_entry_t in _ida_frame:
_ida_frame.xreflist_entry_t_swigregister(xreflist_entry_t)


def build_stkvar_xrefs(*args):
    r"""build_stkvar_xrefs(out, pfn, mptr)"""
    return _ida_frame.build_stkvar_xrefs(*args)

def get_min_spd_ea(*args):
    r"""get_min_spd_ea(pfn) -> ea_t"""
    return _ida_frame.get_min_spd_ea(*args)

def delete_unreferenced_stkvars(*args):
    r"""delete_unreferenced_stkvars(pfn) -> int"""
    return _ida_frame.delete_unreferenced_stkvars(*args)

def delete_wrong_stkvar_ops(*args):
    r"""delete_wrong_stkvar_ops(pfn) -> int"""
    return _ida_frame.delete_wrong_stkvar_ops(*args)

if _BC695:
    add_auto_stkpnt2=add_auto_stkpnt
# in fact, we cannot simulate add_stkvar[23] here, because we simply
# don't have the insn_t object -- and no way of retrieving it, either,
# since cmd is gone
    @bc695redef
    def get_stkvar(*args):
        if len(args) == 2:
            import ida_ua
            insn, op, v = ida_ua.cmd, args[0], args[1]
        else:
            insn, op, v = args
        return _ida_frame.get_stkvar(insn, op, v)
    @bc695redef
    def get_frame_part(*args):
        import ida_funcs
        if isinstance(args[0], ida_funcs.func_t): # 6.95: pfn, part, range
            rnge, pfn, part = args[2], args[0], args[1]
        else:                                     # 7.00: range, pfn, part
            rnge, pfn, part = args
        return _ida_frame.get_frame_part(rnge, pfn, part)




