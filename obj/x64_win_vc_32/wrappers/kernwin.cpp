/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_DIRECTORS
#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    PyBytes_AsStringAndSize(str, &cstr, &len);
    newstr = (char *) malloc(len+1);
    memcpy(newstr, cstr, len+1);
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#else
# error Oh noes!
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(Py_TYPE(op), SwigPyObject_type()))
    return 1;
#else
  if (Py_TYPE(op) == SwigPyObject_type())
    return 1;
#endif

#ifndef Py_LIMITED_API
  return strcmp(Py_TYPE(op)->tp_name, "SwigPyObject") == 0;
#else
  //printf("### SwigPyObject_Check\n");
  PyObject* ty_name = PyObject_GetAttrString((PyObject*)Py_TYPE(op), "__name__");
  if (!ty_name)
    return 0;
  int cmp = PyUnicode_CompareWithASCIIString(ty_name, "SwigPyObject");
  Py_DECREF(ty_name);
  return cmp == 0;
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
#else // Py_LIMITED_API
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void*)SwigPyObject_dealloc },
    { Py_tp_repr, (void*)SwigPyObject_repr },
    { Py_tp_getattro, (void*)PyObject_GenericGetAttr },
    { Py_tp_doc, (void*)swigobject_doc },
    { Py_tp_richcompare, (void*)SwigPyObject_richcompare },
    { Py_tp_methods, (void*)swigobject_methods },
    { Py_nb_int, (void*)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {};
    spec.name = "SwigPyObject";
    spec.basicsize = sizeof(SwigPyObject);
    spec.flags = Py_TPFLAGS_DEFAULT;
    spec.slots = slots;
  return (PyTypeObject*)PyType_FromSpec(&spec);
#endif // Py_LIMITED_API
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  if (Py_TYPE(op) == SwigPyPacked_type())
    return 1;

#ifndef Py_LIMITED_API
  return strcmp(Py_TYPE(op)->tp_name, "SwigPyPacked") == 0;
#else
  //printf("### SwigPyPacked_Check\n");
  PyObject* ty_name = PyObject_GetAttrString((PyObject*)Py_TYPE(op), "__name__");
  if (!ty_name)
    return 0;
  int cmp = PyUnicode_CompareWithASCIIString(ty_name, "SwigPyPacked");
  Py_DECREF(ty_name);
  return cmp == 0;
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void*)SwigPyPacked_dealloc },
    { Py_tp_repr, (void*)SwigPyPacked_repr },
    { Py_tp_str, (void*)SwigPyPacked_str },
    { Py_tp_getattro, (void*)PyObject_GenericGetAttr },
    { Py_tp_doc, swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {};
    spec.name = "SwigPyPacked";
    spec.basicsize = sizeof(SwigPyPacked);
    spec.flags = Py_TPFLAGS_DEFAULT;
    spec.slots = slots;
  return (PyTypeObject*)PyType_FromSpec(&spec);
#endif  
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    const char *doc = pystr_doc ? SWIG_Python_str_AsChar(pystr_doc) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    SWIG_Python_str_DelForPy3(doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          PyObject_SetAttr(inst, SWIG_This(), swig_this);
#ifndef Py_LIMITED_API
          Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
          PyType_Modified(Py_TYPE(inst));
#endif
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, "__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
	      allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
          newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API // tp_name is not accessible
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
#endif      
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

#ifndef Py_LIMITED_API
SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
#endif // Py_LIMITED_API

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

/* simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
# define __PTHREAD__
# if defined(_WIN32) || defined(__WIN32__)
#  include <windows.h>
#  define pthread_mutex_lock EnterCriticalSection
#  define pthread_mutex_unlock LeaveCriticalSection
#  define pthread_mutex_t CRITICAL_SECTION
#  define SWIG_MUTEX_INIT(var) var
# else
#  include <pthread.h>
#  define SWIG_MUTEX_INIT(var) var = PTHREAD_MUTEX_INITIALIZER 
# endif
#endif

#ifdef  __PTHREAD__
  class Guard {
    pthread_mutex_t *_mutex;

  public:
    Guard(pthread_mutex_t &mutex) : _mutex(&mutex) {
      pthread_mutex_lock(_mutex);
    }

    ~Guard() {
      pthread_mutex_unlock(_mutex);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __PTHREAD__
    static pthread_mutex_t swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __PTHREAD__
  pthread_mutex_t SWIG_MUTEX_INIT(Director::swig_mutex_own);
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_TPopupMenu swig_types[0]
#define SWIGTYPE_p_TWidget swig_types[1]
#define SWIGTYPE_p_UI_Hooks swig_types[2]
#define SWIGTYPE_p_View_Hooks swig_types[3]
#define SWIGTYPE_p___qtimer_t swig_types[4]
#define SWIGTYPE_p__qstringT_char_t swig_types[5]
#define SWIGTYPE_p__qstringT_unsigned_char_t swig_types[6]
#define SWIGTYPE_p__qstringT_unsigned_short_t swig_types[7]
#define SWIGTYPE_p_action_ctx_base_t swig_types[8]
#define SWIGTYPE_p_action_desc_t swig_types[9]
#define SWIGTYPE_p_action_handler_t swig_types[10]
#define SWIGTYPE_p_action_state_t swig_types[11]
#define SWIGTYPE_p_addon_info_t swig_types[12]
#define SWIGTYPE_p_biggest_t swig_types[13]
#define SWIGTYPE_p_bool swig_types[14]
#define SWIGTYPE_p_bytevec_t swig_types[15]
#define SWIGTYPE_p_char swig_types[16]
#define SWIGTYPE_p_chooser_base_t swig_types[17]
#define SWIGTYPE_p_chooser_item_attrs_t swig_types[18]
#define SWIGTYPE_p_const_iterator swig_types[19]
#define SWIGTYPE_p_disasm_line_t swig_types[20]
#define SWIGTYPE_p_enumplace_t swig_types[21]
#define SWIGTYPE_p_f_p_TWidget_int_int_p_void__bool swig_types[22]
#define SWIGTYPE_p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void swig_types[23]
#define SWIGTYPE_p_f_p_TWidget_int_p_void__bool swig_types[24]
#define SWIGTYPE_p_f_p_TWidget_p_lochist_entry_t_p_void__void swig_types[25]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void swig_types[26]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int swig_types[27]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void swig_types[28]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int swig_types[29]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int swig_types[30]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool swig_types[31]
#define SWIGTYPE_p_f_p_TWidget_p_void__int swig_types[32]
#define SWIGTYPE_p_f_p_TWidget_p_void__void swig_types[33]
#define SWIGTYPE_p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t swig_types[34]
#define SWIGTYPE_p_f_p_chooser_t_ssize_t__chooser_t__cbret_t swig_types[35]
#define SWIGTYPE_p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool swig_types[36]
#define SWIGTYPE_p_f_p_q_const__char_p_void__void swig_types[37]
#define SWIGTYPE_p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int swig_types[38]
#define SWIGTYPE_p_f_p_q_const__char_v_______int swig_types[39]
#define SWIGTYPE_p_f_p_void_int_va_list__ssize_t swig_types[40]
#define SWIGTYPE_p_f_r_q_const__insn_t_p_int_p_int__bool swig_types[41]
#define SWIGTYPE_p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool swig_types[42]
#define SWIGTYPE_p_f_unsigned_int__bool swig_types[43]
#define SWIGTYPE_p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int swig_types[44]
#define SWIGTYPE_p_f_unsigned_int_p_void__bool swig_types[45]
#define SWIGTYPE_p_f_unsigned_int_r_q_const__tinfo_t_p_void__int swig_types[46]
#define SWIGTYPE_p_f_unsigned_int_unsigned_int__unsigned_int swig_types[47]
#define SWIGTYPE_p_func_t swig_types[48]
#define SWIGTYPE_p_hexplace_t swig_types[49]
#define SWIGTYPE_p_idaplace_t swig_types[50]
#define SWIGTYPE_p_int swig_types[51]
#define SWIGTYPE_p_iterator swig_types[52]
#define SWIGTYPE_p_jobj_wrapper_t swig_types[53]
#define SWIGTYPE_p_linput_t swig_types[54]
#define SWIGTYPE_p_location_t swig_types[55]
#define SWIGTYPE_p_locchange_md_t swig_types[56]
#define SWIGTYPE_p_lochist_entry_t swig_types[57]
#define SWIGTYPE_p_long_long swig_types[58]
#define SWIGTYPE_p_member_t swig_types[59]
#define SWIGTYPE_p_p_char swig_types[60]
#define SWIGTYPE_p_p_linput_t swig_types[61]
#define SWIGTYPE_p_p_load_info_t swig_types[62]
#define SWIGTYPE_p_place_t swig_types[63]
#define SWIGTYPE_p_plugin_info_t swig_types[64]
#define SWIGTYPE_p_plugin_t swig_types[65]
#define SWIGTYPE_p_qvectorT__qstringT_unsigned_short_t_t swig_types[66]
#define SWIGTYPE_p_qvectorT_argloc_t_t swig_types[67]
#define SWIGTYPE_p_qvectorT_bool_t swig_types[68]
#define SWIGTYPE_p_qvectorT_channel_redir_t_t swig_types[69]
#define SWIGTYPE_p_qvectorT_compiled_binpat_t_t swig_types[70]
#define SWIGTYPE_p_qvectorT_disasm_line_t_t swig_types[71]
#define SWIGTYPE_p_qvectorT_funcarg_t_t swig_types[72]
#define SWIGTYPE_p_qvectorT_int_t swig_types[73]
#define SWIGTYPE_p_qvectorT_range_t_t swig_types[74]
#define SWIGTYPE_p_qvectorT_rangeset_t_const_p_t swig_types[75]
#define SWIGTYPE_p_qvectorT_rangeset_t_t swig_types[76]
#define SWIGTYPE_p_qvectorT_refinfo_desc_t_t swig_types[77]
#define SWIGTYPE_p_qvectorT_simd_info_t_t swig_types[78]
#define SWIGTYPE_p_qvectorT_size_t_t swig_types[79]
#define SWIGTYPE_p_qvectorT_tinfo_t_t swig_types[80]
#define SWIGTYPE_p_qvectorT_type_attr_t_t swig_types[81]
#define SWIGTYPE_p_qvectorT_udt_member_t_t swig_types[82]
#define SWIGTYPE_p_qvectorT_unsigned_char_t swig_types[83]
#define SWIGTYPE_p_qvectorT_unsigned_int_t swig_types[84]
#define SWIGTYPE_p_rangevec_t swig_types[85]
#define SWIGTYPE_p_relobj_t swig_types[86]
#define SWIGTYPE_p_reloc_info_t swig_types[87]
#define SWIGTYPE_p_renderer_pos_info_t swig_types[88]
#define SWIGTYPE_p_segm_move_infos_t swig_types[89]
#define SWIGTYPE_p_segment_t swig_types[90]
#define SWIGTYPE_p_selection_item_t swig_types[91]
#define SWIGTYPE_p_short swig_types[92]
#define SWIGTYPE_p_signed_char swig_types[93]
#define SWIGTYPE_p_simpleline_place_t swig_types[94]
#define SWIGTYPE_p_simpleline_t swig_types[95]
#define SWIGTYPE_p_snapshot_t swig_types[96]
#define SWIGTYPE_p_sreg_range_t swig_types[97]
#define SWIGTYPE_p_strarray_t swig_types[98]
#define SWIGTYPE_p_struc_t swig_types[99]
#define SWIGTYPE_p_structplace_t swig_types[100]
#define SWIGTYPE_p_strwinsetup_t swig_types[101]
#define SWIGTYPE_p_textctrl_info_t swig_types[102]
#define SWIGTYPE_p_twinpos_t swig_types[103]
#define SWIGTYPE_p_ui_requests_t swig_types[104]
#define SWIGTYPE_p_unsigned_char swig_types[105]
#define SWIGTYPE_p_unsigned_int swig_types[106]
#define SWIGTYPE_p_unsigned_long_long swig_types[107]
#define SWIGTYPE_p_unsigned_short swig_types[108]
#define SWIGTYPE_p_value_type swig_types[109]
#define SWIGTYPE_p_view_mouse_event_location_t swig_types[110]
#define SWIGTYPE_p_view_mouse_event_t swig_types[111]
#define SWIGTYPE_p_void swig_types[112]
static swig_type_info *swig_types[114];
static swig_module_info swig_module = {swig_types, 113, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _ida_kernwin.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__ida_kernwin

#else
#  define SWIG_init    init_ida_kernwin

#endif
#define SWIG_name    "_ida_kernwin"

#define SWIGVERSION 0x040001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#ifndef USE_DANGEROUS_FUNCTIONS
  #define USE_DANGEROUS_FUNCTIONS 1
#endif
#include <pro.h>


#include "../../../idapy.hpp"


static void __raise_ba(const std::bad_alloc &ba)
{
  PyErr_SetString(PyExc_MemoryError, "Out of memory (bad_alloc)");
}

static void __raise_u()
{
  PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
}

static void __raise_e(const std::exception &e)
{
  const char *what = e.what();
  if ( what == NULL || what[0] == '\0' )
  {
    __raise_u();
  }
  else
  {
    PyErr_SetString(PyExc_RuntimeError, what);
  }
}

static void __raise_ie(const interr_exc_t &ie)
{
  qstring emsg;
  emsg.sprnt(INTERR_EXC_FMT, ie.code);
  PyErr_SetString(PyExc_RuntimeError, emsg.begin());
}

static void __raise_de(const Swig::DirectorException &e)
{
  PyErr_SetString(PyExc_RuntimeError, e.getMessage());
}

static void __raise_oor(const std::out_of_range &e)
{
  PyErr_SetString(PyExc_IndexError, e.what());
}

static bool __chkthr()
{
  bool ok = is_main_thread();
  if ( !ok )
    PyErr_SetString(PyExc_RuntimeError, "Function can be called from the main thread only");
  return ok;
}



/* strnlen() arrived on OSX at v10.7. Provide it ourselves if needed. */
#ifdef __MAC__
#ifndef MAC_OS_X_VERSION_10_7
#define MAC_OS_X_VERSION_10_7 1070
#endif
#if (MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_7)
inline size_t strnlen(const char *s, size_t maxlen)
{
  const char *found = (const char *) memchr(s, 0, maxlen);
  return found != NULL ? size_t(found - s) : maxlen;
}
#endif
#endif


template <typename Type, size_t N>
struct wrapped_array_t {
  Type (&data)[N];
  wrapped_array_t(Type (&data)[N]) : data(data) { }
};


template <typename Type>
struct dynamic_wrapped_array_t {
  Type *data;
  size_t count;
  dynamic_wrapped_array_t(Type *_data, size_t _count)
    : data(_data), count(_count) { }
};


static PyObject *qstrvec2pylist(const qstrvec_t &vec)
{
  size_t n = vec.size();
  PyObject *py_list = PyList_New(n);
  for ( size_t i=0; i < n; ++i )
    PyList_SetItem(
            py_list,
            i,
            IDAPyStr_FromUTF8AndSize(vec[i].c_str(), vec[i].length()));
  return py_list;
}


#include <expr.hpp>
#include <ieee.h>
#include "../../../pywraps.hpp"


#include <kernwin.hpp>
#include <parsejson.hpp>


#ifdef __NT__
idaman __declspec(dllimport) plugin_t PLUGIN;
#else
extern plugin_t PLUGIN;
#endif


struct py_action_handler_t : public action_handler_t
{
  py_action_handler_t(); // No.
  py_action_handler_t(PyObject *_o)
    : pyah(borref_t(_o)), has_activate(false), has_update(false)
  {
    ref_t act(PyW_TryGetAttrString(pyah.o, "activate"));
    if ( act != NULL && PyCallable_Check(act.o) > 0 )
      has_activate = true;

    ref_t upd(PyW_TryGetAttrString(pyah.o, "update"));
    if ( upd != NULL && PyCallable_Check(upd.o) > 0 )
      has_update = true;
  }
  virtual idaapi ~py_action_handler_t()
  {
    PYW_GIL_GET;
    // NOTE: We need to do the decref _within_ the PYW_GIL_GET scope,
    // and not leave it to the destructor to clean it up, because when
    // ~ref_t() gets called, the GIL will have already been released.
    pyah = ref_t();
  }
  virtual int idaapi activate(action_activation_ctx_t *ctx)
  {
    if ( !has_activate )
      return 0;
    PYW_GIL_GET_AND_REPORT_ERROR;
    newref_t pyctx(SWIG_NewPointerObj(SWIG_as_voidptr(ctx), SWIGTYPE_p_action_ctx_base_t, 0));
    newref_t pyres(PyObject_CallMethod(pyah.o, (char *)"activate", (char *) "O", pyctx.o));
    return PyErr_Occurred() ? 0 : ((pyres != NULL && IDAPyInt_Check(pyres.o)) ? IDAPyInt_AsLong(pyres.o) : 0);
  }
  virtual action_state_t idaapi update(action_update_ctx_t *ctx)
  {
    if ( !has_update )
      return AST_DISABLE;
    PYW_GIL_GET_AND_REPORT_ERROR;
    newref_t pyctx(SWIG_NewPointerObj(SWIG_as_voidptr(ctx), SWIGTYPE_p_action_ctx_base_t, 0));
    newref_t pyres(PyObject_CallMethod(pyah.o, (char *)"update", (char *) "O", pyctx.o));
    return PyErr_Occurred() ? AST_DISABLE_ALWAYS : ((pyres != NULL && IDAPyInt_Check(pyres.o)) ? action_state_t(IDAPyInt_AsLong(pyres.o)) : AST_DISABLE);
  }

private:
  ref_t pyah;
  bool has_activate;
  bool has_update;
};



void refresh_choosers(void)
{
  Py_BEGIN_ALLOW_THREADS;
  callui(ui_refresh_choosers);
  Py_END_ALLOW_THREADS;
}


static PyObject *textctrl_info_t_create()
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  return PyCapsule_New(new textctrl_info_t(), VALID_CAPSULE_NAME, NULL);
}
static bool textctrl_info_t_destroy(PyObject *py_obj)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  if ( !PyCapsule_IsValid(py_obj, VALID_CAPSULE_NAME) )
    return false;
  delete (textctrl_info_t *)PyCapsule_GetPointer(py_obj, VALID_CAPSULE_NAME);
  return true;
}
static textctrl_info_t *textctrl_info_t_get_clink(PyObject *self)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  return (textctrl_info_t *)pyobj_get_clink(self);
}
static PyObject *textctrl_info_t_get_clink_ptr(PyObject *self)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  return PyLong_FromUnsignedLongLong(
          PTR2U64(pyobj_get_clink(self)));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


static void _py_unregister_compiled_form(PyObject *py_form, bool shutdown);


//<decls(py_kernwin)>
//------------------------------------------------------------------------

//-------------------------------------------------------------------------
// Context structure used by add|del_idc_hotkey()
struct py_idchotkey_ctx_t
{
  qstring hotkey;
  PyObject *pyfunc;
};

//------------------------------------------------------------------------
//</decls(py_kernwin)>


//<inline(py_kernwin)>
//------------------------------------------------------------------------

//------------------------------------------------------------------------
/*
#<pydoc>
def register_timer(interval, callback):
    """
    Register a timer

    @param interval: Interval in milliseconds
    @param callback: A Python callable that takes no parameters and returns an integer.
                     The callback may return:
                     -1   : to unregister the timer
                     >= 0 : the new or same timer interval
    @return: None or a timer object
    """
    pass
#</pydoc>
*/
static PyObject *py_register_timer(int interval, PyObject *py_callback)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();

  if ( py_callback == NULL || !PyCallable_Check(py_callback) )
    Py_RETURN_NONE;

  // An inner class hosting the callback method
  struct tmr_t
  {
    static int idaapi callback(void *ud)
    {
      PYW_GIL_GET;
      py_timer_ctx_t *ctx = (py_timer_ctx_t *)ud;
      newref_t py_result(PyObject_CallFunctionObjArgs(ctx->pycallback, NULL));
      int ret = -1;
      if ( PyErr_Occurred() )
      {
        msg("Exception in timer callback. This timer will be unregistered.\n");
        PyErr_Print();
      }
      else if ( py_result != NULL )
      {
        ret = PyLong_AsLong(py_result.o);
      }

      // Timer has been unregistered?
      if ( ret == -1 )
        python_timer_del(ctx);
      return ret;
    };
  };

  py_timer_ctx_t *ctx = python_timer_new(py_callback);
  ctx->timer_id = register_timer(
          interval,
          tmr_t::callback,
          ctx);

  if ( ctx->timer_id == NULL )
  {
    python_timer_del(ctx);
    Py_RETURN_NONE;
  }
  return PyCapsule_New(ctx,VALID_CAPSULE_NAME, NULL);
}

//------------------------------------------------------------------------
/*
#<pydoc>
def unregister_timer(timer_obj):
    """
    Unregister a timer

    @param timer_obj: a timer object previously returned by a register_timer()
    @return: Boolean
    @note: After the timer has been deleted, the timer_obj will become invalid.
    """
    pass
#</pydoc>
*/
static PyObject *py_unregister_timer(PyObject *py_timerctx)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();

  if ( py_timerctx == NULL || !PyCapsule_IsValid(py_timerctx, VALID_CAPSULE_NAME) )
    Py_RETURN_FALSE;

  py_timer_ctx_t *ctx = (py_timer_ctx_t *) PyCapsule_GetPointer(py_timerctx, VALID_CAPSULE_NAME);
  if ( ctx == NULL || !unregister_timer(ctx->timer_id) )
    Py_RETURN_FALSE;

  python_timer_del(ctx);
  PyCObject_SetVoidPtr(py_timerctx, NULL);
  Py_RETURN_TRUE;
}

//------------------------------------------------------------------------
/*
#<pydoc>
def choose_idasgn():
    """
    Opens the signature chooser

    @return: None or the selected signature name
    """
    pass
#</pydoc>
*/
static PyObject *py_choose_idasgn()
{
  char *name = choose_idasgn();
  PYW_GIL_CHECK_LOCKED_SCOPE();
  if ( name == NULL )
  {
    Py_RETURN_NONE;
  }
  else
  {
    PyObject *py_str = IDAPyStr_FromUTF8(name);
    qfree(name);
    return py_str;
  }
}

//------------------------------------------------------------------------
/*
#<pydoc>
def get_highlight():
    """
    Returns the currently highlighted identifier and flags

    @return: a tuple (text, flags), or None if nothing
             is highlighted or in case of error.
    """
    pass
#</pydoc>
*/
static PyObject *py_get_highlight(TWidget *v)
{
  qstring buf;
  uint32 flags;
  bool ok = get_highlight(&buf, v, &flags);
  PYW_GIL_CHECK_LOCKED_SCOPE();
  if ( !ok )
    Py_RETURN_NONE;
  return Py_BuildValue("(sk)", buf.c_str(), flags);
}

//------------------------------------------------------------------------
static int py_load_custom_icon_fn(const char *filename)
{
  return load_custom_icon(filename);
}

//------------------------------------------------------------------------
static int py_load_custom_icon_data(PyObject *data, const char *format)
{
  Py_ssize_t len;
  char *s;
  PYW_GIL_CHECK_LOCKED_SCOPE();
  if ( IDAPyBytes_AsMemAndSize(data, &s, &len) == -1 )
    return 0;
  else
    return load_custom_icon(s, len, format);
}

//------------------------------------------------------------------------
/*
#<pydoc>
def free_custom_icon(icon_id):
    """
    Frees an icon loaded with load_custom_icon()
    """
    pass
#</pydoc>
*/

//-------------------------------------------------------------------------
/*
#<pydoc>
def read_selection(view, p0, p1):
    """
    Read the user selection, and store its information in p0 (from) and p1 (to).

    This can be used as follows:


    >>> p0 = idaapi.twinpos_t()
    p1 = idaapi.twinpos_t()
    view = idaapi.get_current_viewer()
    idaapi.read_selection(view, p0, p1)


    At that point, p0 and p1 hold information for the selection.
    But, the 'at' property of p0 and p1 is not properly typed.
    To specialize it, call #place() on it, passing it the view
    they were retrieved from. Like so:


    >>> place0 = p0.place(view)
    place1 = p1.place(view)


    This will effectively "cast" the place into a specialized type,
    holding proper information, depending on the view type (e.g.,
    disassembly, structures, enums, ...)

    @param view: The view to retrieve the selection for.
    @param p0: Storage for the "from" part of the selection.
    @param p1: Storage for the "to" part of the selection.
    @return: a bool value indicating success.
    """
    pass
#</pydoc>
*/

//------------------------------------------------------------------------
/*
#<pydoc>
def msg(text):
    """
    Prints text into IDA's Output window

    @param text: text to print
                 Can be Unicode, or string in local encoding
    @return: number of bytes printed
    """
    pass
#</pydoc>
*/
static PyObject *py_msg(PyObject *o)
{
  const char *utf8 = NULL;
  ref_t py_utf8;
  if ( PyUnicode_Check(o) )
  {
    py_utf8 = newref_t(PyUnicode_AsUTF8String(o));
    utf8 = IDAPyBytes_AsString(py_utf8.o);
  }
  else if ( IDAPyStr_Check(o) )
  {
    utf8 = IDAPyBytes_AsString(o);
  }
  else
  {
    PyErr_SetString(PyExc_TypeError, "A string expected");
    return NULL;
  }
  int rc;
  Py_BEGIN_ALLOW_THREADS;
  rc = msg("%s", utf8);
  Py_END_ALLOW_THREADS;
  return IDAPyInt_FromLong(rc);
}

//------------------------------------------------------------------------
/*
#<pydoc>
def ask_text(defval, prompt):
    """
    Asks for a long text

    @param max_size: Maximum text length, 0 for unlimited
    @param defval: The default value
    @param prompt: The prompt value
    @return: None or the entered string
    """
    pass
#</pydoc>
*/
PyObject *py_ask_text(size_t max_size, const char *defval, const char *prompt)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();

  qstring qbuf;

  PyObject *py_ret;
  if ( ask_text(&qbuf, max_size, defval, "%s", prompt) )
  {
    py_ret = IDAPyStr_FromUTF8AndSize(qbuf.begin(), qbuf.length());
  }
  else
  {
    py_ret = Py_None;
    Py_INCREF(py_ret);
  }
  return py_ret;
}

//------------------------------------------------------------------------
/*
#<pydoc>
def ask_str(defval, hist, prompt):
    """
    Asks for a long text

    @param hist:   history id
    @param defval: The default value
    @param prompt: The prompt value
    @return: None or the entered string
    """
    pass
#</pydoc>
*/
PyObject *py_ask_str(qstring *defval, int hist, const char *prompt)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();

  PyObject *py_ret;
  if ( ask_str(defval, hist, "%s", prompt) )
  {
    py_ret = IDAPyStr_FromUTF8AndSize(defval->begin(), defval->length());
  }
  else
  {
    py_ret = Py_None;
    Py_INCREF(py_ret);
  }
  return py_ret;
}

//------------------------------------------------------------------------
/*
#<pydoc>
def str2ea(addr):
    """
    Converts a string express to EA. The expression evaluator may be called as well.

    @return: BADADDR or address value
    """
    pass
#</pydoc>
*/
ea_t py_str2ea(const char *str, ea_t screenEA = BADADDR)
{
  ea_t ea;
  bool ok = str2ea(&ea, str, screenEA);
  return ok ? ea : BADADDR;
}

//------------------------------------------------------------------------
/*
#<pydoc>
def process_ui_action(name):
    """
    Invokes an IDA UI action by name

    @param name:  action name
    @return: Boolean
    """
    pass
#</pydoc>
*/
static bool py_process_ui_action(const char *name, int flags = 0)
{
  return process_ui_action(name, flags, NULL);
}

//------------------------------------------------------------------------
/*
#<pydoc>
def del_hotkey(ctx):
    """
    Deletes a previously registered function hotkey

    @param ctx: Hotkey context previously returned by add_hotkey()

    @return: Boolean.
    """
    pass
#</pydoc>
*/
bool py_del_hotkey(PyObject *pyctx)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  if ( !PyCapsule_IsValid(pyctx, VALID_CAPSULE_NAME) )
    return false;

  py_idchotkey_ctx_t *ctx = (py_idchotkey_ctx_t *) PyCapsule_GetPointer(pyctx, VALID_CAPSULE_NAME);
  if ( ctx == NULL || !del_idc_hotkey(ctx->hotkey.c_str()) )
    return false;

  Py_DECREF(ctx->pyfunc);
  delete ctx;
  // Here we must ensure that the python object is invalidated.
  // This is to avoid the possibility of this function being called again
  // with the same ctx, which would contain a pointer to a deleted object.
  PyCObject_SetVoidPtr(pyctx, NULL);

  return true;
}

//------------------------------------------------------------------------
/*
#<pydoc>
def add_hotkey(hotkey, pyfunc):
    """
    Associates a function call with a hotkey.
    Callable pyfunc will be called each time the hotkey is pressed

    @param hotkey: The hotkey
    @param pyfunc: Callable

    @return: Context object on success or None on failure.
    """
    pass
#</pydoc>
*/
PyObject *py_add_hotkey(const char *hotkey, PyObject *pyfunc)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  // Make sure a callable was passed
  if ( !PyCallable_Check(pyfunc) )
    return NULL;

  // Form the function name
  qstring idc_func_name;
  idc_func_name.sprnt("py_hotkeycb_%p", pyfunc);

  // Can add the hotkey?
  if ( add_idc_hotkey(hotkey, idc_func_name.c_str()) == IDCHK_OK )
  {
    do
    {
      // Generate global variable name
      qstring idc_gvarname;
      idc_gvarname.sprnt("_g_pyhotkey_ref_%p", pyfunc);

      // Now add the global variable
      idc_value_t *gvar = add_idc_gvar(idc_gvarname.c_str());
      if ( gvar == NULL )
        break;

      // The function body will call a registered IDC function that
      // will take a global variable that wraps a PyCallable as a pvoid
      qstring idc_func;
      idc_func.sprnt("static %s() { %s(%s); }",
        idc_func_name.c_str(),
        S_PYINVOKE0,
        idc_gvarname.c_str());

      // Compile the IDC condition
      qstring errbuf;
      if ( !compile_idc_text(idc_func.c_str(), &errbuf) )
        break;

      // Create new context
      // Define context
      py_idchotkey_ctx_t *ctx = new py_idchotkey_ctx_t();

      // Remember the hotkey
      ctx->hotkey = hotkey;

      // Take reference to the callable
      ctx->pyfunc = pyfunc;
      Py_INCREF(pyfunc);

      // Bind IDC variable w/ the PyCallable
      gvar->set_pvoid(pyfunc);

      // Return the context
      return PyCapsule_New(ctx,VALID_CAPSULE_NAME, NULL);
    } while (false);
  }
  // Cleanup
  del_idc_hotkey(hotkey);
  Py_RETURN_NONE;
}

//------------------------------------------------------------------------
static PyObject *py_take_database_snapshot(snapshot_t *ss)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();

  qstring err_msg;

  bool b = take_database_snapshot(ss, &err_msg);

  // Return (b, err_msg)
  return Py_BuildValue("(Ns)", PyBool_FromLong(b), err_msg.empty() ? NULL : err_msg.c_str());
}

//------------------------------------------------------------------------
static void idaapi py_ss_restore_callback(const char *err_msg, void *userdata)
{
  PYW_GIL_GET;

  // userdata is a tuple of ( func, args )
  // func and args are borrowed references from userdata
  PyObject *func = PyTuple_GET_ITEM(userdata, 0);
  PyObject *args = PyTuple_GET_ITEM(userdata, 1);

  // Create arguments tuple for python function
  PyObject *cb_args = Py_BuildValue("(sO)", err_msg, args);

  // Call the python function
  newref_t result(PyEval_CallObject(func, cb_args));

  // Free cb_args and userdata
  Py_DECREF(cb_args);
  Py_DECREF(userdata);

  // We cannot raise an exception in the callback, just print it.
  if ( result == NULL )
    PyErr_Print();
}
static PyObject *py_restore_database_snapshot(
        const snapshot_t *ss,
        PyObject *pyfunc_or_none,
        PyObject *pytuple_or_none)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();

  // If there is no callback, just call the function directly
  if ( pyfunc_or_none == Py_None )
    return PyBool_FromLong(restore_database_snapshot(ss, NULL, NULL));

  // Create a new tuple or increase reference to pytuple_or_none
  if ( pytuple_or_none == Py_None )
  {
    pytuple_or_none = PyTuple_New(0);
    if ( pytuple_or_none == NULL )
      return NULL;
  }
  else
  {
    Py_INCREF(pytuple_or_none);
  }

  // Create callback data tuple (use 'N' for pytuple_or_none, since its
  // reference has already been incremented)
  PyObject *cb_data = Py_BuildValue("(ON)", pyfunc_or_none, pytuple_or_none);

  bool b = restore_database_snapshot(ss, py_ss_restore_callback, (void *) cb_data);

  if ( !b )
    Py_DECREF(cb_data);

  return PyBool_FromLong(b);
}

//------------------------------------------------------------------------
/*
#<pydoc>

MFF_FAST = 0x0000
"""execute code as soon as possible
this mode is ok call ui related functions
that do not query the database."""

MFF_READ = 0x0001
"""execute code only when ida is idle and it is safe to query the database.
this mode is recommended only for code that does not modify the database.
(nb: ida may be in the middle of executing another user request, for example it may be waiting for him to enter values into a modal dialog box)"""

MFF_WRITE = 0x0002
"""execute code only when ida is idle and it is safe to modify the database. in particular, this flag will suspend execution if there is
a modal dialog box on the screen this mode can be used to call any ida api function. MFF_WRITE implies MFF_READ"""

MFF_NOWAIT = 0x0004
"""Do not wait for the request to be executed.
he caller should ensure that the request is not
destroyed until the execution completes.
if not, the request will be ignored.
the return code of execute_sync() is meaningless
in this case.
This flag can be used to delay the code execution
until the next UI loop run even from the main thread"""

def execute_sync(callable, reqf):
    """
    Executes a function in the context of the main thread.
    If the current thread not the main thread, then the call is queued and
    executed afterwards.

    @param callable: A python callable object, must return an integer value
    @param reqf: one of MFF_ flags
    @return: -1 or the return value of the callable
    """
    pass
#</pydoc>
*/
//------------------------------------------------------------------------
static int py_execute_sync(PyObject *py_callable, int reqf)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  int rc = -1;
  // Callable?
  if ( PyCallable_Check(py_callable) )
  {
    struct py_exec_request_t : exec_request_t
    {
      ref_t py_callable;
      virtual int idaapi execute()
      {
        PYW_GIL_GET;
        newref_t py_result(PyObject_CallFunctionObjArgs(py_callable.o, NULL));
        int ret = py_result == NULL || !IDAPyInt_Check(py_result.o)
                ? -1
                : IDAPyInt_AsLong(py_result.o);
        // if the requesting thread decided not to wait for the request to
        // complete, we have to self-destroy, nobody else will do it
        if ( (code & MFF_NOWAIT) != 0 )
          delete this;
        return ret;
      }
      py_exec_request_t(PyObject *pyc)
      {
        // No need to GIL-ensure here, since this is created
        // within the py_execute_sync() scope.
        py_callable = borref_t(pyc);
      }
      virtual ~py_exec_request_t()
      {
        // Need to GIL-ensure here, since this might be called
        // from the main thread.
        PYW_GIL_GET;
        py_callable = ref_t(); // Release callable
      }
    };
    py_exec_request_t *req = new py_exec_request_t(py_callable);

    // Release GIL before executing, or if this is running in the
    // non-main thread, this will wait on the req.sem, while the main
    // thread might be waiting for the GIL to be available.
    Py_BEGIN_ALLOW_THREADS;
    rc = execute_sync(*req, reqf);
    Py_END_ALLOW_THREADS;
    // destroy the request once it is finished. exception: NOWAIT requests
    // will be handled in the future, so do not destroy them yet!
    if ( (reqf & MFF_NOWAIT) == 0 )
      delete req;
  }
  return rc;
}

//------------------------------------------------------------------------
/*
#<pydoc>

def execute_ui_requests(callable_list):
    """
    Inserts a list of callables into the UI message processing queue.
    When the UI is ready it will call one callable.
    A callable can request to be called more than once if it returns True.

    @param callable_list: A list of python callable objects.
    @note: A callable should return True if it wants to be called more than once.
    @return: Boolean. False if the list contains a non callabale item
    """
    pass
#</pydoc>
*/
static bool py_execute_ui_requests(PyObject *py_list)
{
  struct py_ui_request_t: public ui_request_t
  {
  private:
    ref_vec_t py_callables;
    size_t py_callable_idx;

    static int idaapi s_py_list_walk_cb(
            const ref_t &py_item,
            Py_ssize_t index,
            void *ud)
    {
      PYW_GIL_CHECK_LOCKED_SCOPE();
      // Not callable? Terminate iteration
      if ( !PyCallable_Check(py_item.o) )
        return CIP_FAILED;

      // Append this callable and increment its reference
      py_ui_request_t *_this = (py_ui_request_t *)ud;
      _this->py_callables.push_back(py_item);
      return CIP_OK;
    }
  public:
    py_ui_request_t(): py_callable_idx(0)
    {
    }

    virtual bool idaapi run()
    {
      PYW_GIL_GET;

      // Get callable
      ref_t py_callable = py_callables.at(py_callable_idx);
      bool reschedule;
      newref_t py_result(PyObject_CallFunctionObjArgs(py_callable.o, NULL));
      reschedule = py_result != NULL && PyObject_IsTrue(py_result.o);

      // No rescheduling? Then advance to the next callable
      if ( !reschedule )
        ++py_callable_idx;

      // Reschedule this C callback only if there are more callables
      return py_callable_idx < py_callables.size();
    }

    // Walk the list and extract all callables
    bool init(PyObject *py_list)
    {
      Py_ssize_t count = pyvar_walk_list(
              py_list,
              s_py_list_walk_cb,
              this);
      return count > 0;
    }

    virtual idaapi ~py_ui_request_t()
    {
      PYW_GIL_GET;
      py_callables.clear();
    }
  };

  py_ui_request_t *req = new py_ui_request_t();
  if ( !req->init(py_list) )
  {
    delete req;
    return false;
  }
  execute_ui_requests(req, NULL);
  return true;
}

//------------------------------------------------------------------------
/*
#<pydoc>
def set_dock_pos(src, dest, orient, left = 0, top = 0, right = 0, bottom = 0):
    """
    Sets the dock orientation of a window relatively to another window.

    @param src: Source docking control
    @param dest: Destination docking control
    @param orient: One of DOR_XXXX constants
    @param left, top, right, bottom: These parameter if DOR_FLOATING is used, or if you want to specify the width of docked windows
    @return: Boolean

    Example:
        set_dock_pos('Structures', 'Enums', DOR_RIGHT) <- docks the Structures window to the right of Enums window
    """
    pass
#</pydoc>
*/

//------------------------------------------------------------------------
/*
#<pydoc>
def is_idaq():
    """
    Returns True or False depending if IDAPython is hosted by IDAQ
    """
#</pydoc>
*/


struct jobj_wrapper_t
{
private:
  const jobj_t *o;

public:
  jobj_wrapper_t(const jobj_t *_o) : o(_o) {}

  PyObject *get_dict()
  {
    newref_t json_module(PyImport_ImportModule("json"));
    if ( json_module != NULL )
    {
      borref_t json_globals(PyModule_GetDict(json_module.o));
      if ( json_globals != NULL )
      {
        borref_t json_loads(PyDict_GetItemString(json_globals.o, "loads"));
        if ( json_loads != NULL )
        {
          qstring clob;
          if ( serialize_json(&clob, o) )
          {
            newref_t dict(PyObject_CallFunction(json_loads.o, "s", clob.c_str()));
            if ( dict != NULL )
            {
              dict.incref();
              return dict.o;
            }
          }
        }
      }
    }
    Py_RETURN_NONE;
  }
};

//---------------------------------------------------------------------------
// UI hooks
//---------------------------------------------------------------------------
ssize_t idaapi UI_Callback(void *ud, int notification_code, va_list va);
/*
#<pydoc>
class UI_Hooks(object):
    def hook(self):
        """
        Creates an UI hook

        @return: Boolean true on success
        """
        pass

    def unhook(self):
        """
        Removes the UI hook
        @return: Boolean true on success
        """
        pass

    def preprocess_action(self, name):
        """
        IDA ui is about to handle a user action

        @param name: ui action name
                     (these names can be looked up in ida[tg]ui.cfg)
        @return: 0-ok, nonzero - a plugin has handled the action
        """
        pass

    def postprocess_action(self):
        """
        An ida ui action has been handled

        @return: Ignored
        """
        pass

    def saving(self):
        """
        The kernel is saving the database.

        @return: Ignored
        """
        pass

    def saved(self):
        """
        The kernel has saved the database.

        @return: Ignored
        """
        pass

    def get_ea_hint(self, ea):
        """
        The UI wants to display a simple hint for an address in the navigation band

        @param ea: The address
        @return: String with the hint or None
        """
        pass

    def updating_actions(self, ctx):
        """
        The UI is about to batch-update some actions.

        @param ctx: The action_update_ctx_t instance
        @return: Ignored
        """
        pass

    def updated_actions(self):
        """
        The UI is done updating actions.

        @return: Ignored
        """
        pass

    def populating_widget_popup(self, widget, popup):
        """
        The UI is populating the TWidget's popup menu.
        Now is a good time to call idaapi.attach_action_to_popup()

        @param widget: The widget
        @param popup: The popup menu.
        @return: Ignored
        """
        pass

    def finish_populating_widget_popup(self, widget, popup):
        """
        The UI is about to be done populating the TWidget's popup menu.
        Now is a good time to call idaapi.attach_action_to_popup()

        @param widget: The widget
        @param popup: The popup menu.
        @return: Ignored
        """
        pass

    def term(self):
        """
        IDA is terminated and the database is already closed.
        The UI may close its windows in this callback.
        """
        # if the user forgot to call unhook, do it for him
        self.unhook()

    def __term__(self):
        self.term()

#</pydoc>
*/
class UI_Hooks
{
public:
  virtual ~UI_Hooks()
  {
    unhook();
  }

  bool hook()
  {
    return idapython_hook_to_notification_point(HT_UI, UI_Callback, this);
  }

  bool unhook()
  {
    return idapython_unhook_from_notification_point(HT_UI, UI_Callback, this);
  }

  static ssize_t handle_get_ea_hint_output(PyObject *o, qstring *buf, ea_t)
  {
    ssize_t rc = 0;
    char *_buf;
    Py_ssize_t _len;
    if ( o != NULL && IDAPyStr_Check(o) && IDAPyBytes_AsMemAndSize(o, &_buf, &_len) != -1 )
    {
      buf->append(_buf, _len);
      rc = 1;
    }
    Py_XDECREF(o);
    return rc;
  }

  static ssize_t handle_hint_output(PyObject *o, qstring *hint, int *important_lines)
  {
    ssize_t rc = 0;
    if ( o != NULL && PyTuple_Check(o) && PyTuple_Size(o) == 2 )
    {
      borref_t el0(PyTuple_GetItem(o, 0));
      char *_buf;
      Py_ssize_t _len;
      if ( el0 != NULL
        && IDAPyStr_Check(el0.o)
        && IDAPyBytes_AsMemAndSize(el0.o, &_buf, &_len) != -1
        && _len > 0 )
      {
        borref_t el1(PyTuple_GetItem(o, 1));
        if ( el1 != NULL && IDAPyInt_Check(el1.o) )
        {
          long lns = IDAPyInt_AsLong(el1.o);
          if ( lns > 0 )
          {
            *important_lines = lns;
            hint->append(_buf, _len);
            rc = 1;
          }
        }
      }
    }
    return rc;
  }

  static ssize_t handle_hint_output(PyObject *o, qstring *hint, ea_t, int, int *important_lines)
  {
    return handle_hint_output(o, hint, important_lines);
  }

  static ssize_t handle_hint_output(PyObject *o, qstring *hint, TWidget *, place_t *, int *important_lines)
  {
    return handle_hint_output(o, hint, important_lines);
  }

  static jobj_wrapper_t wrap_widget_cfg(const jobj_t *jobj)
  {
    return jobj_wrapper_t(jobj);
  }

  static ssize_t handle_create_desktop_widget_output(PyObject *o)
  {
    if ( o == Py_None )
      return 0;
    TWidget *widget = NULL;
    int cvt = SWIG_ConvertPtr(o, (void **) &widget, SWIGTYPE_p_TWidget, 0);
    if ( !SWIG_IsOK(cvt) || widget == NULL )
      return 0;
    return ssize_t(widget);
  }

  // hookgenUI:methods
virtual void range() {}
virtual void idcstart() {}
virtual void idcstop() {}
virtual void suspend() {}
virtual void resume() {}
virtual void saving() {}
virtual void saved() {}
virtual void term() {}
virtual int debugger_menu_change(bool enable) {qnotused(enable); return 1;}
virtual void widget_visible(TWidget * widget) {qnotused(widget); }
virtual void widget_closing(TWidget * widget) {qnotused(widget); }
virtual void widget_invisible(TWidget * widget) {qnotused(widget); }
virtual PyObject * get_ea_hint(ea_t ea) {qnotused(ea); Py_RETURN_NONE;}
virtual PyObject * get_item_hint(ea_t ea, int max_lines) {qnotused(ea); qnotused(max_lines); Py_RETURN_NONE;}
virtual PyObject * get_custom_viewer_hint(TWidget* viewer, place_t * place) {qnotused(viewer); qnotused(place); Py_RETURN_NONE;}
virtual void database_inited(int is_new_database, const char * idc_script) {qnotused(is_new_database); qnotused(idc_script); }
virtual void ready_to_run() {}
virtual void preprocess_action(const char * name) {qnotused(name); }
virtual void postprocess_action() {}
virtual void get_chooser_item_attrs(const chooser_base_t * chooser, size_t n, chooser_item_attrs_t * attrs) {qnotused(chooser); qnotused(n); qnotused(attrs); }
virtual void updating_actions(action_update_ctx_t * ctx) {qnotused(ctx); }
virtual void updated_actions() {}
virtual void populating_widget_popup(TWidget * widget, TPopupMenu * popup_handle, const action_activation_ctx_t * ctx=NULL) {qnotused(widget); qnotused(popup_handle); qnotused(ctx); }
virtual void finish_populating_widget_popup(TWidget * widget, TPopupMenu * popup_handle, const action_activation_ctx_t * ctx=NULL) {qnotused(widget); qnotused(popup_handle); qnotused(ctx); }
virtual void plugin_loaded(const plugin_info_t * plugin_info) {qnotused(plugin_info); }
virtual void plugin_unloading(const plugin_info_t * plugin_info) {qnotused(plugin_info); }
virtual void current_widget_changed(TWidget * widget, TWidget * prev_widget) {qnotused(widget); qnotused(prev_widget); }
virtual void screen_ea_changed(ea_t ea, ea_t prev_ea) {qnotused(ea); qnotused(prev_ea); }
virtual PyObject * create_desktop_widget(const char * title, jobj_wrapper_t cfg) {qnotused(title); qnotused(cfg); Py_RETURN_NONE;}
};

//-------------------------------------------------------------------------
bool py_register_action(action_desc_t *desc)
{
  desc->flags |= ADF_OWN_HANDLER;
  bool ok = register_action(*desc);
  if ( ok )
  {
    // Let's set this to NULL, so when the wrapping Python action_desc_t
    // instance is deleted, it doesn't try to delete the handler (See
    // kernwin.i's action_desc_t::~action_desc_t()).
    desc->handler = NULL;
  }
  return ok;
}

//-------------------------------------------------------------------------
PyObject *py_get_registered_actions()
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  qstrvec_t actions;
  get_registered_actions(&actions);
  return qstrvec2pylist(actions);
}

//-------------------------------------------------------------------------
/*
#<pydoc>
def py_attach_dynamic_action_to_popup(
        widget,
        popup_handle,
        desc,
        popuppath = None,
        flags = 0)
    """
    Create & insert an action into the widget's popup menu
    (::ui_attach_dynamic_action_to_popup).
    Note: The action description in the 'desc' parameter is modified by
          this call so you should prepare a new description for each call.
    For example:
        desc = idaapi.action_desc_t(None, 'Dynamic popup action', Handler())
        idaapi.attach_dynamic_action_to_popup(form, popup, desc)

    @param widget:       target widget
    @param popup_handle: target popup
    @param desc:         action description of type action_desc_t
    @param popuppath:    can be None
    @param flags:        a combination of SETMENU_ constants
    @return: success
    """
    pass
#</pydoc>
*/
bool py_attach_dynamic_action_to_popup(
        TWidget *widget,
        TPopupMenu *popup_handle,
        action_desc_t *desc,
        const char *popuppath = NULL,
        int flags = 0)
{
  bool ok = attach_dynamic_action_to_popup(
          widget, popup_handle, *desc, popuppath, flags);
  if ( ok )
    // Set the handler to null, so the desc won't destroy
    // it, as it noticed ownership was taken by IDA.
    // In addition, we don't need to register into the
    // 'py_action_handlers', because IDA will destroy the
    // handler as soon as the popup menu is closed.
    desc->handler = NULL;
  return ok;
}

// This is similar to a twinline_t, with improved memory management:
// twinline_t has a dummy destructor, that performs no cleanup.
struct disasm_line_t
{
  disasm_line_t() : at(NULL) {}
  ~disasm_line_t() { qfree(at); }
  disasm_line_t(const disasm_line_t &other) { *this = other; }
  disasm_line_t &operator=(const disasm_line_t &other)
  {
    qfree(at);
    at = other.at == NULL ? NULL : other.at->clone();
    return *this;
  }
  place_t *at;
  qstring line;
  color_t prefix_color;
  bgcolor_t bg_color;
  bool is_default;
};
DECLARE_TYPE_AS_MOVABLE(disasm_line_t);
typedef qvector<disasm_line_t> disasm_text_t;

//-------------------------------------------------------------------------
void py_gen_disasm_text(disasm_text_t &text, ea_t ea1, ea_t ea2, bool truncate_lines)
{
  text_t _text;
  gen_disasm_text(_text, ea1, ea2, truncate_lines);
  for ( size_t i = 0, n = _text.size(); i < n; ++i )
  {
    twinline_t &tl = _text[i];
    disasm_line_t &dl = text.push_back();
    dl.at = tl.at;           // Transfer ownership
    dl.line.swap(tl.line);   // Transfer ownership
  }
}

//-------------------------------------------------------------------------
/*
#<pydoc>
def set_nav_colorizer(callback):
    """
    Set a new colorizer for the navigation band.

    The 'callback' is a function of 2 arguments:
       - ea (the EA to colorize for)
       - nbytes (the number of bytes at that EA)
    and must return a 'long' value.

    The previous colorizer is returned, allowing
    the new 'callback' to use 'call_nav_colorizer'
    with it.

    Note that the previous colorizer is returned
    only the first time set_nav_colorizer() is called:
    due to the way the colorizers API is defined in C,
    it is impossible to chain more than 2 colorizers
    in IDAPython: the original, IDA-provided colorizer,
    and a user-provided one.

    Example: colorizer inverting the color provided by the IDA colorizer:
        def my_colorizer(ea, nbytes):
            global ida_colorizer
            orig = idaapi.call_nav_colorizer(ida_colorizer, ea, nbytes)
            return long(~orig)

        ida_colorizer = idaapi.set_nav_colorizer(my_colorizer)
    """
    pass
#</pydoc>
*/
nav_colorizer_t *py_set_nav_colorizer(PyObject *new_py_colorizer)
{
  static ref_t py_colorizer;
  struct ida_local lambda_t
  {
    static uint32 idaapi call_py_colorizer(ea_t ea, asize_t nbytes)
    {
      PYW_GIL_GET;

      if ( py_colorizer == NULL ) // Shouldn't happen.
        return 0;
      newref_t pyres = PyObject_CallFunction(
              py_colorizer.o, "KK",
              (unsigned long long) ea,
              (unsigned long long) nbytes);
      PyW_ShowCbErr("nav_colorizer");
      if ( pyres.o == NULL )
        return 0;
      if ( !PyLong_Check(pyres.o) )
      {
        static bool warned = false;
        if ( !warned )
        {
          msg("WARNING: set_nav_colorizer() callback must return a 'long'.\n");
          warned = true;
        }
        return 0;
      }
      return PyLong_AsLong(pyres.o);
    }
  };

  // Always perform the call to set_nav_colorizer(): that has side-effects
  // (e.g., updating the legend.)
  bool first_install = py_colorizer == NULL;
  py_colorizer = borref_t(new_py_colorizer);
  nav_colorizer_t *prev = set_nav_colorizer(lambda_t::call_py_colorizer);
  return first_install ? prev : NULL;
}

//-------------------------------------------------------------------------
/*
#<pydoc>
def call_nav_colorizer(colorizer, ea, nbytes):
    """
    To be used with the IDA-provided colorizer, that is
    returned as result of the first call to set_nav_colorizer().

    This is a trivial trampoline, so that SWIG can generate a
    wrapper that will do the types checking.
    """
    pass
#</pydoc>
*/
uint32 py_call_nav_colorizer(
        nav_colorizer_t *col,
        ea_t ea,
        asize_t nbytes)
{
  return col(ea, nbytes);
}

PyObject *py_msg_get_lines(int count=-1)
{
  qstrvec_t lines;
  msg_get_lines(&lines, count);
  return qstrvec2pylist(lines);
}

/*
#<pydoc>
def msg(message):
    """
    Display an UTF-8 string in the message window

    The result of the stringification of the arguments
    will be treated as an UTF-8 string.

    @param message: message to print (formatting is done in Python)

    This function can be used to debug IDAPython scripts
    """
    pass

def warning(message):
    """
    Display a message in a message box

    @param message: message to print (formatting is done in Python)

    This function can be used to debug IDAPython scripts
    The user will be able to hide messages if they appear twice in a row on
    the screen
    """
    pass

def error(format):
    """
    Display a fatal message in a message box and quit IDA

    @param format: message to print
    """
    pass
#</pydoc>
*/

static TWidget *TWidget__from_ptrval__(size_t ptrval)
{
  return (TWidget *) ptrval;
}

//</inline(py_kernwin)>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


//<code(py_kernwin)>
//---------------------------------------------------------------------------
ssize_t idaapi UI_Callback(void *ud, int notification_code, va_list va)
{
  // This hook gets called from the kernel. Ensure we hold the GIL.
  PYW_GIL_GET;
  UI_Hooks *proxy = (UI_Hooks *)ud;
  ssize_t ret = 0;
  try
  {
    switch ( notification_code )
    {
      // hookgenUI:notifications
case ui_range:
{
  proxy->range();
}
break;

case ui_idcstart:
{
  proxy->idcstart();
}
break;

case ui_idcstop:
{
  proxy->idcstop();
}
break;

case ui_suspend:
{
  proxy->suspend();
}
break;

case ui_resume:
{
  proxy->resume();
}
break;

case ui_saving:
{
  proxy->saving();
}
break;

case ui_saved:
{
  proxy->saved();
}
break;

case ui_term:
{
  proxy->term();
}
break;

case ui_debugger_menu_change:
{
  bool enable = bool(va_arg(va, int));
  ret = proxy->debugger_menu_change(enable);
}
break;

case ui_widget_visible:
{
  TWidget * widget = va_arg(va, TWidget *);
  proxy->widget_visible(widget);
}
break;

case ui_widget_closing:
{
  TWidget * widget = va_arg(va, TWidget *);
  proxy->widget_closing(widget);
}
break;

case ui_widget_invisible:
{
  TWidget * widget = va_arg(va, TWidget *);
  proxy->widget_invisible(widget);
}
break;

case ui_get_ea_hint:
{
  qstring * buf = va_arg(va, qstring *);
  ea_t ea = va_arg(va, ea_t);
  PyObject * _tmp = proxy->get_ea_hint(ea);
  ret = UI_Hooks::handle_get_ea_hint_output(_tmp, buf, ea);
}
break;

case ui_get_item_hint:
{
  qstring * hint = va_arg(va, qstring *);
  ea_t ea = va_arg(va, ea_t);
  int max_lines = va_arg(va, int);
  int * important_lines = va_arg(va, int *);
  PyObject * _tmp = proxy->get_item_hint(ea, max_lines);
  ret = UI_Hooks::handle_hint_output(_tmp, hint, ea, max_lines, important_lines);
}
break;

case ui_get_custom_viewer_hint:
{
  qstring * hint = va_arg(va, qstring *);
  TWidget* viewer = va_arg(va, TWidget*);
  place_t * place = va_arg(va, place_t *);
  int * important_lines = va_arg(va, int *);
  PyObject * _tmp = proxy->get_custom_viewer_hint(viewer, place);
  ret = UI_Hooks::handle_hint_output(_tmp, hint, viewer, place, important_lines);
}
break;

case ui_database_inited:
{
  int is_new_database = va_arg(va, int);
  const char * idc_script = va_arg(va, const char *);
  proxy->database_inited(is_new_database, idc_script);
}
break;

case ui_ready_to_run:
{
  proxy->ready_to_run();
}
break;

case ui_preprocess_action:
{
  const char * name = va_arg(va, const char *);
  proxy->preprocess_action(name);
}
break;

case ui_postprocess_action:
{
  proxy->postprocess_action();
}
break;

case ui_get_chooser_item_attrs:
{
  const chooser_base_t * chooser = va_arg(va, const chooser_base_t *);
  size_t n = va_arg(va, size_t);
  chooser_item_attrs_t * attrs = va_arg(va, chooser_item_attrs_t *);
  proxy->get_chooser_item_attrs(chooser, n, attrs);
}
break;

case ui_updating_actions:
{
  action_update_ctx_t * ctx = va_arg(va, action_update_ctx_t *);
  proxy->updating_actions(ctx);
}
break;

case ui_updated_actions:
{
  proxy->updated_actions();
}
break;

case ui_populating_widget_popup:
{
  TWidget * widget = va_arg(va, TWidget *);
  TPopupMenu * popup_handle = va_arg(va, TPopupMenu *);
  const action_activation_ctx_t * ctx = va_arg(va, const action_activation_ctx_t *);
  proxy->populating_widget_popup(widget, popup_handle, ctx);
}
break;

case ui_finish_populating_widget_popup:
{
  TWidget * widget = va_arg(va, TWidget *);
  TPopupMenu * popup_handle = va_arg(va, TPopupMenu *);
  const action_activation_ctx_t * ctx = va_arg(va, const action_activation_ctx_t *);
  proxy->finish_populating_widget_popup(widget, popup_handle, ctx);
}
break;

case ui_plugin_loaded:
{
  const plugin_info_t * plugin_info = va_arg(va, const plugin_info_t *);
  proxy->plugin_loaded(plugin_info);
}
break;

case ui_plugin_unloading:
{
  const plugin_info_t * plugin_info = va_arg(va, const plugin_info_t *);
  proxy->plugin_unloading(plugin_info);
}
break;

case ui_current_widget_changed:
{
  TWidget * widget = va_arg(va, TWidget *);
  TWidget * prev_widget = va_arg(va, TWidget *);
  proxy->current_widget_changed(widget, prev_widget);
}
break;

case ui_screen_ea_changed:
{
  ea_t ea = va_arg(va, ea_t);
  ea_t prev_ea = va_arg(va, ea_t);
  proxy->screen_ea_changed(ea, prev_ea);
}
break;

case ui_create_desktop_widget:
{
  const char * title = va_arg(va, const char *);
  const jobj_t * cfg = va_arg(va, const jobj_t *);
  PyObject * _tmp = proxy->create_desktop_widget(title, UI_Hooks::wrap_widget_cfg(cfg));
  ret = UI_Hooks::handle_create_desktop_widget_output(_tmp);
}
break;

    }
  }
  catch (Swig::DirectorException &e)
  {
    msg("Exception in UI Hook function: %s\n", e.getMessage());
    PYW_GIL_CHECK_LOCKED_SCOPE();
    if ( PyErr_Occurred() )
      PyErr_Print();
  }
  return ret;
}

//------------------------------------------------------------------------
bool idaapi py_menu_item_callback(void *userdata)
{
  PYW_GIL_GET;

  // userdata is a tuple of ( func, args )
  // func and args are borrowed references from userdata
  PyObject *func = PyTuple_GET_ITEM(userdata, 0);
  PyObject *args = PyTuple_GET_ITEM(userdata, 1);

  // Call the python function
  newref_t result(PyEval_CallObject(func, args));

  // We cannot raise an exception in the callback, just print it.
  if ( result == NULL )
  {
    PyErr_Print();
    return false;
  }

  return PyObject_IsTrue(result.o) != 0;
}

/*
#<pydoc>
def get_navband_pixel(ea):
    """
    Maps an address, onto a pixel coordinate within the navband

    @param ea: The address to map
    @return: a list [pixel, is_vertical]
    """
    pass
#</pydoc>
*/

//</code(py_kernwin)>


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif

SWIGINTERN idaplace_t *place_t_as_idaplace_t(place_t *p){ return (idaplace_t *) p; }
SWIGINTERN enumplace_t *place_t_as_enumplace_t(place_t *p){ return (enumplace_t *) p; }
SWIGINTERN structplace_t *place_t_as_structplace_t(place_t *p){ return (structplace_t *) p; }
SWIGINTERN simpleline_place_t *place_t_as_simpleline_place_t(place_t *p){ return (simpleline_place_t *) p; }
SWIGINTERN PyObject *place_t_py_generate(place_t *self,void *ud,int maxsize){
    qstrvec_t lines;
    int deflnnum = 0;
    color_t pfx_color = 0;
    bgcolor_t bgcolor = bgcolor_t(-1);
    int generated = self->generate(&lines, &deflnnum, &pfx_color, &bgcolor, ud, maxsize);
    PyObject *tuple = PyTuple_New(4);
    PyTuple_SetItem(tuple, 0, qstrvec2pylist(lines));
    PyTuple_SetItem(tuple, 1, PyLong_FromLong(deflnnum));
    PyTuple_SetItem(tuple, 2, PyLong_FromLong(uchar(pfx_color)));
    PyTuple_SetItem(tuple, 3, PyLong_FromLong(bgcolor));
    return tuple;
  }

SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN TWidget *action_ctx_base_t__get_form(action_ctx_base_t const *self){ return self->widget; }
SWIGINTERN twidget_type_t action_ctx_base_t__get_form_type(action_ctx_base_t const *self){ return self->widget_type; }
SWIGINTERN qstring action_ctx_base_t__get_form_title(action_ctx_base_t const *self){ return self->widget_title; }
SWIGINTERN action_desc_t *new_action_desc_t(char const *name,char const *label,PyObject *handler,char const *shortcut=NULL,char const *tooltip=NULL,int icon=-1,int flags=0){
    action_desc_t *ad = new action_desc_t();

    ad->name = name == NULL ? NULL : qstrdup(name);
    ad->label = label == NULL ? NULL : qstrdup(label);
    ad->shortcut = shortcut == NULL ? NULL : qstrdup(shortcut);
    ad->tooltip = tooltip == NULL ? NULL : qstrdup(tooltip);

    ad->icon = icon;
    ad->handler = new py_action_handler_t(handler);
    ad->flags = flags | 0x1;
    ad->owner = &PLUGIN;
    return ad;
  }
SWIGINTERN void delete_action_desc_t(action_desc_t *self){
    if ( self->handler != NULL ) // Ownership not taken?
      delete self->handler;

    qfree((char *) self->name);
    qfree((char *) self->label);
    qfree((char *) self->shortcut);
    qfree((char *) self->tooltip);

    delete self;
  }

SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}

SWIGINTERN size_t qvector_Sl_disasm_line_t_Sg____len__(qvector< disasm_line_t > const *self){ return self->size(); }
SWIGINTERN disasm_line_t const &qvector_Sl_disasm_line_t_Sg____getitem__(qvector< disasm_line_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_disasm_line_t_Sg____setitem__(qvector< disasm_line_t > *self,size_t i,disasm_line_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }

//<code(py_kernwin_choose)>

//------------------------------------------------------------------------
// Helper functions
class py_choose_t;
typedef std::map<PyObject *, py_choose_t *> py2c_choose_map_t;
static py2c_choose_map_t choosers;

py_choose_t *choose_find_instance(PyObject *self)
{
  py2c_choose_map_t::iterator it = choosers.find(self);
  return it == choosers.end() ? NULL : it->second;
}

void choose_add_instance(PyObject *self, py_choose_t *pych)
{
  choosers[self] = pych;
}

void choose_del_instance(PyObject *self)
{
  py2c_choose_map_t::iterator it = choosers.find(self);
  if ( it != choosers.end() )
    choosers.erase(it);
}

// set `prm` to the integer value of the `name` attribute
template <class T>
static void py_get_int(PyObject *self, T *prm, const char *name)
{
  ref_t attr(PyW_TryGetAttrString(self, name));
  if ( attr != NULL && attr.o != Py_None )
    *prm = T(IDAPyInt_AsLong(attr.o));
}

//------------------------------------------------------------------------
// Python's chooser class
class py_choose_t
{
public:
  // Python object link
  PyObject *self;

  // the chooser object will be created in the create() method
  chooser_base_t *chobj;

  enum
  {
    CHOOSE_HAVE_INIT      = 0x0001,
    CHOOSE_HAVE_GETICON   = 0x0002,
    CHOOSE_HAVE_GETATTR   = 0x0004,
    CHOOSE_HAVE_INS       = 0x0008,
    CHOOSE_HAVE_DEL       = 0x0010,
    CHOOSE_HAVE_EDIT      = 0x0020,
    CHOOSE_HAVE_ENTER     = 0x0040,
    CHOOSE_HAVE_REFRESH   = 0x0080,
    CHOOSE_HAVE_SELECT    = 0x0100,
    CHOOSE_HAVE_ONCLOSE   = 0x0200,
    CHOOSE_IS_EMBEDDED    = 0x0400,
  };

  // Callback flags (to tell which callback exists and which not)
  // One of CHOOSE_xxxx
  uint32 cb_flags;

  // Chooser title
  qstring title;

  // Column widths
  intvec_t widths;

  // Chooser headers
  qstrvec_t header_strings;
  qvector<const char *> header;

public:
  py_choose_t(PyObject *self_) : self(self_), chobj(NULL), cb_flags(0)
  {
    PYW_GIL_GET;
    choose_add_instance(self, this);

    // Increase object reference
    Py_INCREF(self);
  }

  // if the chooser object was created it will delete linked Python's
  // chooser.
  // if it was not created (e.g. because of the lack of a mandatory
  // callback) it will be deleted in choose_close().
  ~py_choose_t()
  {
    PYW_GIL_GET;
    // Remove from list
    choose_del_instance(self);

    Py_XDECREF(self);
  }

  // common callbacks
  bool idaapi init()
  {
    if ( (cb_flags & CHOOSE_HAVE_INIT) == 0 )
      return chobj->chooser_base_t::init();
    PYW_GIL_GET;
    pycall_res_t pyres(PyObject_CallMethod(self, (char *)S_ON_INIT, NULL));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chobj->chooser_base_t::init();
    return bool(IDAPyInt_AsLong(pyres.result.o));
  }

  size_t idaapi get_count() const
  {
    PYW_GIL_GET;
    pycall_res_t pyres(PyObject_CallMethod(self, (char *)S_ON_GET_SIZE, NULL));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return 0;

    return size_t(IDAPyInt_AsLong(pyres.result.o));
  }

  void idaapi get_row(
          qstrvec_t *cols,
          int *icon_,
          chooser_item_attrs_t *attrs,
          size_t n) const
  {
    PYW_GIL_GET;

    // Call Python
    PYW_GIL_CHECK_LOCKED_SCOPE();
    pycall_res_t list(
            PyObject_CallMethod(
                    self, (char *)S_ON_GET_LINE,
                    "i", int(n)));
    if ( list.result != NULL )
    {
      // Go over the List returned by Python and convert to C strings
      for ( int i = chobj->columns - 1; i >= 0; --i )
      {
        borref_t item(PyList_GetItem(list.result.o, Py_ssize_t(i)));
        if ( item == NULL )
          continue;

        const char *str = IDAPyBytes_AsString(item.o);
        if ( str != NULL )
          (*cols)[i] = str;
      }
    }

    *icon_ = chobj->icon;
    if ( (cb_flags & CHOOSE_HAVE_GETICON) != 0 )
    {
      pycall_res_t pyres(
              PyObject_CallMethod(
                      self, (char *)S_ON_GET_ICON,
                      "i", int(n)));
      if ( pyres.result != NULL )
        *icon_ = IDAPyInt_AsLong(pyres.result.o);
    }

    if ( (cb_flags & CHOOSE_HAVE_GETATTR) != 0 )
    {
      pycall_res_t pyres(
              PyObject_CallMethod(
                      self, (char *)S_ON_GET_LINE_ATTR,
                      "i", int(n)));
      if ( pyres.result != NULL && PyList_Check(pyres.result.o) )
      {
        PyObject *item;
        if ( (item = PyList_GetItem(pyres.result.o, 0)) != NULL )
          attrs->color = IDAPyInt_AsLong(item);
        if ( (item = PyList_GetItem(pyres.result.o, 1)) != NULL )
          attrs->flags = IDAPyInt_AsLong(item);
      }
    }
  }

  void idaapi closed()
  {
    if ( (cb_flags & CHOOSE_HAVE_ONCLOSE) == 0 )
    {
      chobj->chooser_base_t::closed();
      return;
    }
    PYW_GIL_GET;
    pycall_res_t pyres(
            PyObject_CallMethod(self, (char *)S_ON_CLOSE, NULL));
    // delete UI hook
    PyObject_DelAttrString(self, "ui_hooks_trampoline");
  }

public:
  static py_choose_t *find_chooser(const char *title)
  {
    return static_cast<py_choose_t *>(::get_chooser_obj(title));
  }

  void close()
  {
    // will trigger closed()
    close_chooser(chobj->title);
  }

  bool activate()
  {
    TWidget *widget = get_widget();
    if ( widget == NULL )
      return false;

    activate_widget(widget, true);
    return true;
  }

  TWidget *get_widget()
  {
    return find_widget(chobj->title);
  }

  // Create a chooser.
  // If it doesn't detect the "embedded" attribute, then the chooser window
  // is created and displayed.
  // See ::choose() for the returned values.
  // \retval NO_ATTR  some mandatory attribute is missing
  int create();

  inline PyObject *get_self()
  {
    return self;
  }

  void do_refresh()
  {
    refresh_chooser(chobj->title);
  }

  chooser_base_t *get_chobj() const
  {
    return chobj;
  }

  bool is_valid() const
  {
    return chobj != NULL;
  }

  bool is_embedded() const
  {
    return (cb_flags & CHOOSE_IS_EMBEDDED) != 0;
  }
};

//------------------------------------------------------------------------
// link from the chooser object to the Python's chooser
struct py_chooser_link_t
{
  py_choose_t *link;  // link to Python's chooser
  py_chooser_link_t(py_choose_t *pych) : link(pych) {}
  ~py_chooser_link_t() { delete link; }
};

//------------------------------------------------------------------------
// we do not use virtual subclasses so we use #define for common code
#define DEFINE_COMMON_CALLBACKS                                         \
  virtual void *get_chooser_obj() ida_override { return link; }         \
  virtual bool idaapi init() ida_override { return link->init(); }      \
  virtual size_t idaapi get_count() const ida_override                  \
  {                                                                     \
    return link->get_count();                                           \
  }                                                                     \
  virtual void idaapi get_row(                                          \
          qstrvec_t *cols,                                              \
          int *icon_,                                                   \
          chooser_item_attrs_t *attrs,                                  \
          size_t n) const ida_override                                  \
  {                                                                     \
    link->get_row(cols, icon_, attrs, n);                               \
  }                                                                     \
  virtual void idaapi closed() ida_override { link->closed(); }

//------------------------------------------------------------------------
// chooser class without multi-selection
class py_chooser_single_t
  : public py_chooser_link_t,
    public chooser_t
{
public:
  py_chooser_single_t(
          py_choose_t *pych,
          uint32 flags_ = 0,
          int columns_ = 0,
          const int *widths_ = NULL,
          const char *const *header_ = NULL,
          const char *title_ = NULL)
    : py_chooser_link_t(pych),
      chooser_t(flags_, columns_, widths_, header_, title_) {}

  DEFINE_COMMON_CALLBACKS

  virtual cbret_t idaapi ins(ssize_t n) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_INS) == 0 )
      return chooser_t::ins(n);
    PYW_GIL_GET;
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_INSERT_LINE,
                    "i", int(n)));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_t::ins(n);
    return py_as_cbret(pyres.result.o);
  }

  virtual cbret_t idaapi del(size_t n) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_DEL) == 0 )
      return chooser_t::del(n);
    PYW_GIL_GET;
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_DELETE_LINE,
                    "i", int(n)));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_t::del(n);
    return py_as_cbret(pyres.result.o);
  }

  virtual cbret_t idaapi edit(size_t n) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_EDIT) == 0 )
      return chooser_t::edit(n);
    PYW_GIL_GET;
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_EDIT_LINE,
                    "i", int(n)));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_t::edit(n);
    return py_as_cbret(pyres.result.o);
  }

  virtual cbret_t idaapi enter(size_t n) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_ENTER) == 0 )
      return chooser_t::enter(n);
    PYW_GIL_GET;
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_SELECT_LINE,
                    "i", int(n)));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_t::enter(n);
    return py_as_cbret(pyres.result.o);
  }

  virtual cbret_t idaapi refresh(ssize_t n) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_REFRESH) == 0 )
      return chooser_t::refresh(n);
    PYW_GIL_GET;
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_REFRESH,
                    "i", int(n)));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_t::refresh(n);
    return py_as_cbret(pyres.result.o);
  }

  virtual void idaapi select(ssize_t n) const ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_SELECT) == 0 )
    {
      chooser_t::select(n);
      return;
    }
    PYW_GIL_GET;
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_SELECTION_CHANGE,
                    "i", int(n)));
  }

protected:
  // [ changed, idx ]
  static cbret_t py_as_cbret(PyObject *py_ret)
  {
    cbret_t ret;
    if ( PySequence_Check(py_ret) )
    {
      {
        newref_t item(PySequence_GetItem(py_ret, 0));
        if ( item.o != NULL && IDAPyInt_Check(item.o) )
          ret.changed = cbres_t(IDAPyInt_AsLong(item.o));
      }
      if ( ret.changed != NOTHING_CHANGED )
      {
        newref_t item(PySequence_GetItem(py_ret, 1));
        if ( item.o != NULL && IDAPyInt_Check(item.o) )
          ret.idx = ssize_t(PyInt_AsSsize_t(item.o));
      }
    }
    return ret;
  }
};

//------------------------------------------------------------------------
// chooser class with multi-selection
class py_chooser_multi_t
  : public py_chooser_link_t,
    public chooser_multi_t
{
public:
  py_chooser_multi_t(
          py_choose_t *pych,
          uint32 flags_ = 0,
          int columns_ = 0,
          const int *widths_ = NULL,
          const char *const *header_ = NULL,
          const char *title_ = NULL)
    : py_chooser_link_t(pych),
      chooser_multi_t(flags_, columns_, widths_, header_, title_) {}

  DEFINE_COMMON_CALLBACKS

  virtual cbres_t idaapi ins(sizevec_t *sel) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_INS) == 0 )
      return chooser_multi_t::ins(sel);
    PYW_GIL_GET;
    ref_t py_list(PyW_SizeVecToPyList(*sel));
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_INSERT_LINE,
                    "O", py_list.o));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_multi_t::ins(sel);
    return py_as_cbres_sel(sel, pyres.result.o);
  }

  virtual cbres_t idaapi del(sizevec_t *sel) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_DEL) == 0 )
      return chooser_multi_t::del(sel);
    PYW_GIL_GET;
    ref_t py_list(PyW_SizeVecToPyList(*sel));
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_DELETE_LINE,
                    "O", py_list.o));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_multi_t::del(sel);
    return py_as_cbres_sel(sel, pyres.result.o);
  }

  virtual cbres_t idaapi edit(sizevec_t *sel) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_EDIT) == 0 )
      return chooser_multi_t::edit(sel);
    PYW_GIL_GET;
    ref_t py_list(PyW_SizeVecToPyList(*sel));
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_EDIT_LINE,
                    "O", py_list.o));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_multi_t::edit(sel);
    return py_as_cbres_sel(sel, pyres.result.o);
  }

  virtual cbres_t idaapi enter(sizevec_t *sel) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_ENTER) == 0 )
      return chooser_multi_t::enter(sel);
    PYW_GIL_GET;
    ref_t py_list(PyW_SizeVecToPyList(*sel));
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_SELECT_LINE,
                    "O", py_list.o));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_multi_t::enter(sel);
    return py_as_cbres_sel(sel, pyres.result.o);
  }

  virtual cbres_t idaapi refresh(sizevec_t *sel) ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_REFRESH) == 0 )
      return chooser_multi_t::refresh(sel);
    PYW_GIL_GET;
    ref_t py_list(PyW_SizeVecToPyList(*sel));
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_REFRESH,
                    "O", py_list.o));
    if ( pyres.result == NULL || pyres.result.o == Py_None )
      return chooser_multi_t::refresh(sel);
    return py_as_cbres_sel(sel, pyres.result.o);
  }

  virtual void idaapi select(const sizevec_t &sel) const ida_override
  {
    if ( (link->cb_flags & py_choose_t::CHOOSE_HAVE_SELECT) == 0 )
    {
      chooser_multi_t::select(sel);
      return;
    }
    PYW_GIL_GET;
    ref_t py_list(PyW_SizeVecToPyList(sel));
    pycall_res_t pyres(
            PyObject_CallMethod(
                    link->self, (char *)S_ON_SELECTION_CHANGE,
                    "O", py_list.o));
  }

protected:
  // [ changed, idx, ... ]
  static cbres_t py_as_cbres_sel(sizevec_t *sel, PyObject *py_ret)
  {
    // this is an easy but not an optimal way of converting
    if ( !PySequence_Check(py_ret)
      || PyW_PyListToSizeVec(sel, py_ret) <= 0 )
    {
      sel->clear();
      return NOTHING_CHANGED;
    }
    cbres_t res = cbres_t(sel->front());
    sel->erase(sel->begin());
    return res;
  }
};

//------------------------------------------------------------------------
int py_choose_t::create()
{
  PYW_GIL_CHECK_LOCKED_SCOPE();

  // Get flags
  uint32 flags;
  ref_t flags_attr(PyW_TryGetAttrString(self, S_FLAGS));
  if ( flags_attr == NULL )
    return chooser_base_t::NO_ATTR;
  if ( IDAPyInt_Check(flags_attr.o) )
    flags = uint32(IDAPyInt_AsLong(flags_attr.o));
  // instruct TChooser destructor to delete this chooser when window
  // closes
  flags &= ~CH_KEEP;

  // Get the title
  if ( !PyW_GetStringAttr(self, S_TITLE, &title) )
    return chooser_base_t::NO_ATTR;

  // Get columns
  ref_t cols_attr(PyW_TryGetAttrString(self, "cols"));
  if ( cols_attr == NULL )
    return chooser_base_t::NO_ATTR;

  // Get col count
  int columns = int(PyList_Size(cols_attr.o));
  if ( columns < 1 )
    return chooser_base_t::NO_ATTR;

  // Get columns caption and widthes
  header_strings.resize(columns);
  header.resize(columns);
  widths.resize(columns);
  for ( int i = 0; i < columns; ++i )
  {
    // get list item: [name, width]
    borref_t list(PyList_GetItem(cols_attr.o, i));
    borref_t v(PyList_GetItem(list.o, 0));

    // Extract string
    const char *str = v == NULL ? "" : IDAPyBytes_AsString(v.o);
    header_strings[i] = str;
    header[i] = header_strings[i].c_str();

    // Extract width
    int width;
    borref_t v2(PyList_GetItem(list.o, 1));
    // No width? Guess width from column title
    if ( v2 == NULL )
      width = strlen(str);
    else
      width = IDAPyInt_AsLong(v2.o);
    widths[i] = width;
  }

  // Check what callbacks we have
  static const struct
  {
    const char *name;
    unsigned int have; // 0 = mandatory callback
    int chooser_t_flags;
  } callbacks[] =
  {
    { S_ON_INIT,             CHOOSE_HAVE_INIT,    0 },
    { S_ON_GET_SIZE,         0 },
    { S_ON_GET_LINE,         0 },
    { S_ON_GET_ICON,         CHOOSE_HAVE_GETICON, 0 },
    { S_ON_GET_LINE_ATTR,    CHOOSE_HAVE_GETATTR, 0 },
    { S_ON_INSERT_LINE,      CHOOSE_HAVE_INS,     CH_CAN_INS },
    { S_ON_DELETE_LINE,      CHOOSE_HAVE_DEL,     CH_CAN_DEL },
    { S_ON_EDIT_LINE,        CHOOSE_HAVE_EDIT,    CH_CAN_EDIT },
    { S_ON_SELECT_LINE,      CHOOSE_HAVE_ENTER,   0 },
    { S_ON_REFRESH,          CHOOSE_HAVE_REFRESH, CH_CAN_REFRESH },
    { S_ON_SELECTION_CHANGE, CHOOSE_HAVE_SELECT,  0 },
    { S_ON_CLOSE,            CHOOSE_HAVE_ONCLOSE, 0 },
  };
  // we can forbid some callbacks explicitly
  uint32 forbidden_cb = 0;
  ref_t forbidden_cb_attr(PyW_TryGetAttrString(self, "forbidden_cb"));
  if ( forbidden_cb_attr != NULL && IDAPyInt_Check(forbidden_cb_attr.o) )
    forbidden_cb = uint32(IDAPyInt_AsLong(forbidden_cb_attr.o));
  cb_flags = 0;
  for ( int i = 0; i < qnumber(callbacks); ++i )
  {
    ref_t cb_attr(PyW_TryGetAttrString(self, callbacks[i].name));
    bool have_cb = cb_attr != NULL && PyCallable_Check(cb_attr.o);
    if ( have_cb && (forbidden_cb & callbacks[i].have) == 0 )
    {
      cb_flags |= callbacks[i].have;
      flags |= callbacks[i].chooser_t_flags;
    }
    else
    {
      // Mandatory field?
      if ( callbacks[i].have == 0 )
        return chooser_base_t::NO_ATTR;
    }
  }

  // create chooser object
  if ( (flags & CH_MULTI) == 0 )
  {
    chobj = new py_chooser_single_t(
                        this,
                        flags,
                        columns, widths.begin(), header.begin(),
                        title.c_str());
  }
  else
  {
    chobj = new py_chooser_multi_t(
                        this,
                        flags,
                        columns, widths.begin(), header.begin(),
                        title.c_str());
  }

  // Get *x1,y1,x2,y2
  py_get_int(self, &chobj->x0, "x1");
  py_get_int(self, &chobj->y0, "y1");
  py_get_int(self, &chobj->x1, "x2");
  py_get_int(self, &chobj->y1, "y2");

  // Get *icon
  py_get_int(self, &chobj->icon, "icon");

  // Get *popup names
  // An array of 4 strings: ("Insert", "Delete", "Edit", "Refresh")
  ref_t pn_attr(PyW_TryGetAttrString(self, S_POPUP_NAMES));
  if ( pn_attr != NULL && PyList_Check(pn_attr.o) )
  {
    int npopups = int(PyList_Size(pn_attr.o));
    if ( npopups > chooser_base_t::NSTDPOPUPS )
      npopups = chooser_base_t::NSTDPOPUPS;
    for ( int i = 0; i < npopups; ++i )
    {
      const char *str = IDAPyBytes_AsString(PyList_GetItem(pn_attr.o, i));
      chobj->popup_names[i] = str;
    }
  }

  // Check if *embedded
  ref_t emb_attr(PyW_TryGetAttrString(self, S_EMBEDDED));
  if ( emb_attr != NULL && PyObject_IsTrue(emb_attr.o) == 1 )
  {
    cb_flags |= CHOOSE_IS_EMBEDDED;
    py_get_int(self, &chobj->width, "width");
    py_get_int(self, &chobj->height, "height");
    return 0; // success
  }

  // run
  ssize_t res;
  if ( !chobj->is_multi() )
  {
    // Get *deflt
    ssize_t deflt = 0;
    py_get_int(self, &deflt, "deflt");
    res = ((chooser_t *)chobj)->choose(deflt);
  }
  else
  {
    // Get *deflt
    sizevec_t deflt;
    ref_t deflt_attr(PyW_TryGetAttrString(self, "deflt"));
    if ( deflt_attr != NULL
      && PyList_Check(deflt_attr.o)
      && PyW_PyListToSizeVec(&deflt, deflt_attr.o) < 0 )
    {
      deflt.clear();
    }
    res = ((chooser_multi_t *)chobj)->choose(deflt);
  }
  // assert: `this` is deleted in the case of the modal chooser

  return res;
}

//------------------------------------------------------------------------
int choose_create(PyObject *self)
{
  py_choose_t *pych;

  pych = choose_find_instance(self);
  if ( pych != NULL && pych->is_valid() )
  {
    if ( !pych->is_embedded() )
      pych->activate();
    return chooser_base_t::ALREADY_EXISTS;
  }

  if ( pych == NULL )
    pych = new py_choose_t(self);
  // assert: returned value != chooser_base_t::ALREADY_EXISTS
  return pych->create();
}

//------------------------------------------------------------------------
void choose_close(PyObject *self)
{
  py_choose_t *pych = choose_find_instance(self);
  if ( pych == NULL )
    return;

  if ( !pych->is_valid() )
  {
    // the chooser object is not created
    // so we delete Python's chooser ourself
    delete pych;
    return;
  }

  // embedded chooser is deleted by form
  if ( pych->is_embedded() )
    return;

  // modal chooser is closed and deleted in py_choose_t::create()
  // assert: !pych->is_modal()

  // close the non-modal chooser,
  // in turn this will lead to the deletion of the object
  pych->close();
}

//------------------------------------------------------------------------
void choose_refresh(PyObject *self)
{
  py_choose_t *pych = choose_find_instance(self);
  if ( pych != NULL && pych->is_valid() )
    pych->do_refresh();
}

//------------------------------------------------------------------------
void choose_activate(PyObject *self)
{
  py_choose_t *pych = choose_find_instance(self);
  if ( pych != NULL && pych->is_valid() )
    pych->activate();
}

//------------------------------------------------------------------------
// Return the C instance as 64bit number
uint64 _choose_get_embedded_chobj_pointer(PyObject *self)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  uint64 ptr = 0;
  py_choose_t *pych = choose_find_instance(self);
  if ( pych != NULL && pych->is_valid() && pych->is_embedded() )
    ptr = uint64(pych->get_chobj());
  return ptr;
}

//------------------------------------------------------------------------
PyObject *choose_find(const char *title)
{
  py_choose_t *pych = py_choose_t::find_chooser(title);
  if ( pych == NULL || !pych->is_valid() )
    Py_RETURN_NONE;
  PyObject *self = pych->get_self();
  Py_INCREF(self);
  return self;
}
//</code(py_kernwin_choose)>


//<inline(py_kernwin_choose)>
PyObject *choose_find(const char *title);
void choose_refresh(PyObject *self);
void choose_close(PyObject *self);
int choose_create(PyObject *self);
void choose_activate(PyObject *self);
uint64 _choose_get_embedded_chobj_pointer(PyObject *self);

PyObject *py_get_chooser_data(const char *chooser_caption, int n)
{
  qstrvec_t data;
  if ( !get_chooser_data(&data, chooser_caption, n) )
    Py_RETURN_NONE;
  PyObject *py_list = PyList_New(data.size());
  for ( size_t i = 0; i < data.size(); ++i )
    PyList_SetItem(py_list, i, IDAPyStr_FromUTF8(data[i].c_str()));
  return py_list;
}

//-------------------------------------------------------------------------
TWidget *choose_get_widget(PyObject *self)
{
  py_choose_t *pych = choose_find_instance(self);
  if ( pych == NULL || !pych->is_valid() )
    return NULL;
  return pych->get_widget();
}

//</inline(py_kernwin_choose)>


//<code(py_kernwin_askform)>
//</code(py_kernwin_askform)>


//<inline(py_kernwin_askform)>
#define DECLARE_FORM_ACTIONS form_actions_t *fa = (form_actions_t *)p_fa;

//---------------------------------------------------------------------------
static bool textctrl_info_t_assign(PyObject *self, PyObject *other)
{
  textctrl_info_t *lhs = textctrl_info_t_get_clink(self);
  textctrl_info_t *rhs = textctrl_info_t_get_clink(other);
  if ( lhs == NULL || rhs == NULL )
    return false;

  *lhs = *rhs;
  return true;
}

//-------------------------------------------------------------------------
static bool textctrl_info_t_set_text(PyObject *self, const char *s)
{
  textctrl_info_t *ti = (textctrl_info_t *)pyobj_get_clink(self);
  if ( ti == NULL )
    return false;
  ti->text = s;
  return true;
}

//-------------------------------------------------------------------------
static const char *textctrl_info_t_get_text(PyObject *self)
{
  textctrl_info_t *ti = (textctrl_info_t *)pyobj_get_clink(self);
  return ti == NULL ? "" : ti->text.c_str();
}

//-------------------------------------------------------------------------
static bool textctrl_info_t_set_flags(PyObject *self, unsigned int flags)
{
  textctrl_info_t *ti = (textctrl_info_t *)pyobj_get_clink(self);
  if ( ti == NULL )
    return false;
  ti->flags = flags;
  return true;
}

//-------------------------------------------------------------------------
static unsigned int textctrl_info_t_get_flags(
        PyObject *self,
        unsigned int flags)
{
  textctrl_info_t *ti = (textctrl_info_t *)pyobj_get_clink(self);
  return ti == NULL ? 0 : ti->flags;
}

//-------------------------------------------------------------------------
static bool textctrl_info_t_set_tabsize(
        PyObject *self,
        unsigned int tabsize)
{
  textctrl_info_t *ti = (textctrl_info_t *)pyobj_get_clink(self);
  if ( ti == NULL )
    return false;
  ti->tabsize = tabsize;
  return true;
}

//-------------------------------------------------------------------------
static unsigned int textctrl_info_t_get_tabsize(
        PyObject *self,
        unsigned int tabsize)
{
  textctrl_info_t *ti = (textctrl_info_t *)pyobj_get_clink(self);
  return ti == NULL ? 0 : ti->tabsize;
}

//---------------------------------------------------------------------------
static bool formchgcbfa_enable_field(size_t p_fa, int fid, bool enable)
{
  DECLARE_FORM_ACTIONS;
  return fa->enable_field(fid, enable);
}

//---------------------------------------------------------------------------
static bool formchgcbfa_show_field(size_t p_fa, int fid, bool show)
{
  DECLARE_FORM_ACTIONS;
  return fa->show_field(fid, show);
}

//---------------------------------------------------------------------------
static bool formchgcbfa_move_field(
        size_t p_fa,
        int fid,
        int x,
        int y,
        int w,
        int h)
{
  DECLARE_FORM_ACTIONS;
  return fa->move_field(fid, x, y, w, h);
}

//---------------------------------------------------------------------------
static int formchgcbfa_get_focused_field(size_t p_fa)
{
  DECLARE_FORM_ACTIONS;
  return fa->get_focused_field();
}

//---------------------------------------------------------------------------
static bool formchgcbfa_set_focused_field(size_t p_fa, int fid)
{
  DECLARE_FORM_ACTIONS;
  return fa->set_focused_field(fid);
}

//---------------------------------------------------------------------------
static void formchgcbfa_refresh_field(size_t p_fa, int fid)
{
  DECLARE_FORM_ACTIONS;
  return fa->refresh_field(fid);
}

//---------------------------------------------------------------------------
static void formchgcbfa_close(size_t p_fa, int close_normally)
{
  DECLARE_FORM_ACTIONS;
  fa->close(close_normally);
}

//---------------------------------------------------------------------------
static PyObject *formchgcbfa_get_field_value(
        size_t p_fa,
        int fid,
        int ft,
        size_t sz)
{
  DECLARE_FORM_ACTIONS;
  PYW_GIL_CHECK_LOCKED_SCOPE();
  switch ( ft )
  {
    // dropdown list
    case 8:
      // Readonly? Then return the selected index
      if ( sz == 1 )
      {
        int sel_idx;
        if ( fa->get_combobox_value(fid, &sel_idx) )
          return PyLong_FromLong(sel_idx);
      }
      // Not readonly? Then return the qstring
      else
      {
        qstring val;
        if ( fa->get_combobox_value(fid, &val) )
          return IDAPyStr_FromUTF8(val.c_str());
      }
      break;

    // multilinetext - tuple representing textctrl_info_t
    case 7:
      {
        textctrl_info_t ti;
        if ( fa->get_text_value(fid, &ti) )
          return Py_BuildValue("(sII)", ti.text.c_str(), ti.flags, ti.tabsize);
        break;
      }
    // button - uint32
    case 4:
      {
        uval_t val;
        if ( fa->get_unsigned_value(fid, &val) )
          return PyLong_FromUnsignedLong(val);
        break;
      }
    // ushort
    case 2:
      {
        ushort val;
        if ( fa->_get_field_value(fid, &val) )
          return PyLong_FromUnsignedLong(val);
        break;
      }
    // string label
    case 1:
      {
        char val[MAXSTR];
        if ( fa->get_string_value(fid, val, sizeof(val)) )
          return IDAPyStr_FromUTF8(val);
        break;
      }
    // string input
    case 3:
      {
        qstring val;
        val.resize(sz + 1);
        if ( fa->get_string_value(fid, val.begin(), val.size()) )
          return IDAPyStr_FromUTF8(val.begin());
        break;
      }
    case 5:
      {
        sizevec_t selection;
        if ( fa->get_chooser_value(fid, &selection) )
        {
          ref_t l(PyW_SizeVecToPyList(selection));
          l.incref();
          return l.o;
        }
        break;
      }
    // Numeric control
    case 6:
      {
        union
        {
          sel_t sel;
          sval_t sval;
          uval_t uval;
          ulonglong ull;
        } u;
        switch ( sz )
        {
          case 'S': // sel_t
            if ( fa->get_segment_value(fid, &u.sel) )
              return Py_BuildValue(PY_BV_SEL, bvsel_t(u.sel));
            break;
          // sval_t
          case 'n':
          case 'D':
          case 'O':
          case 'Y':
          case 'H':
            if ( fa->get_signed_value(fid, &u.sval) )
              return Py_BuildValue(PY_BV_SVAL, bvsval_t(u.sval));
            break;
          case 'L': // uint64
          case 'l': // int64
            if ( fa->_get_field_value(fid, &u.ull) )
              return Py_BuildValue("K", u.ull);
            break;
          case 'N':
          case 'M': // uval_t
            if ( fa->get_unsigned_value(fid, &u.uval) )
              return Py_BuildValue(PY_BV_UVAL, bvuval_t(u.uval));
            break;
          case '$': // ea_t
            if ( fa->get_ea_value(fid, &u.uval) )
              return Py_BuildValue(PY_BV_UVAL, bvuval_t(u.uval));
            break;
        }
        break;
      }
  }
  Py_RETURN_NONE;
}

//---------------------------------------------------------------------------
static bool formchgcbfa_set_field_value(
        size_t p_fa,
        int fid,
        int ft,
        PyObject *py_val)
{
  DECLARE_FORM_ACTIONS;
  PYW_GIL_CHECK_LOCKED_SCOPE();

  switch ( ft )
  {
    // dropdown list
    case 8:
      // Editable dropdown list
      if ( IDAPyStr_Check(py_val) )
      {
        qstring val(IDAPyBytes_AsString(py_val));
        return fa->set_combobox_value(fid, &val);
      }
      // Readonly dropdown list
      else
      {
        int sel_idx = PyLong_AsLong(py_val);
        return fa->set_combobox_value(fid, &sel_idx);
      }
      break;

    // multilinetext - textctrl_info_t
    case 7:
      {
        textctrl_info_t *ti = (textctrl_info_t *)pyobj_get_clink(py_val);
        return ti == NULL ? false : fa->set_text_value(fid, ti);
      }
    // button - uint32
    case 4:
      {
        uval_t val = PyLong_AsUnsignedLong(py_val);
        return fa->set_unsigned_value(fid, &val);
      }
    // ushort
    case 2:
      {
        ushort val = PyLong_AsUnsignedLong(py_val) & 0xffff;
        return fa->_set_field_value(fid, &val);
      }
    // strings
    case 3:
    case 1:
      return fa->set_string_value(fid, IDAPyBytes_AsString(py_val));
    // intvec_t
    case 5:
      {
        sizevec_t selection;
        if ( !PySequence_Check(py_val)
          || PyW_PyListToSizeVec(&selection, py_val) < 0 )
        {
          break;
        }
        return fa->set_chooser_value(fid, &selection);
      }
    // Numeric
    case 6:
      {
        uint64 num;
        if ( PyW_GetNumber(py_val, &num) )
          return fa->_set_field_value(fid, &num);
      }
  }
  return false;
}

#undef DECLARE_FORM_ACTIONS

static size_t py_get_ask_form()
{
  // Return a pointer to the function. Note that, although
  // the C implementation of vask_form will do some
  // Qt/txt widgets generation, the Python's ctypes
  // implementation through which the call will go will first
  // unblock other threads. No need to do it ourselves.
  return (size_t)ask_form;
}

static size_t py_get_open_form()
{
  // See comments above.
  return (size_t)open_form;
}

static void py_register_compiled_form(PyObject *py_form)
{
  PyW_register_compiled_form(py_form);
}

static void py_unregister_compiled_form(PyObject *py_form)
{
  PyW_unregister_compiled_form(py_form);
}
//</inline(py_kernwin_askform)>


//<code(py_kernwin_cli)>
//--------------------------------------------------------------------------
#define MAX_PY_CLI 12

// Callbacks table
// This structure was devised because the cli callbacks have no user-data parameter
struct py_cli_cbs_t
{
  bool (idaapi *execute_line)(const char *line);
  bool (idaapi *complete_line)(
          qstring *completion,
          const char *prefix,
          int n,
          const char *line,
          int x);
  bool (idaapi *keydown)(
          qstring *line,
          int *p_x,
          int *p_sellen,
          int *vk_key,
          int shift);
  bool (idaapi *find_completions)(
          qstrvec_t *out_completions,
          int *out_match_start,
          int *out_match_end,
          const char *line,
          int x);
};

// CLI Python wrapper class
class py_cli_t
{
private:
  //--------------------------------------------------------------------------
  cli_t cli;
  PyObject *self;
  qstring cli_sname, cli_lname, cli_hint;

  //--------------------------------------------------------------------------
  static py_cli_t *py_clis[MAX_PY_CLI];
  static const py_cli_cbs_t py_cli_cbs[MAX_PY_CLI];
  //--------------------------------------------------------------------------
#define IMPL_PY_CLI_CB(CBN)                                             \
  static bool idaapi s_keydown##CBN(qstring *line, int *p_x, int *p_sellen, int *vk_key, int shift) \
  {                                                                     \
    return py_clis[CBN]->on_keydown(line, p_x, p_sellen, vk_key, shift); \
  }                                                                     \
  static bool idaapi s_execute_line##CBN(const char *line)              \
  {                                                                     \
    return py_clis[CBN]->on_execute_line(line);                         \
  }                                                                     \
  static bool idaapi s_complete_line##CBN(qstring *completion, const char *prefix, int n, const char *line, int x) \
  {                                                                     \
    return py_clis[CBN]->on_complete_line(completion, prefix, n, line, x); \
  }                                                                     \
  static bool idaapi s_find_completions##CBN(qstrvec_t *completions, int *out_start, int *out_end, const char *line, int x) \
  {                                                                     \
    return py_clis[CBN]->on_find_completions(completions, out_start, out_end, line, x); \
  }

  IMPL_PY_CLI_CB(0);    IMPL_PY_CLI_CB(1);   IMPL_PY_CLI_CB(2);   IMPL_PY_CLI_CB(3);
  IMPL_PY_CLI_CB(4);    IMPL_PY_CLI_CB(5);   IMPL_PY_CLI_CB(6);   IMPL_PY_CLI_CB(7);
  IMPL_PY_CLI_CB(8);    IMPL_PY_CLI_CB(9);   IMPL_PY_CLI_CB(10);  IMPL_PY_CLI_CB(11);
#undef IMPL_PY_CLI_CB

  //--------------------------------------------------------------------------
  // callback: the user pressed Enter
  // CLI is free to execute the line immediately or ask for more lines
  // Returns: true-executed line, false-ask for more lines
  bool on_execute_line(const char *line)
  {
    PYW_GIL_GET;
    newref_t result(
            PyObject_CallMethod(
                    self,
                    (char *)S_ON_EXECUTE_LINE,
                    "s",
                    line));
    PyW_ShowCbErr(S_ON_EXECUTE_LINE);
    return result != NULL && PyObject_IsTrue(result.o);
  }

  //--------------------------------------------------------------------------
  // callback: a keyboard key has been pressed
  // This is a generic callback and the CLI is free to do whatever
  // it wants.
  //    line - current input line (in/out argument)
  //    p_x  - pointer to current x coordinate of the cursor (in/out)
  //    p_sellen - pointer to current selection length (usually 0)
  //    p_vk_key - pointer to virtual key code (in/out)
  //           if the key has been handled, it should be reset to 0 by CLI
  //    shift - shift state
  // Returns: true-modified input line or x coordinate or selection length
  // This callback is optional
  bool on_keydown(
    qstring *line,
    int *p_x,
    int *p_sellen,
    int *vk_key,
    int shift)
  {
    PYW_GIL_GET;
    newref_t result(
            PyObject_CallMethod(
                    self,
                    (char *)S_ON_KEYDOWN,
                    "siiHi",
                    line->c_str(),
                    *p_x,
                    *p_sellen,
                    *vk_key,
                    shift));

    bool ok = result != NULL && PyTuple_Check(result.o);

    PyW_ShowCbErr(S_ON_KEYDOWN);

    if ( ok )
    {
      Py_ssize_t sz = PyTuple_Size(result.o);
      PyObject *item;

#define GET_TUPLE_ENTRY(col, PyThingy, AsThingy, out)                   \
      do                                                                \
      {                                                                 \
        if ( sz > col )                                                 \
        {                                                               \
          borref_t _r(PyTuple_GetItem(result.o, col));                  \
          if ( _r != NULL && PyThingy##_Check(_r.o) )                   \
            *out = PyThingy##_##AsThingy(_r.o);                         \
        }                                                               \
      } while ( false )

      GET_TUPLE_ENTRY(0, PyString, AsString, line);
      GET_TUPLE_ENTRY(1, PyInt, AsLong, p_x);
      GET_TUPLE_ENTRY(2, PyInt, AsLong, p_sellen);
      GET_TUPLE_ENTRY(3, PyInt, AsLong, vk_key);
      *vk_key &= 0xffff;
#undef GET_TUPLE_ENTRY
    }
    return ok;
  }

  // callback: the user pressed Tab
  // Find a completion number N for prefix PREFIX
  // LINE is given as context information. X is the index where PREFIX starts in LINE
  // New prefix should be stored in PREFIX.
  // Returns: true if generated a new completion
  // This callback is optional
  bool on_complete_line(
          qstring *completion,
          const char *prefix,
          int n,
          const char *line,
          int x)
  {
    PYW_GIL_GET;
    newref_t result(
            PyObject_CallMethod(
                    self,
                    (char *)S_ON_COMPLETE_LINE,
                    "sisi",
                    prefix,
                    n,
                    line,
                    x));

    bool ok = result != NULL && IDAPyStr_Check(result.o);
    PyW_ShowCbErr(S_ON_COMPLETE_LINE);
    if ( ok )
      *completion = IDAPyBytes_AsString(result.o);
    return ok;
  }

  // callback: the user pressed Tab
  // Find completions
  // This callback is optional
  bool on_find_completions(
          qstrvec_t *out_completions,
          int *out_match_start,
          int *out_match_end,
          const char *line,
          int x)
  {
    PYW_GIL_GET;
    newref_t py_res(
            PyObject_CallMethod(
                    self,
                    (char *)S_ON_FIND_COMPLETIONS,
                    "si",
                    line,
                    x));
    PyW_ShowCbErr(S_ON_FIND_COMPLETIONS);
    if ( PyErr_Occurred() != NULL )
      return false;
    return idapython_convert_cli_completions(
            out_completions, out_match_start, out_match_end, py_res);
  }

  // Private ctor (use bind())
  py_cli_t()
  {
  }

public:
  //---------------------------------------------------------------------------
  static int bind(PyObject *py_obj)
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();

    int cli_idx;
    // Find an empty slot
    for ( cli_idx = 0; cli_idx < MAX_PY_CLI; ++cli_idx )
    {
      if ( py_clis[cli_idx] == NULL )
        break;
    }
    py_cli_t *py_cli = NULL;
    do
    {
      // No free slots?
      if ( cli_idx >= MAX_PY_CLI )
        break;

      // Create a new instance
      py_cli = new py_cli_t();
      PyObject *attr;

      // Start populating the 'cli' member
      py_cli->cli.size = sizeof(cli_t);

      // Store 'flags'
      {
        ref_t flags_attr(PyW_TryGetAttrString(py_obj, S_FLAGS));
        if ( flags_attr == NULL )
          py_cli->cli.flags = 0;
        else
          py_cli->cli.flags = PyLong_AsLong(flags_attr.o);
      }

      // Store 'sname'
      if ( !PyW_GetStringAttr(py_obj, "sname", &py_cli->cli_sname) )
        break;
      py_cli->cli.sname = py_cli->cli_sname.c_str();

      // Store 'lname'
      if ( !PyW_GetStringAttr(py_obj, "lname", &py_cli->cli_lname) )
        break;
      py_cli->cli.lname = py_cli->cli_lname.c_str();

      // Store 'hint'
      if ( !PyW_GetStringAttr(py_obj, "hint", &py_cli->cli_hint) )
        break;
      py_cli->cli.hint = py_cli->cli_hint.c_str();

      // Store callbacks
      if ( !PyObject_HasAttrString(py_obj, S_ON_EXECUTE_LINE) )
        break;
      py_cli->cli.execute_line = py_cli_cbs[cli_idx].execute_line;
      py_cli->cli.unused = (void *) (PyObject_HasAttrString(py_obj, S_ON_COMPLETE_LINE) ? py_cli_cbs[cli_idx].complete_line : NULL);
      py_cli->cli.keydown = PyObject_HasAttrString(py_obj, S_ON_KEYDOWN) ? py_cli_cbs[cli_idx].keydown : NULL;
      py_cli->cli.find_completions = PyObject_HasAttrString(py_obj, S_ON_FIND_COMPLETIONS) ? py_cli_cbs[cli_idx].find_completions : NULL;

      // install CLI
      install_command_interpreter(&py_cli->cli);

      // Take reference to this object
      py_cli->self = py_obj;
      Py_INCREF(py_obj);

      // Save the instance
      py_clis[cli_idx] = py_cli;

      return cli_idx;
    } while (false);

    delete py_cli;
    return -1;
  }

  //---------------------------------------------------------------------------
  static void unbind(int cli_idx)
  {
    // Out of bounds or not set?
    if ( cli_idx < 0 || cli_idx >= MAX_PY_CLI || py_clis[cli_idx] == NULL )
      return;

    py_cli_t *py_cli = py_clis[cli_idx];
    remove_command_interpreter(&py_cli->cli);

    {
      PYW_GIL_CHECK_LOCKED_SCOPE();
      Py_DECREF(py_cli->self);
      delete py_cli;
    }

    py_clis[cli_idx] = NULL;

    return;
  }
};
py_cli_t *py_cli_t::py_clis[MAX_PY_CLI] = { NULL };
#define DECL_PY_CLI_CB(CBN) { s_execute_line##CBN, s_complete_line##CBN, s_keydown##CBN }
const py_cli_cbs_t py_cli_t::py_cli_cbs[MAX_PY_CLI] =
{
  DECL_PY_CLI_CB(0),   DECL_PY_CLI_CB(1),  DECL_PY_CLI_CB(2),   DECL_PY_CLI_CB(3),
  DECL_PY_CLI_CB(4),   DECL_PY_CLI_CB(5),  DECL_PY_CLI_CB(6),   DECL_PY_CLI_CB(7),
  DECL_PY_CLI_CB(8),   DECL_PY_CLI_CB(9),  DECL_PY_CLI_CB(10),  DECL_PY_CLI_CB(11)
};
#undef DECL_PY_CLI_CB
//</code(py_kernwin_cli)>


//<inline(py_kernwin_cli)>
static int py_install_command_interpreter(PyObject *py_obj)
{
  return py_cli_t::bind(py_obj);
}

static void py_remove_command_interpreter(int cli_idx)
{
  py_cli_t::unbind(cli_idx);
}
//</inline(py_kernwin_cli)>


//<inline(py_kernwin_viewhooks)>

//---------------------------------------------------------------------------
// View hooks
//---------------------------------------------------------------------------
ssize_t idaapi View_Callback(void *ud, int notification_code, va_list va);
class View_Hooks
{
public:
  virtual ~View_Hooks() { unhook(); }

  bool hook()
  {
    return idapython_hook_to_notification_point(HT_VIEW, View_Callback, this);
  }
  bool unhook()
  {
    return idapython_unhook_from_notification_point(HT_VIEW, View_Callback, this);
  }

  // hookgenVIEW:methods
virtual void view_activated(TWidget * view) {qnotused(view); }
virtual void view_deactivated(TWidget * view) {qnotused(view); }
virtual void view_keydown(TWidget * view, int key, view_event_state_t state) {qnotused(view); qnotused(key); qnotused(state); }
virtual void view_click(TWidget * view, const view_mouse_event_t * event) {qnotused(view); qnotused(event); }
virtual void view_dblclick(TWidget * view, const view_mouse_event_t * event) {qnotused(view); qnotused(event); }
virtual void view_curpos(TWidget * view) {qnotused(view); }
virtual void view_created(TWidget * view) {qnotused(view); }
virtual void view_close(TWidget * view) {qnotused(view); }
virtual void view_switched(TWidget * view, tcc_renderer_type_t rt) {qnotused(view); qnotused(rt); }
virtual void view_mouse_over(TWidget * view, const view_mouse_event_t * event) {qnotused(view); qnotused(event); }
virtual void view_loc_changed(TWidget * view, const lochist_entry_t * now, const lochist_entry_t * was) {qnotused(view); qnotused(now); qnotused(was); }
virtual void view_mouse_moved(TWidget * view, const view_mouse_event_t * event) {qnotused(view); qnotused(event); }
};
//</inline(py_kernwin_viewhooks)>


//<code(py_kernwin_viewhooks)>
//---------------------------------------------------------------------------
ssize_t idaapi View_Callback(void *ud, int notification_code, va_list va)
{
  // This hook gets called from the kernel. Ensure we hold the GIL.
  PYW_GIL_GET;
  class View_Hooks *proxy = (class View_Hooks *)ud;
  ssize_t ret = 0;
  try
  {
    switch ( notification_code )
    {
      // hookgenVIEW:notifications
case view_activated:
{
  TWidget * view = va_arg(va, TWidget *);
  proxy->view_activated(view);
}
break;

case view_deactivated:
{
  TWidget * view = va_arg(va, TWidget *);
  proxy->view_deactivated(view);
}
break;

case view_keydown:
{
  TWidget * view = va_arg(va, TWidget *);
  int key = va_arg(va, int);
  view_event_state_t state = va_arg(va, view_event_state_t);
  proxy->view_keydown(view, key, state);
}
break;

case view_click:
{
  TWidget * view = va_arg(va, TWidget *);
  const view_mouse_event_t * event = va_arg(va, const view_mouse_event_t *);
  proxy->view_click(view, event);
}
break;

case view_dblclick:
{
  TWidget * view = va_arg(va, TWidget *);
  const view_mouse_event_t * event = va_arg(va, const view_mouse_event_t *);
  proxy->view_dblclick(view, event);
}
break;

case view_curpos:
{
  TWidget * view = va_arg(va, TWidget *);
  proxy->view_curpos(view);
}
break;

case view_created:
{
  TWidget * view = va_arg(va, TWidget *);
  proxy->view_created(view);
}
break;

case view_close:
{
  TWidget * view = va_arg(va, TWidget *);
  proxy->view_close(view);
}
break;

case view_switched:
{
  TWidget * view = va_arg(va, TWidget *);
  tcc_renderer_type_t rt = tcc_renderer_type_t(va_arg(va, int));
  proxy->view_switched(view, rt);
}
break;

case view_mouse_over:
{
  TWidget * view = va_arg(va, TWidget *);
  const view_mouse_event_t * event = va_arg(va, const view_mouse_event_t *);
  proxy->view_mouse_over(view, event);
}
break;

case view_loc_changed:
{
  TWidget * view = va_arg(va, TWidget *);
  const lochist_entry_t * now = va_arg(va, const lochist_entry_t *);
  const lochist_entry_t * was = va_arg(va, const lochist_entry_t *);
  proxy->view_loc_changed(view, now, was);
}
break;

case view_mouse_moved:
{
  TWidget * view = va_arg(va, TWidget *);
  const view_mouse_event_t * event = va_arg(va, const view_mouse_event_t *);
  proxy->view_mouse_moved(view, event);
}
break;

    }
  }
  catch (Swig::DirectorException &e)
  {
    msg("Exception in View Hook function: %s\n", e.getMessage());
    PYW_GIL_CHECK_LOCKED_SCOPE();
    if ( PyErr_Occurred() )
      PyErr_Print();
  }
  return 0;
}
//</code(py_kernwin_viewhooks)>


//<code(py_kernwin_idaview)>
//-------------------------------------------------------------------------
//                                py_idaview_t
//-------------------------------------------------------------------------
class py_idaview_t : public py_customidamemo_t
{
  typedef py_customidamemo_t inherited;

public:
  static bool Bind(PyObject *self);
  static bool Unbind(PyObject *self);
};

//-------------------------------------------------------------------------
bool py_idaview_t::Bind(PyObject *self)
{
  // Already a py_idaview_t associated to this object?
  py_idaview_t *_this = view_extract_this<py_idaview_t>(self);
  if ( _this != NULL )
    return false;

  qstring title;
  if ( !PyW_GetStringAttr(self, S_M_TITLE, &title) )
    return false;

  // Get the IDAView associated to this TWidget
  TWidget *widget = find_widget(title.c_str());
  if ( widget == NULL )
    return false;

  // Get unique py_idaview_t associated to that TWidget
  py_idaview_t *py_view;
  if ( !pycim_lookup_info.find_by_view((py_customidamemo_t**) &py_view, widget) )
  {
    py_view = new py_idaview_t();
    lookup_entry_t &e = pycim_lookup_info.new_entry(py_view);
    pycim_lookup_info.commit(e, widget);
  }

  // Finally, bind:
  //  py_idaview_t <=> IDAViewWrapper
  //  py_idaview_t  => TWidget
  bool ok = py_view->bind(self, widget);
  if ( ok )
  {
    ok = py_view->collect_pyobject_callbacks(self);
    if ( !ok )
      delete py_view;
  }
  return ok;
}

//-------------------------------------------------------------------------
bool py_idaview_t::Unbind(PyObject *self)
{
  py_idaview_t *_this = view_extract_this<py_idaview_t>(self);
  if ( _this == NULL )
    return false;
  _this->unbind(true);
  return true;
}

//-------------------------------------------------------------------------
bool pyidag_bind(PyObject *self)
{
  return py_idaview_t::Bind(self);
}

//-------------------------------------------------------------------------
bool pyidag_unbind(PyObject *self)
{
  return py_idaview_t::Unbind(self);
}
//</code(py_kernwin_idaview)>



//<inline(py_kernwin_idaview)>
bool pyidag_bind(PyObject *self);
bool pyidag_unbind(PyObject *self);
//</inline(py_kernwin_idaview)>


//<code(py_kernwin_custview)>
//---------------------------------------------------------------------------
// Base class for all custviewer place_t providers
class custviewer_data_t
{
public:
  virtual void    *get_ud() = 0;
  virtual place_t *get_min() = 0;
  virtual place_t *get_max() = 0;
};

//---------------------------------------------------------------------------
class cvdata_simpleline_t: public custviewer_data_t
{
private:
  strvec_t lines;
  simpleline_place_t pl_min, pl_max;
public:

  void *get_ud()
  {
    return &lines;
  }

  place_t *get_min()
  {
    return &pl_min;
  }

  place_t *get_max()
  {
    return &pl_max;
  }

  strvec_t &get_lines()
  {
    return lines;
  }

  void set_minmax(size_t start=0, size_t end=size_t(-1))
  {
    if ( start == 0 && end == size_t(-1) )
    {
      end = lines.size();
      pl_min.n = 0;
      pl_max.n = end == 0 ? 0 : end - 1;
    }
    else
    {
      pl_min.n = start;
      pl_max.n = end;
    }
  }

  bool set_line(size_t nline, simpleline_t &sl)
  {
    if ( nline >= lines.size() )
      return false;
    lines[nline] = sl;
    return true;
  }

  bool del_line(size_t nline)
  {
    if ( nline >= lines.size() )
      return false;
    lines.erase(lines.begin()+nline);
    return true;
  }

  void add_line(simpleline_t &line)
  {
    lines.push_back(line);
  }

  void add_line(const char *str)
  {
    lines.push_back(simpleline_t(str));
  }

  bool insert_line(size_t nline, simpleline_t &line)
  {
    if ( nline >= lines.size() )
      return false;
    lines.insert(lines.begin()+nline, line);
    return true;
  }

  bool patch_line(size_t nline, size_t offs, int value)
  {
    if ( nline >= lines.size() )
      return false;
    qstring &L = lines[nline].line;
    L[offs] = (uchar) value & 0xFF;
    return true;
  }

  const size_t to_lineno(place_t *pl) const
  {
    return ((simpleline_place_t *)pl)->n;
  }

  bool curline(place_t *pl, size_t *n)
  {
    if ( pl == NULL )
      return false;

    *n = to_lineno(pl);
    return true;
  }

  simpleline_t *get_line(size_t nline)
  {
    return nline >= lines.size() ? NULL : &lines[nline];
  }

  simpleline_t *get_line(place_t *pl)
  {
    return pl == NULL ? NULL : get_line(((simpleline_place_t *)pl)->n);
  }

  const size_t count() const
  {
    return lines.size();
  }

  void clear_lines()
  {
    lines.clear();
    set_minmax();
  }
};

//---------------------------------------------------------------------------
// FIXME: This should inherit py_view_base.hpp's py_customidamemo_t,
// just like py_graph.hpp's py_graph_t does.
// There should be a way to "merge" the two mechanisms; they are similar.
class customviewer_t
{
protected:
  qstring _title;
  TWidget *_cv;
  custviewer_data_t *_data;
  int _features;
  custom_viewer_handlers_t handlers;

  enum
  {
    HAVE_HINT     = 0x0001,
    HAVE_KEYDOWN  = 0x0002,
    HAVE_DBLCLICK = 0x0004,
    HAVE_CURPOS   = 0x0008,
    HAVE_CLICK    = 0x0010,
    HAVE_CLOSE    = 0x0020
  };
private:
  struct cvw_popupctx_t
  {
    size_t menu_id;
    customviewer_t *cv;
    cvw_popupctx_t(): menu_id(0), cv(NULL) {}
    cvw_popupctx_t(size_t mid, customviewer_t *v): menu_id(mid), cv(v) {}
  };
  typedef std::map<unsigned int, cvw_popupctx_t> cvw_popupmap_t;
  static size_t _global_popup_id;
  qstring _curline;

  static bool idaapi s_cv_keydown(
          TWidget * /*cv*/,
          int vk_key,
          int shift,
          void *ud)
  {
    PYW_GIL_GET;
    customviewer_t *_this = (customviewer_t *)ud;
    return _this->on_keydown(vk_key, shift);
  }

  // The user clicked
  static bool idaapi s_cv_click(TWidget * /*cv*/, int shift, void *ud)
  {
    PYW_GIL_GET;
    customviewer_t *_this = (customviewer_t *)ud;
    return _this->on_click(shift);
  }

  // The user double clicked
  static bool idaapi s_cv_dblclick(TWidget * /*cv*/, int shift, void *ud)
  {
    PYW_GIL_GET;
    customviewer_t *_this = (customviewer_t *)ud;
    return _this->on_dblclick(shift);
  }

  // Cursor position has been changed
  static void idaapi s_cv_curpos(TWidget * /*cv*/, void *ud)
  {
    PYW_GIL_GET;
    customviewer_t *_this = (customviewer_t *)ud;
    _this->on_curpos_changed();
  }

  //--------------------------------------------------------------------------
  static ssize_t idaapi s_ui_cb(void *ud, int code, va_list va)
  {
    // This hook gets called from the kernel. Ensure we hold the GIL.
    PYW_GIL_GET;
    customviewer_t *_this = (customviewer_t *)ud;
    switch ( code )
    {
      case ui_get_custom_viewer_hint:
        {
          qstring &hint = *va_arg(va, qstring *);
          TWidget *viewer = va_arg(va, TWidget *);
          place_t *place = va_arg(va, place_t *);
          int *important_lines = va_arg(va, int *);
          if ( (_this->_features & HAVE_HINT) == 0
            || place == NULL
            || _this->_cv != viewer )
          {
            return 0;
          }
          return _this->on_hint(place, important_lines, hint) ? 1 : 0;
        }

      case ui_widget_invisible:
        {
          TWidget *widget = va_arg(va, TWidget *);
          if ( _this->_cv != widget )
            break;
        }
        // fallthrough...
      case ui_term:
        idapython_unhook_from_notification_point(HT_UI, s_ui_cb, _this);
        _this->on_close();
        _this->on_post_close();
        break;
    }

    return 0;
  }

  void on_post_close()
  {
    init_vars();
  }

public:

  inline TWidget *get_widget() { return _cv; }

  //
  // All the overridable callbacks
  //

  // OnClick
  virtual bool on_click(int /*shift*/) { return false; }

  // OnDblClick
  virtual bool on_dblclick(int /*shift*/) { return false; }

  // OnCurorPositionChanged
  virtual void on_curpos_changed() {}

  // OnHostFormClose
  virtual void on_close() {}

  // OnKeyDown
  virtual bool on_keydown(int /*vk_key*/, int /*shift*/) { return false; }

  // OnHint
  virtual bool on_hint(place_t * /*place*/, int * /*important_lines*/, qstring &/*hint*/) { return false; }

  // OnPopupMenuClick
  virtual bool on_popup_menu(size_t menu_id) { return false; }

  void init_vars()
  {
    _data = NULL;
    _features = 0;
    _curline.clear();
    _cv = NULL;
  }

  customviewer_t()
  {
    init_vars();
  }

  ~customviewer_t()
  {
  }

  //--------------------------------------------------------------------------
  void close()
  {
    if ( _cv != NULL )
      close_widget(_cv, WCLS_SAVE | WCLS_CLOSE_LATER);
  }

  //--------------------------------------------------------------------------
  bool set_range(
    const place_t *minplace = NULL,
    const place_t *maxplace = NULL)
  {
    if ( _cv == NULL )
      return false;

    set_custom_viewer_range(
      _cv,
      minplace == NULL ? _data->get_min() : minplace,
      maxplace == NULL ? _data->get_max() : maxplace);
    return true;
  }

  place_t *get_place(
    bool mouse = false,
    int *x = 0,
    int *y = 0)
  {
    return _cv == NULL ? NULL : get_custom_viewer_place(_cv, mouse, x, y);
  }

  //--------------------------------------------------------------------------
  bool refresh()
  {
    if ( _cv == NULL )
      return false;

    refresh_custom_viewer(_cv);
    return true;
  }

  //--------------------------------------------------------------------------
  bool refresh_current()
  {
    return refresh();
  }

  //--------------------------------------------------------------------------
  bool get_current_word(bool mouse, qstring &word)
  {
    // query the cursor position
    int x, y;
    if ( get_place(mouse, &x, &y) == NULL )
      return false;

    // query the line at the cursor
    const char *line = get_current_line(mouse, true);
    if ( line == NULL )
      return false;

    if ( x >= (int)strlen(line) )
      return false;

    // find the beginning of the word
    const char *ptr = line + x;
    while ( ptr > line && !qisspace(ptr[-1]) )
      ptr--;

    // find the end of the word
    const char *begin = ptr;
    ptr = line + x;
    while ( !qisspace(*ptr) && *ptr != '\0' )
      ptr++;

    word.qclear();
    word.append(begin, ptr-begin);
    return true;
  }

  //--------------------------------------------------------------------------
  const char *get_current_line(bool mouse, bool notags)
  {
    const char *r = get_custom_viewer_curline(_cv, mouse);
    if ( r == NULL || !notags )
      return r;

    _curline = r;
    tag_remove(&_curline);
    return _curline.c_str();
  }

  //--------------------------------------------------------------------------
  bool is_focused()
  {
    return get_current_viewer() == _cv;
  }

  //--------------------------------------------------------------------------
  bool jumpto(place_t *place, int x, int y)
  {
    return ::jumpto(_cv, place, x, y);
  }

  bool create(const char *title, int features, custviewer_data_t *data)
  {
    // Already created? (in the instance)
    if ( _cv != NULL )
      return true;

    // Already created? (in IDA windows list)
    TWidget *found = find_widget(title);
    if ( found != NULL )
      return false;

    _title    = title;
    _data     = data;
    _features = features;

    //
    // Prepare handlers
    //
    if ( (features & HAVE_KEYDOWN) != 0 )
      handlers.keyboard = s_cv_keydown;

    if ( (features & HAVE_CLICK) != 0 )
      handlers.click = s_cv_click;

    if ( (features & HAVE_DBLCLICK) != 0 )
      handlers.dblclick = s_cv_dblclick;

    if ( (features & HAVE_CURPOS) != 0 )
      handlers.curpos = s_cv_curpos;

    // Create the viewer
    _cv = create_custom_viewer(
      title,
      _data->get_min(),
      _data->get_max(),
      _data->get_min(),
      (const renderer_info_t *) NULL,
      _data->get_ud(),
      &handlers,
      this);

    // Hook to UI notifications (for TWidget close event)
    idapython_hook_to_notification_point(HT_UI, s_ui_cb, this);

    return true;
  }

  //--------------------------------------------------------------------------
  bool show()
  {
    // Closed already?
    if ( _cv == NULL )
      return false;

    display_widget(_cv, WOPN_TAB|WOPN_RESTORE);
    return true;
  }
};

size_t customviewer_t::_global_popup_id = 0;
//---------------------------------------------------------------------------
class py_simplecustview_t: public customviewer_t
{
private:
  cvdata_simpleline_t data;
  PyObject *py_self, *py_this, *py_last_link;
  int features;

  //-------------------------------------------------------------------------
  static bool get_color(uint32 *out, ref_t obj)
  {
    bool ok = PyLong_Check(obj.o);
    if ( ok )
    {
      *out = uint32(PyLong_AsUnsignedLong(obj.o));
    }
    else
    {
      ok = IDAPyInt_Check(obj.o);
      if ( ok )
        *out = uint32(IDAPyInt_AsLong(obj.o));
    }
    return ok;
  }

  //--------------------------------------------------------------------------
  // Convert a tuple (String, [color, [bgcolor]]) to a simpleline_t
  static bool py_to_simpleline(PyObject *py, simpleline_t &sl)
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();

    if ( IDAPyStr_Check(py) )
    {
      sl.line = IDAPyBytes_AsStringng(py);
      return true;
    }
    Py_ssize_t sz;
    if ( !PyTuple_Check(py) || (sz = PyTuple_Size(py)) <= 0 )
      return false;

    PyObject *py_val = PyTuple_GetItem(py, 0);
    if ( !IDAPyStr_Check(py_val) )
      return false;

    sl.line = IDAPyBytes_AsStringng(py_val);
    uint32 col;
    if ( sz > 1 && get_color(&col, borref_t(PyTuple_GetItem(py, 1))) )
      sl.color = color_t(col);
    if ( sz > 2 && get_color(&col, borref_t(PyTuple_GetItem(py, 2))) )
      sl.bgcolor = bgcolor_t(col);
    return true;
  }

  //
  // Callbacks
  //
  virtual bool on_click(int shift)
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    newref_t py_result(PyObject_CallMethod(py_self, (char *)S_ON_CLICK, "i", shift));
    PyW_ShowCbErr(S_ON_CLICK);
    return py_result != NULL && PyObject_IsTrue(py_result.o);
  }

  //--------------------------------------------------------------------------
  // OnDblClick
  virtual bool on_dblclick(int shift)
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    newref_t py_result(PyObject_CallMethod(py_self, (char *)S_ON_DBL_CLICK, "i", shift));
    PyW_ShowCbErr(S_ON_DBL_CLICK);
    return py_result != NULL && PyObject_IsTrue(py_result.o);
  }

  //--------------------------------------------------------------------------
  // OnCurorPositionChanged
  virtual void on_curpos_changed()
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    newref_t py_result(PyObject_CallMethod(py_self, (char *)S_ON_CURSOR_POS_CHANGED, NULL));
    PyW_ShowCbErr(S_ON_CURSOR_POS_CHANGED);
  }

  //--------------------------------------------------------------------------
  // OnHostFormClose
  virtual void on_close()
  {
    if ( py_self != NULL )
    {
      // Call the close method if it is there and the object is still bound
      if ( (features & HAVE_CLOSE) != 0 )
      {
        PYW_GIL_CHECK_LOCKED_SCOPE();
        newref_t py_result(PyObject_CallMethod(py_self, (char *)S_ON_CLOSE, NULL));
        PyW_ShowCbErr(S_ON_CLOSE);
      }

      // Cleanup
      Py_DECREF(py_self);
      py_self = NULL;
    }
  }

  //--------------------------------------------------------------------------
  // OnKeyDown
  virtual bool on_keydown(int vk_key, int shift)
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    newref_t py_result(
            PyObject_CallMethod(
                    py_self,
                    (char *)S_ON_KEYDOWN,
                    "ii",
                    vk_key,
                    shift));

    PyW_ShowCbErr(S_ON_KEYDOWN);
    return py_result != NULL && PyObject_IsTrue(py_result.o);
  }

  //--------------------------------------------------------------------------
  // OnHint
  virtual bool on_hint(place_t *place, int *important_lines, qstring &hint)
  {
    size_t ln = data.to_lineno(place);
    PYW_GIL_CHECK_LOCKED_SCOPE();
    newref_t py_result(
            PyObject_CallMethod(
                    py_self,
                    (char *)S_ON_HINT,
                    PY_BV_SZ,
                    bvsz_t(ln)));

    PyW_ShowCbErr(S_ON_HINT);
    bool ok = py_result != NULL && PyTuple_Check(py_result.o) && PyTuple_Size(py_result.o) == 2;
    if ( ok )
    {
      if ( important_lines != NULL )
        *important_lines = IDAPyInt_AsLong(PyTuple_GetItem(py_result.o, 0));
      hint = IDAPyBytes_AsStringng(PyTuple_GetItem(py_result.o, 1));
    }
    return ok;
  }

  //--------------------------------------------------------------------------
  // OnPopupMenuClick
  virtual bool on_popup_menu(size_t menu_id)
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    newref_t py_result(
            PyObject_CallMethod(
                    py_self,
                    (char *)S_ON_POPUP_MENU,
                    PY_BV_SZ,
                    bvsz_t(menu_id)));
    PyW_ShowCbErr(S_ON_POPUP_MENU);
    return py_result != NULL && PyObject_IsTrue(py_result.o);
  }

  //--------------------------------------------------------------------------
  void refresh_range()
  {
    data.set_minmax();
    set_range();
  }

public:
  py_simplecustview_t()
  {
    py_this = py_self = py_last_link = NULL;
  }
  ~py_simplecustview_t()
  {
  }

  //--------------------------------------------------------------------------
  // Edits an existing line
  bool edit_line(size_t nline, PyObject *py_sl)
  {
    simpleline_t sl;
    if ( !py_to_simpleline(py_sl, sl) )
      return false;

    return data.set_line(nline, sl);
  }

  // Low level: patches a line string directly
  bool patch_line(size_t nline, size_t offs, int value)
  {
    return data.patch_line(nline, offs, value);
  }

  // Insert a line
  bool insert_line(size_t nline, PyObject *py_sl)
  {
    simpleline_t sl;
    if ( !py_to_simpleline(py_sl, sl) )
      return false;
    return data.insert_line(nline, sl);
  }

  // Adds a line tuple
  bool add_line(PyObject *py_sl)
  {
    simpleline_t sl;
    if ( !py_to_simpleline(py_sl, sl) )
      return false;
    data.add_line(sl);
    refresh_range();
    return true;
  }

  //--------------------------------------------------------------------------
  bool del_line(size_t nline)
  {
    bool ok = data.del_line(nline);
    if ( ok )
      refresh_range();
    return ok;
  }

  //--------------------------------------------------------------------------
  // Gets the position and returns a tuple (lineno, x, y)
  PyObject *get_pos(bool mouse)
  {
    place_t *pl;
    int x, y;
    pl = get_place(mouse, &x, &y);
    PYW_GIL_CHECK_LOCKED_SCOPE();
    if ( pl == NULL )
      Py_RETURN_NONE;
    return Py_BuildValue("(" PY_BV_SZ "ii)", bvsz_t(data.to_lineno(pl)), x, y);
  }

  //--------------------------------------------------------------------------
  // Returns the line tuple
  PyObject *get_line(size_t nline)
  {
    simpleline_t *r = data.get_line(nline);
    PYW_GIL_CHECK_LOCKED_SCOPE();
    if ( r == NULL )
      Py_RETURN_NONE;
    return Py_BuildValue("(sII)", r->line.c_str(), (unsigned int)r->color, (unsigned int)r->bgcolor);
  }

  // Returns the count of lines
  const size_t count() const
  {
    return data.count();
  }

  // Clears lines
  void clear()
  {
    data.clear_lines();
    refresh_range();
  }

  //--------------------------------------------------------------------------
  bool jumpto(size_t ln, int x, int y)
  {
    simpleline_place_t l(ln);
    return customviewer_t::jumpto(&l, x, y);
  }

  //--------------------------------------------------------------------------
  // Initializes and links the Python object to this class
  bool init(PyObject *py_link, const char *title)
  {
    // Already created?
    if ( _cv != NULL )
      return true;

    // Probe callbacks
    features = 0;
    static struct
    {
      const char *cb_name;
      int feature;
    } const cbtable[] =
    {
      { S_ON_CLICK,              HAVE_CLICK },
      { S_ON_CLOSE,              HAVE_CLOSE },
      { S_ON_HINT,               HAVE_HINT },
      { S_ON_KEYDOWN,            HAVE_KEYDOWN },
      { S_ON_DBL_CLICK,          HAVE_DBLCLICK },
      { S_ON_CURSOR_POS_CHANGED, HAVE_CURPOS }
    };

    PYW_GIL_CHECK_LOCKED_SCOPE();
    for ( size_t i=0; i < qnumber(cbtable); i++ )
    {
      if ( PyObject_HasAttrString(py_link, cbtable[i].cb_name) )
        features |= cbtable[i].feature;
    }

    if ( !create(title, features, &data) )
      return false;

    // Hold a reference to this object
    py_last_link = py_self = py_link;
    Py_INCREF(py_self);

    // Return a reference to the C++ instance (only once)
    if ( py_this == NULL )
      py_this = PyCapsule_New(this,VALID_CAPSULE_NAME, NULL);

    return true;
  }

  //--------------------------------------------------------------------------
  bool show()
  {
    if ( _cv == NULL && py_last_link != NULL )
    {
      // Re-create the view (with same previous parameters)
      if ( !init(py_last_link, _title.c_str()) )
        return false;
    }
    return customviewer_t::show();
  }

  //--------------------------------------------------------------------------
  bool get_selection(size_t *x1, size_t *y1, size_t *x2, size_t *y2)
  {
    if ( _cv == NULL )
      return false;

    twinpos_t p1, p2;
    if ( !::read_selection(_cv, &p1, &p2) )
      return false;

    if ( y1 != NULL )
      *y1 = data.to_lineno(p1.at);
    if ( y2 != NULL )
      *y2 = data.to_lineno(p2.at);
    if ( x1 != NULL )
      *x1 = size_t(p1.x);
    if ( x2 != NULL )
      *x2 = p2.x;
    return true;
  }

  PyObject *py_get_selection()
  {
    size_t x1, y1, x2, y2;
    PYW_GIL_CHECK_LOCKED_SCOPE();
    if ( !get_selection(&x1, &y1, &x2, &y2) )
      Py_RETURN_NONE;
    return Py_BuildValue(
            "(" PY_BV_SZ PY_BV_SZ PY_BV_SZ PY_BV_SZ ")",
            bvsz_t(x1), bvsz_t(y1), bvsz_t(x2), bvsz_t(y2));
  }

  static py_simplecustview_t *get_this(PyObject *py_this)
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    return PyCapsule_IsValid(py_this, VALID_CAPSULE_NAME) ? (py_simplecustview_t *) PyCapsule_GetPointer(py_this, VALID_CAPSULE_NAME) : NULL;
  }

  PyObject *get_pythis()
  {
    return py_this;
  }
};

//</code(py_kernwin_custview)>


//<inline(py_kernwin_custview)>
//
// Pywraps Simple Custom Viewer functions
//
PyObject *pyscv_init(PyObject *py_link, const char *title)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  py_simplecustview_t *_this = new py_simplecustview_t();
  bool ok = _this->init(py_link, title);
  if ( !ok )
  {
    delete _this;
    Py_RETURN_NONE;
  }
  return _this->get_pythis();
}
#define DECL_THIS py_simplecustview_t *_this = py_simplecustview_t::get_this(py_this)

//--------------------------------------------------------------------------
bool pyscv_refresh(PyObject *py_this)
{
  DECL_THIS;
  if ( _this == NULL )
    return false;
  return _this->refresh();
}

//--------------------------------------------------------------------------
bool pyscv_delete(PyObject *py_this)
{
  DECL_THIS;
  if ( _this == NULL )
    return false;
  _this->close();
  delete _this;
  return true;
}

//--------------------------------------------------------------------------
bool pyscv_refresh_current(PyObject *py_this)
{
  DECL_THIS;
  if ( _this == NULL )
    return false;
  return _this->refresh_current();
}

//--------------------------------------------------------------------------
PyObject *pyscv_get_current_line(PyObject *py_this, bool mouse, bool notags)
{
  DECL_THIS;
  PYW_GIL_CHECK_LOCKED_SCOPE();
  const char *line;
  if ( _this == NULL || (line = _this->get_current_line(mouse, notags)) == NULL )
    Py_RETURN_NONE;
  return IDAPyStr_FromUTF8(line);
}

//--------------------------------------------------------------------------
bool pyscv_is_focused(PyObject *py_this)
{
  DECL_THIS;
  if ( _this == NULL )
    return false;
  return _this->is_focused();
}

size_t pyscv_count(PyObject *py_this)
{
  DECL_THIS;
  return _this == NULL ? 0 : _this->count();
}

bool pyscv_show(PyObject *py_this)
{
  DECL_THIS;
  return _this == NULL ? false : _this->show();
}

void pyscv_close(PyObject *py_this)
{
  DECL_THIS;
  if ( _this != NULL )
    _this->close();
}

bool pyscv_jumpto(PyObject *py_this, size_t ln, int x, int y)
{
  DECL_THIS;
  if ( _this == NULL )
    return false;
  return _this->jumpto(ln, x, y);
}

// Returns the line tuple
PyObject *pyscv_get_line(PyObject *py_this, size_t nline)
{
  DECL_THIS;
  if ( _this == NULL )
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    Py_RETURN_NONE;
  }
  return _this->get_line(nline);
}

//--------------------------------------------------------------------------
// Gets the position and returns a tuple (lineno, x, y)
PyObject *pyscv_get_pos(PyObject *py_this, bool mouse)
{
  DECL_THIS;
  if ( _this == NULL )
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    Py_RETURN_NONE;
  }
  return _this->get_pos(mouse);
}

//--------------------------------------------------------------------------
PyObject *pyscv_clear_lines(PyObject *py_this)
{
  DECL_THIS;
  if ( _this != NULL )
    _this->clear();
  PYW_GIL_CHECK_LOCKED_SCOPE();
  Py_RETURN_NONE;
}

//--------------------------------------------------------------------------
// Adds a line tuple
bool pyscv_add_line(PyObject *py_this, PyObject *py_sl)
{
  DECL_THIS;
  return _this == NULL ? false : _this->add_line(py_sl);
}

//--------------------------------------------------------------------------
bool pyscv_insert_line(PyObject *py_this, size_t nline, PyObject *py_sl)
{
  DECL_THIS;
  return _this == NULL ? false : _this->insert_line(nline, py_sl);
}

//--------------------------------------------------------------------------
bool pyscv_patch_line(PyObject *py_this, size_t nline, size_t offs, int value)
{
  DECL_THIS;
  return _this == NULL ? false : _this->patch_line(nline, offs, value);
}

//--------------------------------------------------------------------------
bool pyscv_del_line(PyObject *py_this, size_t nline)
{
  DECL_THIS;
  return _this == NULL ? false : _this->del_line(nline);
}

//--------------------------------------------------------------------------
PyObject *pyscv_get_selection(PyObject *py_this)
{
  DECL_THIS;
  if ( _this == NULL )
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    Py_RETURN_NONE;
  }
  return _this->py_get_selection();
}

//--------------------------------------------------------------------------
PyObject *pyscv_get_current_word(PyObject *py_this, bool mouse)
{
  DECL_THIS;
  PYW_GIL_CHECK_LOCKED_SCOPE();
  if ( _this != NULL )
  {
    qstring word;
    if ( _this->get_current_word(mouse, word) )
      return IDAPyStr_FromUTF8(word.c_str());
  }
  Py_RETURN_NONE;
}

//--------------------------------------------------------------------------
// Edits an existing line
bool pyscv_edit_line(PyObject *py_this, size_t nline, PyObject *py_sl)
{
  DECL_THIS;
  return _this == NULL ? false : _this->edit_line(nline, py_sl);
}

//-------------------------------------------------------------------------
TWidget *pyscv_get_widget(PyObject *py_this)
{
  DECL_THIS;
  return _this == NULL ? NULL : _this->get_widget();
}


#undef DECL_THIS
//</inline(py_kernwin_custview)>


//<code(py_kernwin_plgform)>
//---------------------------------------------------------------------------
class plgform_t
{
  ref_t py_obj;
  TWidget *widget;

  static ssize_t idaapi s_callback(void *ud, int notification_code, va_list va)
  {
    // This hook gets called from the kernel. Ensure we hold the GIL.
    PYW_GIL_GET;

    plgform_t *_this = (plgform_t *)ud;
    if ( notification_code == ui_widget_invisible )
    {
      TWidget *widget = va_arg(va, TWidget *);
      if ( widget == _this->widget )
      {
        {
          newref_t py_result(
                  PyObject_CallMethod(
                          _this->py_obj.o,
                          (char *)S_ON_CLOSE, "O",
                          PyCapsule_New(widget, VALID_CAPSULE_NAME, NULL)));
          PyW_ShowCbErr(S_ON_CLOSE);
        }
        _this->unhook();
      }
    }
    return 0;
  }

  void unhook()
  {
    idapython_unhook_from_notification_point(HT_UI, s_callback, this);
    widget = NULL;

    // Call DECREF at last, since it may trigger __del__
    PYW_GIL_CHECK_LOCKED_SCOPE();
    py_obj = ref_t();
  }

public:
  plgform_t() : widget(NULL) {}

  bool show(
          PyObject *obj,
          const char *caption,
          int options)
  {
    const bool create_only = options == -1;

    // Already displayed?
    TWidget *f = find_widget(caption);
    if ( f != NULL )
    {
      // Our form?
      if ( f == widget )
      {
        // Switch to it
        if ( !create_only )
          activate_widget(widget, true);
        return true;
      }
      // Fail to create
      return false;
    }

    // Create a form
    widget = create_empty_widget(caption);
    if ( widget == NULL )
      return false;

    if ( !idapython_hook_to_notification_point(HT_UI, s_callback, this) )
    {
      widget = NULL;
      return false;
    }

    py_obj = borref_t(obj);

    this->widget = widget;

    // Qt: QWidget*
    // G: HWND
    // We wrap and pass as a CObject in the hope that a Python UI framework
    // can unwrap a CObject and get the hwnd/widget back
    newref_t py_result(
            PyObject_CallMethod(
                    py_obj.o,
                    (char *)S_ON_CREATE, "O",
                    PyCapsule_New(widget, VALID_CAPSULE_NAME, NULL)));
    PyW_ShowCbErr(S_ON_CREATE);

    if ( !create_only )
      display_widget(widget, options);
    return true;
  }

  void close(int options = 0)
  {
    if ( widget != NULL )
      close_widget(widget, options);
  }

  TWidget *get_widget() { return widget; }

  static PyObject *create()
  {
    PYW_GIL_CHECK_LOCKED_SCOPE();
    return PyCapsule_New(new plgform_t(),VALID_CAPSULE_NAME, destroy);
  }

  static void destroy(void *obj)
  {
    delete (plgform_t *)obj;
  }
};
//</code(py_kernwin_plgform)>


//<inline(py_kernwin_plgform)>
//---------------------------------------------------------------------------
#define DECL_PLGFORM PYW_GIL_CHECK_LOCKED_SCOPE(); plgform_t *plgform = (plgform_t *) PyCObject_AsVoidPtr(py_link);
static PyObject *plgform_new()
{
  return plgform_t::create();
}

static bool plgform_show(
        PyObject *py_link,
        PyObject *py_obj,
        const char *caption,
        int options = WOPN_TAB|WOPN_RESTORE)
{
  DECL_PLGFORM;
  return plgform->show(py_obj, caption, options);
}

static void plgform_close(
        PyObject *py_link,
        int options)
{
  DECL_PLGFORM;
  plgform->close(options);
}

static TWidget *plgform_get_widget(
        PyObject *py_link)
{
  DECL_PLGFORM;
  return plgform->get_widget();
}

#undef DECL_PLGFORM
//</inline(py_kernwin_plgform)>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "kernwin.h"

SwigDirector_UI_Hooks::SwigDirector_UI_Hooks(PyObject *self): UI_Hooks(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((UI_Hooks *)this, this); 
}




SwigDirector_UI_Hooks::~SwigDirector_UI_Hooks() {
}

void SwigDirector_UI_Hooks::range() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "range";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("range");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.range'");
    }
  }
}


void SwigDirector_UI_Hooks::idcstart() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "idcstart";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("idcstart");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.idcstart'");
    }
  }
}


void SwigDirector_UI_Hooks::idcstop() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "idcstop";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("idcstop");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.idcstop'");
    }
  }
}


void SwigDirector_UI_Hooks::suspend() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "suspend";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("suspend");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.suspend'");
    }
  }
}


void SwigDirector_UI_Hooks::resume() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "resume";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("resume");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.resume'");
    }
  }
}


void SwigDirector_UI_Hooks::saving() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "saving";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("saving");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.saving'");
    }
  }
}


void SwigDirector_UI_Hooks::saved() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char *const swig_method_name = "saved";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("saved");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.saved'");
    }
  }
}


void SwigDirector_UI_Hooks::term() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char *const swig_method_name = "term";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("term");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.term'");
    }
  }
}


int SwigDirector_UI_Hooks::debugger_menu_change(bool enable) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_bool(static_cast< bool >(enable));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char *const swig_method_name = "debugger_menu_change";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("debugger_menu_change");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.debugger_menu_change'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'debugger_menu_change'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


void SwigDirector_UI_Hooks::widget_visible(TWidget *widget) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(widget), SWIGTYPE_p_TWidget,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 9;
  const char *const swig_method_name = "widget_visible";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("widget_visible");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.widget_visible'");
    }
  }
}


void SwigDirector_UI_Hooks::widget_closing(TWidget *widget) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(widget), SWIGTYPE_p_TWidget,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 10;
  const char *const swig_method_name = "widget_closing";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("widget_closing");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.widget_closing'");
    }
  }
}


void SwigDirector_UI_Hooks::widget_invisible(TWidget *widget) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(widget), SWIGTYPE_p_TWidget,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 11;
  const char *const swig_method_name = "widget_invisible";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("widget_invisible");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.widget_invisible'");
    }
  }
}


PyObject *SwigDirector_UI_Hooks::get_ea_hint(ea_t ea) {
  PyObject *c_result = 0 ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 12;
  const char *const swig_method_name = "get_ea_hint";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("get_ea_hint");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.get_ea_hint'");
    }
  }
  /*%dout%*/c_result = result;Py_XINCREF(c_result);
  return (PyObject *) c_result;
}


PyObject *SwigDirector_UI_Hooks::get_item_hint(ea_t ea, int max_lines) {
  PyObject *c_result = 0 ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(max_lines));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 13;
  const char *const swig_method_name = "get_item_hint";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("get_item_hint");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.get_item_hint'");
    }
  }
  /*%dout%*/c_result = result;Py_XINCREF(c_result);
  return (PyObject *) c_result;
}


PyObject *SwigDirector_UI_Hooks::get_custom_viewer_hint(TWidget *viewer, place_t *place) {
  PyObject *c_result = 0 ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(viewer), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(place), SWIGTYPE_p_place_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 14;
  const char *const swig_method_name = "get_custom_viewer_hint";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("get_custom_viewer_hint");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.get_custom_viewer_hint'");
    }
  }
  /*%dout%*/c_result = result;Py_XINCREF(c_result);
  return (PyObject *) c_result;
}


void SwigDirector_UI_Hooks::database_inited(int is_new_database, char const *idc_script) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(is_new_database));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_FromCharPtr((const char *)idc_script);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 15;
  const char *const swig_method_name = "database_inited";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("database_inited");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.database_inited'");
    }
  }
}


void SwigDirector_UI_Hooks::ready_to_run() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 16;
  const char *const swig_method_name = "ready_to_run";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("ready_to_run");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.ready_to_run'");
    }
  }
}


void SwigDirector_UI_Hooks::preprocess_action(char const *name) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)name);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 17;
  const char *const swig_method_name = "preprocess_action";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("preprocess_action");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.preprocess_action'");
    }
  }
}


void SwigDirector_UI_Hooks::postprocess_action() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 18;
  const char *const swig_method_name = "postprocess_action";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("postprocess_action");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.postprocess_action'");
    }
  }
}


void SwigDirector_UI_Hooks::get_chooser_item_attrs(chooser_base_t const *chooser, size_t n, chooser_item_attrs_t *attrs) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(chooser), SWIGTYPE_p_chooser_base_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(n));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(attrs), SWIGTYPE_p_chooser_item_attrs_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 19;
  const char *const swig_method_name = "get_chooser_item_attrs";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("get_chooser_item_attrs");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.get_chooser_item_attrs'");
    }
  }
}


void SwigDirector_UI_Hooks::updating_actions(action_update_ctx_t *ctx) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(ctx), SWIGTYPE_p_action_ctx_base_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 20;
  const char *const swig_method_name = "updating_actions";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("updating_actions");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.updating_actions'");
    }
  }
}


void SwigDirector_UI_Hooks::updated_actions() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 21;
  const char *const swig_method_name = "updated_actions";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("updated_actions");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.updated_actions'");
    }
  }
}


void SwigDirector_UI_Hooks::populating_widget_popup(TWidget *widget, TPopupMenu *popup_handle, action_activation_ctx_t const *ctx) {
  // patched by patch_codegen.py
  newref_t __method(PyObject_GetAttrString(swig_get_self(), "populating_widget_popup"));
  ssize_t __argcnt = get_callable_arg_count(__method);
  QASSERT(0, __argcnt >= 0);
  swig::SwigVar_PyObject obj0;

  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(widget), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(popup_handle), SWIGTYPE_p_TPopupMenu,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(ctx), SWIGTYPE_p_action_ctx_base_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 22;
  const char *const swig_method_name = "populating_widget_popup";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
#error CHECK_THAT_THIS_WORKS
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(__argcnt < 3 ? NULL : (PyObject *)obj2), NULL);

#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("populating_widget_popup");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(__argcnt < 4 ? NULL : (PyObject *)obj2), NULL);

#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.populating_widget_popup'");
    }
  }
}


void SwigDirector_UI_Hooks::finish_populating_widget_popup(TWidget *widget, TPopupMenu *popup_handle, action_activation_ctx_t const *ctx) {
  // patched by patch_codegen.py
  newref_t __method(PyObject_GetAttrString(swig_get_self(), "finish_populating_widget_popup"));
  ssize_t __argcnt = get_callable_arg_count(__method);
  QASSERT(0, __argcnt >= 0);
  swig::SwigVar_PyObject obj0;

  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(widget), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(popup_handle), SWIGTYPE_p_TPopupMenu,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(ctx), SWIGTYPE_p_action_ctx_base_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 23;
  const char *const swig_method_name = "finish_populating_widget_popup";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
#error CHECK_THAT_THIS_WORKS
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(__argcnt < 3 ? NULL : (PyObject *)obj2), NULL);

#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("finish_populating_widget_popup");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(__argcnt < 4 ? NULL : (PyObject *)obj2), NULL);

#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.finish_populating_widget_popup'");
    }
  }
}


void SwigDirector_UI_Hooks::plugin_loaded(plugin_info_t const *plugin_info) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(plugin_info), SWIGTYPE_p_plugin_info_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 24;
  const char *const swig_method_name = "plugin_loaded";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("plugin_loaded");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.plugin_loaded'");
    }
  }
}


void SwigDirector_UI_Hooks::plugin_unloading(plugin_info_t const *plugin_info) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(plugin_info), SWIGTYPE_p_plugin_info_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 25;
  const char *const swig_method_name = "plugin_unloading";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("plugin_unloading");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.plugin_unloading'");
    }
  }
}


void SwigDirector_UI_Hooks::current_widget_changed(TWidget *widget, TWidget *prev_widget) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(widget), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(prev_widget), SWIGTYPE_p_TWidget,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 26;
  const char *const swig_method_name = "current_widget_changed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("current_widget_changed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.current_widget_changed'");
    }
  }
}


void SwigDirector_UI_Hooks::screen_ea_changed(ea_t ea, ea_t prev_ea) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(prev_ea));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 27;
  const char *const swig_method_name = "screen_ea_changed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("screen_ea_changed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.screen_ea_changed'");
    }
  }
}


PyObject *SwigDirector_UI_Hooks::create_desktop_widget(char const *title, jobj_wrapper_t cfg) {
  PyObject *c_result = 0 ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)title);
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(new jobj_wrapper_t((const jobj_wrapper_t &)cfg)), SWIGTYPE_p_jobj_wrapper_t, SWIG_POINTER_OWN |  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call UI_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 28;
  const char *const swig_method_name = "create_desktop_widget";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("create_desktop_widget");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'UI_Hooks.create_desktop_widget'");
    }
  }
  /*%dout%*/c_result = result;Py_XINCREF(c_result);
  return (PyObject *) c_result;
}


SwigDirector_View_Hooks::SwigDirector_View_Hooks(PyObject *self): View_Hooks(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((View_Hooks *)this, this); 
}




SwigDirector_View_Hooks::~SwigDirector_View_Hooks() {
}

void SwigDirector_View_Hooks::view_activated(TWidget *view) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "view_activated";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_activated");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_activated'");
    }
  }
}


void SwigDirector_View_Hooks::view_deactivated(TWidget *view) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "view_deactivated";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_deactivated");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_deactivated'");
    }
  }
}


void SwigDirector_View_Hooks::view_keydown(TWidget *view, int key, view_event_state_t state) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(key));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_int(static_cast< int >(state));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "view_keydown";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_keydown");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_keydown'");
    }
  }
}


void SwigDirector_View_Hooks::view_click(TWidget *view, view_mouse_event_t const *event) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(event), SWIGTYPE_p_view_mouse_event_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "view_click";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_click");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_click'");
    }
  }
}


void SwigDirector_View_Hooks::view_dblclick(TWidget *view, view_mouse_event_t const *event) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(event), SWIGTYPE_p_view_mouse_event_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "view_dblclick";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_dblclick");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_dblclick'");
    }
  }
}


void SwigDirector_View_Hooks::view_curpos(TWidget *view) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "view_curpos";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_curpos");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_curpos'");
    }
  }
}


void SwigDirector_View_Hooks::view_created(TWidget *view) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char *const swig_method_name = "view_created";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_created");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_created'");
    }
  }
}


void SwigDirector_View_Hooks::view_close(TWidget *view) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char *const swig_method_name = "view_close";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_close");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_close'");
    }
  }
}


void SwigDirector_View_Hooks::view_switched(TWidget *view, tcc_renderer_type_t rt) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(rt));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char *const swig_method_name = "view_switched";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_switched");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_switched'");
    }
  }
}


void SwigDirector_View_Hooks::view_mouse_over(TWidget *view, view_mouse_event_t const *event) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(event), SWIGTYPE_p_view_mouse_event_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 9;
  const char *const swig_method_name = "view_mouse_over";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_mouse_over");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_mouse_over'");
    }
  }
}


void SwigDirector_View_Hooks::view_loc_changed(TWidget *view, lochist_entry_t const *now, lochist_entry_t const *was) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(now), SWIGTYPE_p_lochist_entry_t,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(was), SWIGTYPE_p_lochist_entry_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 10;
  const char *const swig_method_name = "view_loc_changed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_loc_changed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_loc_changed'");
    }
  }
}


void SwigDirector_View_Hooks::view_mouse_moved(TWidget *view, view_mouse_event_t const *event) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(view), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(event), SWIGTYPE_p_view_mouse_event_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call View_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 11;
  const char *const swig_method_name = "view_mouse_moved";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("view_mouse_moved");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'View_Hooks.view_mouse_moved'");
    }
  }
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_refresh_choosers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "refresh_choosers", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      refresh_choosers();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "textctrl_info_t_create", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (PyObject *)textctrl_info_t_create();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)textctrl_info_t_destroy(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_get_clink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  textctrl_info_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (textctrl_info_t *)textctrl_info_t_get_clink(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_textctrl_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_get_clink_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (PyObject *)textctrl_info_t_get_clink_ptr(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_register_timer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  PyObject *arg2 = (PyObject *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "register_timer", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "register_timer" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  arg2 = swig_obj[1];
  {
    try
    {
      result = (PyObject *)py_register_timer(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unregister_timer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (PyObject *)py_unregister_timer(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_idasgn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "choose_idasgn", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (PyObject *)py_choose_idasgn();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_highlight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_highlight" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (PyObject *)py_get_highlight(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_py_load_custom_icon_fn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py_load_custom_icon_fn" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (int)py_load_custom_icon_fn((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_py_load_custom_icon_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  char *arg2 = (char *) 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "py_load_custom_icon_data", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "py_load_custom_icon_data" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (int)py_load_custom_icon_data(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (PyObject *)py_msg(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ask_text(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  size_t arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ask_text", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ask_text" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ask_text" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ask_text" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (PyObject *)py_ask_text(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ask_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ask_str", 3, 3, swig_obj)) SWIG_fail;
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[0]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[0], &buf, &length);
      arg1 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "ask_str" "', argument " "1"" of type 'str'");
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ask_str" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ask_str" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (PyObject *)py_ask_str(arg1,arg2,(char const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  {
    // bytes_container qstring * typemap(freearg)
    delete arg1;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg1;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_str2ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  ea_t arg2 = (ea_t) BADADDR ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[2] ;
  ea_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "str2ea", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str2ea" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (swig_obj[1]) {
    {
      // %typemap(in) ea_t
      uint64 arg2_temp;
      if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
      SWIG_exception_fail(
        SWIG_TypeError,
        "in method '" "str2ea" "', argument " "2"" of type 'ea_t'");
      arg2 = ea_t(arg2_temp);
    }
  }
  {
    try
    {
      result = (ea_t)py_str2ea((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_process_ui_action(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int arg2 = (int) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "process_ui_action", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process_ui_action" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "process_ui_action" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try
    {
      result = (bool)py_process_ui_action((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_del_hotkey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)py_del_hotkey(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_hotkey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "add_hotkey", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_hotkey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    if (!PyCallable_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected a callable object");
      return NULL;
    }
    arg2 = swig_obj[1];
  }
  {
    try
    {
      result = (PyObject *)py_add_hotkey((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_take_database_snapshot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  snapshot_t *arg1 = (snapshot_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_snapshot_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "take_database_snapshot" "', argument " "1"" of type '" "snapshot_t *""'"); 
  }
  arg1 = reinterpret_cast< snapshot_t * >(argp1);
  {
    try
    {
      result = (PyObject *)py_take_database_snapshot(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_py_ss_restore_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "py_ss_restore_callback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py_ss_restore_callback" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "py_ss_restore_callback" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try
    {
      py_ss_restore_callback((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_restore_database_snapshot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  snapshot_t *arg1 = (snapshot_t *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "restore_database_snapshot", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_snapshot_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "restore_database_snapshot" "', argument " "1"" of type '" "snapshot_t const *""'"); 
  }
  arg1 = reinterpret_cast< snapshot_t * >(argp1);
  {
    if (swig_obj[1] != Py_None && !PyCallable_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected None or a callable object");
      return NULL;
    }
    arg2 = swig_obj[1];
  }
  arg3 = swig_obj[2];
  {
    try
    {
      result = (PyObject *)py_restore_database_snapshot((snapshot_t const *)arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_execute_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "execute_sync", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "execute_sync" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (int)py_execute_sync(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_execute_ui_requests(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)py_execute_ui_requests(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jobj_wrapper_t_get_dict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jobj_wrapper_t *arg1 = (jobj_wrapper_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_jobj_wrapper_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jobj_wrapper_t_get_dict" "', argument " "1"" of type '" "jobj_wrapper_t *""'"); 
  }
  arg1 = reinterpret_cast< jobj_wrapper_t * >(argp1);
  {
    try
    {
      result = (PyObject *)(arg1)->get_dict();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *jobj_wrapper_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_jobj_wrapper_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_UI_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UI_Hooks" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_hook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_hook" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->hook();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_unhook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_unhook" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->unhook();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_range" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::range();
        } else {
          (arg1)->range();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_idcstart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_idcstart" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::idcstart();
        } else {
          (arg1)->idcstart();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_idcstop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_idcstop" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::idcstop();
        } else {
          (arg1)->idcstop();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_suspend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_suspend" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::suspend();
        } else {
          (arg1)->suspend();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_resume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_resume" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::resume();
        } else {
          (arg1)->resume();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_saving(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_saving" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::saving();
        } else {
          (arg1)->saving();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_saved(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_saved" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::saved();
        } else {
          (arg1)->saved();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_term(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_term" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::term();
        } else {
          (arg1)->term();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_debugger_menu_change(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_debugger_menu_change", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_debugger_menu_change" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UI_Hooks_debugger_menu_change" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->UI_Hooks::debugger_menu_change(arg2);
        } else {
          result = (int)(arg1)->debugger_menu_change(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_widget_visible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_widget_visible", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_widget_visible" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_widget_visible" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::widget_visible(arg2);
        } else {
          (arg1)->widget_visible(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_widget_closing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_widget_closing", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_widget_closing" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_widget_closing" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::widget_closing(arg2);
        } else {
          (arg1)->widget_closing(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_widget_invisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_widget_invisible", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_widget_invisible" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_widget_invisible" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::widget_invisible(arg2);
        } else {
          (arg1)->widget_invisible(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_get_ea_hint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_get_ea_hint", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_get_ea_hint" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "UI_Hooks_get_ea_hint" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (PyObject *)(arg1)->UI_Hooks::get_ea_hint(arg2);
        } else {
          result = (PyObject *)(arg1)->get_ea_hint(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = result;
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_get_item_hint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  ea_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_get_item_hint", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_get_item_hint" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "UI_Hooks_get_item_hint" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UI_Hooks_get_item_hint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (PyObject *)(arg1)->UI_Hooks::get_item_hint(arg2,arg3);
        } else {
          result = (PyObject *)(arg1)->get_item_hint(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = result;
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_get_custom_viewer_hint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  place_t *arg3 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_get_custom_viewer_hint", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_get_custom_viewer_hint" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_get_custom_viewer_hint" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UI_Hooks_get_custom_viewer_hint" "', argument " "3"" of type '" "place_t *""'"); 
  }
  arg3 = reinterpret_cast< place_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (PyObject *)(arg1)->UI_Hooks::get_custom_viewer_hint(arg2,arg3);
        } else {
          result = (PyObject *)(arg1)->get_custom_viewer_hint(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = result;
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_database_inited(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_database_inited", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_database_inited" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UI_Hooks_database_inited" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UI_Hooks_database_inited" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::database_inited(arg2,(char const *)arg3);
        } else {
          (arg1)->database_inited(arg2,(char const *)arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_ready_to_run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_ready_to_run" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::ready_to_run();
        } else {
          (arg1)->ready_to_run();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_preprocess_action(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_preprocess_action", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_preprocess_action" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_preprocess_action" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::preprocess_action((char const *)arg2);
        } else {
          (arg1)->preprocess_action((char const *)arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_postprocess_action(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_postprocess_action" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::postprocess_action();
        } else {
          (arg1)->postprocess_action();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_get_chooser_item_attrs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  chooser_base_t *arg2 = (chooser_base_t *) 0 ;
  size_t arg3 ;
  chooser_item_attrs_t *arg4 = (chooser_item_attrs_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_get_chooser_item_attrs", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_get_chooser_item_attrs" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_chooser_base_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_get_chooser_item_attrs" "', argument " "2"" of type '" "chooser_base_t const *""'"); 
  }
  arg2 = reinterpret_cast< chooser_base_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UI_Hooks_get_chooser_item_attrs" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_chooser_item_attrs_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UI_Hooks_get_chooser_item_attrs" "', argument " "4"" of type '" "chooser_item_attrs_t *""'"); 
  }
  arg4 = reinterpret_cast< chooser_item_attrs_t * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::get_chooser_item_attrs((chooser_base_t const *)arg2,arg3,arg4);
        } else {
          (arg1)->get_chooser_item_attrs((chooser_base_t const *)arg2,arg3,arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_updating_actions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  action_update_ctx_t *arg2 = (action_update_ctx_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_updating_actions", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_updating_actions" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_updating_actions" "', argument " "2"" of type '" "action_update_ctx_t *""'"); 
  }
  arg2 = reinterpret_cast< action_update_ctx_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::updating_actions(arg2);
        } else {
          (arg1)->updating_actions(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_updated_actions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_updated_actions" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::updated_actions();
        } else {
          (arg1)->updated_actions();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_populating_widget_popup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  TPopupMenu *arg3 = (TPopupMenu *) 0 ;
  action_activation_ctx_t *arg4 = (action_activation_ctx_t *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_populating_widget_popup", 3, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_populating_widget_popup" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_populating_widget_popup" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_TPopupMenu, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UI_Hooks_populating_widget_popup" "', argument " "3"" of type '" "TPopupMenu *""'"); 
  }
  arg3 = reinterpret_cast< TPopupMenu * >(argp3);
  if (swig_obj[3]) {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UI_Hooks_populating_widget_popup" "', argument " "4"" of type '" "action_activation_ctx_t const *""'"); 
    }
    arg4 = reinterpret_cast< action_activation_ctx_t * >(argp4);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::populating_widget_popup(arg2,arg3,(action_activation_ctx_t const *)arg4);
        } else {
          (arg1)->populating_widget_popup(arg2,arg3,(action_activation_ctx_t const *)arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_finish_populating_widget_popup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  TPopupMenu *arg3 = (TPopupMenu *) 0 ;
  action_activation_ctx_t *arg4 = (action_activation_ctx_t *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_finish_populating_widget_popup", 3, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_finish_populating_widget_popup" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_finish_populating_widget_popup" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_TPopupMenu, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UI_Hooks_finish_populating_widget_popup" "', argument " "3"" of type '" "TPopupMenu *""'"); 
  }
  arg3 = reinterpret_cast< TPopupMenu * >(argp3);
  if (swig_obj[3]) {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UI_Hooks_finish_populating_widget_popup" "', argument " "4"" of type '" "action_activation_ctx_t const *""'"); 
    }
    arg4 = reinterpret_cast< action_activation_ctx_t * >(argp4);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::finish_populating_widget_popup(arg2,arg3,(action_activation_ctx_t const *)arg4);
        } else {
          (arg1)->finish_populating_widget_popup(arg2,arg3,(action_activation_ctx_t const *)arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_plugin_loaded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  plugin_info_t *arg2 = (plugin_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_plugin_loaded", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_plugin_loaded" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_plugin_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_plugin_loaded" "', argument " "2"" of type '" "plugin_info_t const *""'"); 
  }
  arg2 = reinterpret_cast< plugin_info_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::plugin_loaded((plugin_info_t const *)arg2);
        } else {
          (arg1)->plugin_loaded((plugin_info_t const *)arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_plugin_unloading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  plugin_info_t *arg2 = (plugin_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_plugin_unloading", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_plugin_unloading" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_plugin_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_plugin_unloading" "', argument " "2"" of type '" "plugin_info_t const *""'"); 
  }
  arg2 = reinterpret_cast< plugin_info_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::plugin_unloading((plugin_info_t const *)arg2);
        } else {
          (arg1)->plugin_unloading((plugin_info_t const *)arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_current_widget_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  TWidget *arg3 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_current_widget_changed", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_current_widget_changed" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_current_widget_changed" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UI_Hooks_current_widget_changed" "', argument " "3"" of type '" "TWidget *""'"); 
  }
  arg3 = reinterpret_cast< TWidget * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::current_widget_changed(arg2,arg3);
        } else {
          (arg1)->current_widget_changed(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_screen_ea_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  ea_t arg2 ;
  ea_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_screen_ea_changed", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_screen_ea_changed" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "UI_Hooks_screen_ea_changed" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "UI_Hooks_screen_ea_changed" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->UI_Hooks::screen_ea_changed(arg2,arg3);
        } else {
          (arg1)->screen_ea_changed(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UI_Hooks_create_desktop_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< jobj_wrapper_t > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "UI_Hooks_create_desktop_widget", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UI_Hooks_create_desktop_widget" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UI_Hooks_create_desktop_widget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_jobj_wrapper_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UI_Hooks_create_desktop_widget" "', argument " "3"" of type '" "jobj_wrapper_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UI_Hooks_create_desktop_widget" "', argument " "3"" of type '" "jobj_wrapper_t""'");
    } else {
      jobj_wrapper_t * temp = reinterpret_cast< jobj_wrapper_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (PyObject *)(arg1)->UI_Hooks::create_desktop_widget((char const *)arg2,arg3);
        } else {
          result = (PyObject *)(arg1)->create_desktop_widget((char const *)arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = result;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UI_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  UI_Hooks *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (UI_Hooks *)new SwigDirector_UI_Hooks(arg1); 
      } else {
        result = (UI_Hooks *)new UI_Hooks(); 
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UI_Hooks, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_UI_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UI_Hooks *arg1 = (UI_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UI_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_UI_Hooks" "', argument " "1"" of type '" "UI_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< UI_Hooks * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UI_Hooks_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_UI_Hooks, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UI_Hooks_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_register_action(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "register_action" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  {
    try
    {
      result = (bool)py_register_action(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_registered_actions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_registered_actions", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (PyObject *)py_get_registered_actions();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_attach_dynamic_action_to_popup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  TPopupMenu *arg2 = (TPopupMenu *) 0 ;
  action_desc_t *arg3 = (action_desc_t *) 0 ;
  char *arg4 = (char *) NULL ;
  int arg5 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "attach_dynamic_action_to_popup", 3, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "attach_dynamic_action_to_popup" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TPopupMenu, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "attach_dynamic_action_to_popup" "', argument " "2"" of type '" "TPopupMenu *""'"); 
  }
  arg2 = reinterpret_cast< TPopupMenu * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "attach_dynamic_action_to_popup" "', argument " "3"" of type '" "action_desc_t *""'"); 
  }
  arg3 = reinterpret_cast< action_desc_t * >(argp3);
  if (swig_obj[3]) {
    res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "attach_dynamic_action_to_popup" "', argument " "4"" of type '" "char const *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "attach_dynamic_action_to_popup" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    try
    {
      result = (bool)py_attach_dynamic_action_to_popup(arg1,arg2,arg3,(char const *)arg4,arg5);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_disasm_line_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  disasm_line_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (disasm_line_t *)new disasm_line_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_disasm_line_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_disasm_line_t" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_disasm_line_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  disasm_line_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_disasm_line_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_disasm_line_t" "', argument " "1"" of type '" "disasm_line_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_disasm_line_t" "', argument " "1"" of type '" "disasm_line_t const &""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  {
    try
    {
      result = (disasm_line_t *)new disasm_line_t((disasm_line_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_disasm_line_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_disasm_line_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_disasm_line_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_disasm_line_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_disasm_line_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_disasm_line_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    disasm_line_t::disasm_line_t()\n"
    "    disasm_line_t::disasm_line_t(disasm_line_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_at_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  place_t *arg2 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_line_t_at_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_at_set" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_place_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "disasm_line_t_at_set" "', argument " "2"" of type '" "place_t *""'"); 
  }
  arg2 = reinterpret_cast< place_t * >(argp2);
  if (arg1) (arg1)->at = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_at_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  place_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_at_get" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  result = (place_t *) ((arg1)->at);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_place_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_line_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_line_t_line_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_line_set" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "disasm_line_t_line_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->line = *arg2;
  resultobj = SWIG_Py_Void();
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_line_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_line_get" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  result = (qstring *)& ((arg1)->line);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_prefix_color_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  color_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_line_t_prefix_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_prefix_color_set" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "disasm_line_t_prefix_color_set" "', argument " "2"" of type '" "color_t""'");
  } 
  arg2 = static_cast< color_t >(val2);
  if (arg1) (arg1)->prefix_color = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_prefix_color_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  color_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_prefix_color_get" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  result = (color_t) ((arg1)->prefix_color);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_bg_color_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  bgcolor_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_line_t_bg_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_bg_color_set" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "disasm_line_t_bg_color_set" "', argument " "2"" of type '" "bgcolor_t""'");
  } 
  arg2 = static_cast< bgcolor_t >(val2);
  if (arg1) (arg1)->bg_color = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_bg_color_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bgcolor_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_bg_color_get" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  result = (bgcolor_t) ((arg1)->bg_color);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_is_default_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_line_t_is_default_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_is_default_set" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "disasm_line_t_is_default_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->is_default = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_line_t_is_default_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  disasm_line_t *arg1 = (disasm_line_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_line_t_is_default_get" "', argument " "1"" of type '" "disasm_line_t *""'"); 
  }
  arg1 = reinterpret_cast< disasm_line_t * >(argp1);
  result = (bool) ((arg1)->is_default);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *disasm_line_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_disasm_line_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *disasm_line_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_gen_disasm_text(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  disasm_text_t *arg1 = 0 ;
  ea_t arg2 ;
  ea_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "gen_disasm_text", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_disasm_line_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gen_disasm_text" "', argument " "1"" of type '" "disasm_text_t &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gen_disasm_text" "', argument " "1"" of type '" "disasm_text_t &""'"); 
  }
  arg1 = reinterpret_cast< disasm_text_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "gen_disasm_text" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "gen_disasm_text" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "gen_disasm_text" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      py_gen_disasm_text(*arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_nav_colorizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  nav_colorizer_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (nav_colorizer_t *)py_set_nav_colorizer(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_unsigned_int_unsigned_int__unsigned_int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_call_nav_colorizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nav_colorizer_t *arg1 = (nav_colorizer_t *) 0 ;
  ea_t arg2 ;
  asize_t arg3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  uint32 result;
  
  if (!SWIG_Python_UnpackTuple(args, "call_nav_colorizer", 3, 3, swig_obj)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_unsigned_int_unsigned_int__unsigned_int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "call_nav_colorizer" "', argument " "1"" of type '" "nav_colorizer_t *""'"); 
    }
  }
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "call_nav_colorizer" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "call_nav_colorizer" "', argument " "3"" of type '" "asize_t""'");
  } 
  arg3 = static_cast< asize_t >(val3);
  {
    try
    {
      result = (uint32)py_call_nav_colorizer(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_get_lines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 = (int) -1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "msg_get_lines", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "msg_get_lines" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    try
    {
      result = (PyObject *)py_msg_get_lines(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TWidget__from_ptrval__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    arg1 = size_t(PyLong_AsUnsignedLongLong(swig_obj[0]));
  }
  {
    try
    {
      result = (TWidget *)TWidget__from_ptrval__(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_kernel_version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  ssize_t result;
  
  {
    arg2 = MAXSPECSIZE;
  }
  {
    arg1 = (char *) qalloc(1024+1);
  }
  if (!SWIG_Python_UnpackTuple(args, "get_kernel_version", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = get_kernel_version(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  {
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8(arg1);
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
    qfree(arg1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_lnnum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_lnnum_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_lnnum_set" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "place_t_lnnum_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->lnnum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_lnnum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_lnnum_get" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  result = (int) ((arg1)->lnnum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t__print", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t__print" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "place_t__print" "', argument " "2"" of type 'str'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "place_t__print" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try
    {
      ((place_t const *)arg1)->print(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_touval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  uval_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_touval", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_touval" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_touval" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try
    {
      result = (uval_t)((place_t const *)arg1)->touval(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  place_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_clone" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      result = (place_t *)((place_t const *)arg1)->clone();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_place_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_copyfrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  place_t *arg2 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_copyfrom", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_copyfrom" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_copyfrom" "', argument " "2"" of type '" "place_t const *""'"); 
  }
  arg2 = reinterpret_cast< place_t * >(argp2);
  {
    try
    {
      (arg1)->copyfrom((place_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_makeplace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *arg2 = (void *) 0 ;
  uval_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  place_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_makeplace", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_makeplace" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_makeplace" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "place_t_makeplace" "', argument " "3"" of type '" "uval_t""'");
  } 
  arg3 = static_cast< uval_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "place_t_makeplace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try
    {
      result = (place_t *)((place_t const *)arg1)->makeplace(arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_place_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  place_t *arg2 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_compare" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_compare" "', argument " "2"" of type '" "place_t const *""'"); 
  }
  arg2 = reinterpret_cast< place_t * >(argp2);
  {
    try
    {
      result = (int)((place_t const *)arg1)->compare((place_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_adjust(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_adjust", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_adjust" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_adjust" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try
    {
      (arg1)->adjust(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_prev", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_prev" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_prev" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try
    {
      result = (bool)(arg1)->prev(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_next", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_next" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_next" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try
    {
      result = (bool)(arg1)->next(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_beginning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_beginning", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_beginning" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_beginning" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try
    {
      result = (bool)((place_t const *)arg1)->beginning(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_ending(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_ending", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_ending" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_ending" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try
    {
      result = (bool)((place_t const *)arg1)->ending(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_id" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      result = (int)((place_t const *)arg1)->id();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_name" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      result = (char *)((place_t const *)arg1)->name();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_toea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_toea" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      result = (ea_t)((place_t const *)arg1)->toea();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_rebase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  segm_move_infos_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_rebase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_rebase" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_segm_move_infos_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_rebase" "', argument " "2"" of type '" "segm_move_infos_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "place_t_rebase" "', argument " "2"" of type '" "segm_move_infos_t const &""'"); 
  }
  arg2 = reinterpret_cast< segm_move_infos_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->rebase((segm_move_infos_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_enter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  uint32 *arg2 = (uint32 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  place_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_enter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_enter" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_enter" "', argument " "2"" of type '" "uint32 *""'"); 
  }
  arg2 = reinterpret_cast< uint32 * >(argp2);
  {
    try
    {
      result = (place_t *)((place_t const *)arg1)->enter(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_place_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_leave(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_leave", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_leave" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "place_t_leave" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  {
    try
    {
      ((place_t const *)arg1)->leave(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_as_idaplace_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  idaplace_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_as_idaplace_t" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      result = (idaplace_t *)place_t_as_idaplace_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_idaplace_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_as_enumplace_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  enumplace_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_as_enumplace_t" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      result = (enumplace_t *)place_t_as_enumplace_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_enumplace_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_as_structplace_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  structplace_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_as_structplace_t" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      result = (structplace_t *)place_t_as_structplace_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_structplace_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_as_simpleline_place_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  simpleline_place_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_as_simpleline_place_t" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      result = (simpleline_place_t *)place_t_as_simpleline_place_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_simpleline_place_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_place_t_generate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "place_t_generate", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "place_t_generate" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "place_t_generate" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "place_t_generate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (PyObject *)place_t_py_generate(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_place_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_place_t" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *place_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_place_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_simpleline_t_line_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_t *arg1 = (simpleline_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "simpleline_t_line_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simpleline_t_line_set" "', argument " "1"" of type '" "simpleline_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "simpleline_t_line_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->line = *arg2;
  resultobj = SWIG_Py_Void();
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_simpleline_t_line_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_t *arg1 = (simpleline_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simpleline_t_line_get" "', argument " "1"" of type '" "simpleline_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_t * >(argp1);
  result = (qstring *)& ((arg1)->line);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simpleline_t_color_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_t *arg1 = (simpleline_t *) 0 ;
  color_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "simpleline_t_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simpleline_t_color_set" "', argument " "1"" of type '" "simpleline_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simpleline_t_color_set" "', argument " "2"" of type '" "color_t""'");
  } 
  arg2 = static_cast< color_t >(val2);
  if (arg1) (arg1)->color = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simpleline_t_color_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_t *arg1 = (simpleline_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  color_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simpleline_t_color_get" "', argument " "1"" of type '" "simpleline_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_t * >(argp1);
  result = (color_t) ((arg1)->color);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simpleline_t_bgcolor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_t *arg1 = (simpleline_t *) 0 ;
  bgcolor_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "simpleline_t_bgcolor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simpleline_t_bgcolor_set" "', argument " "1"" of type '" "simpleline_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simpleline_t_bgcolor_set" "', argument " "2"" of type '" "bgcolor_t""'");
  } 
  arg2 = static_cast< bgcolor_t >(val2);
  if (arg1) (arg1)->bgcolor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simpleline_t_bgcolor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_t *arg1 = (simpleline_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bgcolor_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simpleline_t_bgcolor_get" "', argument " "1"" of type '" "simpleline_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_t * >(argp1);
  result = (bgcolor_t) ((arg1)->bgcolor);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_simpleline_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  simpleline_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (simpleline_t *)new simpleline_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_simpleline_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_simpleline_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  color_t arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  simpleline_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_simpleline_t" "', argument " "1"" of type '" "color_t""'");
  } 
  arg1 = static_cast< color_t >(val1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_simpleline_t" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (simpleline_t *)new simpleline_t(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_simpleline_t, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_simpleline_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  simpleline_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_simpleline_t" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (simpleline_t *)new simpleline_t((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_simpleline_t, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_simpleline_t__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qstring *arg1 = 0 ;
  simpleline_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // bytes_container qstring &, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[0]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[0], &buf, &length);
      arg1 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "new_simpleline_t" "', argument " "1"" of type 'str'");
    }
  }
  {
    try
    {
      result = (simpleline_t *)new simpleline_t((qstring const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_simpleline_t, SWIG_POINTER_NEW |  0 );
  {
    // bytes_container qstring & typemap(freearg)
    delete arg1;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring & typemap(freearg)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_simpleline_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_simpleline_t", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_simpleline_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p__qstringT_char_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_simpleline_t__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_simpleline_t__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_simpleline_t__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_simpleline_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    simpleline_t::simpleline_t()\n"
    "    simpleline_t::simpleline_t(color_t,char const *)\n"
    "    simpleline_t::simpleline_t(char const *)\n"
    "    simpleline_t::simpleline_t(qstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_simpleline_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_t *arg1 = (simpleline_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_simpleline_t" "', argument " "1"" of type '" "simpleline_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *simpleline_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_simpleline_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *simpleline_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_simpleline_place_t_n_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_place_t *arg1 = (simpleline_place_t *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "simpleline_place_t_n_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simpleline_place_t_n_set" "', argument " "1"" of type '" "simpleline_place_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_place_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simpleline_place_t_n_set" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->n = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simpleline_place_t_n_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_place_t *arg1 = (simpleline_place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simpleline_place_t_n_get" "', argument " "1"" of type '" "simpleline_place_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_place_t * >(argp1);
  result = (uint32) ((arg1)->n);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_simpleline_place_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  simpleline_place_t *arg1 = (simpleline_place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_simpleline_place_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_simpleline_place_t" "', argument " "1"" of type '" "simpleline_place_t *""'"); 
  }
  arg1 = reinterpret_cast< simpleline_place_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *simpleline_place_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_simpleline_place_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_idaplace_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  idaplace_t *arg1 = (idaplace_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "idaplace_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_idaplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "idaplace_t_ea_set" "', argument " "1"" of type '" "idaplace_t *""'"); 
  }
  arg1 = reinterpret_cast< idaplace_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "idaplace_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->ea = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_idaplace_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  idaplace_t *arg1 = (idaplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_idaplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "idaplace_t_ea_get" "', argument " "1"" of type '" "idaplace_t *""'"); 
  }
  arg1 = reinterpret_cast< idaplace_t * >(argp1);
  result = (ea_t) ((arg1)->ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_idaplace_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  idaplace_t *arg1 = (idaplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_idaplace_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_idaplace_t" "', argument " "1"" of type '" "idaplace_t *""'"); 
  }
  arg1 = reinterpret_cast< idaplace_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *idaplace_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_idaplace_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_enumplace_t_idx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enumplace_t *arg1 = (enumplace_t *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "enumplace_t_idx_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_enumplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enumplace_t_idx_set" "', argument " "1"" of type '" "enumplace_t *""'"); 
  }
  arg1 = reinterpret_cast< enumplace_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "enumplace_t_idx_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->idx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enumplace_t_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enumplace_t *arg1 = (enumplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_enumplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enumplace_t_idx_get" "', argument " "1"" of type '" "enumplace_t *""'"); 
  }
  arg1 = reinterpret_cast< enumplace_t * >(argp1);
  result =  ((arg1)->idx);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enumplace_t_bmask_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enumplace_t *arg1 = (enumplace_t *) 0 ;
  bmask_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "enumplace_t_bmask_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_enumplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enumplace_t_bmask_set" "', argument " "1"" of type '" "enumplace_t *""'"); 
  }
  arg1 = reinterpret_cast< enumplace_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "enumplace_t_bmask_set" "', argument " "2"" of type '" "bmask_t""'");
  } 
  arg2 = static_cast< bmask_t >(val2);
  if (arg1) (arg1)->bmask = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enumplace_t_bmask_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enumplace_t *arg1 = (enumplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bmask_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_enumplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enumplace_t_bmask_get" "', argument " "1"" of type '" "enumplace_t *""'"); 
  }
  arg1 = reinterpret_cast< enumplace_t * >(argp1);
  result = (bmask_t) ((arg1)->bmask);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enumplace_t_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enumplace_t *arg1 = (enumplace_t *) 0 ;
  uval_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "enumplace_t_value_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_enumplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enumplace_t_value_set" "', argument " "1"" of type '" "enumplace_t *""'"); 
  }
  arg1 = reinterpret_cast< enumplace_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "enumplace_t_value_set" "', argument " "2"" of type '" "uval_t""'");
  } 
  arg2 = static_cast< uval_t >(val2);
  if (arg1) (arg1)->value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enumplace_t_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enumplace_t *arg1 = (enumplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uval_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_enumplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enumplace_t_value_get" "', argument " "1"" of type '" "enumplace_t *""'"); 
  }
  arg1 = reinterpret_cast< enumplace_t * >(argp1);
  result = (uval_t) ((arg1)->value);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enumplace_t_serial_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enumplace_t *arg1 = (enumplace_t *) 0 ;
  uchar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "enumplace_t_serial_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_enumplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enumplace_t_serial_set" "', argument " "1"" of type '" "enumplace_t *""'"); 
  }
  arg1 = reinterpret_cast< enumplace_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "enumplace_t_serial_set" "', argument " "2"" of type '" "uchar""'");
  } 
  arg2 = static_cast< uchar >(val2);
  if (arg1) (arg1)->serial = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enumplace_t_serial_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enumplace_t *arg1 = (enumplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uchar result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_enumplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enumplace_t_serial_get" "', argument " "1"" of type '" "enumplace_t *""'"); 
  }
  arg1 = reinterpret_cast< enumplace_t * >(argp1);
  result = (uchar) ((arg1)->serial);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_enumplace_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enumplace_t *arg1 = (enumplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_enumplace_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_enumplace_t" "', argument " "1"" of type '" "enumplace_t *""'"); 
  }
  arg1 = reinterpret_cast< enumplace_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *enumplace_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_enumplace_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_structplace_t_idx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  structplace_t *arg1 = (structplace_t *) 0 ;
  uval_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "structplace_t_idx_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_structplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structplace_t_idx_set" "', argument " "1"" of type '" "structplace_t *""'"); 
  }
  arg1 = reinterpret_cast< structplace_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structplace_t_idx_set" "', argument " "2"" of type '" "uval_t""'");
  } 
  arg2 = static_cast< uval_t >(val2);
  if (arg1) (arg1)->idx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structplace_t_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  structplace_t *arg1 = (structplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uval_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_structplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structplace_t_idx_get" "', argument " "1"" of type '" "structplace_t *""'"); 
  }
  arg1 = reinterpret_cast< structplace_t * >(argp1);
  result = (uval_t) ((arg1)->idx);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structplace_t_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  structplace_t *arg1 = (structplace_t *) 0 ;
  uval_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "structplace_t_offset_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_structplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structplace_t_offset_set" "', argument " "1"" of type '" "structplace_t *""'"); 
  }
  arg1 = reinterpret_cast< structplace_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structplace_t_offset_set" "', argument " "2"" of type '" "uval_t""'");
  } 
  arg2 = static_cast< uval_t >(val2);
  if (arg1) (arg1)->offset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structplace_t_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  structplace_t *arg1 = (structplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uval_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_structplace_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structplace_t_offset_get" "', argument " "1"" of type '" "structplace_t *""'"); 
  }
  arg1 = reinterpret_cast< structplace_t * >(argp1);
  result = (uval_t) ((arg1)->offset);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_structplace_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  structplace_t *arg1 = (structplace_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_structplace_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_structplace_t" "', argument " "1"" of type '" "structplace_t *""'"); 
  }
  arg1 = reinterpret_cast< structplace_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *structplace_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_structplace_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_internal_register_place_class(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  place_t *arg1 = (place_t *) 0 ;
  int arg2 ;
  plugin_t *arg3 = (plugin_t *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "internal_register_place_class", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_register_place_class" "', argument " "1"" of type '" "place_t const *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "internal_register_place_class" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_plugin_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "internal_register_place_class" "', argument " "3"" of type '" "plugin_t const *""'"); 
  }
  arg3 = reinterpret_cast< plugin_t * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "internal_register_place_class" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    if ( arg3 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference in method 'internal_register_place_class', argument 1 of type 'plugin_t const *'");
  }
  {
    try
    {
      result = (int)internal_register_place_class((place_t const *)arg1,arg2,(plugin_t const *)arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_place_class(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  place_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_place_class", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_place_class" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_place_class" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_place_class" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (place_t *)get_place_class(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_place_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_place_class_template(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  place_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_place_class_template" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (place_t *)get_place_class_template(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_place_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_place_class_ea_capable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_place_class_ea_capable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (bool)is_place_class_ea_capable(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_place_class_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_place_class_id" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (int)get_place_class_id((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_twinpos_t_at_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  twinpos_t *arg1 = (twinpos_t *) 0 ;
  place_t *arg2 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "twinpos_t_at_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_twinpos_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "twinpos_t_at_set" "', argument " "1"" of type '" "twinpos_t *""'"); 
  }
  arg1 = reinterpret_cast< twinpos_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_place_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "twinpos_t_at_set" "', argument " "2"" of type '" "place_t *""'"); 
  }
  arg2 = reinterpret_cast< place_t * >(argp2);
  if (arg1) (arg1)->at = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_twinpos_t_at_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  twinpos_t *arg1 = (twinpos_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  place_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_twinpos_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "twinpos_t_at_get" "', argument " "1"" of type '" "twinpos_t *""'"); 
  }
  arg1 = reinterpret_cast< twinpos_t * >(argp1);
  result = (place_t *) ((arg1)->at);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_place_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_twinpos_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  twinpos_t *arg1 = (twinpos_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "twinpos_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_twinpos_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "twinpos_t_x_set" "', argument " "1"" of type '" "twinpos_t *""'"); 
  }
  arg1 = reinterpret_cast< twinpos_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "twinpos_t_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_twinpos_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  twinpos_t *arg1 = (twinpos_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_twinpos_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "twinpos_t_x_get" "', argument " "1"" of type '" "twinpos_t *""'"); 
  }
  arg1 = reinterpret_cast< twinpos_t * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_twinpos_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  twinpos_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (twinpos_t *)new twinpos_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_twinpos_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_twinpos_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  twinpos_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_twinpos_t" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  {
    try
    {
      result = (twinpos_t *)new twinpos_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_twinpos_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_twinpos_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  place_t *arg1 = (place_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  twinpos_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_twinpos_t" "', argument " "1"" of type '" "place_t *""'"); 
  }
  arg1 = reinterpret_cast< place_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_twinpos_t" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (twinpos_t *)new twinpos_t(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_twinpos_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_twinpos_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_twinpos_t", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_twinpos_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_place_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_twinpos_t__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_place_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_twinpos_t__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_twinpos_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    twinpos_t::twinpos_t()\n"
    "    twinpos_t::twinpos_t(place_t *)\n"
    "    twinpos_t::twinpos_t(place_t *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_twinpos_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  twinpos_t *arg1 = (twinpos_t *) 0 ;
  twinpos_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "twinpos_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_twinpos_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "twinpos_t___ne__" "', argument " "1"" of type '" "twinpos_t const *""'"); 
  }
  arg1 = reinterpret_cast< twinpos_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_twinpos_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "twinpos_t___ne__" "', argument " "2"" of type '" "twinpos_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "twinpos_t___ne__" "', argument " "2"" of type '" "twinpos_t const &""'"); 
  }
  arg2 = reinterpret_cast< twinpos_t * >(argp2);
  {
    try
    {
      result = (bool)((twinpos_t const *)arg1)->operator !=((twinpos_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_twinpos_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  twinpos_t *arg1 = (twinpos_t *) 0 ;
  twinpos_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "twinpos_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_twinpos_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "twinpos_t___eq__" "', argument " "1"" of type '" "twinpos_t const *""'"); 
  }
  arg1 = reinterpret_cast< twinpos_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_twinpos_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "twinpos_t___eq__" "', argument " "2"" of type '" "twinpos_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "twinpos_t___eq__" "', argument " "2"" of type '" "twinpos_t const &""'"); 
  }
  arg2 = reinterpret_cast< twinpos_t * >(argp2);
  {
    try
    {
      result = (bool)((twinpos_t const *)arg1)->operator ==((twinpos_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_twinpos_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  twinpos_t *arg1 = (twinpos_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_twinpos_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_twinpos_t" "', argument " "1"" of type '" "twinpos_t *""'"); 
  }
  arg1 = reinterpret_cast< twinpos_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *twinpos_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_twinpos_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *twinpos_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_request_refresh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  uint64 arg1 ;
  bool arg2 = (bool) true ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "request_refresh", 1, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) uint64
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg1 = arg1_temp;
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "request_refresh" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try
    {
      request_refresh(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clear_refresh_request(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  uint64 arg1 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) uint64
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg1 = arg1_temp;
  }
  {
    try
    {
      clear_refresh_request(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_refresh_requested(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  uint64 arg1 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) uint64
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg1 = arg1_temp;
  }
  {
    try
    {
      result = (bool)is_refresh_requested(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_chooser_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  twidget_type_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_chooser_widget" "', argument " "1"" of type '" "twidget_type_t""'");
  } 
  arg1 = static_cast< twidget_type_t >(val1);
  {
    try
    {
      result = (bool)is_chooser_widget(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chooser_item_attrs_t_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  chooser_item_attrs_t *arg1 = (chooser_item_attrs_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "chooser_item_attrs_t_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_chooser_item_attrs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chooser_item_attrs_t_flags_set" "', argument " "1"" of type '" "chooser_item_attrs_t *""'"); 
  }
  arg1 = reinterpret_cast< chooser_item_attrs_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "chooser_item_attrs_t_flags_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->flags = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chooser_item_attrs_t_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  chooser_item_attrs_t *arg1 = (chooser_item_attrs_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_chooser_item_attrs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chooser_item_attrs_t_flags_get" "', argument " "1"" of type '" "chooser_item_attrs_t *""'"); 
  }
  arg1 = reinterpret_cast< chooser_item_attrs_t * >(argp1);
  result = (int) ((arg1)->flags);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chooser_item_attrs_t_color_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  chooser_item_attrs_t *arg1 = (chooser_item_attrs_t *) 0 ;
  bgcolor_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "chooser_item_attrs_t_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_chooser_item_attrs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chooser_item_attrs_t_color_set" "', argument " "1"" of type '" "chooser_item_attrs_t *""'"); 
  }
  arg1 = reinterpret_cast< chooser_item_attrs_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "chooser_item_attrs_t_color_set" "', argument " "2"" of type '" "bgcolor_t""'");
  } 
  arg2 = static_cast< bgcolor_t >(val2);
  if (arg1) (arg1)->color = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chooser_item_attrs_t_color_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  chooser_item_attrs_t *arg1 = (chooser_item_attrs_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bgcolor_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_chooser_item_attrs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chooser_item_attrs_t_color_get" "', argument " "1"" of type '" "chooser_item_attrs_t *""'"); 
  }
  arg1 = reinterpret_cast< chooser_item_attrs_t * >(argp1);
  result = (bgcolor_t) ((arg1)->color);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_chooser_item_attrs_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  chooser_item_attrs_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_chooser_item_attrs_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (chooser_item_attrs_t *)new chooser_item_attrs_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_chooser_item_attrs_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chooser_item_attrs_t_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  chooser_item_attrs_t *arg1 = (chooser_item_attrs_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_chooser_item_attrs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chooser_item_attrs_t_reset" "', argument " "1"" of type '" "chooser_item_attrs_t *""'"); 
  }
  arg1 = reinterpret_cast< chooser_item_attrs_t * >(argp1);
  {
    try
    {
      (arg1)->reset();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_chooser_item_attrs_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  chooser_item_attrs_t *arg1 = (chooser_item_attrs_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_chooser_item_attrs_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_chooser_item_attrs_t" "', argument " "1"" of type '" "chooser_item_attrs_t *""'"); 
  }
  arg1 = reinterpret_cast< chooser_item_attrs_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *chooser_item_attrs_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_chooser_item_attrs_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *chooser_item_attrs_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_renderer_pos_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_renderer_pos_info_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (renderer_pos_info_t *)new renderer_pos_info_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_renderer_pos_info_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t_node_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "renderer_pos_info_t_node_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t_node_set" "', argument " "1"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "renderer_pos_info_t_node_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->node = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t_node_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t_node_get" "', argument " "1"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  result = (int) ((arg1)->node);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t_cx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "renderer_pos_info_t_cx_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t_cx_set" "', argument " "1"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  ecode2 = SWIG_AsVal_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "renderer_pos_info_t_cx_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->cx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t_cx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t_cx_get" "', argument " "1"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  result = (short) ((arg1)->cx);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t_cy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "renderer_pos_info_t_cy_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t_cy_set" "', argument " "1"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  ecode2 = SWIG_AsVal_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "renderer_pos_info_t_cy_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->cy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t_cy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t_cy_get" "', argument " "1"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  result = (short) ((arg1)->cy);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t_sx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "renderer_pos_info_t_sx_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t_sx_set" "', argument " "1"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  ecode2 = SWIG_AsVal_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "renderer_pos_info_t_sx_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->sx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t_sx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t_sx_get" "', argument " "1"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  result = (short) ((arg1)->sx);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  renderer_pos_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "renderer_pos_info_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t___eq__" "', argument " "1"" of type '" "renderer_pos_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_renderer_pos_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "renderer_pos_info_t___eq__" "', argument " "2"" of type '" "renderer_pos_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "renderer_pos_info_t___eq__" "', argument " "2"" of type '" "renderer_pos_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< renderer_pos_info_t * >(argp2);
  {
    try
    {
      result = (bool)((renderer_pos_info_t const *)arg1)->operator ==((renderer_pos_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_renderer_pos_info_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  renderer_pos_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "renderer_pos_info_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renderer_pos_info_t___ne__" "', argument " "1"" of type '" "renderer_pos_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_renderer_pos_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "renderer_pos_info_t___ne__" "', argument " "2"" of type '" "renderer_pos_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "renderer_pos_info_t___ne__" "', argument " "2"" of type '" "renderer_pos_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< renderer_pos_info_t * >(argp2);
  {
    try
    {
      result = (bool)((renderer_pos_info_t const *)arg1)->operator !=((renderer_pos_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_renderer_pos_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  renderer_pos_info_t *arg1 = (renderer_pos_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_renderer_pos_info_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_renderer_pos_info_t" "', argument " "1"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg1 = reinterpret_cast< renderer_pos_info_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *renderer_pos_info_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_renderer_pos_info_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *renderer_pos_info_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_view_mouse_event_location_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_location_t *arg1 = (view_mouse_event_location_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "view_mouse_event_location_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_location_t_ea_set" "', argument " "1"" of type '" "view_mouse_event_location_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_location_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "view_mouse_event_location_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->ea = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_location_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_location_t *arg1 = (view_mouse_event_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_location_t_ea_get" "', argument " "1"" of type '" "view_mouse_event_location_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_location_t * >(argp1);
  result = (ea_t) ((arg1)->ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_location_t_item_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_location_t *arg1 = (view_mouse_event_location_t *) 0 ;
  selection_item_t *arg2 = (selection_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "view_mouse_event_location_t_item_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_location_t_item_set" "', argument " "1"" of type '" "view_mouse_event_location_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_location_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_selection_item_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "view_mouse_event_location_t_item_set" "', argument " "2"" of type '" "selection_item_t const *""'"); 
  }
  arg2 = reinterpret_cast< selection_item_t * >(argp2);
  if (arg1) (arg1)->item = (selection_item_t const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_location_t_item_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_location_t *arg1 = (view_mouse_event_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  selection_item_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_location_t_item_get" "', argument " "1"" of type '" "view_mouse_event_location_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_location_t * >(argp1);
  result = (selection_item_t *) ((arg1)->item);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_selection_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_view_mouse_event_location_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_location_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_view_mouse_event_location_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (view_mouse_event_location_t *)new view_mouse_event_location_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_view_mouse_event_location_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_view_mouse_event_location_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_location_t *arg1 = (view_mouse_event_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_location_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_view_mouse_event_location_t" "', argument " "1"" of type '" "view_mouse_event_location_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_location_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *view_mouse_event_location_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_view_mouse_event_location_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *view_mouse_event_location_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_view_mouse_event_t_rtype_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  tcc_renderer_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "view_mouse_event_t_rtype_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_rtype_set" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "view_mouse_event_t_rtype_set" "', argument " "2"" of type '" "tcc_renderer_type_t""'");
  } 
  arg2 = static_cast< tcc_renderer_type_t >(val2);
  if (arg1) (arg1)->rtype = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_rtype_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tcc_renderer_type_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_rtype_get" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  result = (tcc_renderer_type_t) ((arg1)->rtype);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "view_mouse_event_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_x_set" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "view_mouse_event_t_x_set" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_x_get" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  result = (uint32) ((arg1)->x);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "view_mouse_event_t_y_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_y_set" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "view_mouse_event_t_y_set" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_y_get" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  result = (uint32) ((arg1)->y);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_location_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  view_mouse_event_t::location_t *arg2 = (view_mouse_event_t::location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "view_mouse_event_t_location_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_location_set" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_view_mouse_event_location_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "view_mouse_event_t_location_set" "', argument " "2"" of type '" "view_mouse_event_t::location_t *""'"); 
  }
  arg2 = reinterpret_cast< view_mouse_event_t::location_t * >(argp2);
  if (arg1) (arg1)->location = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_location_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  view_mouse_event_t::location_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_location_get" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  result = (view_mouse_event_t::location_t *)& ((arg1)->location);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_view_mouse_event_location_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_state_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  view_event_state_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "view_mouse_event_t_state_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_state_set" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "view_mouse_event_t_state_set" "', argument " "2"" of type '" "view_event_state_t""'");
  } 
  arg2 = static_cast< view_event_state_t >(val2);
  if (arg1) (arg1)->state = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_state_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  view_event_state_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_state_get" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  result = (view_event_state_t) ((arg1)->state);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_button_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  vme_button_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "view_mouse_event_t_button_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_button_set" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "view_mouse_event_t_button_set" "', argument " "2"" of type '" "vme_button_t""'");
  } 
  arg2 = static_cast< vme_button_t >(val2);
  if (arg1) (arg1)->button = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_button_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vme_button_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_button_get" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  result = (vme_button_t) ((arg1)->button);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_renderer_pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  renderer_pos_info_t *arg2 = (renderer_pos_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "view_mouse_event_t_renderer_pos_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_renderer_pos_set" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "view_mouse_event_t_renderer_pos_set" "', argument " "2"" of type '" "renderer_pos_info_t *""'"); 
  }
  arg2 = reinterpret_cast< renderer_pos_info_t * >(argp2);
  if (arg1) (arg1)->renderer_pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_view_mouse_event_t_renderer_pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  renderer_pos_info_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "view_mouse_event_t_renderer_pos_get" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  result = (renderer_pos_info_t *)& ((arg1)->renderer_pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_renderer_pos_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_view_mouse_event_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_view_mouse_event_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (view_mouse_event_t *)new view_mouse_event_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_view_mouse_event_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_view_mouse_event_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  view_mouse_event_t *arg1 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_view_mouse_event_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_view_mouse_event_t" "', argument " "1"" of type '" "view_mouse_event_t *""'"); 
  }
  arg1 = reinterpret_cast< view_mouse_event_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *view_mouse_event_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_view_mouse_event_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *view_mouse_event_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_locchange_md_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  locchange_reason_t arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  locchange_md_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_locchange_md_t", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_locchange_md_t" "', argument " "1"" of type '" "locchange_reason_t""'");
  } 
  arg1 = static_cast< locchange_reason_t >(val1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_locchange_md_t" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (locchange_md_t *)new locchange_md_t(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_locchange_md_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_locchange_md_t_reason(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  locchange_md_t *arg1 = (locchange_md_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  locchange_reason_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_locchange_md_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locchange_md_t_reason" "', argument " "1"" of type '" "locchange_md_t const *""'"); 
  }
  arg1 = reinterpret_cast< locchange_md_t * >(argp1);
  {
    try
    {
      result = (locchange_reason_t)((locchange_md_t const *)arg1)->reason();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_locchange_md_t_is_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  locchange_md_t *arg1 = (locchange_md_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_locchange_md_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locchange_md_t_is_sync" "', argument " "1"" of type '" "locchange_md_t const *""'"); 
  }
  arg1 = reinterpret_cast< locchange_md_t * >(argp1);
  {
    try
    {
      result = (bool)((locchange_md_t const *)arg1)->is_sync();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_locchange_md_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  locchange_md_t *arg1 = (locchange_md_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_locchange_md_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_locchange_md_t" "', argument " "1"" of type '" "locchange_md_t *""'"); 
  }
  arg1 = reinterpret_cast< locchange_md_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *locchange_md_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_locchange_md_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *locchange_md_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ui_requests_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ui_requests_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ui_requests_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (ui_requests_t *)new ui_requests_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ui_requests_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ui_requests_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ui_requests_t *arg1 = (ui_requests_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ui_requests_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ui_requests_t" "', argument " "1"" of type '" "ui_requests_t *""'"); 
  }
  arg1 = reinterpret_cast< ui_requests_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ui_requests_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ui_requests_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ui_requests_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_action_ctx_base_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_action_ctx_base_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (action_ctx_base_t *)new action_ctx_base_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_action_ctx_base_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_reset" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  {
    try
    {
      (arg1)->reset();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_widget_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_widget_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_widget_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_widget_set" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  if (arg1) (arg1)->widget = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_widget_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_widget_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (TWidget *) ((arg1)->widget);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_widget_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  twidget_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_widget_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_widget_type_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "action_ctx_base_t_widget_type_set" "', argument " "2"" of type '" "twidget_type_t""'");
  } 
  arg2 = static_cast< twidget_type_t >(val2);
  if (arg1) (arg1)->widget_type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_widget_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  twidget_type_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_widget_type_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (twidget_type_t) ((arg1)->widget_type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_widget_title_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_widget_title_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_widget_title_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "action_ctx_base_t_widget_title_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->widget_title = *arg2;
  resultobj = SWIG_Py_Void();
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_widget_title_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_widget_title_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (qstring *)& ((arg1)->widget_title);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_chooser_selection_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  sizevec_t *arg2 = (sizevec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_chooser_selection_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_chooser_selection_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_chooser_selection_set" "', argument " "2"" of type '" "sizevec_t *""'"); 
  }
  arg2 = reinterpret_cast< sizevec_t * >(argp2);
  if (arg1) (arg1)->chooser_selection = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_chooser_selection_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sizevec_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_chooser_selection_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (sizevec_t *)& ((arg1)->chooser_selection);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_size_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_action_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_action_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_action_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_action_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->action = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->action = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_action_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_action_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (char *) ((arg1)->action);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_cur_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_flags_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "action_ctx_base_t_cur_flags_set" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->cur_flags = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_flags_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (uint32) ((arg1)->cur_flags);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_has_flag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_has_flag", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_has_flag" "', argument " "1"" of type '" "action_ctx_base_t const *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "action_ctx_base_t_has_flag" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  {
    try
    {
      result = (bool)((action_ctx_base_t const *)arg1)->has_flag(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_cur_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_ea_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "action_ctx_base_t_cur_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->cur_ea = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_ea_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (ea_t) ((arg1)->cur_ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_extracted_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_cur_extracted_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_extracted_ea_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "action_ctx_base_t_cur_extracted_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->cur_extracted_ea = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_extracted_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_extracted_ea_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (ea_t) ((arg1)->cur_extracted_ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_func_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  func_t *arg2 = (func_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_cur_func_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_func_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_func_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_cur_func_set" "', argument " "2"" of type '" "func_t *""'"); 
  }
  arg2 = reinterpret_cast< func_t * >(argp2);
  if (arg1) (arg1)->cur_func = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_func_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  func_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_func_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (func_t *) ((arg1)->cur_func);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_func_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_fchunk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  func_t *arg2 = (func_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_cur_fchunk_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_fchunk_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_func_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_cur_fchunk_set" "', argument " "2"" of type '" "func_t *""'"); 
  }
  arg2 = reinterpret_cast< func_t * >(argp2);
  if (arg1) (arg1)->cur_fchunk = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_fchunk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  func_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_fchunk_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (func_t *) ((arg1)->cur_fchunk);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_func_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_struc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  struc_t *arg2 = (struc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_cur_struc_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_struc_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_struc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_cur_struc_set" "', argument " "2"" of type '" "struc_t *""'"); 
  }
  arg2 = reinterpret_cast< struc_t * >(argp2);
  if (arg1) (arg1)->cur_struc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_struc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  struc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_struc_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (struc_t *) ((arg1)->cur_struc);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_struc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_strmem_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  member_t *arg2 = (member_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_cur_strmem_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_strmem_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_member_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_cur_strmem_set" "', argument " "2"" of type '" "member_t *""'"); 
  }
  arg2 = reinterpret_cast< member_t * >(argp2);
  if (arg1) (arg1)->cur_strmem = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_strmem_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  member_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_strmem_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (member_t *) ((arg1)->cur_strmem);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_member_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_enum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  enum_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_cur_enum_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_enum_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "action_ctx_base_t_cur_enum_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->cur_enum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_enum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  enum_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_enum_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (enum_t) ((arg1)->cur_enum);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_seg_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  segment_t *arg2 = (segment_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_cur_seg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_seg_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_segment_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_cur_seg_set" "', argument " "2"" of type '" "segment_t *""'"); 
  }
  arg2 = reinterpret_cast< segment_t * >(argp2);
  if (arg1) (arg1)->cur_seg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_cur_seg_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  segment_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_cur_seg_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (segment_t *) ((arg1)->cur_seg);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_regname_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_regname_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_regname_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_regname_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->regname = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->regname = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_regname_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_regname_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (char *) ((arg1)->regname);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_focus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_focus_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_focus_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_focus_set" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  if (arg1) (arg1)->focus = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_focus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_focus_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (TWidget *) ((arg1)->focus);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_reserved_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_ctx_base_t_reserved_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_reserved_set" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_ctx_base_t_reserved_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->reserved = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t_reserved_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t_reserved_get" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  result = (void *) ((arg1)->reserved);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t__get_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t__get_form" "', argument " "1"" of type '" "action_ctx_base_t const *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  {
    try
    {
      result = (TWidget *)action_ctx_base_t__get_form((action_ctx_base_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t__get_form_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  twidget_type_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t__get_form_type" "', argument " "1"" of type '" "action_ctx_base_t const *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  {
    try
    {
      result = (twidget_type_t)action_ctx_base_t__get_form_type((action_ctx_base_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_ctx_base_t__get_form_title(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< _qstring< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_ctx_base_t__get_form_title" "', argument " "1"" of type '" "action_ctx_base_t const *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  {
    try
    {
      result = action_ctx_base_t__get_form_title((action_ctx_base_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // bytes_container typemap(out) qstring
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) (&result)->c_str(), (&result)->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_action_ctx_base_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_ctx_base_t *arg1 = (action_ctx_base_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_ctx_base_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_action_ctx_base_t" "', argument " "1"" of type '" "action_ctx_base_t *""'"); 
  }
  arg1 = reinterpret_cast< action_ctx_base_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *action_ctx_base_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_action_ctx_base_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *action_ctx_base_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_is_action_enabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  action_state_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_action_enabled" "', argument " "1"" of type '" "action_state_t""'");
  } 
  arg1 = static_cast< action_state_t >(val1);
  {
    try
    {
      result = (bool)is_action_enabled(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_cb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_desc_t_cb_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_cb_set" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "action_desc_t_cb_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->cb = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_cb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_cb_get" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  result = (int) ((arg1)->cb);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_desc_t_name_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_name_set" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_desc_t_name_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->name = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->name = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_name_get" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  result = (char *) ((arg1)->name);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_label_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_desc_t_label_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_label_set" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_desc_t_label_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->label = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->label = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_label_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_label_get" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  result = (char *) ((arg1)->label);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_owner_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  plugin_t *arg2 = (plugin_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_desc_t_owner_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_owner_set" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_plugin_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_desc_t_owner_set" "', argument " "2"" of type '" "plugin_t const *""'"); 
  }
  arg2 = reinterpret_cast< plugin_t * >(argp2);
  if (arg1) (arg1)->owner = (plugin_t const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_owner_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  plugin_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_owner_get" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  result = (plugin_t *) ((arg1)->owner);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_plugin_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_shortcut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_desc_t_shortcut_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_shortcut_set" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_desc_t_shortcut_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->shortcut = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->shortcut = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_shortcut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_shortcut_get" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  result = (char *) ((arg1)->shortcut);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_tooltip_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_desc_t_tooltip_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_tooltip_set" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "action_desc_t_tooltip_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->tooltip = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->tooltip = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_tooltip_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_tooltip_get" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  result = (char *) ((arg1)->tooltip);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_icon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_desc_t_icon_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_icon_set" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "action_desc_t_icon_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->icon = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_icon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_icon_get" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  result = (int) ((arg1)->icon);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "action_desc_t_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_flags_set" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "action_desc_t_flags_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->flags = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_action_desc_t_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "action_desc_t_flags_get" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  result = (int) ((arg1)->flags);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_action_desc_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  char *arg4 = (char *) NULL ;
  char *arg5 = (char *) NULL ;
  int arg6 = (int) -1 ;
  int arg7 = (int) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  action_desc_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_action_desc_t", 3, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_action_desc_t" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_action_desc_t" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  arg3 = swig_obj[2];
  if (swig_obj[3]) {
    res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_action_desc_t" "', argument " "4"" of type '" "char const *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
  }
  if (swig_obj[4]) {
    res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_action_desc_t" "', argument " "5"" of type '" "char const *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_action_desc_t" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_action_desc_t" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
  }
  {
    try
    {
      result = (action_desc_t *)new_action_desc_t((char const *)arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_action_desc_t, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_action_desc_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  action_desc_t *arg1 = (action_desc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_action_desc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_action_desc_t" "', argument " "1"" of type '" "action_desc_t *""'"); 
  }
  arg1 = reinterpret_cast< action_desc_t * >(argp1);
  {
    try
    {
      delete_action_desc_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *action_desc_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_action_desc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *action_desc_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cancel_exec_request(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cancel_exec_request" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (bool)cancel_exec_request(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jumpto__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  int arg2 = (int) -1 ;
  int arg3 = (int) 0x0001 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "jumpto" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jumpto" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jumpto" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try
    {
      result = (bool)jumpto(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_banner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "banner" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (bool)banner(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_msg_inited(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "is_msg_inited", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (bool)is_msg_inited();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_refresh_idaview(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "refresh_idaview", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      refresh_idaview();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_refresh_idaview_anyway(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "refresh_idaview_anyway", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      refresh_idaview_anyway();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analyzer_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "analyzer_options", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      analyzer_options();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_screen_ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_screen_ea", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (ea_t)get_screen_ea();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_opnum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_opnum", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (int)get_opnum();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_cursor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int temp1 ;
  int res1 = SWIG_TMPOBJ ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  bool result;
  
  arg1 = &temp1;
  arg2 = &temp2;
  if (!SWIG_Python_UnpackTuple(args, "get_cursor", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (bool)get_cursor(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res1)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_output_cursor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int temp1 ;
  int res1 = SWIG_TMPOBJ ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  bool result;
  
  arg1 = &temp1;
  arg2 = &temp2;
  if (!SWIG_Python_UnpackTuple(args, "get_output_cursor", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (bool)get_output_cursor(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res1)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_curline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_curline", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (char *)get_curline();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_url(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "open_url" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      open_url((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_hexdump_ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_hexdump_ea" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (ea_t)get_hexdump_ea(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_key_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  ushort result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_key_code" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (ushort)get_key_code((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_lookup_key_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ushort result;
  
  if (!SWIG_Python_UnpackTuple(args, "lookup_key_code", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "lookup_key_code" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lookup_key_code" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lookup_key_code" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = (ushort)lookup_key_code(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_refresh_navband(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "refresh_navband" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try
    {
      refresh_navband(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_refresh_chooser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "refresh_chooser" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)refresh_chooser((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_close_chooser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "close_chooser" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)close_chooser((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_dock_pos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 = (int) 0 ;
  int arg5 = (int) 0 ;
  int arg6 = (int) 0 ;
  int arg7 = (int) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_dock_pos", 3, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_dock_pos" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_dock_pos" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_dock_pos" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_dock_pos" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "set_dock_pos" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "set_dock_pos" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "set_dock_pos" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
  }
  {
    try
    {
      result = (bool)set_dock_pos((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_free_custom_icon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "free_custom_icon" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      free_custom_icon(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new___qtimer_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __qtimer_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new___qtimer_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (__qtimer_t *)new __qtimer_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p___qtimer_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete___qtimer_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __qtimer_t *arg1 = (__qtimer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p___qtimer_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete___qtimer_t" "', argument " "1"" of type '" "__qtimer_t *""'"); 
  }
  arg1 = reinterpret_cast< __qtimer_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *__qtimer_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p___qtimer_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *__qtimer_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_unregister_action(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unregister_action" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)unregister_action((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_toolbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) NULL ;
  int arg4 = (int) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "create_toolbar", 2, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_toolbar" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_toolbar" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "create_toolbar" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "create_toolbar" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try
    {
      result = (bool)create_toolbar((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_toolbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_toolbar" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)delete_toolbar((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_menu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) NULL ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "create_menu", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_menu" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_menu" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "create_menu" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    try
    {
      result = (bool)create_menu((char const *)arg1,(char const *)arg2,(char const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_menu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_menu" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)delete_menu((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_attach_action_to_menu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "attach_action_to_menu", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "attach_action_to_menu" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "attach_action_to_menu" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "attach_action_to_menu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (bool)attach_action_to_menu((char const *)arg1,(char const *)arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_detach_action_from_menu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "detach_action_from_menu", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "detach_action_from_menu" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "detach_action_from_menu" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)detach_action_from_menu((char const *)arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_attach_action_to_toolbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "attach_action_to_toolbar", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "attach_action_to_toolbar" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "attach_action_to_toolbar" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)attach_action_to_toolbar((char const *)arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_detach_action_from_toolbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "detach_action_from_toolbar", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "detach_action_from_toolbar" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "detach_action_from_toolbar" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)detach_action_from_toolbar((char const *)arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_register_and_attach_to_menu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  action_handler_t *arg6 = (action_handler_t *) 0 ;
  plugin_t *arg7 = (plugin_t *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject *swig_obj[7] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "register_and_attach_to_menu", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "register_and_attach_to_menu" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "register_and_attach_to_menu" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "register_and_attach_to_menu" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "register_and_attach_to_menu" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "register_and_attach_to_menu" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_action_handler_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "register_and_attach_to_menu" "', argument " "6"" of type '" "action_handler_t *""'"); 
  }
  arg6 = reinterpret_cast< action_handler_t * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_plugin_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "register_and_attach_to_menu" "', argument " "7"" of type '" "plugin_t const *""'"); 
  }
  arg7 = reinterpret_cast< plugin_t * >(argp7);
  {
    try
    {
      result = (bool)register_and_attach_to_menu((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,(plugin_t const *)arg7);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_display_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "display_widget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "display_widget" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "display_widget" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      display_widget(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_close_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "close_widget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "close_widget" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "close_widget" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      close_widget(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_activate_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "activate_widget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "activate_widget" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "activate_widget" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      activate_widget(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_find_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "find_widget" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (TWidget *)find_widget((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_current_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_current_widget", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)get_current_widget();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_widget_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  twidget_type_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_widget_type" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (twidget_type_t)get_widget_type(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_widget_title(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  qstring temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_widget_title" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  {
    try
    {
      result = (bool)get_widget_title(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_custom_viewer_jump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  lochist_entry_t *arg2 = 0 ;
  uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "custom_viewer_jump", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "custom_viewer_jump" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lochist_entry_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "custom_viewer_jump" "', argument " "2"" of type '" "lochist_entry_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "custom_viewer_jump" "', argument " "2"" of type '" "lochist_entry_t const &""'"); 
  }
  arg2 = reinterpret_cast< lochist_entry_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "custom_viewer_jump" "', argument " "3"" of type '" "uint32""'");
  } 
  arg3 = static_cast< uint32 >(val3);
  {
    try
    {
      result = (bool)custom_viewer_jump(arg1,(lochist_entry_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ea_viewer_history_push_and_jump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  ea_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ea_viewer_history_push_and_jump", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ea_viewer_history_push_and_jump" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "ea_viewer_history_push_and_jump" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ea_viewer_history_push_and_jump" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ea_viewer_history_push_and_jump" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ea_viewer_history_push_and_jump" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try
    {
      result = (bool)ea_viewer_history_push_and_jump(arg1,arg2,arg3,arg4,arg5);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_ea_viewer_history_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  TWidget *arg3 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_ea_viewer_history_info", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_ea_viewer_history_info" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_ea_viewer_history_info" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_ea_viewer_history_info" "', argument " "3"" of type '" "TWidget *""'"); 
  }
  arg3 = reinterpret_cast< TWidget * >(argp3);
  {
    try
    {
      result = (bool)get_ea_viewer_history_info(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_repaint_custom_viewer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "repaint_custom_viewer" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      repaint_custom_viewer(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jumpto__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  TWidget *arg1 = (TWidget *) 0 ;
  place_t *arg2 = (place_t *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jumpto" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_place_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jumpto" "', argument " "2"" of type '" "place_t *""'"); 
  }
  arg2 = reinterpret_cast< place_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jumpto" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jumpto" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try
    {
      result = (bool)jumpto(arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jumpto(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "jumpto", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 3)) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_jumpto__SWIG_0(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_jumpto__SWIG_0(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_jumpto__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TWidget, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_place_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_jumpto__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'jumpto'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jumpto(ea_t,int,int)\n"
    "    jumpto(TWidget *,place_t *,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_get_custom_viewer_place(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  bool arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  place_t *result = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!SWIG_Python_UnpackTuple(args, "get_custom_viewer_place", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_custom_viewer_place" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_custom_viewer_place" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (place_t *)get_custom_viewer_place(arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_place_t, 0 |  0 );
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_idaq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "is_idaq", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (bool)is_idaq();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_attach_action_to_popup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  TPopupMenu *arg2 = (TPopupMenu *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) NULL ;
  int arg5 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "attach_action_to_popup", 3, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "attach_action_to_popup" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TPopupMenu, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "attach_action_to_popup" "', argument " "2"" of type '" "TPopupMenu *""'"); 
  }
  arg2 = reinterpret_cast< TPopupMenu * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "attach_action_to_popup" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  if (swig_obj[3]) {
    res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "attach_action_to_popup" "', argument " "4"" of type '" "char const *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "attach_action_to_popup" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    try
    {
      result = (bool)attach_action_to_popup(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_detach_action_from_popup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "detach_action_from_popup", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "detach_action_from_popup" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "detach_action_from_popup" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)detach_action_from_popup(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_update_action_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "update_action_label", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "update_action_label" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "update_action_label" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)update_action_label((char const *)arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_update_action_shortcut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "update_action_shortcut", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "update_action_shortcut" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "update_action_shortcut" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)update_action_shortcut((char const *)arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_update_action_tooltip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "update_action_tooltip", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "update_action_tooltip" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "update_action_tooltip" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)update_action_tooltip((char const *)arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_update_action_icon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "update_action_icon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "update_action_icon" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "update_action_icon" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (bool)update_action_icon((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_update_action_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  action_state_t arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "update_action_state", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "update_action_state" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "update_action_state" "', argument " "2"" of type '" "action_state_t""'");
  } 
  arg2 = static_cast< action_state_t >(val2);
  {
    try
    {
      result = (bool)update_action_state((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_update_action_checkable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  bool arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "update_action_checkable", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "update_action_checkable" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "update_action_checkable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)update_action_checkable((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_update_action_checked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  bool arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "update_action_checked", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "update_action_checked" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "update_action_checked" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)update_action_checked((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_update_action_visibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  bool arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "update_action_visibility", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "update_action_visibility" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "update_action_visibility" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)update_action_visibility((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_action_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  char *arg2 = (char *) 0 ;
  qstring temp1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_action_label" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)get_action_label(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_action_shortcut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  char *arg2 = (char *) 0 ;
  qstring temp1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_action_shortcut" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)get_action_shortcut(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_action_tooltip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  char *arg2 = (char *) 0 ;
  qstring temp1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_action_tooltip" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)get_action_tooltip(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_action_icon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_action_icon" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)get_action_icon((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_action_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  action_state_t *arg2 = (action_state_t *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  action_state_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_action_state" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)get_action_state((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_action_state_t, new_flags));
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_action_checkable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_action_checkable" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)get_action_checkable((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_bool((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_bool, new_flags));
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_action_checked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_action_checked" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)get_action_checked((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_bool((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_bool, new_flags));
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_action_visibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_action_visibility" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)get_action_visibility((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_bool((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_bool, new_flags));
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_custom_viewer_qt_aware(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_custom_viewer_qt_aware" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (bool)set_custom_viewer_qt_aware(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_custom_viewer_curline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_custom_viewer_curline", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_custom_viewer_curline" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_custom_viewer_curline" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (char *)get_custom_viewer_curline(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_output_curline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  bool arg2 ;
  qstring temp1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_output_curline" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)get_output_curline(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_output_selected_text(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  qstring temp1 ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!SWIG_Python_UnpackTuple(args, "get_output_selected_text", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (bool)get_output_selected_text(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_current_viewer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_current_viewer", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)get_current_viewer();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_view_renderer_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tcc_renderer_type_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_view_renderer_type" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (tcc_renderer_type_t)get_view_renderer_type(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_view_renderer_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  tcc_renderer_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "set_view_renderer_type", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_view_renderer_type" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_view_renderer_type" "', argument " "2"" of type '" "tcc_renderer_type_t""'");
  } 
  arg2 = static_cast< tcc_renderer_type_t >(val2);
  {
    try
    {
      set_view_renderer_type(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_empty_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int arg2 = (int) -1 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "create_empty_widget", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_empty_widget" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "create_empty_widget" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try
    {
      result = (TWidget *)create_empty_widget((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "msg_clear", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      msg_clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // bytes_container qstring &, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[0]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[0], &buf, &length);
      arg1 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "msg_save" "', argument " "1"" of type 'str'");
    }
  }
  {
    try
    {
      result = (bool)msg_save(*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container qstring & typemap(freearg)
    delete arg1;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring & typemap(freearg)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_active_modal_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_active_modal_widget", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)get_active_modal_widget();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_navband_pixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool *arg1 = (bool *) 0 ;
  ea_t arg2 ;
  bool temp1 ;
  int res1 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg1 = &temp1;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "get_navband_pixel" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      result = (int)get_navband_pixel(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res1)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_bool((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_bool, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_navband_ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_navband_ea" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (ea_t)get_navband_ea(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_window_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) NULL ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_window_id", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_window_id" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
  }
  {
    try
    {
      result = (void *)get_window_id((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // %typemap(out) void *get_window_id
    resultobj = PyLong_FromUnsignedLongLong((unsigned long long) result);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_read_selection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  twinpos_t *arg2 = (twinpos_t *) 0 ;
  twinpos_t *arg3 = (twinpos_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "read_selection", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_selection" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_twinpos_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "read_selection" "', argument " "2"" of type '" "twinpos_t *""'"); 
  }
  arg2 = reinterpret_cast< twinpos_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_twinpos_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "read_selection" "', argument " "3"" of type '" "twinpos_t *""'"); 
  }
  arg3 = reinterpret_cast< twinpos_t * >(argp3);
  {
    try
    {
      result = (bool)read_selection(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_read_range_selection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  ea_t *arg2 = (ea_t *) 0 ;
  ea_t *arg3 = (ea_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ea_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  ea_t temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_range_selection" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (bool)read_range_selection(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_unsigned_int, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_unsigned_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unmark_selection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "unmark_selection", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      unmark_selection();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_code_viewer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  int arg2 = (int) 0 ;
  TWidget *arg3 = (TWidget *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "create_code_viewer", 1, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_code_viewer" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "create_code_viewer" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_TWidget, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "create_code_viewer" "', argument " "3"" of type '" "TWidget *""'"); 
    }
    arg3 = reinterpret_cast< TWidget * >(argp3);
  }
  {
    try
    {
      result = (TWidget *)create_code_viewer(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_code_viewer_handler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  custom_viewer_handler_id_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  void *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "set_code_viewer_handler", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_code_viewer_handler" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_code_viewer_handler" "', argument " "2"" of type '" "custom_viewer_handler_id_t""'");
  } 
  arg2 = static_cast< custom_viewer_handler_id_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_code_viewer_handler" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try
    {
      result = (void *)set_code_viewer_handler(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_code_viewer_user_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_code_viewer_user_data", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_code_viewer_user_data" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_code_viewer_user_data" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try
    {
      result = (bool)set_code_viewer_user_data(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_viewer_user_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_viewer_user_data" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (void *)get_viewer_user_data(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_viewer_place_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tcc_place_type_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_viewer_place_type" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (tcc_place_type_t)get_viewer_place_type(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_code_viewer_line_handlers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  code_viewer_lines_click_t *arg2 = (code_viewer_lines_click_t *) 0 ;
  code_viewer_lines_click_t *arg3 = (code_viewer_lines_click_t *) 0 ;
  code_viewer_lines_click_t *arg4 = (code_viewer_lines_click_t *) 0 ;
  code_viewer_lines_icon_t *arg5 = (code_viewer_lines_icon_t *) 0 ;
  code_viewer_lines_linenum_t *arg6 = (code_viewer_lines_linenum_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[6] ;
  
  if (!SWIG_Python_UnpackTuple(args, "set_code_viewer_line_handlers", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_code_viewer_line_handlers" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "set_code_viewer_line_handlers" "', argument " "2"" of type '" "code_viewer_lines_click_t *""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[2], (void**)(&arg3), SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "set_code_viewer_line_handlers" "', argument " "3"" of type '" "code_viewer_lines_click_t *""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[3], (void**)(&arg4), SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "set_code_viewer_line_handlers" "', argument " "4"" of type '" "code_viewer_lines_click_t *""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[4], (void**)(&arg5), SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "set_code_viewer_line_handlers" "', argument " "5"" of type '" "code_viewer_lines_icon_t *""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[5], (void**)(&arg6), SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "set_code_viewer_line_handlers" "', argument " "6"" of type '" "code_viewer_lines_linenum_t *""'"); 
    }
  }
  {
    try
    {
      set_code_viewer_line_handlers(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_code_viewer_lines_icon_margin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_code_viewer_lines_icon_margin", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_code_viewer_lines_icon_margin" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_code_viewer_lines_icon_margin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (bool)set_code_viewer_lines_icon_margin(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_code_viewer_lines_alignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_code_viewer_lines_alignment", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_code_viewer_lines_alignment" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_code_viewer_lines_alignment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (bool)set_code_viewer_lines_alignment(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_code_viewer_lines_radix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_code_viewer_lines_radix", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_code_viewer_lines_radix" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_code_viewer_lines_radix" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (bool)set_code_viewer_lines_radix(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_code_viewer_is_source(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_code_viewer_is_source" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (bool)set_code_viewer_is_source(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_tab_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_tab_size" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (int)get_tab_size((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_clr_cancelled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "clr_cancelled", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        clr_cancelled();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_cancelled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "set_cancelled", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_cancelled();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cancelled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_cancelled", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)user_cancelled();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ui_load_new_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  linput_t **arg3 = (linput_t **) 0 ;
  ushort arg4 ;
  load_info_t **arg5 = (load_info_t **) 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ui_load_new_file", 5, 5, swig_obj)) SWIG_fail;
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[0]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[0], &buf, &length);
      arg1 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "ui_load_new_file" "', argument " "1"" of type 'str'");
    }
  }
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "ui_load_new_file" "', argument " "2"" of type 'str'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_linput_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ui_load_new_file" "', argument " "3"" of type '" "linput_t **""'"); 
  }
  arg3 = reinterpret_cast< linput_t ** >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ui_load_new_file" "', argument " "4"" of type '" "ushort""'");
  } 
  arg4 = static_cast< ushort >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_p_load_info_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ui_load_new_file" "', argument " "5"" of type '" "load_info_t **""'"); 
  }
  arg5 = reinterpret_cast< load_info_t ** >(argp5);
  {
    try
    {
      result = (bool)ui_load_new_file(arg1,arg2,arg3,arg4,arg5);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container qstring * typemap(freearg)
    delete arg1;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg1;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ui_run_debugger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 = (char **) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ui_run_debugger", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ui_run_debugger" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ui_run_debugger" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ui_run_debugger" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ui_run_debugger" "', argument " "4"" of type '" "char const *const *""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  {
    try
    {
      result = (bool)ui_run_debugger((char const *)arg1,(char const *)arg2,arg3,(char const *const *)arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_load_dbg_dbginfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  linput_t *arg2 = (linput_t *) NULL ;
  ea_t arg3 = (ea_t) BADADDR ;
  bool arg4 = (bool) false ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "load_dbg_dbginfo", 1, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "load_dbg_dbginfo" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_linput_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "load_dbg_dbginfo" "', argument " "2"" of type '" "linput_t *""'"); 
    }
    arg2 = reinterpret_cast< linput_t * >(argp2);
  }
  if (swig_obj[2]) {
    {
      // %typemap(in) ea_t
      uint64 arg3_temp;
      if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
      SWIG_exception_fail(
        SWIG_TypeError,
        "in method '" "load_dbg_dbginfo" "', argument " "3"" of type 'ea_t'");
      arg3 = ea_t(arg3_temp);
    }
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "load_dbg_dbginfo" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try
    {
      result = (bool)load_dbg_dbginfo((char const *)arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_idc_hotkey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "add_idc_hotkey", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_idc_hotkey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_idc_hotkey" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (int)add_idc_hotkey((char const *)arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_del_idc_hotkey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "del_idc_hotkey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (bool)del_idc_hotkey((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_user_strlist_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  strwinsetup_t *arg1 = (strwinsetup_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_strwinsetup_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_user_strlist_options" "', argument " "1"" of type '" "strwinsetup_t *""'"); 
  }
  arg1 = reinterpret_cast< strwinsetup_t * >(argp1);
  {
    try
    {
      get_user_strlist_options(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_highlight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_highlight", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_highlight" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_highlight" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_highlight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (bool)set_highlight(arg1,(char const *)arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_exports_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_exports_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_exports_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_imports_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_imports_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_imports_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_names_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_names_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_names_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_funcs_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_funcs_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_funcs_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_strings_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  ea_t arg2 = (ea_t) BADADDR ;
  ea_t arg3 = (ea_t) BADADDR ;
  PyObject *swig_obj[3] ;
  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_strings_window", 1, 3, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_strings_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  if (swig_obj[1]) {
    {
      // %typemap(in) ea_t
      uint64 arg2_temp;
      if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
      SWIG_exception_fail(
        SWIG_TypeError,
        "in method '" "open_strings_window" "', argument " "2"" of type 'ea_t'");
      arg2 = ea_t(arg2_temp);
    }
  }
  if (swig_obj[2]) {
    {
      // %typemap(in) ea_t
      uint64 arg3_temp;
      if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
      SWIG_exception_fail(
        SWIG_TypeError,
        "in method '" "open_strings_window" "', argument " "3"" of type 'ea_t'");
      arg3 = ea_t(arg3_temp);
    }
  }
  {
    try
    {
      result = (TWidget *)open_strings_window(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_segments_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_segments_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_segments_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_segregs_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_segregs_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_segregs_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_selectors_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_selectors_window", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)open_selectors_window();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_signatures_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_signatures_window", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)open_signatures_window();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_tils_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_tils_window", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)open_tils_window();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_loctypes_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "open_loctypes_window" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (TWidget *)open_loctypes_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_calls_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_calls_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_calls_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_problems_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_problems_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_problems_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_bpts_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_bpts_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_bpts_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_threads_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_threads_window", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)open_threads_window();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_modules_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_modules_window", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)open_modules_window();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_trace_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_trace_window", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)open_trace_window();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_stack_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_stack_window", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)open_stack_window();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_xrefs_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_xrefs_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (TWidget *)open_xrefs_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_frame_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  func_t *arg1 = (func_t *) 0 ;
  uval_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_frame_window", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_func_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "open_frame_window" "', argument " "1"" of type '" "func_t *""'"); 
  }
  arg1 = reinterpret_cast< func_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "open_frame_window" "', argument " "2"" of type '" "uval_t""'");
  } 
  arg2 = static_cast< uval_t >(val2);
  {
    try
    {
      result = (TWidget *)open_frame_window(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_navband_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_navband_window", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_navband_window" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "open_navband_window" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (TWidget *)open_navband_window(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_enums_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tid_t arg1 = (tid_t) BADADDR ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_enums_window", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    {
      // %typemap(in) ea_t
      uint64 arg1_temp;
      if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
      SWIG_exception_fail(
        SWIG_TypeError,
        "in method '" "open_enums_window" "', argument " "1"" of type 'ea_t'");
      arg1 = ea_t(arg1_temp);
    }
  }
  {
    try
    {
      result = (TWidget *)open_enums_window(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_structs_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tid_t arg1 = (tid_t) BADADDR ;
  uval_t arg2 = (uval_t) 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_structs_window", 0, 2, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    {
      // %typemap(in) ea_t
      uint64 arg1_temp;
      if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
      SWIG_exception_fail(
        SWIG_TypeError,
        "in method '" "open_structs_window" "', argument " "1"" of type 'ea_t'");
      arg1 = ea_t(arg1_temp);
    }
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "open_structs_window" "', argument " "2"" of type '" "uval_t""'");
    } 
    arg2 = static_cast< uval_t >(val2);
  }
  {
    try
    {
      result = (TWidget *)open_structs_window(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_disasm_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  rangevec_t *arg2 = (rangevec_t *) NULL ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_disasm_window", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "open_disasm_window" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_rangevec_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "open_disasm_window" "', argument " "2"" of type '" "rangevec_t const *""'"); 
    }
    arg2 = reinterpret_cast< rangevec_t * >(argp2);
  }
  {
    try
    {
      result = (TWidget *)open_disasm_window((char const *)arg1,(rangevec_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_hexdump_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "open_hexdump_window" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (TWidget *)open_hexdump_window((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_notepad_window(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_notepad_window", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (TWidget *)open_notepad_window();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_til(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  qstring temp1 ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!SWIG_Python_UnpackTuple(args, "choose_til", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (bool)choose_til(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_entry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_entry" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (ea_t)choose_entry((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_name" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (ea_t)choose_name((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_stkvar_xref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  func_t *arg1 = (func_t *) 0 ;
  member_t *arg2 = (member_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ea_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "choose_stkvar_xref", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_func_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_stkvar_xref" "', argument " "1"" of type '" "func_t *""'"); 
  }
  arg1 = reinterpret_cast< func_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_member_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "choose_stkvar_xref" "', argument " "2"" of type '" "member_t *""'"); 
  }
  arg2 = reinterpret_cast< member_t * >(argp2);
  {
    try
    {
      result = (ea_t)choose_stkvar_xref(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_xref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "choose_xref" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (ea_t)choose_xref(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_enum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  enum_t arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[2] ;
  enum_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "choose_enum", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_enum" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "choose_enum" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      result = (enum_t)choose_enum((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_enum_by_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  enum_t arg2 ;
  uval_t arg3 ;
  int arg4 ;
  uchar *arg5 = (uchar *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  uchar temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject *swig_obj[4] ;
  enum_t result;
  
  arg5 = &temp5;
  if (!SWIG_Python_UnpackTuple(args, "choose_enum_by_value", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_enum_by_value" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "choose_enum_by_value" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "choose_enum_by_value" "', argument " "3"" of type '" "uval_t""'");
  } 
  arg3 = static_cast< uval_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "choose_enum_by_value" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try
    {
      result = (enum_t)choose_enum_by_value((char const *)arg1,arg2,arg3,arg4,arg5);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_char((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_unsigned_char, new_flags));
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_func(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  ea_t arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[2] ;
  func_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "choose_func", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_func" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "choose_func" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      result = (func_t *)choose_func((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_func_t, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_segm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  ea_t arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[2] ;
  segment_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "choose_segm", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_segm" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "choose_segm" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      result = (segment_t *)choose_segm((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment_t, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_struc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  struc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_struc" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (struc_t *)choose_struc((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_struc_t, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_srcp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  sreg_range_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_srcp" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (sreg_range_t *)choose_srcp((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sreg_range_t, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_chooser_obj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_chooser_obj" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (void *)get_chooser_obj((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_enable_chooser_item_attrs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  bool arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "enable_chooser_item_attrs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enable_chooser_item_attrs" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "enable_chooser_item_attrs" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)enable_chooser_item_attrs((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_show_wait_box__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "show_wait_box", 1, 1, &obj0)) SWIG_fail;
  {
    arg1 = "%s";                                /* Fix format string to %s */
    arg2 = (void *) IDAPyBytes_AsString(obj0);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg2 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "show_wait_box" "', argument " "1"" of type '" "char const *""'");
  }
  {
    try
    {
      show_wait_box((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_show_wait_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_show_wait_box__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_hide_wait_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "hide_wait_box", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        hide_wait_box();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_wait_box__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "replace_wait_box", 1, 1, &obj0)) SWIG_fail;
  {
    arg1 = "%s";                                /* Fix format string to %s */
    arg2 = (void *) IDAPyBytes_AsString(obj0);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg2 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "replace_wait_box" "', argument " "1"" of type '" "char const *""'");
  }
  {
    try
    {
      replace_wait_box((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_wait_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_replace_wait_box__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_beep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  beep_t arg1 = (beep_t) beep_default ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "beep", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "beep" "', argument " "1"" of type '" "beep_t""'");
    } 
    arg1 = static_cast< beep_t >(val1);
  }
  {
    try
    {
      beep(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_display_copyright_warning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "display_copyright_warning", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (bool)display_copyright_warning();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ask_for_feedback__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ask_for_feedback", 1, 1, &obj0)) SWIG_fail;
  {
    arg1 = "%s";                                /* Fix format string to %s */
    arg2 = (void *) IDAPyBytes_AsString(obj0);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg2 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "ask_for_feedback" "', argument " "1"" of type '" "char const *""'");
  }
  {
    try
    {
      ask_for_feedback((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ask_for_feedback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_ask_for_feedback__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap__ask_addr__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  ea_t *arg1 = (ea_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  ea_t temp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_UnpackTuple(args, "_ask_addr", 2, 2, &obj0, &obj1)) SWIG_fail;
  if (!(SWIG_IsOK((res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val; 
    int ecode = SWIG_AsVal_unsigned_SS_int(obj0, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "_ask_addr" "', argument " "1"" of type '" "ea_t""'");
    }
    temp1 = static_cast< ea_t >(val);
    arg1 = &temp1;
    res1 = SWIG_AddTmpMask(ecode);
  }
  {
    arg2 = "%s";                                /* Fix format string to %s */
    arg3 = (void *) IDAPyBytes_AsString(obj1);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg3 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "_ask_addr" "', argument " "2"" of type '" "char const *""'");
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)ask_addr(arg1,(char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res1)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_unsigned_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__ask_addr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,2);
  varargs = PyTuple_GetSlice(args,2,PyTuple_Size(args));
  resultobj = _wrap__ask_addr__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap__ask_seg__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  sel_t *arg1 = (sel_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  sel_t temp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_UnpackTuple(args, "_ask_seg", 2, 2, &obj0, &obj1)) SWIG_fail;
  if (!(SWIG_IsOK((res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val; 
    int ecode = SWIG_AsVal_unsigned_SS_int(obj0, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "_ask_seg" "', argument " "1"" of type '" "sel_t""'");
    }
    temp1 = static_cast< sel_t >(val);
    arg1 = &temp1;
    res1 = SWIG_AddTmpMask(ecode);
  }
  {
    arg2 = "%s";                                /* Fix format string to %s */
    arg3 = (void *) IDAPyBytes_AsString(obj1);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg3 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "_ask_seg" "', argument " "2"" of type '" "char const *""'");
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)ask_seg(arg1,(char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res1)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_unsigned_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__ask_seg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,2);
  varargs = PyTuple_GetSlice(args,2,PyTuple_Size(args));
  resultobj = _wrap__ask_seg__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap__ask_long__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  sval_t *arg1 = (sval_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  sval_t temp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_UnpackTuple(args, "_ask_long", 2, 2, &obj0, &obj1)) SWIG_fail;
  if (!(SWIG_IsOK((res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1),SWIGTYPE_p_int,0))))) {
    int val; 
    int ecode = SWIG_AsVal_int(obj0, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "_ask_long" "', argument " "1"" of type '" "sval_t""'");
    }
    temp1 = static_cast< sval_t >(val);
    arg1 = &temp1;
    res1 = SWIG_AddTmpMask(ecode);
  }
  {
    arg2 = "%s";                                /* Fix format string to %s */
    arg3 = (void *) IDAPyBytes_AsString(obj1);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg3 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "_ask_long" "', argument " "2"" of type '" "char const *""'");
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)ask_long(arg1,(char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsTmpObj(res1)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__ask_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,2);
  varargs = PyTuple_GetSlice(args,2,PyTuple_Size(args));
  resultobj = _wrap__ask_long__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN int Swig_var_batch_set(PyObject *_val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""batch""' of type '""bool""'");
    }
    batch = static_cast< bool >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_batch_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(batch));
  return pyobj;
}


SWIGINTERN int Swig_var_errorexit_set(PyObject *_val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""errorexit""' of type '""bool""'");
    }
    errorexit = static_cast< bool >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_errorexit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(errorexit));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_error__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "error", 1, 1, &obj0)) SWIG_fail;
  {
    arg1 = "%s";                                /* Fix format string to %s */
    arg2 = (void *) IDAPyBytes_AsString(obj0);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg2 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "error" "', argument " "1"" of type '" "char const *""'");
  }
  {
    try
    {
      error((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_error__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_warning__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "warning", 1, 1, &obj0)) SWIG_fail;
  {
    arg1 = "%s";                                /* Fix format string to %s */
    arg2 = (void *) IDAPyBytes_AsString(obj0);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg2 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "warning" "', argument " "1"" of type '" "char const *""'");
  }
  {
    try
    {
      warning((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_warning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_warning__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_info__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "info", 1, 1, &obj0)) SWIG_fail;
  {
    arg1 = "%s";                                /* Fix format string to %s */
    arg2 = (void *) IDAPyBytes_AsString(obj0);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg2 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "info" "', argument " "1"" of type '" "char const *""'");
  }
  {
    try
    {
      info((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_info__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_nomem__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "nomem", 1, 1, &obj0)) SWIG_fail;
  {
    arg1 = "%s";                                /* Fix format string to %s */
    arg2 = (void *) IDAPyBytes_AsString(obj0);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg2 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "nomem" "', argument " "1"" of type '" "char const *""'");
  }
  {
    try
    {
      nomem((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nomem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_nomem__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_ask_yn__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "ask_yn", 2, 2, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ask_yn" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    arg2 = "%s";                                /* Fix format string to %s */
    arg3 = (void *) IDAPyBytes_AsString(obj1);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg3 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "ask_yn" "', argument " "2"" of type '" "char const *""'");
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)ask_yn(arg1,(char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ask_yn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj;

  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,2);
  varargs = PyTuple_GetSlice(args,2,PyTuple_Size(args));
  resultobj = _wrap_ask_yn__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_ask_buttons__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "ask_buttons", 5, 5, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ask_buttons" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ask_buttons" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ask_buttons" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ask_buttons" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = "%s";                                /* Fix format string to %s */
    arg6 = (void *) IDAPyBytes_AsString(obj4);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg6 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "ask_buttons" "', argument " "5"" of type '" "char const *""'");
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)ask_buttons((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ask_buttons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj;

  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,5);
  varargs = PyTuple_GetSlice(args,5,PyTuple_Size(args));
  resultobj = _wrap_ask_buttons__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_ask_file__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ask_file", 3, 3, &obj0, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ask_file" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ask_file" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = "%s";                                /* Fix format string to %s */
    arg4 = (void *) IDAPyBytes_AsString(obj2);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg4 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "ask_file" "', argument " "3"" of type '" "char const *""'");
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (char *)ask_file(arg1,(char const *)arg2,(char const *)arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ask_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj;

  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,3);
  varargs = PyTuple_GetSlice(args,3,PyTuple_Size(args));
  resultobj = _wrap_ask_file__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_addon_info_t_cb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_info_t_cb_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_cb_set" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "addon_info_t_cb_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->cb = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_cb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_cb_get" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  result =  ((arg1)->cb);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_info_t_id_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_id_set" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addon_info_t_id_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->id = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->id = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_id_get" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  result = (char *) ((arg1)->id);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_info_t_name_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_name_set" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addon_info_t_name_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->name = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->name = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_name_get" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  result = (char *) ((arg1)->name);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_producer_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_info_t_producer_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_producer_set" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addon_info_t_producer_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->producer = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->producer = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_producer_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_producer_get" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  result = (char *) ((arg1)->producer);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_version_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_info_t_version_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_version_set" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addon_info_t_version_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->version = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->version = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_version_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_version_get" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  result = (char *) ((arg1)->version);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_url_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_info_t_url_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_url_set" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addon_info_t_url_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->url = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->url = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_url_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_url_get" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  result = (char *) ((arg1)->url);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_freeform_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_info_t_freeform_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_freeform_set" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addon_info_t_freeform_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->freeform = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->freeform = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_freeform_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_freeform_get" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  result = (char *) ((arg1)->freeform);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_custom_data_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_info_t_custom_data_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_custom_data_set" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addon_info_t_custom_data_set" "', argument " "2"" of type '" "void const *""'"); 
  }
  if (arg1) (arg1)->custom_data = (void const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_custom_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_custom_data_get" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  result = (void *) ((arg1)->custom_data);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_custom_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_info_t_custom_size_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_custom_size_set" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "addon_info_t_custom_size_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->custom_size = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_info_t_custom_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addon_info_t_custom_size_get" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  result =  ((arg1)->custom_size);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_addon_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_addon_info_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (addon_info_t *)new addon_info_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_addon_info_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_addon_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_addon_info_t" "', argument " "1"" of type '" "addon_info_t *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *addon_info_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_addon_info_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *addon_info_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_register_addon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  addon_info_t *arg1 = (addon_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "register_addon" "', argument " "1"" of type '" "addon_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< addon_info_t * >(argp1);
  {
    try
    {
      result = (int)register_addon((addon_info_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_addon_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "addon_count", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (int)addon_count();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_addon_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  addon_info_t *arg2 = (addon_info_t *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_addon_info", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_addon_info" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_addon_info" "', argument " "2"" of type '" "addon_info_t *""'"); 
  }
  arg2 = reinterpret_cast< addon_info_t * >(argp2);
  {
    try
    {
      result = (bool)get_addon_info((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_addon_info_idx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  addon_info_t *arg2 = (addon_info_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_addon_info_idx", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_addon_info_idx" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_addon_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_addon_info_idx" "', argument " "2"" of type '" "addon_info_t *""'"); 
  }
  arg2 = reinterpret_cast< addon_info_t * >(argp2);
  {
    try
    {
      result = (bool)get_addon_info_idx(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_spaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  ssize_t arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  char *result = 0 ;
  
  {
    arg2 = MAXSPECSIZE;
  }
  if (!SWIG_Python_UnpackTuple(args, "add_spaces", 1, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_spaces" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_spaces" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_long_SS_long(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_spaces" "', argument " "3"" of type '" "ssize_t""'");
    } 
    arg3 = static_cast< ssize_t >(val3);
  }
  {
    if ( arg1 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference in method 'add_spaces', argument 1 of type 'char *'");
  }
  {
    try
    {
      result = (char *)add_spaces(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_strarray_t_code_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  strarray_t *arg1 = (strarray_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "strarray_t_code_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_strarray_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strarray_t_code_set" "', argument " "1"" of type '" "strarray_t *""'"); 
  }
  arg1 = reinterpret_cast< strarray_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "strarray_t_code_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->code = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_strarray_t_code_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  strarray_t *arg1 = (strarray_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_strarray_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strarray_t_code_get" "', argument " "1"" of type '" "strarray_t *""'"); 
  }
  arg1 = reinterpret_cast< strarray_t * >(argp1);
  result = (int) ((arg1)->code);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_strarray_t_text_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  strarray_t *arg1 = (strarray_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "strarray_t_text_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_strarray_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strarray_t_text_set" "', argument " "1"" of type '" "strarray_t *""'"); 
  }
  arg1 = reinterpret_cast< strarray_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "strarray_t_text_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->text = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->text = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_strarray_t_text_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  strarray_t *arg1 = (strarray_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_strarray_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strarray_t_text_get" "', argument " "1"" of type '" "strarray_t *""'"); 
  }
  arg1 = reinterpret_cast< strarray_t * >(argp1);
  result = (char *) ((arg1)->text);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_strarray_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  strarray_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_strarray_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (strarray_t *)new strarray_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_strarray_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_strarray_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  strarray_t *arg1 = (strarray_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_strarray_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_strarray_t" "', argument " "1"" of type '" "strarray_t *""'"); 
  }
  arg1 = reinterpret_cast< strarray_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *strarray_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_strarray_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *strarray_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_qcleanline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstring *arg1 = (qstring *) 0 ;
  char arg2 = (char) '\0' ;
  uint32 arg3 = (uint32) ((1 << 0)|(1 << 1))|(1 << 2) ;
  qstring temp1 ;
  char val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[2] ;
  ssize_t result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!SWIG_Python_UnpackTuple(args, "qcleanline", 0, 2, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode2 = SWIG_AsVal_char(swig_obj[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qcleanline" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
  }
  if (swig_obj[1]) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "qcleanline" "', argument " "3"" of type '" "uint32""'");
    } 
    arg3 = static_cast< uint32 >(val3);
  }
  {
    try
    {
      result = qcleanline(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_strarray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  strarray_t *arg1 = (strarray_t *) 0 ;
  size_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "strarray", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_strarray_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strarray" "', argument " "1"" of type '" "strarray_t const *""'"); 
  }
  arg1 = reinterpret_cast< strarray_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "strarray" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "strarray" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (char *)strarray((strarray_t const *)arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ea2str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  ea_t arg3 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  {
    arg2 = MAXSPECSIZE;
  }
  {
    arg1 = (char *) qalloc(1024+1);
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "ea2str" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  {
    try
    {
      result = ea2str(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  {
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8(arg1);
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
    qfree(arg1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_disasm_text_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< disasm_line_t > *)new qvector< disasm_line_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_disasm_line_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_disasm_text_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< disasm_line_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_disasm_line_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_disasm_text_t" "', argument " "1"" of type '" "qvector< disasm_line_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_disasm_text_t" "', argument " "1"" of type '" "qvector< disasm_line_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = (qvector< disasm_line_t > *)new qvector< disasm_line_t >((qvector< disasm_line_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_disasm_line_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_disasm_text_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_disasm_text_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_disasm_text_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_disasm_line_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_disasm_text_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_disasm_text_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< disasm_line_t >::qvector()\n"
    "    qvector< disasm_line_t >::qvector(qvector< disasm_line_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_disasm_text_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_disasm_text_t" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  disasm_line_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_push_back" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_disasm_line_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "disasm_text_t_push_back" "', argument " "2"" of type '" "disasm_line_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "disasm_text_t_push_back" "', argument " "2"" of type '" "disasm_line_t const &""'"); 
  }
  arg2 = reinterpret_cast< disasm_line_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((disasm_line_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  disasm_line_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_push_back" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = (disasm_line_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "disasm_text_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_disasm_text_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_disasm_line_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_disasm_text_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'disasm_text_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< disasm_line_t >::push_back(disasm_line_t const &)\n"
    "    qvector< disasm_line_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_pop_back" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_size" "', argument " "1"" of type '" "qvector< disasm_line_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = ((qvector< disasm_line_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_empty" "', argument " "1"" of type '" "qvector< disasm_line_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< disasm_line_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  disasm_line_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_text_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_at" "', argument " "1"" of type '" "qvector< disasm_line_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "disasm_text_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (disasm_line_t *) &((qvector< disasm_line_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_qclear" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_clear" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  size_t arg2 ;
  disasm_line_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_resize" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "disasm_text_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_disasm_line_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "disasm_text_t_resize" "', argument " "3"" of type '" "disasm_line_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "disasm_text_t_resize" "', argument " "3"" of type '" "disasm_line_t const &""'"); 
  }
  arg3 = reinterpret_cast< disasm_line_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(disasm_line_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_resize" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "disasm_text_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "disasm_text_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_disasm_text_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_disasm_line_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_disasm_text_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'disasm_text_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< disasm_line_t >::resize(size_t,disasm_line_t const &)\n"
    "    qvector< disasm_line_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  disasm_line_t const &arg2_defvalue = disasm_line_t() ;
  disasm_line_t *arg2 = (disasm_line_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_text_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_grow" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_disasm_line_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "disasm_text_t_grow" "', argument " "2"" of type '" "disasm_line_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "disasm_text_t_grow" "', argument " "2"" of type '" "disasm_line_t const &""'"); 
    }
    arg2 = reinterpret_cast< disasm_line_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((disasm_line_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_capacity" "', argument " "1"" of type '" "qvector< disasm_line_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = ((qvector< disasm_line_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_text_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_reserve" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "disasm_text_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_truncate" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  qvector< disasm_line_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_text_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_swap" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_disasm_line_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "disasm_text_t_swap" "', argument " "2"" of type '" "qvector< disasm_line_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "disasm_text_t_swap" "', argument " "2"" of type '" "qvector< disasm_line_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< disasm_line_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  disasm_line_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_extract" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = (disasm_line_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  disasm_line_t *arg2 = (disasm_line_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_text_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_inject" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "disasm_text_t_inject" "', argument " "2"" of type '" "disasm_line_t *""'"); 
  }
  arg2 = reinterpret_cast< disasm_line_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "disasm_text_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< disasm_line_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_begin" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = (qvector< disasm_line_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< disasm_line_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_end" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = (qvector< disasm_line_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< disasm_line_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_begin" "', argument " "1"" of type '" "qvector< disasm_line_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = (qvector< disasm_line_t >::const_iterator)((qvector< disasm_line_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "disasm_text_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_disasm_text_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_disasm_text_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'disasm_text_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< disasm_line_t >::begin()\n"
    "    qvector< disasm_line_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< disasm_line_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_end" "', argument " "1"" of type '" "qvector< disasm_line_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = (qvector< disasm_line_t >::const_iterator)((qvector< disasm_line_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "disasm_text_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_disasm_text_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_disasm_text_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'disasm_text_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< disasm_line_t >::end()\n"
    "    qvector< disasm_line_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  qvector< disasm_line_t >::iterator arg2 = (qvector< disasm_line_t >::iterator) 0 ;
  disasm_line_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< disasm_line_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_text_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_insert" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "disasm_text_t_insert" "', argument " "2"" of type '" "qvector< disasm_line_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< disasm_line_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_disasm_line_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "disasm_text_t_insert" "', argument " "3"" of type '" "disasm_line_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "disasm_text_t_insert" "', argument " "3"" of type '" "disasm_line_t const &""'"); 
  }
  arg3 = reinterpret_cast< disasm_line_t * >(argp3);
  {
    try
    {
      result = (qvector< disasm_line_t >::iterator)(arg1)->insert(arg2,(disasm_line_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  qvector< disasm_line_t >::iterator arg2 = (qvector< disasm_line_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< disasm_line_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_erase" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "disasm_text_t_erase" "', argument " "2"" of type '" "qvector< disasm_line_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< disasm_line_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< disasm_line_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  qvector< disasm_line_t >::iterator arg2 = (qvector< disasm_line_t >::iterator) 0 ;
  qvector< disasm_line_t >::iterator arg3 = (qvector< disasm_line_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< disasm_line_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t_erase" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "disasm_text_t_erase" "', argument " "2"" of type '" "qvector< disasm_line_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< disasm_line_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_disasm_line_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "disasm_text_t_erase" "', argument " "3"" of type '" "qvector< disasm_line_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< disasm_line_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< disasm_line_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "disasm_text_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_disasm_line_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_disasm_text_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_disasm_line_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_disasm_line_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_disasm_line_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_disasm_text_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'disasm_text_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< disasm_line_t >::erase(qvector< disasm_line_t >::iterator)\n"
    "    qvector< disasm_line_t >::erase(qvector< disasm_line_t >::iterator,qvector< disasm_line_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disasm_text_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t___len__" "', argument " "1"" of type '" "qvector< disasm_line_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_disasm_line_t_Sg____len__((qvector< disasm_line_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  disasm_line_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_text_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t___getitem__" "', argument " "1"" of type '" "qvector< disasm_line_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "disasm_text_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (disasm_line_t *) &qvector_Sl_disasm_line_t_Sg____getitem__((qvector< disasm_line_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_disasm_line_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disasm_text_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< disasm_line_t > *arg1 = (qvector< disasm_line_t > *) 0 ;
  size_t arg2 ;
  disasm_line_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "disasm_text_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_disasm_line_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disasm_text_t___setitem__" "', argument " "1"" of type '" "qvector< disasm_line_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< disasm_line_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "disasm_text_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_disasm_line_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "disasm_text_t___setitem__" "', argument " "3"" of type '" "disasm_line_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "disasm_text_t___setitem__" "', argument " "3"" of type '" "disasm_line_t const &""'"); 
  }
  arg3 = reinterpret_cast< disasm_line_t * >(argp3);
  {
    try
    {
      qvector_Sl_disasm_line_t_Sg____setitem__(arg1,arg2,(disasm_line_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *disasm_text_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_disasm_line_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *disasm_text_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_choose_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "choose_find" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (PyObject *)choose_find((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_refresh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      choose_refresh(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      choose_close(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (int)choose_create(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      choose_activate(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__choose_get_embedded_chobj_pointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  uint64 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (uint64)_choose_get_embedded_chobj_pointer(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // %typemap(out) uint64
    resultobj = PyLong_FromUnsignedLongLong((unsigned long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_chooser_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_chooser_data", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_chooser_data" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_chooser_data" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (PyObject *)py_get_chooser_data((char const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_get_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (TWidget *)choose_get_widget(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "textctrl_info_t_assign", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  arg2 = swig_obj[1];
  {
    try
    {
      result = (bool)textctrl_info_t_assign(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_set_text(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  char *arg2 = (char *) 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "textctrl_info_t_set_text", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "textctrl_info_t_set_text" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)textctrl_info_t_set_text(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_get_text(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (char *)textctrl_info_t_get_text(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_set_flags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  unsigned int arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "textctrl_info_t_set_flags", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "textctrl_info_t_set_flags" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try
    {
      result = (bool)textctrl_info_t_set_flags(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_get_flags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  unsigned int arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "textctrl_info_t_get_flags", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "textctrl_info_t_get_flags" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try
    {
      result = (unsigned int)textctrl_info_t_get_flags(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_set_tabsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  unsigned int arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "textctrl_info_t_set_tabsize", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "textctrl_info_t_set_tabsize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try
    {
      result = (bool)textctrl_info_t_set_tabsize(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_textctrl_info_t_get_tabsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  unsigned int arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "textctrl_info_t_get_tabsize", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "textctrl_info_t_get_tabsize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try
    {
      result = (unsigned int)textctrl_info_t_get_tabsize(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_formchgcbfa_enable_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  int arg2 ;
  bool arg3 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "formchgcbfa_enable_field", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "formchgcbfa_enable_field" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "formchgcbfa_enable_field" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "formchgcbfa_enable_field" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = (bool)formchgcbfa_enable_field(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_formchgcbfa_show_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  int arg2 ;
  bool arg3 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "formchgcbfa_show_field", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "formchgcbfa_show_field" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "formchgcbfa_show_field" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "formchgcbfa_show_field" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = (bool)formchgcbfa_show_field(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_formchgcbfa_move_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "formchgcbfa_move_field", 6, 6, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "formchgcbfa_move_field" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "formchgcbfa_move_field" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "formchgcbfa_move_field" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "formchgcbfa_move_field" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "formchgcbfa_move_field" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "formchgcbfa_move_field" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try
    {
      result = (bool)formchgcbfa_move_field(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_formchgcbfa_get_focused_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "formchgcbfa_get_focused_field" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    try
    {
      result = (int)formchgcbfa_get_focused_field(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_formchgcbfa_set_focused_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  int arg2 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "formchgcbfa_set_focused_field", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "formchgcbfa_set_focused_field" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "formchgcbfa_set_focused_field" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (bool)formchgcbfa_set_focused_field(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_formchgcbfa_refresh_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  int arg2 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "formchgcbfa_refresh_field", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "formchgcbfa_refresh_field" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "formchgcbfa_refresh_field" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      formchgcbfa_refresh_field(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_formchgcbfa_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  int arg2 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "formchgcbfa_close", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "formchgcbfa_close" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "formchgcbfa_close" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      formchgcbfa_close(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_formchgcbfa_get_field_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  int arg2 ;
  int arg3 ;
  size_t arg4 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "formchgcbfa_get_field_value", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "formchgcbfa_get_field_value" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "formchgcbfa_get_field_value" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "formchgcbfa_get_field_value" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "formchgcbfa_get_field_value" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try
    {
      result = (PyObject *)formchgcbfa_get_field_value(arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_formchgcbfa_set_field_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  int arg2 ;
  int arg3 ;
  PyObject *arg4 = (PyObject *) 0 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "formchgcbfa_set_field_value", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "formchgcbfa_set_field_value" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "formchgcbfa_set_field_value" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "formchgcbfa_set_field_value" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  arg4 = swig_obj[3];
  {
    try
    {
      result = (bool)formchgcbfa_set_field_value(arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_py_get_ask_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  size_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "py_get_ask_form", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = py_get_ask_form();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_py_get_open_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  size_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "py_get_open_form", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = py_get_open_form();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_py_register_compiled_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      py_register_compiled_form(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_py_unregister_compiled_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      py_unregister_compiled_form(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_install_command_interpreter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (int)py_install_command_interpreter(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_remove_command_interpreter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "remove_command_interpreter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      py_remove_command_interpreter(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_View_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_View_Hooks" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_hook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_hook" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->hook();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_unhook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_unhook" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->unhook();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_activated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_activated", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_activated" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_activated" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_activated(arg2);
        } else {
          (arg1)->view_activated(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_deactivated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_deactivated", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_deactivated" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_deactivated" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_deactivated(arg2);
        } else {
          (arg1)->view_deactivated(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_keydown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  int arg3 ;
  view_event_state_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_keydown", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_keydown" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_keydown" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "View_Hooks_view_keydown" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "View_Hooks_view_keydown" "', argument " "4"" of type '" "view_event_state_t""'");
  } 
  arg4 = static_cast< view_event_state_t >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_keydown(arg2,arg3,arg4);
        } else {
          (arg1)->view_keydown(arg2,arg3,arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_click(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  view_mouse_event_t *arg3 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_click", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_click" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_click" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "View_Hooks_view_click" "', argument " "3"" of type '" "view_mouse_event_t const *""'"); 
  }
  arg3 = reinterpret_cast< view_mouse_event_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_click(arg2,(view_mouse_event_t const *)arg3);
        } else {
          (arg1)->view_click(arg2,(view_mouse_event_t const *)arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_dblclick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  view_mouse_event_t *arg3 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_dblclick", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_dblclick" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_dblclick" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "View_Hooks_view_dblclick" "', argument " "3"" of type '" "view_mouse_event_t const *""'"); 
  }
  arg3 = reinterpret_cast< view_mouse_event_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_dblclick(arg2,(view_mouse_event_t const *)arg3);
        } else {
          (arg1)->view_dblclick(arg2,(view_mouse_event_t const *)arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_curpos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_curpos", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_curpos" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_curpos" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_curpos(arg2);
        } else {
          (arg1)->view_curpos(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_created(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_created", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_created" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_created" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_created(arg2);
        } else {
          (arg1)->view_created(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_close", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_close" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_close" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_close(arg2);
        } else {
          (arg1)->view_close(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_switched(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  tcc_renderer_type_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_switched", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_switched" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_switched" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "View_Hooks_view_switched" "', argument " "3"" of type '" "tcc_renderer_type_t""'");
  } 
  arg3 = static_cast< tcc_renderer_type_t >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_switched(arg2,arg3);
        } else {
          (arg1)->view_switched(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_mouse_over(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  view_mouse_event_t *arg3 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_mouse_over", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_mouse_over" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_mouse_over" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "View_Hooks_view_mouse_over" "', argument " "3"" of type '" "view_mouse_event_t const *""'"); 
  }
  arg3 = reinterpret_cast< view_mouse_event_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_mouse_over(arg2,(view_mouse_event_t const *)arg3);
        } else {
          (arg1)->view_mouse_over(arg2,(view_mouse_event_t const *)arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_loc_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  lochist_entry_t *arg3 = (lochist_entry_t *) 0 ;
  lochist_entry_t *arg4 = (lochist_entry_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_loc_changed", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_loc_changed" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_loc_changed" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_lochist_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "View_Hooks_view_loc_changed" "', argument " "3"" of type '" "lochist_entry_t const *""'"); 
  }
  arg3 = reinterpret_cast< lochist_entry_t * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_lochist_entry_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "View_Hooks_view_loc_changed" "', argument " "4"" of type '" "lochist_entry_t const *""'"); 
  }
  arg4 = reinterpret_cast< lochist_entry_t * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_loc_changed(arg2,(lochist_entry_t const *)arg3,(lochist_entry_t const *)arg4);
        } else {
          (arg1)->view_loc_changed(arg2,(lochist_entry_t const *)arg3,(lochist_entry_t const *)arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_View_Hooks_view_mouse_moved(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  view_mouse_event_t *arg3 = (view_mouse_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "View_Hooks_view_mouse_moved", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "View_Hooks_view_mouse_moved" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "View_Hooks_view_mouse_moved" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_view_mouse_event_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "View_Hooks_view_mouse_moved" "', argument " "3"" of type '" "view_mouse_event_t const *""'"); 
  }
  arg3 = reinterpret_cast< view_mouse_event_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->View_Hooks::view_mouse_moved(arg2,(view_mouse_event_t const *)arg3);
        } else {
          (arg1)->view_mouse_moved(arg2,(view_mouse_event_t const *)arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_View_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  View_Hooks *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (View_Hooks *)new SwigDirector_View_Hooks(arg1); 
      } else {
        result = (View_Hooks *)new View_Hooks(); 
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_View_Hooks, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_View_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  View_Hooks *arg1 = (View_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_View_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_View_Hooks" "', argument " "1"" of type '" "View_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< View_Hooks * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *View_Hooks_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_View_Hooks, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *View_Hooks_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_pyidag_bind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)pyidag_bind(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyidag_unbind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)pyidag_unbind(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  char *arg2 = (char *) 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_init", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pyscv_init" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (PyObject *)pyscv_init(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_refresh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)pyscv_refresh(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_delete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)pyscv_delete(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_refresh_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)pyscv_refresh_current(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_get_current_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_get_current_line", 3, 3, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pyscv_get_current_line" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pyscv_get_current_line" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = (PyObject *)pyscv_get_current_line(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_is_focused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)pyscv_is_focused(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = pyscv_count(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (bool)pyscv_show(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      pyscv_close(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_jumpto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  size_t arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_jumpto", 4, 4, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pyscv_jumpto" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pyscv_jumpto" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pyscv_jumpto" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try
    {
      result = (bool)pyscv_jumpto(arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_get_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  size_t arg2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_get_line", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pyscv_get_line" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (PyObject *)pyscv_get_line(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_get_pos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_get_pos", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pyscv_get_pos" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (PyObject *)pyscv_get_pos(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_clear_lines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (PyObject *)pyscv_clear_lines(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_add_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_add_line", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  arg2 = swig_obj[1];
  {
    try
    {
      result = (bool)pyscv_add_line(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_insert_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  size_t arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_insert_line", 3, 3, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pyscv_insert_line" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  arg3 = swig_obj[2];
  {
    try
    {
      result = (bool)pyscv_insert_line(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_patch_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int arg4 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_patch_line", 4, 4, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pyscv_patch_line" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pyscv_patch_line" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pyscv_patch_line" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try
    {
      result = (bool)pyscv_patch_line(arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_del_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  size_t arg2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_del_line", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pyscv_del_line" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (bool)pyscv_del_line(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_get_selection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (PyObject *)pyscv_get_selection(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_get_current_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_get_current_word", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pyscv_get_current_word" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (PyObject *)pyscv_get_current_word(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_edit_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  size_t arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "pyscv_edit_line", 3, 3, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pyscv_edit_line" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  arg3 = swig_obj[2];
  {
    try
    {
      result = (bool)pyscv_edit_line(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pyscv_get_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (TWidget *)pyscv_get_widget(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_plgform_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "plgform_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (PyObject *)plgform_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_plgform_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 = (int) WOPN_TAB|WOPN_RESTORE ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "plgform_show", 3, 4, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  arg2 = swig_obj[1];
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "plgform_show" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "plgform_show" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try
    {
      result = (bool)plgform_show(arg1,arg2,(char const *)arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_plgform_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "plgform_close", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "plgform_close" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      plgform_close(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_plgform_get_widget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      result = (TWidget *)plgform_get_widget(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "refresh_choosers", _wrap_refresh_choosers, METH_NOARGS, "refresh_choosers()"},
	 { "textctrl_info_t_create", _wrap_textctrl_info_t_create, METH_NOARGS, "textctrl_info_t_create() -> PyObject *"},
	 { "textctrl_info_t_destroy", _wrap_textctrl_info_t_destroy, METH_O, "textctrl_info_t_destroy(py_obj) -> bool"},
	 { "textctrl_info_t_get_clink", _wrap_textctrl_info_t_get_clink, METH_O, "textctrl_info_t_get_clink(_self) -> textctrl_info_t *"},
	 { "textctrl_info_t_get_clink_ptr", _wrap_textctrl_info_t_get_clink_ptr, METH_O, "textctrl_info_t_get_clink_ptr(_self) -> PyObject *"},
	 { "register_timer", _wrap_register_timer, METH_VARARGS, "register_timer(interval, py_callback) -> PyObject *"},
	 { "unregister_timer", _wrap_unregister_timer, METH_O, "unregister_timer(py_timerctx) -> PyObject *"},
	 { "choose_idasgn", _wrap_choose_idasgn, METH_NOARGS, "choose_idasgn() -> PyObject *"},
	 { "get_highlight", _wrap_get_highlight, METH_O, "get_highlight(v) -> PyObject *"},
	 { "py_load_custom_icon_fn", _wrap_py_load_custom_icon_fn, METH_O, "py_load_custom_icon_fn(filename) -> int"},
	 { "py_load_custom_icon_data", _wrap_py_load_custom_icon_data, METH_VARARGS, "py_load_custom_icon_data(data, format) -> int"},
	 { "msg", _wrap_msg, METH_O, "msg(o) -> PyObject *"},
	 { "ask_text", _wrap_ask_text, METH_VARARGS, "ask_text(max_size, defval, prompt) -> PyObject *"},
	 { "ask_str", _wrap_ask_str, METH_VARARGS, "ask_str(defval, hist, prompt) -> PyObject *"},
	 { "str2ea", _wrap_str2ea, METH_VARARGS, "str2ea(str, screenEA=BADADDR) -> ea_t"},
	 { "process_ui_action", _wrap_process_ui_action, METH_VARARGS, "process_ui_action(name, flags=0) -> bool"},
	 { "del_hotkey", _wrap_del_hotkey, METH_O, "del_hotkey(pyctx) -> bool"},
	 { "add_hotkey", _wrap_add_hotkey, METH_VARARGS, "add_hotkey(hotkey, pyfunc) -> PyObject *"},
	 { "take_database_snapshot", _wrap_take_database_snapshot, METH_O, "take_database_snapshot(ss) -> PyObject *"},
	 { "py_ss_restore_callback", _wrap_py_ss_restore_callback, METH_VARARGS, "py_ss_restore_callback(err_msg, userdata)"},
	 { "restore_database_snapshot", _wrap_restore_database_snapshot, METH_VARARGS, "restore_database_snapshot(ss, pyfunc_or_none, pytuple_or_none) -> PyObject *"},
	 { "execute_sync", _wrap_execute_sync, METH_VARARGS, "execute_sync(py_callable, reqf) -> int"},
	 { "execute_ui_requests", _wrap_execute_ui_requests, METH_O, "execute_ui_requests(py_list) -> bool"},
	 { "jobj_wrapper_t_get_dict", _wrap_jobj_wrapper_t_get_dict, METH_O, "jobj_wrapper_t_get_dict(self) -> PyObject *"},
	 { "jobj_wrapper_t_swigregister", jobj_wrapper_t_swigregister, METH_O, NULL},
	 { "delete_UI_Hooks", _wrap_delete_UI_Hooks, METH_O, "delete_UI_Hooks(self)"},
	 { "UI_Hooks_hook", _wrap_UI_Hooks_hook, METH_O, "UI_Hooks_hook(self) -> bool"},
	 { "UI_Hooks_unhook", _wrap_UI_Hooks_unhook, METH_O, "UI_Hooks_unhook(self) -> bool"},
	 { "UI_Hooks_range", _wrap_UI_Hooks_range, METH_O, "UI_Hooks_range(self)"},
	 { "UI_Hooks_idcstart", _wrap_UI_Hooks_idcstart, METH_O, "UI_Hooks_idcstart(self)"},
	 { "UI_Hooks_idcstop", _wrap_UI_Hooks_idcstop, METH_O, "UI_Hooks_idcstop(self)"},
	 { "UI_Hooks_suspend", _wrap_UI_Hooks_suspend, METH_O, "UI_Hooks_suspend(self)"},
	 { "UI_Hooks_resume", _wrap_UI_Hooks_resume, METH_O, "UI_Hooks_resume(self)"},
	 { "UI_Hooks_saving", _wrap_UI_Hooks_saving, METH_O, "UI_Hooks_saving(self)"},
	 { "UI_Hooks_saved", _wrap_UI_Hooks_saved, METH_O, "UI_Hooks_saved(self)"},
	 { "UI_Hooks_term", _wrap_UI_Hooks_term, METH_O, "UI_Hooks_term(self)"},
	 { "UI_Hooks_debugger_menu_change", _wrap_UI_Hooks_debugger_menu_change, METH_VARARGS, "UI_Hooks_debugger_menu_change(self, enable) -> int"},
	 { "UI_Hooks_widget_visible", _wrap_UI_Hooks_widget_visible, METH_VARARGS, "UI_Hooks_widget_visible(self, widget)"},
	 { "UI_Hooks_widget_closing", _wrap_UI_Hooks_widget_closing, METH_VARARGS, "UI_Hooks_widget_closing(self, widget)"},
	 { "UI_Hooks_widget_invisible", _wrap_UI_Hooks_widget_invisible, METH_VARARGS, "UI_Hooks_widget_invisible(self, widget)"},
	 { "UI_Hooks_get_ea_hint", _wrap_UI_Hooks_get_ea_hint, METH_VARARGS, "UI_Hooks_get_ea_hint(self, ea) -> PyObject *"},
	 { "UI_Hooks_get_item_hint", _wrap_UI_Hooks_get_item_hint, METH_VARARGS, "UI_Hooks_get_item_hint(self, ea, max_lines) -> PyObject *"},
	 { "UI_Hooks_get_custom_viewer_hint", _wrap_UI_Hooks_get_custom_viewer_hint, METH_VARARGS, "UI_Hooks_get_custom_viewer_hint(self, viewer, place) -> PyObject *"},
	 { "UI_Hooks_database_inited", _wrap_UI_Hooks_database_inited, METH_VARARGS, "UI_Hooks_database_inited(self, is_new_database, idc_script)"},
	 { "UI_Hooks_ready_to_run", _wrap_UI_Hooks_ready_to_run, METH_O, "UI_Hooks_ready_to_run(self)"},
	 { "UI_Hooks_preprocess_action", _wrap_UI_Hooks_preprocess_action, METH_VARARGS, "UI_Hooks_preprocess_action(self, name)"},
	 { "UI_Hooks_postprocess_action", _wrap_UI_Hooks_postprocess_action, METH_O, "UI_Hooks_postprocess_action(self)"},
	 { "UI_Hooks_get_chooser_item_attrs", _wrap_UI_Hooks_get_chooser_item_attrs, METH_VARARGS, "UI_Hooks_get_chooser_item_attrs(self, chooser, n, attrs)"},
	 { "UI_Hooks_updating_actions", _wrap_UI_Hooks_updating_actions, METH_VARARGS, "UI_Hooks_updating_actions(self, ctx)"},
	 { "UI_Hooks_updated_actions", _wrap_UI_Hooks_updated_actions, METH_O, "UI_Hooks_updated_actions(self)"},
	 { "UI_Hooks_populating_widget_popup", _wrap_UI_Hooks_populating_widget_popup, METH_VARARGS, "UI_Hooks_populating_widget_popup(self, widget, popup_handle, ctx=None)"},
	 { "UI_Hooks_finish_populating_widget_popup", _wrap_UI_Hooks_finish_populating_widget_popup, METH_VARARGS, "UI_Hooks_finish_populating_widget_popup(self, widget, popup_handle, ctx=None)"},
	 { "UI_Hooks_plugin_loaded", _wrap_UI_Hooks_plugin_loaded, METH_VARARGS, "UI_Hooks_plugin_loaded(self, plugin_info)"},
	 { "UI_Hooks_plugin_unloading", _wrap_UI_Hooks_plugin_unloading, METH_VARARGS, "UI_Hooks_plugin_unloading(self, plugin_info)"},
	 { "UI_Hooks_current_widget_changed", _wrap_UI_Hooks_current_widget_changed, METH_VARARGS, "UI_Hooks_current_widget_changed(self, widget, prev_widget)"},
	 { "UI_Hooks_screen_ea_changed", _wrap_UI_Hooks_screen_ea_changed, METH_VARARGS, "UI_Hooks_screen_ea_changed(self, ea, prev_ea)"},
	 { "UI_Hooks_create_desktop_widget", _wrap_UI_Hooks_create_desktop_widget, METH_VARARGS, "UI_Hooks_create_desktop_widget(self, title, cfg) -> PyObject *"},
	 { "new_UI_Hooks", _wrap_new_UI_Hooks, METH_O, "new_UI_Hooks(_self) -> UI_Hooks"},
	 { "disown_UI_Hooks", _wrap_disown_UI_Hooks, METH_O, NULL},
	 { "UI_Hooks_swigregister", UI_Hooks_swigregister, METH_O, NULL},
	 { "UI_Hooks_swiginit", UI_Hooks_swiginit, METH_VARARGS, NULL},
	 { "register_action", _wrap_register_action, METH_O, "register_action(desc) -> bool"},
	 { "get_registered_actions", _wrap_get_registered_actions, METH_NOARGS, "get_registered_actions() -> PyObject *"},
	 { "attach_dynamic_action_to_popup", _wrap_attach_dynamic_action_to_popup, METH_VARARGS, "attach_dynamic_action_to_popup(widget, popup_handle, desc, popuppath=None, flags=0) -> bool"},
	 { "delete_disasm_line_t", _wrap_delete_disasm_line_t, METH_O, "delete_disasm_line_t(self)"},
	 { "new_disasm_line_t", _wrap_new_disasm_line_t, METH_VARARGS, "\n"
		"disasm_line_t()\n"
		"new_disasm_line_t(other) -> disasm_line_t\n"
		""},
	 { "disasm_line_t_at_set", _wrap_disasm_line_t_at_set, METH_VARARGS, "disasm_line_t_at_set(self, at)"},
	 { "disasm_line_t_at_get", _wrap_disasm_line_t_at_get, METH_O, "disasm_line_t_at_get(self) -> place_t"},
	 { "disasm_line_t_line_set", _wrap_disasm_line_t_line_set, METH_VARARGS, "disasm_line_t_line_set(self, line)"},
	 { "disasm_line_t_line_get", _wrap_disasm_line_t_line_get, METH_O, "disasm_line_t_line_get(self) -> qstring *"},
	 { "disasm_line_t_prefix_color_set", _wrap_disasm_line_t_prefix_color_set, METH_VARARGS, "disasm_line_t_prefix_color_set(self, prefix_color)"},
	 { "disasm_line_t_prefix_color_get", _wrap_disasm_line_t_prefix_color_get, METH_O, "disasm_line_t_prefix_color_get(self) -> color_t"},
	 { "disasm_line_t_bg_color_set", _wrap_disasm_line_t_bg_color_set, METH_VARARGS, "disasm_line_t_bg_color_set(self, bg_color)"},
	 { "disasm_line_t_bg_color_get", _wrap_disasm_line_t_bg_color_get, METH_O, "disasm_line_t_bg_color_get(self) -> bgcolor_t"},
	 { "disasm_line_t_is_default_set", _wrap_disasm_line_t_is_default_set, METH_VARARGS, "disasm_line_t_is_default_set(self, is_default)"},
	 { "disasm_line_t_is_default_get", _wrap_disasm_line_t_is_default_get, METH_O, "disasm_line_t_is_default_get(self) -> bool"},
	 { "disasm_line_t_swigregister", disasm_line_t_swigregister, METH_O, NULL},
	 { "disasm_line_t_swiginit", disasm_line_t_swiginit, METH_VARARGS, NULL},
	 { "gen_disasm_text", _wrap_gen_disasm_text, METH_VARARGS, "gen_disasm_text(text, ea1, ea2, truncate_lines)"},
	 { "set_nav_colorizer", _wrap_set_nav_colorizer, METH_O, "set_nav_colorizer(new_py_colorizer) -> nav_colorizer_t *"},
	 { "call_nav_colorizer", _wrap_call_nav_colorizer, METH_VARARGS, "call_nav_colorizer(col, ea, nbytes) -> uint32"},
	 { "msg_get_lines", _wrap_msg_get_lines, METH_VARARGS, "msg_get_lines(count=-1) -> PyObject *"},
	 { "TWidget__from_ptrval__", _wrap_TWidget__from_ptrval__, METH_O, "TWidget__from_ptrval__(ptrval) -> TWidget *"},
	 { "get_kernel_version", _wrap_get_kernel_version, METH_NOARGS, "get_kernel_version() -> ssize_t"},
	 { "place_t_lnnum_set", _wrap_place_t_lnnum_set, METH_VARARGS, "place_t_lnnum_set(self, lnnum)"},
	 { "place_t_lnnum_get", _wrap_place_t_lnnum_get, METH_O, "place_t_lnnum_get(self) -> int"},
	 { "place_t__print", _wrap_place_t__print, METH_VARARGS, "place_t__print(self, out_buf, ud)"},
	 { "place_t_touval", _wrap_place_t_touval, METH_VARARGS, "place_t_touval(self, ud) -> uval_t"},
	 { "place_t_clone", _wrap_place_t_clone, METH_O, "place_t_clone(self) -> place_t"},
	 { "place_t_copyfrom", _wrap_place_t_copyfrom, METH_VARARGS, "place_t_copyfrom(self, _from)"},
	 { "place_t_makeplace", _wrap_place_t_makeplace, METH_VARARGS, "place_t_makeplace(self, ud, x, lnnum) -> place_t"},
	 { "place_t_compare", _wrap_place_t_compare, METH_VARARGS, "place_t_compare(self, t2) -> int"},
	 { "place_t_adjust", _wrap_place_t_adjust, METH_VARARGS, "place_t_adjust(self, ud)"},
	 { "place_t_prev", _wrap_place_t_prev, METH_VARARGS, "place_t_prev(self, ud) -> bool"},
	 { "place_t_next", _wrap_place_t_next, METH_VARARGS, "place_t_next(self, ud) -> bool"},
	 { "place_t_beginning", _wrap_place_t_beginning, METH_VARARGS, "place_t_beginning(self, ud) -> bool"},
	 { "place_t_ending", _wrap_place_t_ending, METH_VARARGS, "place_t_ending(self, ud) -> bool"},
	 { "place_t_id", _wrap_place_t_id, METH_O, "place_t_id(self) -> int"},
	 { "place_t_name", _wrap_place_t_name, METH_O, "place_t_name(self) -> char const *"},
	 { "place_t_toea", _wrap_place_t_toea, METH_O, "place_t_toea(self) -> ea_t"},
	 { "place_t_rebase", _wrap_place_t_rebase, METH_VARARGS, "place_t_rebase(self, arg2) -> bool"},
	 { "place_t_enter", _wrap_place_t_enter, METH_VARARGS, "place_t_enter(self, arg2) -> place_t"},
	 { "place_t_leave", _wrap_place_t_leave, METH_VARARGS, "place_t_leave(self, arg2)"},
	 { "place_t_as_idaplace_t", _wrap_place_t_as_idaplace_t, METH_O, "place_t_as_idaplace_t(p) -> idaplace_t"},
	 { "place_t_as_enumplace_t", _wrap_place_t_as_enumplace_t, METH_O, "place_t_as_enumplace_t(p) -> enumplace_t"},
	 { "place_t_as_structplace_t", _wrap_place_t_as_structplace_t, METH_O, "place_t_as_structplace_t(p) -> structplace_t"},
	 { "place_t_as_simpleline_place_t", _wrap_place_t_as_simpleline_place_t, METH_O, "place_t_as_simpleline_place_t(p) -> simpleline_place_t"},
	 { "place_t_generate", _wrap_place_t_generate, METH_VARARGS, "place_t_generate(self, ud, maxsize) -> PyObject *"},
	 { "delete_place_t", _wrap_delete_place_t, METH_O, "delete_place_t(self)"},
	 { "place_t_swigregister", place_t_swigregister, METH_O, NULL},
	 { "simpleline_t_line_set", _wrap_simpleline_t_line_set, METH_VARARGS, "simpleline_t_line_set(self, line)"},
	 { "simpleline_t_line_get", _wrap_simpleline_t_line_get, METH_O, "simpleline_t_line_get(self) -> qstring *"},
	 { "simpleline_t_color_set", _wrap_simpleline_t_color_set, METH_VARARGS, "simpleline_t_color_set(self, color)"},
	 { "simpleline_t_color_get", _wrap_simpleline_t_color_get, METH_O, "simpleline_t_color_get(self) -> color_t"},
	 { "simpleline_t_bgcolor_set", _wrap_simpleline_t_bgcolor_set, METH_VARARGS, "simpleline_t_bgcolor_set(self, bgcolor)"},
	 { "simpleline_t_bgcolor_get", _wrap_simpleline_t_bgcolor_get, METH_O, "simpleline_t_bgcolor_get(self) -> bgcolor_t"},
	 { "new_simpleline_t", _wrap_new_simpleline_t, METH_VARARGS, "\n"
		"simpleline_t()\n"
		"simpleline_t(c, str)\n"
		"simpleline_t(str)\n"
		"new_simpleline_t(str) -> simpleline_t\n"
		""},
	 { "delete_simpleline_t", _wrap_delete_simpleline_t, METH_O, "delete_simpleline_t(self)"},
	 { "simpleline_t_swigregister", simpleline_t_swigregister, METH_O, NULL},
	 { "simpleline_t_swiginit", simpleline_t_swiginit, METH_VARARGS, NULL},
	 { "simpleline_place_t_n_set", _wrap_simpleline_place_t_n_set, METH_VARARGS, "simpleline_place_t_n_set(self, n)"},
	 { "simpleline_place_t_n_get", _wrap_simpleline_place_t_n_get, METH_O, "simpleline_place_t_n_get(self) -> uint32"},
	 { "delete_simpleline_place_t", _wrap_delete_simpleline_place_t, METH_O, "delete_simpleline_place_t(self)"},
	 { "simpleline_place_t_swigregister", simpleline_place_t_swigregister, METH_O, NULL},
	 { "idaplace_t_ea_set", _wrap_idaplace_t_ea_set, METH_VARARGS, "idaplace_t_ea_set(self, ea)"},
	 { "idaplace_t_ea_get", _wrap_idaplace_t_ea_get, METH_O, "idaplace_t_ea_get(self) -> ea_t"},
	 { "delete_idaplace_t", _wrap_delete_idaplace_t, METH_O, "delete_idaplace_t(self)"},
	 { "idaplace_t_swigregister", idaplace_t_swigregister, METH_O, NULL},
	 { "enumplace_t_idx_set", _wrap_enumplace_t_idx_set, METH_VARARGS, "enumplace_t_idx_set(self, idx)"},
	 { "enumplace_t_idx_get", _wrap_enumplace_t_idx_get, METH_O, "enumplace_t_idx_get(self) -> size_t"},
	 { "enumplace_t_bmask_set", _wrap_enumplace_t_bmask_set, METH_VARARGS, "enumplace_t_bmask_set(self, bmask)"},
	 { "enumplace_t_bmask_get", _wrap_enumplace_t_bmask_get, METH_O, "enumplace_t_bmask_get(self) -> bmask_t"},
	 { "enumplace_t_value_set", _wrap_enumplace_t_value_set, METH_VARARGS, "enumplace_t_value_set(self, value)"},
	 { "enumplace_t_value_get", _wrap_enumplace_t_value_get, METH_O, "enumplace_t_value_get(self) -> uval_t"},
	 { "enumplace_t_serial_set", _wrap_enumplace_t_serial_set, METH_VARARGS, "enumplace_t_serial_set(self, serial)"},
	 { "enumplace_t_serial_get", _wrap_enumplace_t_serial_get, METH_O, "enumplace_t_serial_get(self) -> uchar"},
	 { "delete_enumplace_t", _wrap_delete_enumplace_t, METH_O, "delete_enumplace_t(self)"},
	 { "enumplace_t_swigregister", enumplace_t_swigregister, METH_O, NULL},
	 { "structplace_t_idx_set", _wrap_structplace_t_idx_set, METH_VARARGS, "structplace_t_idx_set(self, idx)"},
	 { "structplace_t_idx_get", _wrap_structplace_t_idx_get, METH_O, "structplace_t_idx_get(self) -> uval_t"},
	 { "structplace_t_offset_set", _wrap_structplace_t_offset_set, METH_VARARGS, "structplace_t_offset_set(self, offset)"},
	 { "structplace_t_offset_get", _wrap_structplace_t_offset_get, METH_O, "structplace_t_offset_get(self) -> uval_t"},
	 { "delete_structplace_t", _wrap_delete_structplace_t, METH_O, "delete_structplace_t(self)"},
	 { "structplace_t_swigregister", structplace_t_swigregister, METH_O, NULL},
	 { "internal_register_place_class", _wrap_internal_register_place_class, METH_VARARGS, "internal_register_place_class(tmplate, flags, owner, sdk_version) -> int"},
	 { "get_place_class", _wrap_get_place_class, METH_VARARGS, "get_place_class(out_flags, out_sdk_version, id) -> place_t"},
	 { "get_place_class_template", _wrap_get_place_class_template, METH_O, "get_place_class_template(id) -> place_t"},
	 { "is_place_class_ea_capable", _wrap_is_place_class_ea_capable, METH_O, "is_place_class_ea_capable(id) -> bool"},
	 { "get_place_class_id", _wrap_get_place_class_id, METH_O, "get_place_class_id(name) -> int"},
	 { "twinpos_t_at_set", _wrap_twinpos_t_at_set, METH_VARARGS, "twinpos_t_at_set(self, at)"},
	 { "twinpos_t_at_get", _wrap_twinpos_t_at_get, METH_O, "twinpos_t_at_get(self) -> place_t"},
	 { "twinpos_t_x_set", _wrap_twinpos_t_x_set, METH_VARARGS, "twinpos_t_x_set(self, x)"},
	 { "twinpos_t_x_get", _wrap_twinpos_t_x_get, METH_O, "twinpos_t_x_get(self) -> int"},
	 { "new_twinpos_t", _wrap_new_twinpos_t, METH_VARARGS, "\n"
		"twinpos_t()\n"
		"twinpos_t(t)\n"
		"new_twinpos_t(t, x0) -> twinpos_t\n"
		""},
	 { "twinpos_t___ne__", _wrap_twinpos_t___ne__, METH_VARARGS, "twinpos_t___ne__(self, r) -> bool"},
	 { "twinpos_t___eq__", _wrap_twinpos_t___eq__, METH_VARARGS, "twinpos_t___eq__(self, r) -> bool"},
	 { "delete_twinpos_t", _wrap_delete_twinpos_t, METH_O, "delete_twinpos_t(self)"},
	 { "twinpos_t_swigregister", twinpos_t_swigregister, METH_O, NULL},
	 { "twinpos_t_swiginit", twinpos_t_swiginit, METH_VARARGS, NULL},
	 { "request_refresh", _wrap_request_refresh, METH_VARARGS, "request_refresh(mask, cnd=True)"},
	 { "clear_refresh_request", _wrap_clear_refresh_request, METH_O, "clear_refresh_request(mask)"},
	 { "is_refresh_requested", _wrap_is_refresh_requested, METH_O, "is_refresh_requested(mask) -> bool"},
	 { "is_chooser_widget", _wrap_is_chooser_widget, METH_O, "is_chooser_widget(t) -> bool"},
	 { "chooser_item_attrs_t_flags_set", _wrap_chooser_item_attrs_t_flags_set, METH_VARARGS, "chooser_item_attrs_t_flags_set(self, flags)"},
	 { "chooser_item_attrs_t_flags_get", _wrap_chooser_item_attrs_t_flags_get, METH_O, "chooser_item_attrs_t_flags_get(self) -> int"},
	 { "chooser_item_attrs_t_color_set", _wrap_chooser_item_attrs_t_color_set, METH_VARARGS, "chooser_item_attrs_t_color_set(self, color)"},
	 { "chooser_item_attrs_t_color_get", _wrap_chooser_item_attrs_t_color_get, METH_O, "chooser_item_attrs_t_color_get(self) -> bgcolor_t"},
	 { "new_chooser_item_attrs_t", _wrap_new_chooser_item_attrs_t, METH_NOARGS, "new_chooser_item_attrs_t() -> chooser_item_attrs_t"},
	 { "chooser_item_attrs_t_reset", _wrap_chooser_item_attrs_t_reset, METH_O, "chooser_item_attrs_t_reset(self)"},
	 { "delete_chooser_item_attrs_t", _wrap_delete_chooser_item_attrs_t, METH_O, "delete_chooser_item_attrs_t(self)"},
	 { "chooser_item_attrs_t_swigregister", chooser_item_attrs_t_swigregister, METH_O, NULL},
	 { "chooser_item_attrs_t_swiginit", chooser_item_attrs_t_swiginit, METH_VARARGS, NULL},
	 { "new_renderer_pos_info_t", _wrap_new_renderer_pos_info_t, METH_NOARGS, "new_renderer_pos_info_t() -> renderer_pos_info_t"},
	 { "renderer_pos_info_t_node_set", _wrap_renderer_pos_info_t_node_set, METH_VARARGS, "renderer_pos_info_t_node_set(self, node)"},
	 { "renderer_pos_info_t_node_get", _wrap_renderer_pos_info_t_node_get, METH_O, "renderer_pos_info_t_node_get(self) -> int"},
	 { "renderer_pos_info_t_cx_set", _wrap_renderer_pos_info_t_cx_set, METH_VARARGS, "renderer_pos_info_t_cx_set(self, cx)"},
	 { "renderer_pos_info_t_cx_get", _wrap_renderer_pos_info_t_cx_get, METH_O, "renderer_pos_info_t_cx_get(self) -> short"},
	 { "renderer_pos_info_t_cy_set", _wrap_renderer_pos_info_t_cy_set, METH_VARARGS, "renderer_pos_info_t_cy_set(self, cy)"},
	 { "renderer_pos_info_t_cy_get", _wrap_renderer_pos_info_t_cy_get, METH_O, "renderer_pos_info_t_cy_get(self) -> short"},
	 { "renderer_pos_info_t_sx_set", _wrap_renderer_pos_info_t_sx_set, METH_VARARGS, "renderer_pos_info_t_sx_set(self, sx)"},
	 { "renderer_pos_info_t_sx_get", _wrap_renderer_pos_info_t_sx_get, METH_O, "renderer_pos_info_t_sx_get(self) -> short"},
	 { "renderer_pos_info_t___eq__", _wrap_renderer_pos_info_t___eq__, METH_VARARGS, "renderer_pos_info_t___eq__(self, r) -> bool"},
	 { "renderer_pos_info_t___ne__", _wrap_renderer_pos_info_t___ne__, METH_VARARGS, "renderer_pos_info_t___ne__(self, r) -> bool"},
	 { "delete_renderer_pos_info_t", _wrap_delete_renderer_pos_info_t, METH_O, "delete_renderer_pos_info_t(self)"},
	 { "renderer_pos_info_t_swigregister", renderer_pos_info_t_swigregister, METH_O, NULL},
	 { "renderer_pos_info_t_swiginit", renderer_pos_info_t_swiginit, METH_VARARGS, NULL},
	 { "view_mouse_event_location_t_ea_set", _wrap_view_mouse_event_location_t_ea_set, METH_VARARGS, "view_mouse_event_location_t_ea_set(self, ea)"},
	 { "view_mouse_event_location_t_ea_get", _wrap_view_mouse_event_location_t_ea_get, METH_O, "view_mouse_event_location_t_ea_get(self) -> ea_t"},
	 { "view_mouse_event_location_t_item_set", _wrap_view_mouse_event_location_t_item_set, METH_VARARGS, "view_mouse_event_location_t_item_set(self, item)"},
	 { "view_mouse_event_location_t_item_get", _wrap_view_mouse_event_location_t_item_get, METH_O, "view_mouse_event_location_t_item_get(self) -> selection_item_t const *"},
	 { "new_view_mouse_event_location_t", _wrap_new_view_mouse_event_location_t, METH_NOARGS, "new_view_mouse_event_location_t() -> view_mouse_event_location_t"},
	 { "delete_view_mouse_event_location_t", _wrap_delete_view_mouse_event_location_t, METH_O, "delete_view_mouse_event_location_t(self)"},
	 { "view_mouse_event_location_t_swigregister", view_mouse_event_location_t_swigregister, METH_O, NULL},
	 { "view_mouse_event_location_t_swiginit", view_mouse_event_location_t_swiginit, METH_VARARGS, NULL},
	 { "view_mouse_event_t_rtype_set", _wrap_view_mouse_event_t_rtype_set, METH_VARARGS, "view_mouse_event_t_rtype_set(self, rtype)"},
	 { "view_mouse_event_t_rtype_get", _wrap_view_mouse_event_t_rtype_get, METH_O, "view_mouse_event_t_rtype_get(self) -> tcc_renderer_type_t"},
	 { "view_mouse_event_t_x_set", _wrap_view_mouse_event_t_x_set, METH_VARARGS, "view_mouse_event_t_x_set(self, x)"},
	 { "view_mouse_event_t_x_get", _wrap_view_mouse_event_t_x_get, METH_O, "view_mouse_event_t_x_get(self) -> uint32"},
	 { "view_mouse_event_t_y_set", _wrap_view_mouse_event_t_y_set, METH_VARARGS, "view_mouse_event_t_y_set(self, y)"},
	 { "view_mouse_event_t_y_get", _wrap_view_mouse_event_t_y_get, METH_O, "view_mouse_event_t_y_get(self) -> uint32"},
	 { "view_mouse_event_t_location_set", _wrap_view_mouse_event_t_location_set, METH_VARARGS, "view_mouse_event_t_location_set(self, location)"},
	 { "view_mouse_event_t_location_get", _wrap_view_mouse_event_t_location_get, METH_O, "view_mouse_event_t_location_get(self) -> view_mouse_event_location_t"},
	 { "view_mouse_event_t_state_set", _wrap_view_mouse_event_t_state_set, METH_VARARGS, "view_mouse_event_t_state_set(self, state)"},
	 { "view_mouse_event_t_state_get", _wrap_view_mouse_event_t_state_get, METH_O, "view_mouse_event_t_state_get(self) -> view_event_state_t"},
	 { "view_mouse_event_t_button_set", _wrap_view_mouse_event_t_button_set, METH_VARARGS, "view_mouse_event_t_button_set(self, button)"},
	 { "view_mouse_event_t_button_get", _wrap_view_mouse_event_t_button_get, METH_O, "view_mouse_event_t_button_get(self) -> vme_button_t"},
	 { "view_mouse_event_t_renderer_pos_set", _wrap_view_mouse_event_t_renderer_pos_set, METH_VARARGS, "view_mouse_event_t_renderer_pos_set(self, renderer_pos)"},
	 { "view_mouse_event_t_renderer_pos_get", _wrap_view_mouse_event_t_renderer_pos_get, METH_O, "view_mouse_event_t_renderer_pos_get(self) -> renderer_pos_info_t"},
	 { "new_view_mouse_event_t", _wrap_new_view_mouse_event_t, METH_NOARGS, "new_view_mouse_event_t() -> view_mouse_event_t"},
	 { "delete_view_mouse_event_t", _wrap_delete_view_mouse_event_t, METH_O, "delete_view_mouse_event_t(self)"},
	 { "view_mouse_event_t_swigregister", view_mouse_event_t_swigregister, METH_O, NULL},
	 { "view_mouse_event_t_swiginit", view_mouse_event_t_swiginit, METH_VARARGS, NULL},
	 { "new_locchange_md_t", _wrap_new_locchange_md_t, METH_VARARGS, "new_locchange_md_t(_reason, _sync) -> locchange_md_t"},
	 { "locchange_md_t_reason", _wrap_locchange_md_t_reason, METH_O, "locchange_md_t_reason(self) -> locchange_reason_t"},
	 { "locchange_md_t_is_sync", _wrap_locchange_md_t_is_sync, METH_O, "locchange_md_t_is_sync(self) -> bool"},
	 { "delete_locchange_md_t", _wrap_delete_locchange_md_t, METH_O, "delete_locchange_md_t(self)"},
	 { "locchange_md_t_swigregister", locchange_md_t_swigregister, METH_O, NULL},
	 { "locchange_md_t_swiginit", locchange_md_t_swiginit, METH_VARARGS, NULL},
	 { "new_ui_requests_t", _wrap_new_ui_requests_t, METH_NOARGS, "new_ui_requests_t() -> ui_requests_t"},
	 { "delete_ui_requests_t", _wrap_delete_ui_requests_t, METH_O, "delete_ui_requests_t(self)"},
	 { "ui_requests_t_swigregister", ui_requests_t_swigregister, METH_O, NULL},
	 { "ui_requests_t_swiginit", ui_requests_t_swiginit, METH_VARARGS, NULL},
	 { "new_action_ctx_base_t", _wrap_new_action_ctx_base_t, METH_NOARGS, "new_action_ctx_base_t() -> action_ctx_base_t"},
	 { "action_ctx_base_t_reset", _wrap_action_ctx_base_t_reset, METH_O, "action_ctx_base_t_reset(self)"},
	 { "action_ctx_base_t_widget_set", _wrap_action_ctx_base_t_widget_set, METH_VARARGS, "action_ctx_base_t_widget_set(self, widget)"},
	 { "action_ctx_base_t_widget_get", _wrap_action_ctx_base_t_widget_get, METH_O, "action_ctx_base_t_widget_get(self) -> TWidget *"},
	 { "action_ctx_base_t_widget_type_set", _wrap_action_ctx_base_t_widget_type_set, METH_VARARGS, "action_ctx_base_t_widget_type_set(self, widget_type)"},
	 { "action_ctx_base_t_widget_type_get", _wrap_action_ctx_base_t_widget_type_get, METH_O, "action_ctx_base_t_widget_type_get(self) -> twidget_type_t"},
	 { "action_ctx_base_t_widget_title_set", _wrap_action_ctx_base_t_widget_title_set, METH_VARARGS, "action_ctx_base_t_widget_title_set(self, widget_title)"},
	 { "action_ctx_base_t_widget_title_get", _wrap_action_ctx_base_t_widget_title_get, METH_O, "action_ctx_base_t_widget_title_get(self) -> qstring *"},
	 { "action_ctx_base_t_chooser_selection_set", _wrap_action_ctx_base_t_chooser_selection_set, METH_VARARGS, "action_ctx_base_t_chooser_selection_set(self, chooser_selection)"},
	 { "action_ctx_base_t_chooser_selection_get", _wrap_action_ctx_base_t_chooser_selection_get, METH_O, "action_ctx_base_t_chooser_selection_get(self) -> sizevec_t *"},
	 { "action_ctx_base_t_action_set", _wrap_action_ctx_base_t_action_set, METH_VARARGS, "action_ctx_base_t_action_set(self, action)"},
	 { "action_ctx_base_t_action_get", _wrap_action_ctx_base_t_action_get, METH_O, "action_ctx_base_t_action_get(self) -> char const *"},
	 { "action_ctx_base_t_cur_flags_set", _wrap_action_ctx_base_t_cur_flags_set, METH_VARARGS, "action_ctx_base_t_cur_flags_set(self, cur_flags)"},
	 { "action_ctx_base_t_cur_flags_get", _wrap_action_ctx_base_t_cur_flags_get, METH_O, "action_ctx_base_t_cur_flags_get(self) -> uint32"},
	 { "action_ctx_base_t_has_flag", _wrap_action_ctx_base_t_has_flag, METH_VARARGS, "action_ctx_base_t_has_flag(self, flag) -> bool"},
	 { "action_ctx_base_t_cur_ea_set", _wrap_action_ctx_base_t_cur_ea_set, METH_VARARGS, "action_ctx_base_t_cur_ea_set(self, cur_ea)"},
	 { "action_ctx_base_t_cur_ea_get", _wrap_action_ctx_base_t_cur_ea_get, METH_O, "action_ctx_base_t_cur_ea_get(self) -> ea_t"},
	 { "action_ctx_base_t_cur_extracted_ea_set", _wrap_action_ctx_base_t_cur_extracted_ea_set, METH_VARARGS, "action_ctx_base_t_cur_extracted_ea_set(self, cur_extracted_ea)"},
	 { "action_ctx_base_t_cur_extracted_ea_get", _wrap_action_ctx_base_t_cur_extracted_ea_get, METH_O, "action_ctx_base_t_cur_extracted_ea_get(self) -> ea_t"},
	 { "action_ctx_base_t_cur_func_set", _wrap_action_ctx_base_t_cur_func_set, METH_VARARGS, "action_ctx_base_t_cur_func_set(self, cur_func)"},
	 { "action_ctx_base_t_cur_func_get", _wrap_action_ctx_base_t_cur_func_get, METH_O, "action_ctx_base_t_cur_func_get(self) -> func_t *"},
	 { "action_ctx_base_t_cur_fchunk_set", _wrap_action_ctx_base_t_cur_fchunk_set, METH_VARARGS, "action_ctx_base_t_cur_fchunk_set(self, cur_fchunk)"},
	 { "action_ctx_base_t_cur_fchunk_get", _wrap_action_ctx_base_t_cur_fchunk_get, METH_O, "action_ctx_base_t_cur_fchunk_get(self) -> func_t *"},
	 { "action_ctx_base_t_cur_struc_set", _wrap_action_ctx_base_t_cur_struc_set, METH_VARARGS, "action_ctx_base_t_cur_struc_set(self, cur_struc)"},
	 { "action_ctx_base_t_cur_struc_get", _wrap_action_ctx_base_t_cur_struc_get, METH_O, "action_ctx_base_t_cur_struc_get(self) -> struc_t *"},
	 { "action_ctx_base_t_cur_strmem_set", _wrap_action_ctx_base_t_cur_strmem_set, METH_VARARGS, "action_ctx_base_t_cur_strmem_set(self, cur_strmem)"},
	 { "action_ctx_base_t_cur_strmem_get", _wrap_action_ctx_base_t_cur_strmem_get, METH_O, "action_ctx_base_t_cur_strmem_get(self) -> member_t *"},
	 { "action_ctx_base_t_cur_enum_set", _wrap_action_ctx_base_t_cur_enum_set, METH_VARARGS, "action_ctx_base_t_cur_enum_set(self, cur_enum)"},
	 { "action_ctx_base_t_cur_enum_get", _wrap_action_ctx_base_t_cur_enum_get, METH_O, "action_ctx_base_t_cur_enum_get(self) -> enum_t"},
	 { "action_ctx_base_t_cur_seg_set", _wrap_action_ctx_base_t_cur_seg_set, METH_VARARGS, "action_ctx_base_t_cur_seg_set(self, cur_seg)"},
	 { "action_ctx_base_t_cur_seg_get", _wrap_action_ctx_base_t_cur_seg_get, METH_O, "action_ctx_base_t_cur_seg_get(self) -> segment_t *"},
	 { "action_ctx_base_t_regname_set", _wrap_action_ctx_base_t_regname_set, METH_VARARGS, "action_ctx_base_t_regname_set(self, regname)"},
	 { "action_ctx_base_t_regname_get", _wrap_action_ctx_base_t_regname_get, METH_O, "action_ctx_base_t_regname_get(self) -> char const *"},
	 { "action_ctx_base_t_focus_set", _wrap_action_ctx_base_t_focus_set, METH_VARARGS, "action_ctx_base_t_focus_set(self, focus)"},
	 { "action_ctx_base_t_focus_get", _wrap_action_ctx_base_t_focus_get, METH_O, "action_ctx_base_t_focus_get(self) -> TWidget *"},
	 { "action_ctx_base_t_reserved_set", _wrap_action_ctx_base_t_reserved_set, METH_VARARGS, "action_ctx_base_t_reserved_set(self, reserved)"},
	 { "action_ctx_base_t_reserved_get", _wrap_action_ctx_base_t_reserved_get, METH_O, "action_ctx_base_t_reserved_get(self) -> void *"},
	 { "action_ctx_base_t__get_form", _wrap_action_ctx_base_t__get_form, METH_O, "action_ctx_base_t__get_form(self) -> TWidget *"},
	 { "action_ctx_base_t__get_form_type", _wrap_action_ctx_base_t__get_form_type, METH_O, "action_ctx_base_t__get_form_type(self) -> twidget_type_t"},
	 { "action_ctx_base_t__get_form_title", _wrap_action_ctx_base_t__get_form_title, METH_O, "action_ctx_base_t__get_form_title(self) -> qstring"},
	 { "delete_action_ctx_base_t", _wrap_delete_action_ctx_base_t, METH_O, "delete_action_ctx_base_t(self)"},
	 { "action_ctx_base_t_swigregister", action_ctx_base_t_swigregister, METH_O, NULL},
	 { "action_ctx_base_t_swiginit", action_ctx_base_t_swiginit, METH_VARARGS, NULL},
	 { "is_action_enabled", _wrap_is_action_enabled, METH_O, "is_action_enabled(s) -> bool"},
	 { "action_desc_t_cb_set", _wrap_action_desc_t_cb_set, METH_VARARGS, "action_desc_t_cb_set(self, cb)"},
	 { "action_desc_t_cb_get", _wrap_action_desc_t_cb_get, METH_O, "action_desc_t_cb_get(self) -> int"},
	 { "action_desc_t_name_set", _wrap_action_desc_t_name_set, METH_VARARGS, "action_desc_t_name_set(self, name)"},
	 { "action_desc_t_name_get", _wrap_action_desc_t_name_get, METH_O, "action_desc_t_name_get(self) -> char const *"},
	 { "action_desc_t_label_set", _wrap_action_desc_t_label_set, METH_VARARGS, "action_desc_t_label_set(self, label)"},
	 { "action_desc_t_label_get", _wrap_action_desc_t_label_get, METH_O, "action_desc_t_label_get(self) -> char const *"},
	 { "action_desc_t_owner_set", _wrap_action_desc_t_owner_set, METH_VARARGS, "action_desc_t_owner_set(self, owner)"},
	 { "action_desc_t_owner_get", _wrap_action_desc_t_owner_get, METH_O, "action_desc_t_owner_get(self) -> plugin_t const *"},
	 { "action_desc_t_shortcut_set", _wrap_action_desc_t_shortcut_set, METH_VARARGS, "action_desc_t_shortcut_set(self, shortcut)"},
	 { "action_desc_t_shortcut_get", _wrap_action_desc_t_shortcut_get, METH_O, "action_desc_t_shortcut_get(self) -> char const *"},
	 { "action_desc_t_tooltip_set", _wrap_action_desc_t_tooltip_set, METH_VARARGS, "action_desc_t_tooltip_set(self, tooltip)"},
	 { "action_desc_t_tooltip_get", _wrap_action_desc_t_tooltip_get, METH_O, "action_desc_t_tooltip_get(self) -> char const *"},
	 { "action_desc_t_icon_set", _wrap_action_desc_t_icon_set, METH_VARARGS, "action_desc_t_icon_set(self, icon)"},
	 { "action_desc_t_icon_get", _wrap_action_desc_t_icon_get, METH_O, "action_desc_t_icon_get(self) -> int"},
	 { "action_desc_t_flags_set", _wrap_action_desc_t_flags_set, METH_VARARGS, "action_desc_t_flags_set(self, flags)"},
	 { "action_desc_t_flags_get", _wrap_action_desc_t_flags_get, METH_O, "action_desc_t_flags_get(self) -> int"},
	 { "new_action_desc_t", _wrap_new_action_desc_t, METH_VARARGS, "new_action_desc_t(name, label, handler, shortcut=None, tooltip=None, icon=-1, flags=0) -> action_desc_t"},
	 { "delete_action_desc_t", _wrap_delete_action_desc_t, METH_O, "delete_action_desc_t(self)"},
	 { "action_desc_t_swigregister", action_desc_t_swigregister, METH_O, NULL},
	 { "action_desc_t_swiginit", action_desc_t_swiginit, METH_VARARGS, NULL},
	 { "cancel_exec_request", _wrap_cancel_exec_request, METH_O, "cancel_exec_request(req_id) -> bool"},
	 { "banner", _wrap_banner, METH_O, "banner(wait) -> bool"},
	 { "is_msg_inited", _wrap_is_msg_inited, METH_NOARGS, "is_msg_inited() -> bool"},
	 { "refresh_idaview", _wrap_refresh_idaview, METH_NOARGS, "refresh_idaview()"},
	 { "refresh_idaview_anyway", _wrap_refresh_idaview_anyway, METH_NOARGS, "refresh_idaview_anyway()"},
	 { "analyzer_options", _wrap_analyzer_options, METH_NOARGS, "analyzer_options()"},
	 { "get_screen_ea", _wrap_get_screen_ea, METH_NOARGS, "get_screen_ea() -> ea_t"},
	 { "get_opnum", _wrap_get_opnum, METH_NOARGS, "get_opnum() -> int"},
	 { "get_cursor", _wrap_get_cursor, METH_NOARGS, "get_cursor() -> bool"},
	 { "get_output_cursor", _wrap_get_output_cursor, METH_NOARGS, "get_output_cursor() -> bool"},
	 { "get_curline", _wrap_get_curline, METH_NOARGS, "get_curline() -> char const *"},
	 { "open_url", _wrap_open_url, METH_O, "open_url(url)"},
	 { "get_hexdump_ea", _wrap_get_hexdump_ea, METH_O, "get_hexdump_ea(hexdump_num) -> ea_t"},
	 { "get_key_code", _wrap_get_key_code, METH_O, "get_key_code(keyname) -> ushort"},
	 { "lookup_key_code", _wrap_lookup_key_code, METH_VARARGS, "lookup_key_code(key, shift, is_qt) -> ushort"},
	 { "refresh_navband", _wrap_refresh_navband, METH_O, "refresh_navband(force)"},
	 { "refresh_chooser", _wrap_refresh_chooser, METH_O, "refresh_chooser(title) -> bool"},
	 { "close_chooser", _wrap_close_chooser, METH_O, "close_chooser(title) -> bool"},
	 { "set_dock_pos", _wrap_set_dock_pos, METH_VARARGS, "set_dock_pos(src_ctrl, dest_ctrl, orient, left=0, top=0, right=0, bottom=0) -> bool"},
	 { "free_custom_icon", _wrap_free_custom_icon, METH_O, "free_custom_icon(icon_id)"},
	 { "new___qtimer_t", _wrap_new___qtimer_t, METH_NOARGS, "new___qtimer_t() -> __qtimer_t"},
	 { "delete___qtimer_t", _wrap_delete___qtimer_t, METH_O, "delete___qtimer_t(self)"},
	 { "__qtimer_t_swigregister", __qtimer_t_swigregister, METH_O, NULL},
	 { "__qtimer_t_swiginit", __qtimer_t_swiginit, METH_VARARGS, NULL},
	 { "unregister_action", _wrap_unregister_action, METH_O, "unregister_action(name) -> bool"},
	 { "create_toolbar", _wrap_create_toolbar, METH_VARARGS, "create_toolbar(name, label, before=None, flags=0) -> bool"},
	 { "delete_toolbar", _wrap_delete_toolbar, METH_O, "delete_toolbar(name) -> bool"},
	 { "create_menu", _wrap_create_menu, METH_VARARGS, "create_menu(name, label, before=None) -> bool"},
	 { "delete_menu", _wrap_delete_menu, METH_O, "delete_menu(name) -> bool"},
	 { "attach_action_to_menu", _wrap_attach_action_to_menu, METH_VARARGS, "attach_action_to_menu(menupath, name, flags) -> bool"},
	 { "detach_action_from_menu", _wrap_detach_action_from_menu, METH_VARARGS, "detach_action_from_menu(menupath, name) -> bool"},
	 { "attach_action_to_toolbar", _wrap_attach_action_to_toolbar, METH_VARARGS, "attach_action_to_toolbar(toolbar_name, name) -> bool"},
	 { "detach_action_from_toolbar", _wrap_detach_action_from_toolbar, METH_VARARGS, "detach_action_from_toolbar(toolbar_name, name) -> bool"},
	 { "register_and_attach_to_menu", _wrap_register_and_attach_to_menu, METH_VARARGS, "register_and_attach_to_menu(menupath, name, label, shortcut, flags, handler, owner) -> bool"},
	 { "display_widget", _wrap_display_widget, METH_VARARGS, "display_widget(widget, options)"},
	 { "close_widget", _wrap_close_widget, METH_VARARGS, "close_widget(widget, options)"},
	 { "activate_widget", _wrap_activate_widget, METH_VARARGS, "activate_widget(widget, take_focus)"},
	 { "find_widget", _wrap_find_widget, METH_O, "find_widget(caption) -> TWidget *"},
	 { "get_current_widget", _wrap_get_current_widget, METH_NOARGS, "get_current_widget() -> TWidget *"},
	 { "get_widget_type", _wrap_get_widget_type, METH_O, "get_widget_type(widget) -> twidget_type_t"},
	 { "get_widget_title", _wrap_get_widget_title, METH_O, "get_widget_title(widget) -> bool"},
	 { "custom_viewer_jump", _wrap_custom_viewer_jump, METH_VARARGS, "custom_viewer_jump(v, loc, flags) -> bool"},
	 { "ea_viewer_history_push_and_jump", _wrap_ea_viewer_history_push_and_jump, METH_VARARGS, "ea_viewer_history_push_and_jump(v, ea, x, y, lnnum) -> bool"},
	 { "get_ea_viewer_history_info", _wrap_get_ea_viewer_history_info, METH_VARARGS, "get_ea_viewer_history_info(nback, nfwd, v) -> bool"},
	 { "repaint_custom_viewer", _wrap_repaint_custom_viewer, METH_O, "repaint_custom_viewer(custom_viewer)"},
	 { "jumpto", _wrap_jumpto, METH_VARARGS, "\n"
		"jumpto(ea, opnum=-1, uijmp_flags=0x0001) -> bool\n"
		"jumpto(custom_viewer, place, x, y) -> bool\n"
		""},
	 { "get_custom_viewer_place", _wrap_get_custom_viewer_place, METH_VARARGS, "get_custom_viewer_place(custom_viewer, mouse) -> place_t"},
	 { "is_idaq", _wrap_is_idaq, METH_NOARGS, "is_idaq() -> bool"},
	 { "attach_action_to_popup", _wrap_attach_action_to_popup, METH_VARARGS, "attach_action_to_popup(widget, popup_handle, name, popuppath=None, flags=0) -> bool"},
	 { "detach_action_from_popup", _wrap_detach_action_from_popup, METH_VARARGS, "detach_action_from_popup(widget, name) -> bool"},
	 { "update_action_label", _wrap_update_action_label, METH_VARARGS, "update_action_label(name, label) -> bool"},
	 { "update_action_shortcut", _wrap_update_action_shortcut, METH_VARARGS, "update_action_shortcut(name, shortcut) -> bool"},
	 { "update_action_tooltip", _wrap_update_action_tooltip, METH_VARARGS, "update_action_tooltip(name, tooltip) -> bool"},
	 { "update_action_icon", _wrap_update_action_icon, METH_VARARGS, "update_action_icon(name, icon) -> bool"},
	 { "update_action_state", _wrap_update_action_state, METH_VARARGS, "update_action_state(name, state) -> bool"},
	 { "update_action_checkable", _wrap_update_action_checkable, METH_VARARGS, "update_action_checkable(name, checkable) -> bool"},
	 { "update_action_checked", _wrap_update_action_checked, METH_VARARGS, "update_action_checked(name, checked) -> bool"},
	 { "update_action_visibility", _wrap_update_action_visibility, METH_VARARGS, "update_action_visibility(name, visible) -> bool"},
	 { "get_action_label", _wrap_get_action_label, METH_O, "get_action_label(name) -> bool"},
	 { "get_action_shortcut", _wrap_get_action_shortcut, METH_O, "get_action_shortcut(name) -> bool"},
	 { "get_action_tooltip", _wrap_get_action_tooltip, METH_O, "get_action_tooltip(name) -> bool"},
	 { "get_action_icon", _wrap_get_action_icon, METH_O, "get_action_icon(name) -> bool"},
	 { "get_action_state", _wrap_get_action_state, METH_O, "get_action_state(name) -> bool"},
	 { "get_action_checkable", _wrap_get_action_checkable, METH_O, "get_action_checkable(name) -> bool"},
	 { "get_action_checked", _wrap_get_action_checked, METH_O, "get_action_checked(name) -> bool"},
	 { "get_action_visibility", _wrap_get_action_visibility, METH_O, "get_action_visibility(name) -> bool"},
	 { "set_custom_viewer_qt_aware", _wrap_set_custom_viewer_qt_aware, METH_O, "set_custom_viewer_qt_aware(custom_viewer) -> bool"},
	 { "get_custom_viewer_curline", _wrap_get_custom_viewer_curline, METH_VARARGS, "get_custom_viewer_curline(custom_viewer, mouse) -> char const *"},
	 { "get_output_curline", _wrap_get_output_curline, METH_O, "get_output_curline(mouse) -> bool"},
	 { "get_output_selected_text", _wrap_get_output_selected_text, METH_NOARGS, "get_output_selected_text() -> bool"},
	 { "get_current_viewer", _wrap_get_current_viewer, METH_NOARGS, "get_current_viewer() -> TWidget *"},
	 { "get_view_renderer_type", _wrap_get_view_renderer_type, METH_O, "get_view_renderer_type(v) -> tcc_renderer_type_t"},
	 { "set_view_renderer_type", _wrap_set_view_renderer_type, METH_VARARGS, "set_view_renderer_type(v, rt)"},
	 { "create_empty_widget", _wrap_create_empty_widget, METH_VARARGS, "create_empty_widget(title, icon=-1) -> TWidget *"},
	 { "msg_clear", _wrap_msg_clear, METH_NOARGS, "msg_clear()"},
	 { "msg_save", _wrap_msg_save, METH_O, "msg_save(path) -> bool"},
	 { "get_active_modal_widget", _wrap_get_active_modal_widget, METH_NOARGS, "get_active_modal_widget() -> TWidget *"},
	 { "get_navband_pixel", _wrap_get_navband_pixel, METH_O, "get_navband_pixel(ea) -> int"},
	 { "get_navband_ea", _wrap_get_navband_ea, METH_O, "get_navband_ea(pixel) -> ea_t"},
	 { "get_window_id", _wrap_get_window_id, METH_VARARGS, "get_window_id(name=None) -> void *"},
	 { "read_selection", _wrap_read_selection, METH_VARARGS, "read_selection(v, p1, p2) -> bool"},
	 { "read_range_selection", _wrap_read_range_selection, METH_O, "read_range_selection(v) -> bool"},
	 { "unmark_selection", _wrap_unmark_selection, METH_NOARGS, "unmark_selection()"},
	 { "create_code_viewer", _wrap_create_code_viewer, METH_VARARGS, "create_code_viewer(custview, flags=0, parent=None) -> TWidget *"},
	 { "set_code_viewer_handler", _wrap_set_code_viewer_handler, METH_VARARGS, "set_code_viewer_handler(code_viewer, handler_id, handler_or_data) -> void *"},
	 { "set_code_viewer_user_data", _wrap_set_code_viewer_user_data, METH_VARARGS, "set_code_viewer_user_data(code_viewer, ud) -> bool"},
	 { "get_viewer_user_data", _wrap_get_viewer_user_data, METH_O, "get_viewer_user_data(viewer) -> void *"},
	 { "get_viewer_place_type", _wrap_get_viewer_place_type, METH_O, "get_viewer_place_type(viewer) -> tcc_place_type_t"},
	 { "set_code_viewer_line_handlers", _wrap_set_code_viewer_line_handlers, METH_VARARGS, "set_code_viewer_line_handlers(code_viewer, click_handler, popup_handler, dblclick_handler, drawicon_handler, linenum_handler)"},
	 { "set_code_viewer_lines_icon_margin", _wrap_set_code_viewer_lines_icon_margin, METH_VARARGS, "set_code_viewer_lines_icon_margin(code_viewer, margin) -> bool"},
	 { "set_code_viewer_lines_alignment", _wrap_set_code_viewer_lines_alignment, METH_VARARGS, "set_code_viewer_lines_alignment(code_viewer, align) -> bool"},
	 { "set_code_viewer_lines_radix", _wrap_set_code_viewer_lines_radix, METH_VARARGS, "set_code_viewer_lines_radix(code_viewer, radix) -> bool"},
	 { "set_code_viewer_is_source", _wrap_set_code_viewer_is_source, METH_O, "set_code_viewer_is_source(code_viewer) -> bool"},
	 { "get_tab_size", _wrap_get_tab_size, METH_O, "get_tab_size(path) -> int"},
	 { "clr_cancelled", _wrap_clr_cancelled, METH_NOARGS, "clr_cancelled()"},
	 { "set_cancelled", _wrap_set_cancelled, METH_NOARGS, "set_cancelled()"},
	 { "user_cancelled", _wrap_user_cancelled, METH_NOARGS, "user_cancelled() -> bool"},
	 { "ui_load_new_file", _wrap_ui_load_new_file, METH_VARARGS, "ui_load_new_file(temp_file, filename, pli, neflags, ploaders) -> bool"},
	 { "ui_run_debugger", _wrap_ui_run_debugger, METH_VARARGS, "ui_run_debugger(dbgopts, exename, argc, argv) -> bool"},
	 { "load_dbg_dbginfo", _wrap_load_dbg_dbginfo, METH_VARARGS, "load_dbg_dbginfo(path, li=None, base=BADADDR, verbose=False) -> bool"},
	 { "add_idc_hotkey", _wrap_add_idc_hotkey, METH_VARARGS, "add_idc_hotkey(hotkey, idcfunc) -> int"},
	 { "del_idc_hotkey", _wrap_del_idc_hotkey, METH_O, "del_idc_hotkey(hotkey) -> bool"},
	 { "get_user_strlist_options", _wrap_get_user_strlist_options, METH_O, "get_user_strlist_options(out)"},
	 { "set_highlight", _wrap_set_highlight, METH_VARARGS, "set_highlight(viewer, str, flags) -> bool"},
	 { "open_exports_window", _wrap_open_exports_window, METH_O, "open_exports_window(ea) -> TWidget *"},
	 { "open_imports_window", _wrap_open_imports_window, METH_O, "open_imports_window(ea) -> TWidget *"},
	 { "open_names_window", _wrap_open_names_window, METH_O, "open_names_window(ea) -> TWidget *"},
	 { "open_funcs_window", _wrap_open_funcs_window, METH_O, "open_funcs_window(ea) -> TWidget *"},
	 { "open_strings_window", _wrap_open_strings_window, METH_VARARGS, "open_strings_window(ea, selstart=BADADDR, selend=BADADDR) -> TWidget *"},
	 { "open_segments_window", _wrap_open_segments_window, METH_O, "open_segments_window(ea) -> TWidget *"},
	 { "open_segregs_window", _wrap_open_segregs_window, METH_O, "open_segregs_window(ea) -> TWidget *"},
	 { "open_selectors_window", _wrap_open_selectors_window, METH_NOARGS, "open_selectors_window() -> TWidget *"},
	 { "open_signatures_window", _wrap_open_signatures_window, METH_NOARGS, "open_signatures_window() -> TWidget *"},
	 { "open_tils_window", _wrap_open_tils_window, METH_NOARGS, "open_tils_window() -> TWidget *"},
	 { "open_loctypes_window", _wrap_open_loctypes_window, METH_O, "open_loctypes_window(ordinal) -> TWidget *"},
	 { "open_calls_window", _wrap_open_calls_window, METH_O, "open_calls_window(ea) -> TWidget *"},
	 { "open_problems_window", _wrap_open_problems_window, METH_O, "open_problems_window(ea) -> TWidget *"},
	 { "open_bpts_window", _wrap_open_bpts_window, METH_O, "open_bpts_window(ea) -> TWidget *"},
	 { "open_threads_window", _wrap_open_threads_window, METH_NOARGS, "open_threads_window() -> TWidget *"},
	 { "open_modules_window", _wrap_open_modules_window, METH_NOARGS, "open_modules_window() -> TWidget *"},
	 { "open_trace_window", _wrap_open_trace_window, METH_NOARGS, "open_trace_window() -> TWidget *"},
	 { "open_stack_window", _wrap_open_stack_window, METH_NOARGS, "open_stack_window() -> TWidget *"},
	 { "open_xrefs_window", _wrap_open_xrefs_window, METH_O, "open_xrefs_window(ea) -> TWidget *"},
	 { "open_frame_window", _wrap_open_frame_window, METH_VARARGS, "open_frame_window(pfn, offset) -> TWidget *"},
	 { "open_navband_window", _wrap_open_navband_window, METH_VARARGS, "open_navband_window(ea, zoom) -> TWidget *"},
	 { "open_enums_window", _wrap_open_enums_window, METH_VARARGS, "open_enums_window(const_id=BADADDR) -> TWidget *"},
	 { "open_structs_window", _wrap_open_structs_window, METH_VARARGS, "open_structs_window(id=BADADDR, offset=0) -> TWidget *"},
	 { "open_disasm_window", _wrap_open_disasm_window, METH_VARARGS, "open_disasm_window(window_title, ranges=None) -> TWidget *"},
	 { "open_hexdump_window", _wrap_open_hexdump_window, METH_O, "open_hexdump_window(window_title) -> TWidget *"},
	 { "open_notepad_window", _wrap_open_notepad_window, METH_NOARGS, "open_notepad_window() -> TWidget *"},
	 { "choose_til", _wrap_choose_til, METH_NOARGS, "choose_til() -> bool"},
	 { "choose_entry", _wrap_choose_entry, METH_O, "choose_entry(title) -> ea_t"},
	 { "choose_name", _wrap_choose_name, METH_O, "choose_name(title) -> ea_t"},
	 { "choose_stkvar_xref", _wrap_choose_stkvar_xref, METH_VARARGS, "choose_stkvar_xref(pfn, mptr) -> ea_t"},
	 { "choose_xref", _wrap_choose_xref, METH_O, "choose_xref(to) -> ea_t"},
	 { "choose_enum", _wrap_choose_enum, METH_VARARGS, "choose_enum(title, default_id) -> enum_t"},
	 { "choose_enum_by_value", _wrap_choose_enum_by_value, METH_VARARGS, "choose_enum_by_value(title, default_id, value, nbytes) -> enum_t"},
	 { "choose_func", _wrap_choose_func, METH_VARARGS, "choose_func(title, default_ea) -> func_t *"},
	 { "choose_segm", _wrap_choose_segm, METH_VARARGS, "choose_segm(title, default_ea) -> segment_t *"},
	 { "choose_struc", _wrap_choose_struc, METH_O, "choose_struc(title) -> struc_t *"},
	 { "choose_srcp", _wrap_choose_srcp, METH_O, "choose_srcp(title) -> sreg_range_t *"},
	 { "get_chooser_obj", _wrap_get_chooser_obj, METH_O, "get_chooser_obj(chooser_caption) -> void *"},
	 { "enable_chooser_item_attrs", _wrap_enable_chooser_item_attrs, METH_VARARGS, "enable_chooser_item_attrs(chooser_caption, enable) -> bool"},
	 { "show_wait_box", _wrap_show_wait_box, METH_VARARGS, "show_wait_box(format)"},
	 { "hide_wait_box", _wrap_hide_wait_box, METH_NOARGS, "hide_wait_box()"},
	 { "replace_wait_box", _wrap_replace_wait_box, METH_VARARGS, "replace_wait_box(format)"},
	 { "beep", _wrap_beep, METH_VARARGS, "beep(beep_type=beep_default)"},
	 { "display_copyright_warning", _wrap_display_copyright_warning, METH_NOARGS, "display_copyright_warning() -> bool"},
	 { "ask_for_feedback", _wrap_ask_for_feedback, METH_VARARGS, "ask_for_feedback(format)"},
	 { "_ask_addr", _wrap__ask_addr, METH_VARARGS, "_ask_addr(addr, format) -> bool"},
	 { "_ask_seg", _wrap__ask_seg, METH_VARARGS, "_ask_seg(sel, format) -> bool"},
	 { "_ask_long", _wrap__ask_long, METH_VARARGS, "_ask_long(value, format) -> bool"},
	 { "error", _wrap_error, METH_VARARGS, "error(format)"},
	 { "warning", _wrap_warning, METH_VARARGS, "warning(format)"},
	 { "info", _wrap_info, METH_VARARGS, "info(format)"},
	 { "nomem", _wrap_nomem, METH_VARARGS, "nomem(format)"},
	 { "ask_yn", _wrap_ask_yn, METH_VARARGS, "ask_yn(deflt, format) -> int"},
	 { "ask_buttons", _wrap_ask_buttons, METH_VARARGS, "ask_buttons(Yes, No, Cancel, deflt, format) -> int"},
	 { "ask_file", _wrap_ask_file, METH_VARARGS, "ask_file(for_saving, defval, format) -> char *"},
	 { "addon_info_t_cb_set", _wrap_addon_info_t_cb_set, METH_VARARGS, "addon_info_t_cb_set(self, cb)"},
	 { "addon_info_t_cb_get", _wrap_addon_info_t_cb_get, METH_O, "addon_info_t_cb_get(self) -> size_t"},
	 { "addon_info_t_id_set", _wrap_addon_info_t_id_set, METH_VARARGS, "addon_info_t_id_set(self, id)"},
	 { "addon_info_t_id_get", _wrap_addon_info_t_id_get, METH_O, "addon_info_t_id_get(self) -> char const *"},
	 { "addon_info_t_name_set", _wrap_addon_info_t_name_set, METH_VARARGS, "addon_info_t_name_set(self, name)"},
	 { "addon_info_t_name_get", _wrap_addon_info_t_name_get, METH_O, "addon_info_t_name_get(self) -> char const *"},
	 { "addon_info_t_producer_set", _wrap_addon_info_t_producer_set, METH_VARARGS, "addon_info_t_producer_set(self, producer)"},
	 { "addon_info_t_producer_get", _wrap_addon_info_t_producer_get, METH_O, "addon_info_t_producer_get(self) -> char const *"},
	 { "addon_info_t_version_set", _wrap_addon_info_t_version_set, METH_VARARGS, "addon_info_t_version_set(self, version)"},
	 { "addon_info_t_version_get", _wrap_addon_info_t_version_get, METH_O, "addon_info_t_version_get(self) -> char const *"},
	 { "addon_info_t_url_set", _wrap_addon_info_t_url_set, METH_VARARGS, "addon_info_t_url_set(self, url)"},
	 { "addon_info_t_url_get", _wrap_addon_info_t_url_get, METH_O, "addon_info_t_url_get(self) -> char const *"},
	 { "addon_info_t_freeform_set", _wrap_addon_info_t_freeform_set, METH_VARARGS, "addon_info_t_freeform_set(self, freeform)"},
	 { "addon_info_t_freeform_get", _wrap_addon_info_t_freeform_get, METH_O, "addon_info_t_freeform_get(self) -> char const *"},
	 { "addon_info_t_custom_data_set", _wrap_addon_info_t_custom_data_set, METH_VARARGS, "addon_info_t_custom_data_set(self, custom_data)"},
	 { "addon_info_t_custom_data_get", _wrap_addon_info_t_custom_data_get, METH_O, "addon_info_t_custom_data_get(self) -> void const *"},
	 { "addon_info_t_custom_size_set", _wrap_addon_info_t_custom_size_set, METH_VARARGS, "addon_info_t_custom_size_set(self, custom_size)"},
	 { "addon_info_t_custom_size_get", _wrap_addon_info_t_custom_size_get, METH_O, "addon_info_t_custom_size_get(self) -> size_t"},
	 { "new_addon_info_t", _wrap_new_addon_info_t, METH_NOARGS, "new_addon_info_t() -> addon_info_t"},
	 { "delete_addon_info_t", _wrap_delete_addon_info_t, METH_O, "delete_addon_info_t(self)"},
	 { "addon_info_t_swigregister", addon_info_t_swigregister, METH_O, NULL},
	 { "addon_info_t_swiginit", addon_info_t_swiginit, METH_VARARGS, NULL},
	 { "register_addon", _wrap_register_addon, METH_O, "register_addon(info) -> int"},
	 { "addon_count", _wrap_addon_count, METH_NOARGS, "addon_count() -> int"},
	 { "get_addon_info", _wrap_get_addon_info, METH_VARARGS, "get_addon_info(id, info) -> bool"},
	 { "get_addon_info_idx", _wrap_get_addon_info_idx, METH_VARARGS, "get_addon_info_idx(index, info) -> bool"},
	 { "add_spaces", _wrap_add_spaces, METH_VARARGS, "add_spaces(str, bufsize, len) -> char *"},
	 { "strarray_t_code_set", _wrap_strarray_t_code_set, METH_VARARGS, "strarray_t_code_set(self, code)"},
	 { "strarray_t_code_get", _wrap_strarray_t_code_get, METH_O, "strarray_t_code_get(self) -> int"},
	 { "strarray_t_text_set", _wrap_strarray_t_text_set, METH_VARARGS, "strarray_t_text_set(self, text)"},
	 { "strarray_t_text_get", _wrap_strarray_t_text_get, METH_O, "strarray_t_text_get(self) -> char const *"},
	 { "new_strarray_t", _wrap_new_strarray_t, METH_NOARGS, "new_strarray_t() -> strarray_t"},
	 { "delete_strarray_t", _wrap_delete_strarray_t, METH_O, "delete_strarray_t(self)"},
	 { "strarray_t_swigregister", strarray_t_swigregister, METH_O, NULL},
	 { "strarray_t_swiginit", strarray_t_swiginit, METH_VARARGS, NULL},
	 { "qcleanline", _wrap_qcleanline, METH_VARARGS, "qcleanline(cmt_char='\\0', flags=((1 << 0)|(1 << 1))|(1 << 2)) -> ssize_t"},
	 { "strarray", _wrap_strarray, METH_VARARGS, "strarray(array, array_size, code) -> char const *"},
	 { "ea2str", _wrap_ea2str, METH_O, "ea2str(ea) -> size_t"},
	 { "new_disasm_text_t", _wrap_new_disasm_text_t, METH_VARARGS, "\n"
		"disasm_text_t()\n"
		"new_disasm_text_t(x) -> disasm_text_t\n"
		""},
	 { "delete_disasm_text_t", _wrap_delete_disasm_text_t, METH_O, "delete_disasm_text_t(self)"},
	 { "disasm_text_t_push_back", _wrap_disasm_text_t_push_back, METH_VARARGS, "\n"
		"disasm_text_t_push_back(self, x)\n"
		"disasm_text_t_push_back(self) -> disasm_line_t\n"
		""},
	 { "disasm_text_t_pop_back", _wrap_disasm_text_t_pop_back, METH_O, "disasm_text_t_pop_back(self)"},
	 { "disasm_text_t_size", _wrap_disasm_text_t_size, METH_O, "disasm_text_t_size(self) -> size_t"},
	 { "disasm_text_t_empty", _wrap_disasm_text_t_empty, METH_O, "disasm_text_t_empty(self) -> bool"},
	 { "disasm_text_t_at", _wrap_disasm_text_t_at, METH_VARARGS, "disasm_text_t_at(self, _idx) -> disasm_line_t"},
	 { "disasm_text_t_qclear", _wrap_disasm_text_t_qclear, METH_O, "disasm_text_t_qclear(self)"},
	 { "disasm_text_t_clear", _wrap_disasm_text_t_clear, METH_O, "disasm_text_t_clear(self)"},
	 { "disasm_text_t_resize", _wrap_disasm_text_t_resize, METH_VARARGS, "\n"
		"disasm_text_t_resize(self, _newsize, x)\n"
		"disasm_text_t_resize(self, _newsize)\n"
		""},
	 { "disasm_text_t_grow", _wrap_disasm_text_t_grow, METH_VARARGS, "disasm_text_t_grow(self, x=disasm_line_t())"},
	 { "disasm_text_t_capacity", _wrap_disasm_text_t_capacity, METH_O, "disasm_text_t_capacity(self) -> size_t"},
	 { "disasm_text_t_reserve", _wrap_disasm_text_t_reserve, METH_VARARGS, "disasm_text_t_reserve(self, cnt)"},
	 { "disasm_text_t_truncate", _wrap_disasm_text_t_truncate, METH_O, "disasm_text_t_truncate(self)"},
	 { "disasm_text_t_swap", _wrap_disasm_text_t_swap, METH_VARARGS, "disasm_text_t_swap(self, r)"},
	 { "disasm_text_t_extract", _wrap_disasm_text_t_extract, METH_O, "disasm_text_t_extract(self) -> disasm_line_t"},
	 { "disasm_text_t_inject", _wrap_disasm_text_t_inject, METH_VARARGS, "disasm_text_t_inject(self, s, len)"},
	 { "disasm_text_t_begin", _wrap_disasm_text_t_begin, METH_VARARGS, "\n"
		"disasm_text_t_begin(self) -> disasm_line_t\n"
		"disasm_text_t_begin(self) -> disasm_line_t\n"
		""},
	 { "disasm_text_t_end", _wrap_disasm_text_t_end, METH_VARARGS, "\n"
		"disasm_text_t_end(self) -> disasm_line_t\n"
		"disasm_text_t_end(self) -> disasm_line_t\n"
		""},
	 { "disasm_text_t_insert", _wrap_disasm_text_t_insert, METH_VARARGS, "disasm_text_t_insert(self, it, x) -> disasm_line_t"},
	 { "disasm_text_t_erase", _wrap_disasm_text_t_erase, METH_VARARGS, "\n"
		"disasm_text_t_erase(self, it) -> disasm_line_t\n"
		"disasm_text_t_erase(self, first, last) -> disasm_line_t\n"
		""},
	 { "disasm_text_t___len__", _wrap_disasm_text_t___len__, METH_O, "disasm_text_t___len__(self) -> size_t"},
	 { "disasm_text_t___getitem__", _wrap_disasm_text_t___getitem__, METH_VARARGS, "disasm_text_t___getitem__(self, i) -> disasm_line_t"},
	 { "disasm_text_t___setitem__", _wrap_disasm_text_t___setitem__, METH_VARARGS, "disasm_text_t___setitem__(self, i, v)"},
	 { "disasm_text_t_swigregister", disasm_text_t_swigregister, METH_O, NULL},
	 { "disasm_text_t_swiginit", disasm_text_t_swiginit, METH_VARARGS, NULL},
	 { "choose_find", _wrap_choose_find, METH_O, "choose_find(title) -> PyObject *"},
	 { "choose_refresh", _wrap_choose_refresh, METH_O, "choose_refresh(_self)"},
	 { "choose_close", _wrap_choose_close, METH_O, "choose_close(_self)"},
	 { "choose_create", _wrap_choose_create, METH_O, "choose_create(_self) -> int"},
	 { "choose_activate", _wrap_choose_activate, METH_O, "choose_activate(_self)"},
	 { "_choose_get_embedded_chobj_pointer", _wrap__choose_get_embedded_chobj_pointer, METH_O, "_choose_get_embedded_chobj_pointer(_self) -> uint64"},
	 { "get_chooser_data", _wrap_get_chooser_data, METH_VARARGS, "get_chooser_data(chooser_caption, n) -> PyObject *"},
	 { "choose_get_widget", _wrap_choose_get_widget, METH_O, "choose_get_widget(_self) -> TWidget *"},
	 { "textctrl_info_t_assign", _wrap_textctrl_info_t_assign, METH_VARARGS, "textctrl_info_t_assign(_self, other) -> bool"},
	 { "textctrl_info_t_set_text", _wrap_textctrl_info_t_set_text, METH_VARARGS, "textctrl_info_t_set_text(_self, s) -> bool"},
	 { "textctrl_info_t_get_text", _wrap_textctrl_info_t_get_text, METH_O, "textctrl_info_t_get_text(_self) -> char const *"},
	 { "textctrl_info_t_set_flags", _wrap_textctrl_info_t_set_flags, METH_VARARGS, "textctrl_info_t_set_flags(_self, flags) -> bool"},
	 { "textctrl_info_t_get_flags", _wrap_textctrl_info_t_get_flags, METH_VARARGS, "textctrl_info_t_get_flags(_self, flags) -> unsigned int"},
	 { "textctrl_info_t_set_tabsize", _wrap_textctrl_info_t_set_tabsize, METH_VARARGS, "textctrl_info_t_set_tabsize(_self, tabsize) -> bool"},
	 { "textctrl_info_t_get_tabsize", _wrap_textctrl_info_t_get_tabsize, METH_VARARGS, "textctrl_info_t_get_tabsize(_self, tabsize) -> unsigned int"},
	 { "formchgcbfa_enable_field", _wrap_formchgcbfa_enable_field, METH_VARARGS, "formchgcbfa_enable_field(p_fa, fid, enable) -> bool"},
	 { "formchgcbfa_show_field", _wrap_formchgcbfa_show_field, METH_VARARGS, "formchgcbfa_show_field(p_fa, fid, show) -> bool"},
	 { "formchgcbfa_move_field", _wrap_formchgcbfa_move_field, METH_VARARGS, "formchgcbfa_move_field(p_fa, fid, x, y, w, h) -> bool"},
	 { "formchgcbfa_get_focused_field", _wrap_formchgcbfa_get_focused_field, METH_O, "formchgcbfa_get_focused_field(p_fa) -> int"},
	 { "formchgcbfa_set_focused_field", _wrap_formchgcbfa_set_focused_field, METH_VARARGS, "formchgcbfa_set_focused_field(p_fa, fid) -> bool"},
	 { "formchgcbfa_refresh_field", _wrap_formchgcbfa_refresh_field, METH_VARARGS, "formchgcbfa_refresh_field(p_fa, fid)"},
	 { "formchgcbfa_close", _wrap_formchgcbfa_close, METH_VARARGS, "formchgcbfa_close(p_fa, close_normally)"},
	 { "formchgcbfa_get_field_value", _wrap_formchgcbfa_get_field_value, METH_VARARGS, "formchgcbfa_get_field_value(p_fa, fid, ft, sz) -> PyObject *"},
	 { "formchgcbfa_set_field_value", _wrap_formchgcbfa_set_field_value, METH_VARARGS, "formchgcbfa_set_field_value(p_fa, fid, ft, py_val) -> bool"},
	 { "py_get_ask_form", _wrap_py_get_ask_form, METH_NOARGS, "py_get_ask_form() -> size_t"},
	 { "py_get_open_form", _wrap_py_get_open_form, METH_NOARGS, "py_get_open_form() -> size_t"},
	 { "py_register_compiled_form", _wrap_py_register_compiled_form, METH_O, "py_register_compiled_form(py_form)"},
	 { "py_unregister_compiled_form", _wrap_py_unregister_compiled_form, METH_O, "py_unregister_compiled_form(py_form)"},
	 { "install_command_interpreter", _wrap_install_command_interpreter, METH_O, "install_command_interpreter(py_obj) -> int"},
	 { "remove_command_interpreter", _wrap_remove_command_interpreter, METH_O, "remove_command_interpreter(cli_idx)"},
	 { "delete_View_Hooks", _wrap_delete_View_Hooks, METH_O, "delete_View_Hooks(self)"},
	 { "View_Hooks_hook", _wrap_View_Hooks_hook, METH_O, "View_Hooks_hook(self) -> bool"},
	 { "View_Hooks_unhook", _wrap_View_Hooks_unhook, METH_O, "View_Hooks_unhook(self) -> bool"},
	 { "View_Hooks_view_activated", _wrap_View_Hooks_view_activated, METH_VARARGS, "View_Hooks_view_activated(self, view)"},
	 { "View_Hooks_view_deactivated", _wrap_View_Hooks_view_deactivated, METH_VARARGS, "View_Hooks_view_deactivated(self, view)"},
	 { "View_Hooks_view_keydown", _wrap_View_Hooks_view_keydown, METH_VARARGS, "View_Hooks_view_keydown(self, view, key, state)"},
	 { "View_Hooks_view_click", _wrap_View_Hooks_view_click, METH_VARARGS, "View_Hooks_view_click(self, view, event)"},
	 { "View_Hooks_view_dblclick", _wrap_View_Hooks_view_dblclick, METH_VARARGS, "View_Hooks_view_dblclick(self, view, event)"},
	 { "View_Hooks_view_curpos", _wrap_View_Hooks_view_curpos, METH_VARARGS, "View_Hooks_view_curpos(self, view)"},
	 { "View_Hooks_view_created", _wrap_View_Hooks_view_created, METH_VARARGS, "View_Hooks_view_created(self, view)"},
	 { "View_Hooks_view_close", _wrap_View_Hooks_view_close, METH_VARARGS, "View_Hooks_view_close(self, view)"},
	 { "View_Hooks_view_switched", _wrap_View_Hooks_view_switched, METH_VARARGS, "View_Hooks_view_switched(self, view, rt)"},
	 { "View_Hooks_view_mouse_over", _wrap_View_Hooks_view_mouse_over, METH_VARARGS, "View_Hooks_view_mouse_over(self, view, event)"},
	 { "View_Hooks_view_loc_changed", _wrap_View_Hooks_view_loc_changed, METH_VARARGS, "View_Hooks_view_loc_changed(self, view, now, was)"},
	 { "View_Hooks_view_mouse_moved", _wrap_View_Hooks_view_mouse_moved, METH_VARARGS, "View_Hooks_view_mouse_moved(self, view, event)"},
	 { "new_View_Hooks", _wrap_new_View_Hooks, METH_O, "new_View_Hooks(_self) -> View_Hooks"},
	 { "disown_View_Hooks", _wrap_disown_View_Hooks, METH_O, NULL},
	 { "View_Hooks_swigregister", View_Hooks_swigregister, METH_O, NULL},
	 { "View_Hooks_swiginit", View_Hooks_swiginit, METH_VARARGS, NULL},
	 { "pyidag_bind", _wrap_pyidag_bind, METH_O, "pyidag_bind(_self) -> bool"},
	 { "pyidag_unbind", _wrap_pyidag_unbind, METH_O, "pyidag_unbind(_self) -> bool"},
	 { "pyscv_init", _wrap_pyscv_init, METH_VARARGS, "pyscv_init(py_link, title) -> PyObject *"},
	 { "pyscv_refresh", _wrap_pyscv_refresh, METH_O, "pyscv_refresh(py_this) -> bool"},
	 { "pyscv_delete", _wrap_pyscv_delete, METH_O, "pyscv_delete(py_this) -> bool"},
	 { "pyscv_refresh_current", _wrap_pyscv_refresh_current, METH_O, "pyscv_refresh_current(py_this) -> bool"},
	 { "pyscv_get_current_line", _wrap_pyscv_get_current_line, METH_VARARGS, "pyscv_get_current_line(py_this, mouse, notags) -> PyObject *"},
	 { "pyscv_is_focused", _wrap_pyscv_is_focused, METH_O, "pyscv_is_focused(py_this) -> bool"},
	 { "pyscv_count", _wrap_pyscv_count, METH_O, "pyscv_count(py_this) -> size_t"},
	 { "pyscv_show", _wrap_pyscv_show, METH_O, "pyscv_show(py_this) -> bool"},
	 { "pyscv_close", _wrap_pyscv_close, METH_O, "pyscv_close(py_this)"},
	 { "pyscv_jumpto", _wrap_pyscv_jumpto, METH_VARARGS, "pyscv_jumpto(py_this, ln, x, y) -> bool"},
	 { "pyscv_get_line", _wrap_pyscv_get_line, METH_VARARGS, "pyscv_get_line(py_this, nline) -> PyObject *"},
	 { "pyscv_get_pos", _wrap_pyscv_get_pos, METH_VARARGS, "pyscv_get_pos(py_this, mouse) -> PyObject *"},
	 { "pyscv_clear_lines", _wrap_pyscv_clear_lines, METH_O, "pyscv_clear_lines(py_this) -> PyObject *"},
	 { "pyscv_add_line", _wrap_pyscv_add_line, METH_VARARGS, "pyscv_add_line(py_this, py_sl) -> bool"},
	 { "pyscv_insert_line", _wrap_pyscv_insert_line, METH_VARARGS, "pyscv_insert_line(py_this, nline, py_sl) -> bool"},
	 { "pyscv_patch_line", _wrap_pyscv_patch_line, METH_VARARGS, "pyscv_patch_line(py_this, nline, offs, value) -> bool"},
	 { "pyscv_del_line", _wrap_pyscv_del_line, METH_VARARGS, "pyscv_del_line(py_this, nline) -> bool"},
	 { "pyscv_get_selection", _wrap_pyscv_get_selection, METH_O, "pyscv_get_selection(py_this) -> PyObject *"},
	 { "pyscv_get_current_word", _wrap_pyscv_get_current_word, METH_VARARGS, "pyscv_get_current_word(py_this, mouse) -> PyObject *"},
	 { "pyscv_edit_line", _wrap_pyscv_edit_line, METH_VARARGS, "pyscv_edit_line(py_this, nline, py_sl) -> bool"},
	 { "pyscv_get_widget", _wrap_pyscv_get_widget, METH_O, "pyscv_get_widget(py_this) -> TWidget *"},
	 { "plgform_new", _wrap_plgform_new, METH_NOARGS, "plgform_new() -> PyObject *"},
	 { "plgform_show", _wrap_plgform_show, METH_VARARGS, "plgform_show(py_link, py_obj, caption, options=WOPN_TAB|WOPN_RESTORE) -> bool"},
	 { "plgform_close", _wrap_plgform_close, METH_VARARGS, "plgform_close(py_link, options)"},
	 { "plgform_get_widget", _wrap_plgform_get_widget, METH_O, "plgform_get_widget(py_link) -> TWidget *"},
	 { NULL, NULL, 0, NULL }
};

#ifndef Py_LIMITED_API
static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_hexplace_tTo_p_idaplace_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((idaplace_t *)  ((hexplace_t *) x));
}
static void *_p_simpleline_place_tTo_p_place_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((place_t *)  ((simpleline_place_t *) x));
}
static void *_p_idaplace_tTo_p_place_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((place_t *)  ((idaplace_t *) x));
}
static void *_p_enumplace_tTo_p_place_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((place_t *)  ((enumplace_t *) x));
}
static void *_p_structplace_tTo_p_place_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((place_t *)  ((structplace_t *) x));
}
static void *_p_hexplace_tTo_p_place_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((place_t *) (idaplace_t *) ((hexplace_t *) x));
}
static void *_p_relobj_tTo_p_qvectorT_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< unsigned char > *) (bytevec_t *) ((relobj_t *) x));
}
static void *_p_bytevec_tTo_p_qvectorT_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< unsigned char > *)  ((bytevec_t *) x));
}
static void *_p_reloc_info_tTo_p_qvectorT_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< unsigned char > *) (bytevec_t *) ((reloc_info_t *) x));
}
static swig_type_info _swigt__p_TPopupMenu = {"_p_TPopupMenu", "TPopupMenu *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TWidget = {"_p_TWidget", "TWidget *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UI_Hooks = {"_p_UI_Hooks", "UI_Hooks *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_View_Hooks = {"_p_View_Hooks", "View_Hooks *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p___qtimer_t = {"_p___qtimer_t", "__qtimer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__qstringT_char_t = {"_p__qstringT_char_t", "_qstring< char > *|qstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__qstringT_unsigned_char_t = {"_p__qstringT_unsigned_char_t", "qtype *|_qstring< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__qstringT_unsigned_short_t = {"_p__qstringT_unsigned_short_t", "_qstring< unsigned short > *|qwstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_action_ctx_base_t = {"_p_action_ctx_base_t", "action_ctx_base_t *|action_update_ctx_t *|action_activation_ctx_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_action_desc_t = {"_p_action_desc_t", "action_desc_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_action_handler_t = {"_p_action_handler_t", "action_handler_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_action_state_t = {"_p_action_state_t", "enum action_state_t *|action_state_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_addon_info_t = {"_p_addon_info_t", "addon_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_biggest_t = {"_p_biggest_t", "biggest_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_chooser_base_t = {"_p_chooser_base_t", "chooser_base_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_chooser_item_attrs_t = {"_p_chooser_item_attrs_t", "chooser_item_attrs_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_disasm_line_t = {"_p_disasm_line_t", "qvector< disasm_line_t >::iterator|qvector< disasm_line_t >::const_iterator|disasm_line_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_enumplace_t = {"_p_enumplace_t", "enumplace_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_int_int_p_void__bool = {"_p_f_p_TWidget_int_int_p_void__bool", "custom_viewer_keydown_t *|bool (*)(TWidget *,int,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void = {"_p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void", "void (*)(TWidget *,int,view_mouse_event_t *,void *)|custom_viewer_mouse_moved_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_int_p_void__bool = {"_p_f_p_TWidget_int_p_void__bool", "custom_viewer_click_t *|custom_viewer_dblclick_t *|bool (*)(TWidget *,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_lochist_entry_t_p_void__void = {"_p_f_p_TWidget_p_lochist_entry_t_p_void__void", "custom_viewer_adjust_place_t *|void (*)(TWidget *,lochist_entry_t *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void = {"_p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void", "void (*)(TWidget *,lochist_entry_t const *,lochist_entry_t const *,locchange_md_t const &,void *)|custom_viewer_location_changed_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int = {"_p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int", "custom_viewer_can_navigate_t *|int (*)(TWidget *,lochist_entry_t const *,locchange_md_t const &,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void = {"_p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void", "code_viewer_lines_click_t *|void (*)(TWidget *,place_t const *,int,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int = {"_p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int", "code_viewer_lines_icon_t *|int (*)(TWidget *,place_t const *,int *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int = {"_p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int", "custom_viewer_get_place_xcoord_t *|int (*)(TWidget *,place_t const *,place_t const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool = {"_p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool", "code_viewer_lines_linenum_t *|bool (*)(TWidget *,place_t const *,unsigned int *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_void__int = {"_p_f_p_TWidget_p_void__int", "custom_viewer_help_t *|int (*)(TWidget *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_void__void = {"_p_f_p_TWidget_p_void__void", "custom_viewer_popup_t *|custom_viewer_close_t *|custom_viewer_curpos_t *|void (*)(TWidget *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t = {"_p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t", "chooser_base_t::cbres_t (*)(chooser_multi_t *,sizevec_t *)|chooser_multi_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t = {"_p_f_p_chooser_t_ssize_t__chooser_t__cbret_t", "chooser_t::cbret_t (*)(chooser_t *,ssize_t)|chooser_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool = {"_p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool", "bool (*)(lochist_entry_t *,lochist_entry_t const &,TWidget *)|lochist_entry_cvt_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_p_void__void = {"_p_f_p_q_const__char_p_void__void", "void (*)(char const *,void *)|ss_restore_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int = {"_p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int", "h2ti_type_cb *|int (*)(char const *,tinfo_t const &,char const *,unsigned long long const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_v_______int = {"_p_f_p_q_const__char_v_______int", "int (*)(char const *,...)|printer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int_va_list__ssize_t = {"_p_f_p_void_int_va_list__ssize_t", "ssize_t (*)(void *,int,va_list)|hook_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__insn_t_p_int_p_int__bool = {"_p_f_r_q_const__insn_t_p_int_p_int__bool", "bool (*)(insn_t const &,int *,int *)|is_stkarg_load_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool = {"_p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool", "bool (*)(insn_t const &,op_t const &,tinfo_t const &,char const *)|set_op_tinfo_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int__bool = {"_p_f_unsigned_int__bool", "bool (*)(unsigned int)|has_delay_slot_t *|may_destroy_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int = {"_p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int", "int (*)(unsigned int,char const *,unsigned int,void *)|import_enum_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_p_void__bool = {"_p_f_unsigned_int_p_void__bool", "testf_t *|bool (*)(unsigned int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int = {"_p_f_unsigned_int_r_q_const__tinfo_t_p_void__int", "local_tinfo_predicate_t *|int (*)(unsigned int,tinfo_t const &,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_unsigned_int__unsigned_int = {"_p_f_unsigned_int_unsigned_int__unsigned_int", "unsigned int (*)(unsigned int,unsigned int)|nav_colorizer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_func_t = {"_p_func_t", "func_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idaplace_t = {"_p_idaplace_t", "idaplace_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexplace_t = {"_p_hexplace_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "adiff_t *|int *|int32 *|sval_t *|argloc_type_t *|atype_t *|twidget_type_t *|idastate_t *|view_event_state_t *|error_t *|type_sign_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jobj_wrapper_t = {"_p_jobj_wrapper_t", "jobj_wrapper_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_linput_t = {"_p_linput_t", "linput_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_location_t = {"_p_location_t", "location_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_locchange_md_t = {"_p_locchange_md_t", "locchange_md_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lochist_entry_t = {"_p_lochist_entry_t", "lochist_entry_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64 *|longlong *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_member_t = {"_p_member_t", "member_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_linput_t = {"_p_p_linput_t", "linput_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_load_info_t = {"_p_p_load_info_t", "load_info_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_place_t = {"_p_place_t", "place_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_plugin_info_t = {"_p_plugin_info_t", "plugin_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_plugin_t = {"_p_plugin_t", "plugin_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT__qstringT_unsigned_short_t_t = {"_p_qvectorT__qstringT_unsigned_short_t_t", "qvector< _qstring< unsigned short > > *|qwstrvec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_argloc_t_t = {"_p_qvectorT_argloc_t_t", "qvector< argloc_t > *|arglocs_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_bool_t = {"_p_qvectorT_bool_t", "boolvec_t *|qvector< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_channel_redir_t_t = {"_p_qvectorT_channel_redir_t_t", "qvector< channel_redir_t > *|channel_redirs_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_compiled_binpat_t_t = {"_p_qvectorT_compiled_binpat_t_t", "compiled_binpat_vec_t *|qvector< compiled_binpat_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_disasm_line_t_t = {"_p_qvectorT_disasm_line_t_t", "disasm_text_t *|qvector< disasm_line_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_funcarg_t_t = {"_p_qvectorT_funcarg_t_t", "funcargvec_t *|qvector< funcarg_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_int_t = {"_p_qvectorT_int_t", "svalvec_t *|intvec_t *|qvector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_range_t_t = {"_p_qvectorT_range_t_t", "rangevec_base_t *|qvector< range_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_rangeset_t_const_p_t = {"_p_qvectorT_rangeset_t_const_p_t", "rangeset_crefvec_t *|qvector< rangeset_t const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_rangeset_t_t = {"_p_qvectorT_rangeset_t_t", "qvector< rangeset_t > *|array_of_rangesets *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_refinfo_desc_t_t = {"_p_qvectorT_refinfo_desc_t_t", "refinfo_desc_vec_t *|qvector< refinfo_desc_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_simd_info_t_t = {"_p_qvectorT_simd_info_t_t", "simd_info_vec_t *|qvector< simd_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_size_t_t = {"_p_qvectorT_size_t_t", "sizevec_t *|qvector< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_tinfo_t_t = {"_p_qvectorT_tinfo_t_t", "tinfovec_t *|qvector< tinfo_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_type_attr_t_t = {"_p_qvectorT_type_attr_t_t", "type_attrs_t *|qvector< type_attr_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_udt_member_t_t = {"_p_qvectorT_udt_member_t_t", "udtmembervec_t *|qvector< udt_member_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_unsigned_char_t = {"_p_qvectorT_unsigned_char_t", "qvector< unsigned char > *|compvec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_relobj_t = {"_p_relobj_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_bytevec_t = {"_p_bytevec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_reloc_info_t = {"_p_reloc_info_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_qvectorT_unsigned_int_t = {"_p_qvectorT_unsigned_int_t", "eavec_t *|ordvec_t *|uvalvec_t *|qvector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rangevec_t = {"_p_rangevec_t", "rangevec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_renderer_pos_info_t = {"_p_renderer_pos_info_t", "renderer_pos_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segm_move_infos_t = {"_p_segm_move_infos_t", "segm_move_infos_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segment_t = {"_p_segment_t", "segment_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_selection_item_t = {"_p_selection_item_t", "selection_item_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|sint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_simpleline_place_t = {"_p_simpleline_place_t", "simpleline_place_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_simpleline_t = {"_p_simpleline_t", "simpleline_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_snapshot_t = {"_p_snapshot_t", "snapshot_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sreg_range_t = {"_p_sreg_range_t", "sreg_range_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_strarray_t = {"_p_strarray_t", "strarray_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_struc_t = {"_p_struc_t", "struc_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_structplace_t = {"_p_structplace_t", "structplace_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_strwinsetup_t = {"_p_strwinsetup_t", "strwinsetup_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_textctrl_info_t = {"_p_textctrl_info_t", "textctrl_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_twinpos_t = {"_p_twinpos_t", "twinpos_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ui_requests_t = {"_p_ui_requests_t", "ui_requests_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uchar *|unsigned char *|cm_t *|uint8 *|op_dtype_t *|type_t *|p_list *|reftype_t *|color_t *|bte_t *|p_string *|comp_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "bgcolor_t *|enum_t *|tid_t *|bmask_t *|uint *|uint32 *|flags_t *|wchar32_t *|asize_t *|const_t *|sel_t *|nodeidx_t *|unsigned int *|uval_t *|ea_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64 *|ulonglong *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16 *|unsigned short *|ushort *|wchar16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_view_mouse_event_location_t = {"_p_view_mouse_event_location_t", "view_mouse_event_location_t *|view_mouse_event_t::location_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_view_mouse_event_t = {"_p_view_mouse_event_t", "view_mouse_event_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_TPopupMenu,
  &_swigt__p_TWidget,
  &_swigt__p_UI_Hooks,
  &_swigt__p_View_Hooks,
  &_swigt__p___qtimer_t,
  &_swigt__p__qstringT_char_t,
  &_swigt__p__qstringT_unsigned_char_t,
  &_swigt__p__qstringT_unsigned_short_t,
  &_swigt__p_action_ctx_base_t,
  &_swigt__p_action_desc_t,
  &_swigt__p_action_handler_t,
  &_swigt__p_action_state_t,
  &_swigt__p_addon_info_t,
  &_swigt__p_biggest_t,
  &_swigt__p_bool,
  &_swigt__p_bytevec_t,
  &_swigt__p_char,
  &_swigt__p_chooser_base_t,
  &_swigt__p_chooser_item_attrs_t,
  &_swigt__p_const_iterator,
  &_swigt__p_disasm_line_t,
  &_swigt__p_enumplace_t,
  &_swigt__p_f_p_TWidget_int_int_p_void__bool,
  &_swigt__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void,
  &_swigt__p_f_p_TWidget_int_p_void__bool,
  &_swigt__p_f_p_TWidget_p_lochist_entry_t_p_void__void,
  &_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void,
  &_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool,
  &_swigt__p_f_p_TWidget_p_void__int,
  &_swigt__p_f_p_TWidget_p_void__void,
  &_swigt__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t,
  &_swigt__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t,
  &_swigt__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool,
  &_swigt__p_f_p_q_const__char_p_void__void,
  &_swigt__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int,
  &_swigt__p_f_p_q_const__char_v_______int,
  &_swigt__p_f_p_void_int_va_list__ssize_t,
  &_swigt__p_f_r_q_const__insn_t_p_int_p_int__bool,
  &_swigt__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool,
  &_swigt__p_f_unsigned_int__bool,
  &_swigt__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int,
  &_swigt__p_f_unsigned_int_p_void__bool,
  &_swigt__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int,
  &_swigt__p_f_unsigned_int_unsigned_int__unsigned_int,
  &_swigt__p_func_t,
  &_swigt__p_hexplace_t,
  &_swigt__p_idaplace_t,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_jobj_wrapper_t,
  &_swigt__p_linput_t,
  &_swigt__p_location_t,
  &_swigt__p_locchange_md_t,
  &_swigt__p_lochist_entry_t,
  &_swigt__p_long_long,
  &_swigt__p_member_t,
  &_swigt__p_p_char,
  &_swigt__p_p_linput_t,
  &_swigt__p_p_load_info_t,
  &_swigt__p_place_t,
  &_swigt__p_plugin_info_t,
  &_swigt__p_plugin_t,
  &_swigt__p_qvectorT__qstringT_unsigned_short_t_t,
  &_swigt__p_qvectorT_argloc_t_t,
  &_swigt__p_qvectorT_bool_t,
  &_swigt__p_qvectorT_channel_redir_t_t,
  &_swigt__p_qvectorT_compiled_binpat_t_t,
  &_swigt__p_qvectorT_disasm_line_t_t,
  &_swigt__p_qvectorT_funcarg_t_t,
  &_swigt__p_qvectorT_int_t,
  &_swigt__p_qvectorT_range_t_t,
  &_swigt__p_qvectorT_rangeset_t_const_p_t,
  &_swigt__p_qvectorT_rangeset_t_t,
  &_swigt__p_qvectorT_refinfo_desc_t_t,
  &_swigt__p_qvectorT_simd_info_t_t,
  &_swigt__p_qvectorT_size_t_t,
  &_swigt__p_qvectorT_tinfo_t_t,
  &_swigt__p_qvectorT_type_attr_t_t,
  &_swigt__p_qvectorT_udt_member_t_t,
  &_swigt__p_qvectorT_unsigned_char_t,
  &_swigt__p_qvectorT_unsigned_int_t,
  &_swigt__p_rangevec_t,
  &_swigt__p_relobj_t,
  &_swigt__p_reloc_info_t,
  &_swigt__p_renderer_pos_info_t,
  &_swigt__p_segm_move_infos_t,
  &_swigt__p_segment_t,
  &_swigt__p_selection_item_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_simpleline_place_t,
  &_swigt__p_simpleline_t,
  &_swigt__p_snapshot_t,
  &_swigt__p_sreg_range_t,
  &_swigt__p_strarray_t,
  &_swigt__p_struc_t,
  &_swigt__p_structplace_t,
  &_swigt__p_strwinsetup_t,
  &_swigt__p_textctrl_info_t,
  &_swigt__p_twinpos_t,
  &_swigt__p_ui_requests_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_view_mouse_event_location_t,
  &_swigt__p_view_mouse_event_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_TPopupMenu[] = {  {&_swigt__p_TPopupMenu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TWidget[] = {  {&_swigt__p_TWidget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UI_Hooks[] = {  {&_swigt__p_UI_Hooks, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_View_Hooks[] = {  {&_swigt__p_View_Hooks, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___qtimer_t[] = {  {&_swigt__p___qtimer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__qstringT_char_t[] = {  {&_swigt__p__qstringT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__qstringT_unsigned_char_t[] = {  {&_swigt__p__qstringT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__qstringT_unsigned_short_t[] = {  {&_swigt__p__qstringT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_action_ctx_base_t[] = {  {&_swigt__p_action_ctx_base_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_action_desc_t[] = {  {&_swigt__p_action_desc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_action_handler_t[] = {  {&_swigt__p_action_handler_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_action_state_t[] = {  {&_swigt__p_action_state_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_addon_info_t[] = {  {&_swigt__p_addon_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_biggest_t[] = {  {&_swigt__p_biggest_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_chooser_base_t[] = {  {&_swigt__p_chooser_base_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_chooser_item_attrs_t[] = {  {&_swigt__p_chooser_item_attrs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_disasm_line_t[] = {  {&_swigt__p_disasm_line_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_enumplace_t[] = {  {&_swigt__p_enumplace_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_int_int_p_void__bool[] = {  {&_swigt__p_f_p_TWidget_int_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void[] = {  {&_swigt__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_int_p_void__bool[] = {  {&_swigt__p_f_p_TWidget_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_lochist_entry_t_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_lochist_entry_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t[] = {  {&_swigt__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t[] = {  {&_swigt__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool[] = {  {&_swigt__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_p_void__void[] = {  {&_swigt__p_f_p_q_const__char_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int[] = {  {&_swigt__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_v_______int[] = {  {&_swigt__p_f_p_q_const__char_v_______int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int_va_list__ssize_t[] = {  {&_swigt__p_f_p_void_int_va_list__ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__insn_t_p_int_p_int__bool[] = {  {&_swigt__p_f_r_q_const__insn_t_p_int_p_int__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool[] = {  {&_swigt__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int__bool[] = {  {&_swigt__p_f_unsigned_int__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int[] = {  {&_swigt__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_p_void__bool[] = {  {&_swigt__p_f_unsigned_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int[] = {  {&_swigt__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_unsigned_int__unsigned_int[] = {  {&_swigt__p_f_unsigned_int_unsigned_int__unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_func_t[] = {  {&_swigt__p_func_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexplace_t[] = {{&_swigt__p_hexplace_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idaplace_t[] = {  {&_swigt__p_idaplace_t, 0, 0, 0},  {&_swigt__p_hexplace_t, _p_hexplace_tTo_p_idaplace_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jobj_wrapper_t[] = {  {&_swigt__p_jobj_wrapper_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_linput_t[] = {  {&_swigt__p_linput_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_location_t[] = {  {&_swigt__p_location_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_locchange_md_t[] = {  {&_swigt__p_locchange_md_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lochist_entry_t[] = {  {&_swigt__p_lochist_entry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_member_t[] = {  {&_swigt__p_member_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_linput_t[] = {  {&_swigt__p_p_linput_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_load_info_t[] = {  {&_swigt__p_p_load_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_place_t[] = {  {&_swigt__p_place_t, 0, 0, 0},  {&_swigt__p_simpleline_place_t, _p_simpleline_place_tTo_p_place_t, 0, 0},  {&_swigt__p_idaplace_t, _p_idaplace_tTo_p_place_t, 0, 0},  {&_swigt__p_hexplace_t, _p_hexplace_tTo_p_place_t, 0, 0},  {&_swigt__p_enumplace_t, _p_enumplace_tTo_p_place_t, 0, 0},  {&_swigt__p_structplace_t, _p_structplace_tTo_p_place_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_plugin_info_t[] = {  {&_swigt__p_plugin_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_plugin_t[] = {  {&_swigt__p_plugin_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT__qstringT_unsigned_short_t_t[] = {  {&_swigt__p_qvectorT__qstringT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_argloc_t_t[] = {  {&_swigt__p_qvectorT_argloc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_bool_t[] = {  {&_swigt__p_qvectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_channel_redir_t_t[] = {  {&_swigt__p_qvectorT_channel_redir_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_compiled_binpat_t_t[] = {  {&_swigt__p_qvectorT_compiled_binpat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_disasm_line_t_t[] = {  {&_swigt__p_qvectorT_disasm_line_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_funcarg_t_t[] = {  {&_swigt__p_qvectorT_funcarg_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_int_t[] = {  {&_swigt__p_qvectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_range_t_t[] = {  {&_swigt__p_qvectorT_range_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_rangeset_t_const_p_t[] = {  {&_swigt__p_qvectorT_rangeset_t_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_rangeset_t_t[] = {  {&_swigt__p_qvectorT_rangeset_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_refinfo_desc_t_t[] = {  {&_swigt__p_qvectorT_refinfo_desc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_simd_info_t_t[] = {  {&_swigt__p_qvectorT_simd_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_size_t_t[] = {  {&_swigt__p_qvectorT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_tinfo_t_t[] = {  {&_swigt__p_qvectorT_tinfo_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_type_attr_t_t[] = {  {&_swigt__p_qvectorT_type_attr_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_udt_member_t_t[] = {  {&_swigt__p_qvectorT_udt_member_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_relobj_t[] = {{&_swigt__p_relobj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bytevec_t[] = {{&_swigt__p_bytevec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reloc_info_t[] = {{&_swigt__p_reloc_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_unsigned_char_t[] = {  {&_swigt__p_relobj_t, _p_relobj_tTo_p_qvectorT_unsigned_char_t, 0, 0},  {&_swigt__p_qvectorT_unsigned_char_t, 0, 0, 0},  {&_swigt__p_bytevec_t, _p_bytevec_tTo_p_qvectorT_unsigned_char_t, 0, 0},  {&_swigt__p_reloc_info_t, _p_reloc_info_tTo_p_qvectorT_unsigned_char_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_unsigned_int_t[] = {  {&_swigt__p_qvectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rangevec_t[] = {  {&_swigt__p_rangevec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_renderer_pos_info_t[] = {  {&_swigt__p_renderer_pos_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segm_move_infos_t[] = {  {&_swigt__p_segm_move_infos_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segment_t[] = {  {&_swigt__p_segment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_selection_item_t[] = {  {&_swigt__p_selection_item_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_simpleline_place_t[] = {  {&_swigt__p_simpleline_place_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_simpleline_t[] = {  {&_swigt__p_simpleline_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_snapshot_t[] = {  {&_swigt__p_snapshot_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sreg_range_t[] = {  {&_swigt__p_sreg_range_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_strarray_t[] = {  {&_swigt__p_strarray_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_struc_t[] = {  {&_swigt__p_struc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_structplace_t[] = {  {&_swigt__p_structplace_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_strwinsetup_t[] = {  {&_swigt__p_strwinsetup_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_textctrl_info_t[] = {  {&_swigt__p_textctrl_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_twinpos_t[] = {  {&_swigt__p_twinpos_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ui_requests_t[] = {  {&_swigt__p_ui_requests_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_view_mouse_event_location_t[] = {  {&_swigt__p_view_mouse_event_location_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_view_mouse_event_t[] = {  {&_swigt__p_view_mouse_event_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_TPopupMenu,
  _swigc__p_TWidget,
  _swigc__p_UI_Hooks,
  _swigc__p_View_Hooks,
  _swigc__p___qtimer_t,
  _swigc__p__qstringT_char_t,
  _swigc__p__qstringT_unsigned_char_t,
  _swigc__p__qstringT_unsigned_short_t,
  _swigc__p_action_ctx_base_t,
  _swigc__p_action_desc_t,
  _swigc__p_action_handler_t,
  _swigc__p_action_state_t,
  _swigc__p_addon_info_t,
  _swigc__p_biggest_t,
  _swigc__p_bool,
  _swigc__p_bytevec_t,
  _swigc__p_char,
  _swigc__p_chooser_base_t,
  _swigc__p_chooser_item_attrs_t,
  _swigc__p_const_iterator,
  _swigc__p_disasm_line_t,
  _swigc__p_enumplace_t,
  _swigc__p_f_p_TWidget_int_int_p_void__bool,
  _swigc__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void,
  _swigc__p_f_p_TWidget_int_p_void__bool,
  _swigc__p_f_p_TWidget_p_lochist_entry_t_p_void__void,
  _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void,
  _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int,
  _swigc__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void,
  _swigc__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int,
  _swigc__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int,
  _swigc__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool,
  _swigc__p_f_p_TWidget_p_void__int,
  _swigc__p_f_p_TWidget_p_void__void,
  _swigc__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t,
  _swigc__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t,
  _swigc__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool,
  _swigc__p_f_p_q_const__char_p_void__void,
  _swigc__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int,
  _swigc__p_f_p_q_const__char_v_______int,
  _swigc__p_f_p_void_int_va_list__ssize_t,
  _swigc__p_f_r_q_const__insn_t_p_int_p_int__bool,
  _swigc__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool,
  _swigc__p_f_unsigned_int__bool,
  _swigc__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int,
  _swigc__p_f_unsigned_int_p_void__bool,
  _swigc__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int,
  _swigc__p_f_unsigned_int_unsigned_int__unsigned_int,
  _swigc__p_func_t,
  _swigc__p_hexplace_t,
  _swigc__p_idaplace_t,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_jobj_wrapper_t,
  _swigc__p_linput_t,
  _swigc__p_location_t,
  _swigc__p_locchange_md_t,
  _swigc__p_lochist_entry_t,
  _swigc__p_long_long,
  _swigc__p_member_t,
  _swigc__p_p_char,
  _swigc__p_p_linput_t,
  _swigc__p_p_load_info_t,
  _swigc__p_place_t,
  _swigc__p_plugin_info_t,
  _swigc__p_plugin_t,
  _swigc__p_qvectorT__qstringT_unsigned_short_t_t,
  _swigc__p_qvectorT_argloc_t_t,
  _swigc__p_qvectorT_bool_t,
  _swigc__p_qvectorT_channel_redir_t_t,
  _swigc__p_qvectorT_compiled_binpat_t_t,
  _swigc__p_qvectorT_disasm_line_t_t,
  _swigc__p_qvectorT_funcarg_t_t,
  _swigc__p_qvectorT_int_t,
  _swigc__p_qvectorT_range_t_t,
  _swigc__p_qvectorT_rangeset_t_const_p_t,
  _swigc__p_qvectorT_rangeset_t_t,
  _swigc__p_qvectorT_refinfo_desc_t_t,
  _swigc__p_qvectorT_simd_info_t_t,
  _swigc__p_qvectorT_size_t_t,
  _swigc__p_qvectorT_tinfo_t_t,
  _swigc__p_qvectorT_type_attr_t_t,
  _swigc__p_qvectorT_udt_member_t_t,
  _swigc__p_qvectorT_unsigned_char_t,
  _swigc__p_qvectorT_unsigned_int_t,
  _swigc__p_rangevec_t,
  _swigc__p_relobj_t,
  _swigc__p_reloc_info_t,
  _swigc__p_renderer_pos_info_t,
  _swigc__p_segm_move_infos_t,
  _swigc__p_segment_t,
  _swigc__p_selection_item_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_simpleline_place_t,
  _swigc__p_simpleline_t,
  _swigc__p_snapshot_t,
  _swigc__p_sreg_range_t,
  _swigc__p_strarray_t,
  _swigc__p_struc_t,
  _swigc__p_structplace_t,
  _swigc__p_strwinsetup_t,
  _swigc__p_textctrl_info_t,
  _swigc__p_twinpos_t,
  _swigc__p_ui_requests_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_view_mouse_event_location_t,
  _swigc__p_view_mouse_event_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
#ifndef Py_LIMITED_API  
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
#else
    PyType_Slot slots[] = {
      {
        Py_tp_dealloc, (void*)swig_varlink_dealloc 
      },
      {
        Py_tp_getattr, (void*)swig_varlink_getattr 
      },
      {
        Py_tp_setattr, (void*)swig_varlink_setattr 
      },
      {
        Py_tp_repr, (void*)swig_varlink_repr 
      },
      {
        Py_tp_str, (void*)swig_varlink_str 
      },
      {
        Py_tp_doc, (void*)varlink__doc__ 
      },
      {
        0, NULL 
      }
    };
    PyType_Spec spec = {
      
    };
    spec.name = "swigvarlink";
    spec.basicsize = sizeof(swig_varlinkobject);
    spec.flags = Py_TPFLAGS_DEFAULT;
    spec.slots = slots;
    return (PyTypeObject*)PyType_FromSpec(&spec);
#endif  
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
#ifndef Py_LIMITED_API
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#endif // Py_LIMITED_API
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __NT__
#pragma warning(disable: 4883)
#endif // __NT__
#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "REG_HINTS_MARKER",SWIG_FromCharPtr("\1\377"));
  SWIG_Python_SetConstant(d, "SRCDBG_HINTS_MARKER",SWIG_FromCharPtr("\1\376"));
  SWIG_Python_SetConstant(d, "IWID_EXPORTS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 0))));
  SWIG_Python_SetConstant(d, "IWID_IMPORTS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 1))));
  SWIG_Python_SetConstant(d, "IWID_NAMES",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 2))));
  SWIG_Python_SetConstant(d, "IWID_FUNCS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 3))));
  SWIG_Python_SetConstant(d, "IWID_STRINGS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 4))));
  SWIG_Python_SetConstant(d, "IWID_SEGS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 5))));
  SWIG_Python_SetConstant(d, "IWID_SEGREGS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 6))));
  SWIG_Python_SetConstant(d, "IWID_SELS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 7))));
  SWIG_Python_SetConstant(d, "IWID_SIGNS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 8))));
  SWIG_Python_SetConstant(d, "IWID_TILS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 9))));
  SWIG_Python_SetConstant(d, "IWID_LOCTYPS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 10))));
  SWIG_Python_SetConstant(d, "IWID_CALLS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 11))));
  SWIG_Python_SetConstant(d, "IWID_PROBS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 12))));
  SWIG_Python_SetConstant(d, "IWID_BPTS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 13))));
  SWIG_Python_SetConstant(d, "IWID_THREADS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 14))));
  SWIG_Python_SetConstant(d, "IWID_MODULES",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 15))));
  SWIG_Python_SetConstant(d, "IWID_TRACE",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 16))));
  SWIG_Python_SetConstant(d, "IWID_STACK",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 17))));
  SWIG_Python_SetConstant(d, "IWID_XREFS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 18))));
  SWIG_Python_SetConstant(d, "IWID_SEARCHS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 19))));
  SWIG_Python_SetConstant(d, "IWID_FRAME",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 25))));
  SWIG_Python_SetConstant(d, "IWID_NAVBAND",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 26))));
  SWIG_Python_SetConstant(d, "IWID_ENUMS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 27))));
  SWIG_Python_SetConstant(d, "IWID_STRUCTS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 28))));
  SWIG_Python_SetConstant(d, "IWID_DISASMS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 29))));
  SWIG_Python_SetConstant(d, "IWID_DUMPS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 30))));
  SWIG_Python_SetConstant(d, "IWID_NOTEPAD",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 31))));
  SWIG_Python_SetConstant(d, "IWID_OUTPUT",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 32))));
  SWIG_Python_SetConstant(d, "IWID_CLI",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 33))));
  SWIG_Python_SetConstant(d, "IWID_WATCH",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 34))));
  SWIG_Python_SetConstant(d, "IWID_LOCALS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 35))));
  SWIG_Python_SetConstant(d, "IWID_STKVIEW",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 36))));
  SWIG_Python_SetConstant(d, "IWID_CHOOSER",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 37))));
  SWIG_Python_SetConstant(d, "IWID_SHORTCUTCSR",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 38))));
  SWIG_Python_SetConstant(d, "IWID_SHORTCUTWIN",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 39))));
  SWIG_Python_SetConstant(d, "IWID_CPUREGS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 40))));
  SWIG_Python_SetConstant(d, "IWID_SO_STRUCTS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 41))));
  SWIG_Python_SetConstant(d, "IWID_SO_OFFSETS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 42))));
  SWIG_Python_SetConstant(d, "IWID_CMDPALCSR",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 43))));
  SWIG_Python_SetConstant(d, "IWID_CMDPALWIN",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 44))));
  SWIG_Python_SetConstant(d, "IWID_SNIPPETS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 45))));
  SWIG_Python_SetConstant(d, "IWID_CUSTVIEW",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 46))));
  SWIG_Python_SetConstant(d, "IWID_ADDRWATCH",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 47))));
  SWIG_Python_SetConstant(d, "IWID_PSEUDOCODE",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 48))));
  SWIG_Python_SetConstant(d, "IWID_CALLS_CALLERS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 49))));
  SWIG_Python_SetConstant(d, "IWID_CALLS_CALLEES",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 50))));
  SWIG_Python_SetConstant(d, "IWID_MDVIEWCSR",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >((1ULL << 51))));
  SWIG_Python_SetConstant(d, "IWID_IDAMEMOS",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(((1ULL << 29)|(1ULL << 30)))));
  SWIG_Python_SetConstant(d, "CHOOSER_NOMAINMENU",SWIG_FromCharPtr("NOMAINMENU\n"));
  SWIG_Python_SetConstant(d, "CHOOSER_NOSTATUSBAR",SWIG_FromCharPtr("NOSTATUSBAR\n"));
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  Py_DECREF(globals);
  SWIG_addvarlink(globals, "batch", Swig_var_batch_get, Swig_var_batch_set);
  SWIG_addvarlink(globals, "errorexit", Swig_var_errorexit_get, Swig_var_errorexit_set);
  
  //<init(py_kernwin_askform)>
  //</init(py_kernwin_askform)>
  
  
  /* Initialize threading */

/* 'SetConstant' replacement */

static const ida_local struct ci_t
{
    const char *name;
    int  val;
} cis[352] = {
	{ "mbox_internal", static_cast< int >(mbox_internal)},
	{ "mbox_info", static_cast< int >(mbox_info)},
	{ "mbox_warning", static_cast< int >(mbox_warning)},
	{ "mbox_error", static_cast< int >(mbox_error)},
	{ "mbox_nomem", static_cast< int >(mbox_nomem)},
	{ "mbox_feedback", static_cast< int >(mbox_feedback)},
	{ "mbox_readerror", static_cast< int >(mbox_readerror)},
	{ "mbox_writeerror", static_cast< int >(mbox_writeerror)},
	{ "mbox_filestruct", static_cast< int >(mbox_filestruct)},
	{ "mbox_wait", static_cast< int >(mbox_wait)},
	{ "mbox_hide", static_cast< int >(mbox_hide)},
	{ "mbox_replace", static_cast< int >(mbox_replace)},
	{ "chtype_generic", static_cast< int >(chtype_generic)},
	{ "chtype_idasgn", static_cast< int >(chtype_idasgn)},
	{ "chtype_entry", static_cast< int >(chtype_entry)},
	{ "chtype_name", static_cast< int >(chtype_name)},
	{ "chtype_stkvar_xref", static_cast< int >(chtype_stkvar_xref)},
	{ "chtype_xref", static_cast< int >(chtype_xref)},
	{ "chtype_enum", static_cast< int >(chtype_enum)},
	{ "chtype_enum_by_value", static_cast< int >(chtype_enum_by_value)},
	{ "chtype_func", static_cast< int >(chtype_func)},
	{ "chtype_segm", static_cast< int >(chtype_segm)},
	{ "chtype_struc", static_cast< int >(chtype_struc)},
	{ "chtype_strpath", static_cast< int >(chtype_strpath)},
	{ "chtype_idatil", static_cast< int >(chtype_idatil)},
	{ "chtype_enum_by_value_and_size", static_cast< int >(chtype_enum_by_value_and_size)},
	{ "chtype_srcp", static_cast< int >(chtype_srcp)},
	{ "beep_default", static_cast< int >(beep_default)},
	{ "TCCRT_INVALID", static_cast< int >(TCCRT_INVALID)},
	{ "TCCRT_FLAT", static_cast< int >(TCCRT_FLAT)},
	{ "TCCRT_GRAPH", static_cast< int >(TCCRT_GRAPH)},
	{ "TCCRT_PROXIMITY", static_cast< int >(TCCRT_PROXIMITY)},
	{ "TCCPT_INVALID", static_cast< int >(TCCPT_INVALID)},
	{ "TCCPT_PLACE", static_cast< int >(TCCPT_PLACE)},
	{ "TCCPT_SIMPLELINE_PLACE", static_cast< int >(TCCPT_SIMPLELINE_PLACE)},
	{ "TCCPT_IDAPLACE", static_cast< int >(TCCPT_IDAPLACE)},
	{ "TCCPT_ENUMPLACE", static_cast< int >(TCCPT_ENUMPLACE)},
	{ "TCCPT_STRUCTPLACE", static_cast< int >(TCCPT_STRUCTPLACE)},
	{ "VME_UNKNOWN", static_cast< int >(VME_UNKNOWN)},
	{ "VME_LEFT_BUTTON", static_cast< int >(VME_LEFT_BUTTON)},
	{ "VME_RIGHT_BUTTON", static_cast< int >(VME_RIGHT_BUTTON)},
	{ "VME_MID_BUTTON", static_cast< int >(VME_MID_BUTTON)},
	{ "SETMENU_POSMASK", static_cast< int >(0x3)},
	{ "SETMENU_INS", static_cast< int >(0x0)},
	{ "SETMENU_APP", static_cast< int >(0x1)},
	{ "SETMENU_FIRST", static_cast< int >(0x2)},
	{ "CREATETB_ADV", static_cast< int >(0x1)},
	{ "HIF_IDENTIFIER", static_cast< int >(0x1)},
	{ "HIF_REGISTER", static_cast< int >(0x2)},
	{ "HIF_LOCKED", static_cast< int >(0x4)},
	{ "REG_HINTS_MARKER_LEN", static_cast< int >(2)},
	{ "SRCDBG_HINTS_MARKER_LEN", static_cast< int >(2)},
	{ "DEFAULT_PLACE_LNNUM", static_cast< int >(-1)},
	{ "PCF_EA_CAPABLE", static_cast< int >(0x00000001)},
	{ "BWN_UNKNOWN", static_cast< int >(-1)},
	{ "BWN_EXPORTS", static_cast< int >(0)},
	{ "BWN_IMPORTS", static_cast< int >(1)},
	{ "BWN_NAMES", static_cast< int >(2)},
	{ "BWN_FUNCS", static_cast< int >(3)},
	{ "BWN_STRINGS", static_cast< int >(4)},
	{ "BWN_SEGS", static_cast< int >(5)},
	{ "BWN_SEGREGS", static_cast< int >(6)},
	{ "BWN_SELS", static_cast< int >(7)},
	{ "BWN_SIGNS", static_cast< int >(8)},
	{ "BWN_TILS", static_cast< int >(9)},
	{ "BWN_LOCTYPS", static_cast< int >(10)},
	{ "BWN_CALLS", static_cast< int >(11)},
	{ "BWN_PROBS", static_cast< int >(12)},
	{ "BWN_BPTS", static_cast< int >(13)},
	{ "BWN_THREADS", static_cast< int >(14)},
	{ "BWN_MODULES", static_cast< int >(15)},
	{ "BWN_TRACE", static_cast< int >(16)},
	{ "BWN_CALL_STACK", static_cast< int >(17)},
	{ "BWN_XREFS", static_cast< int >(18)},
	{ "BWN_SEARCH", static_cast< int >(19)},
	{ "BWN_FRAME", static_cast< int >(25)},
	{ "BWN_NAVBAND", static_cast< int >(26)},
	{ "BWN_ENUMS", static_cast< int >(27)},
	{ "BWN_STRUCTS", static_cast< int >(28)},
	{ "BWN_DISASM", static_cast< int >(29)},
	{ "BWN_DUMP", static_cast< int >(30)},
	{ "BWN_NOTEPAD", static_cast< int >(31)},
	{ "BWN_OUTPUT", static_cast< int >(32)},
	{ "BWN_CLI", static_cast< int >(33)},
	{ "BWN_WATCH", static_cast< int >(34)},
	{ "BWN_LOCALS", static_cast< int >(35)},
	{ "BWN_STKVIEW", static_cast< int >(36)},
	{ "BWN_CHOOSER", static_cast< int >(37)},
	{ "BWN_SHORTCUTCSR", static_cast< int >(38)},
	{ "BWN_SHORTCUTWIN", static_cast< int >(39)},
	{ "BWN_CPUREGS", static_cast< int >(40)},
	{ "BWN_SO_STRUCTS", static_cast< int >(41)},
	{ "BWN_SO_OFFSETS", static_cast< int >(42)},
	{ "BWN_CMDPALCSR", static_cast< int >(43)},
	{ "BWN_CMDPALWIN", static_cast< int >(44)},
	{ "BWN_SNIPPETS", static_cast< int >(45)},
	{ "BWN_CUSTVIEW", static_cast< int >(46)},
	{ "BWN_ADDRWATCH", static_cast< int >(47)},
	{ "BWN_PSEUDOCODE", static_cast< int >(48)},
	{ "BWN_CALLS_CALLERS", static_cast< int >(49)},
	{ "BWN_CALLS_CALLEES", static_cast< int >(50)},
	{ "BWN_MDVIEWCSR", static_cast< int >(51)},
	{ "BWN_STACK", static_cast< int >(17)},
	{ "BWN_DISASMS", static_cast< int >(29)},
	{ "BWN_DUMPS", static_cast< int >(30)},
	{ "BWN_SEARCHS", static_cast< int >(19)},
	{ "IWID_ALL", static_cast< int >(0xFFFFFFFFFFFFFFFF)},
	{ "CHITEM_BOLD", static_cast< int >(0x0001)},
	{ "CHITEM_ITALIC", static_cast< int >(0x0002)},
	{ "CHITEM_UNDER", static_cast< int >(0x0004)},
	{ "CHITEM_STRIKE", static_cast< int >(0x0008)},
	{ "CHITEM_GRAY", static_cast< int >(0x0010)},
	{ "CHOOSER_NO_SELECTION", static_cast< int >(0x01)},
	{ "CHOOSER_MULTI_SELECTION", static_cast< int >(0x02)},
	{ "CHOOSER_POPUP_MENU", static_cast< int >(0x04)},
	{ "CHOOSER_MENU_EDIT", static_cast< int >(0)},
	{ "CHOOSER_MENU_JUMP", static_cast< int >(1)},
	{ "CHOOSER_MENU_SEARCH", static_cast< int >(2)},
	{ "nat_lib", static_cast< int >(nat_lib)},
	{ "nat_fun", static_cast< int >(nat_fun)},
	{ "nat_cod", static_cast< int >(nat_cod)},
	{ "nat_dat", static_cast< int >(nat_dat)},
	{ "nat_und", static_cast< int >(nat_und)},
	{ "nat_ext", static_cast< int >(nat_ext)},
	{ "nat_err", static_cast< int >(nat_err)},
	{ "nat_gap", static_cast< int >(nat_gap)},
	{ "nat_cur", static_cast< int >(nat_cur)},
	{ "nat_auto", static_cast< int >(nat_auto)},
	{ "nat_lum", static_cast< int >(nat_lum)},
	{ "nat_last", static_cast< int >(nat_last)},
	{ "CVH_USERDATA", static_cast< int >(CVH_USERDATA)},
	{ "CVH_KEYDOWN", static_cast< int >(CVH_KEYDOWN)},
	{ "CVH_POPUP", static_cast< int >(CVH_POPUP)},
	{ "CVH_DBLCLICK", static_cast< int >(CVH_DBLCLICK)},
	{ "CVH_CURPOS", static_cast< int >(CVH_CURPOS)},
	{ "CVH_CLOSE", static_cast< int >(CVH_CLOSE)},
	{ "CVH_CLICK", static_cast< int >(CVH_CLICK)},
	{ "CVH_QT_AWARE", static_cast< int >(CVH_QT_AWARE)},
	{ "CVH_HELP", static_cast< int >(CVH_HELP)},
	{ "CVH_MOUSEMOVE", static_cast< int >(CVH_MOUSEMOVE)},
	{ "CDVH_USERDATA", static_cast< int >(CDVH_USERDATA)},
	{ "CDVH_SRCVIEW", static_cast< int >(CDVH_SRCVIEW)},
	{ "CDVH_LINES_CLICK", static_cast< int >(CDVH_LINES_CLICK)},
	{ "CDVH_LINES_DBLCLICK", static_cast< int >(CDVH_LINES_DBLCLICK)},
	{ "CDVH_LINES_POPUP", static_cast< int >(CDVH_LINES_POPUP)},
	{ "CDVH_LINES_DRAWICON", static_cast< int >(CDVH_LINES_DRAWICON)},
	{ "CDVH_LINES_LINENUM", static_cast< int >(CDVH_LINES_LINENUM)},
	{ "CDVH_LINES_ICONMARGIN", static_cast< int >(CDVH_LINES_ICONMARGIN)},
	{ "CDVH_LINES_RADIX", static_cast< int >(CDVH_LINES_RADIX)},
	{ "CDVH_LINES_ALIGNMENT", static_cast< int >(CDVH_LINES_ALIGNMENT)},
	{ "VES_SHIFT", static_cast< int >((1 << 0))},
	{ "VES_ALT", static_cast< int >((1 << 1))},
	{ "VES_CTRL", static_cast< int >((1 << 2))},
	{ "VES_MOUSE_LEFT", static_cast< int >((1 << 3))},
	{ "VES_MOUSE_RIGHT", static_cast< int >((1 << 4))},
	{ "VES_MOUSE_MIDDLE", static_cast< int >((1 << 5))},
	{ "VES_META", static_cast< int >((1 << 7))},
	{ "msg_activated", static_cast< int >(msg_activated)},
	{ "msg_deactivated", static_cast< int >(msg_deactivated)},
	{ "msg_click", static_cast< int >(msg_click)},
	{ "msg_dblclick", static_cast< int >(msg_dblclick)},
	{ "msg_closed", static_cast< int >(msg_closed)},
	{ "msg_keydown", static_cast< int >(msg_keydown)},
	{ "view_activated", static_cast< int >(view_activated)},
	{ "view_deactivated", static_cast< int >(view_deactivated)},
	{ "view_keydown", static_cast< int >(view_keydown)},
	{ "view_click", static_cast< int >(view_click)},
	{ "view_dblclick", static_cast< int >(view_dblclick)},
	{ "view_curpos", static_cast< int >(view_curpos)},
	{ "view_created", static_cast< int >(view_created)},
	{ "view_close", static_cast< int >(view_close)},
	{ "view_switched", static_cast< int >(view_switched)},
	{ "view_mouse_over", static_cast< int >(view_mouse_over)},
	{ "view_loc_changed", static_cast< int >(view_loc_changed)},
	{ "view_mouse_moved", static_cast< int >(view_mouse_moved)},
	{ "lcr_unknown", static_cast< int >(lcr_unknown)},
	{ "lcr_goto", static_cast< int >(lcr_goto)},
	{ "lcr_user_switch", static_cast< int >(lcr_user_switch)},
	{ "lcr_auto_switch", static_cast< int >(lcr_auto_switch)},
	{ "lcr_jump", static_cast< int >(lcr_jump)},
	{ "lcr_navigate", static_cast< int >(lcr_navigate)},
	{ "lcr_scroll", static_cast< int >(lcr_scroll)},
	{ "lcr_internal", static_cast< int >(lcr_internal)},
	{ "LCMD_SYNC", static_cast< int >((1 << 0))},
	{ "MFF_FAST", static_cast< int >(0x0000)},
	{ "MFF_READ", static_cast< int >(0x0001)},
	{ "MFF_WRITE", static_cast< int >(0x0002)},
	{ "MFF_NOWAIT", static_cast< int >(0x0004)},
	{ "UIJMP_ACTIVATE", static_cast< int >(0x0001)},
	{ "UIJMP_DONTPUSH", static_cast< int >(0x0002)},
	{ "UIJMP_IDAVIEW", static_cast< int >(0x0004)},
	{ "ACF_HAS_SELECTION", static_cast< int >(1 << 0)},
	{ "ACF_XTRN_EA", static_cast< int >(1 << 1)},
	{ "AHF_VERSION", static_cast< int >(1)},
	{ "AHF_VERSION_MASK", static_cast< int >(0xFF)},
	{ "AST_ENABLE_ALWAYS", static_cast< int >(AST_ENABLE_ALWAYS)},
	{ "AST_ENABLE_FOR_IDB", static_cast< int >(AST_ENABLE_FOR_IDB)},
	{ "AST_ENABLE_FOR_WIDGET", static_cast< int >(AST_ENABLE_FOR_WIDGET)},
	{ "AST_ENABLE", static_cast< int >(AST_ENABLE)},
	{ "AST_DISABLE_ALWAYS", static_cast< int >(AST_DISABLE_ALWAYS)},
	{ "AST_DISABLE_FOR_IDB", static_cast< int >(AST_DISABLE_FOR_IDB)},
	{ "AST_DISABLE_FOR_WIDGET", static_cast< int >(AST_DISABLE_FOR_WIDGET)},
	{ "AST_DISABLE", static_cast< int >(AST_DISABLE)},
	{ "ADF_OWN_HANDLER", static_cast< int >(0x1)},
	{ "AA_NONE", static_cast< int >(AA_NONE)},
	{ "AA_LABEL", static_cast< int >(AA_LABEL)},
	{ "AA_SHORTCUT", static_cast< int >(AA_SHORTCUT)},
	{ "AA_TOOLTIP", static_cast< int >(AA_TOOLTIP)},
	{ "AA_ICON", static_cast< int >(AA_ICON)},
	{ "AA_STATE", static_cast< int >(AA_STATE)},
	{ "AA_CHECKABLE", static_cast< int >(AA_CHECKABLE)},
	{ "AA_CHECKED", static_cast< int >(AA_CHECKED)},
	{ "AA_VISIBILITY", static_cast< int >(AA_VISIBILITY)},
	{ "ASKBTN_YES", static_cast< int >(1)},
	{ "ASKBTN_NO", static_cast< int >(0)},
	{ "ASKBTN_CANCEL", static_cast< int >(-1)},
	{ "ASKBTN_BTN1", static_cast< int >(1)},
	{ "ASKBTN_BTN2", static_cast< int >(0)},
	{ "ASKBTN_BTN3", static_cast< int >(-1)},
	{ "HIST_SEG", static_cast< int >(1)},
	{ "HIST_CMT", static_cast< int >(2)},
	{ "HIST_SRCH", static_cast< int >(3)},
	{ "HIST_IDENT", static_cast< int >(4)},
	{ "HIST_FILE", static_cast< int >(5)},
	{ "HIST_TYPE", static_cast< int >(6)},
	{ "HIST_CMD", static_cast< int >(7)},
	{ "HIST_DIR", static_cast< int >(8)},
	{ "CLNL_RTRIM", static_cast< int >((1 << 0))},
	{ "CLNL_LTRIM", static_cast< int >((1 << 1))},
	{ "CLNL_FINDCMT", static_cast< int >((1 << 2))},
	{ "CLNL_TRIM", static_cast< int >(((1 << 0)|(1 << 1)))},
	{ "IK_CANCEL", static_cast< int >(0x03)},
	{ "IK_BACK", static_cast< int >(0x08)},
	{ "IK_TAB", static_cast< int >(0x09)},
	{ "IK_CLEAR", static_cast< int >(0x0C)},
	{ "IK_RETURN", static_cast< int >(0x0D)},
	{ "IK_SHIFT", static_cast< int >(0x10)},
	{ "IK_CONTROL", static_cast< int >(0x11)},
	{ "IK_MENU", static_cast< int >(0x12)},
	{ "IK_PAUSE", static_cast< int >(0x13)},
	{ "IK_CAPITAL", static_cast< int >(0x14)},
	{ "IK_KANA", static_cast< int >(0x15)},
	{ "IK_ESCAPE", static_cast< int >(0x1B)},
	{ "IK_MODECHANGE", static_cast< int >(0x1F)},
	{ "IK_SPACE", static_cast< int >(0x20)},
	{ "IK_PRIOR", static_cast< int >(0x21)},
	{ "IK_NEXT", static_cast< int >(0x22)},
	{ "IK_END", static_cast< int >(0x23)},
	{ "IK_HOME", static_cast< int >(0x24)},
	{ "IK_LEFT", static_cast< int >(0x25)},
	{ "IK_UP", static_cast< int >(0x26)},
	{ "IK_RIGHT", static_cast< int >(0x27)},
	{ "IK_DOWN", static_cast< int >(0x28)},
	{ "IK_SELECT", static_cast< int >(0x29)},
	{ "IK_PRINT", static_cast< int >(0x2A)},
	{ "IK_EXECUTE", static_cast< int >(0x2B)},
	{ "IK_SNAPSHOT", static_cast< int >(0x2C)},
	{ "IK_INSERT", static_cast< int >(0x2D)},
	{ "IK_DELETE", static_cast< int >(0x2E)},
	{ "IK_HELP", static_cast< int >(0x2F)},
	{ "IK_LWIN", static_cast< int >(0x5B)},
	{ "IK_RWIN", static_cast< int >(0x5C)},
	{ "IK_APPS", static_cast< int >(0x5D)},
	{ "IK_SLEEP", static_cast< int >(0x5F)},
	{ "IK_NUMPAD0", static_cast< int >(0x60)},
	{ "IK_NUMPAD1", static_cast< int >(0x61)},
	{ "IK_NUMPAD2", static_cast< int >(0x62)},
	{ "IK_NUMPAD3", static_cast< int >(0x63)},
	{ "IK_NUMPAD4", static_cast< int >(0x64)},
	{ "IK_NUMPAD5", static_cast< int >(0x65)},
	{ "IK_NUMPAD6", static_cast< int >(0x66)},
	{ "IK_NUMPAD7", static_cast< int >(0x67)},
	{ "IK_NUMPAD8", static_cast< int >(0x68)},
	{ "IK_NUMPAD9", static_cast< int >(0x69)},
	{ "IK_MULTIPLY", static_cast< int >(0x6A)},
	{ "IK_ADD", static_cast< int >(0x6B)},
	{ "IK_SEPARATOR", static_cast< int >(0x6C)},
	{ "IK_SUBTRACT", static_cast< int >(0x6D)},
	{ "IK_DECIMAL", static_cast< int >(0x6E)},
	{ "IK_DIVIDE", static_cast< int >(0x6F)},
	{ "IK_F1", static_cast< int >(0x70)},
	{ "IK_F2", static_cast< int >(0x71)},
	{ "IK_F3", static_cast< int >(0x72)},
	{ "IK_F4", static_cast< int >(0x73)},
	{ "IK_F5", static_cast< int >(0x74)},
	{ "IK_F6", static_cast< int >(0x75)},
	{ "IK_F7", static_cast< int >(0x76)},
	{ "IK_F8", static_cast< int >(0x77)},
	{ "IK_F9", static_cast< int >(0x78)},
	{ "IK_F10", static_cast< int >(0x79)},
	{ "IK_F11", static_cast< int >(0x7A)},
	{ "IK_F12", static_cast< int >(0x7B)},
	{ "IK_F13", static_cast< int >(0x7C)},
	{ "IK_F14", static_cast< int >(0x7D)},
	{ "IK_F15", static_cast< int >(0x7E)},
	{ "IK_F16", static_cast< int >(0x7F)},
	{ "IK_F17", static_cast< int >(0x80)},
	{ "IK_F18", static_cast< int >(0x81)},
	{ "IK_F19", static_cast< int >(0x82)},
	{ "IK_F20", static_cast< int >(0x83)},
	{ "IK_F21", static_cast< int >(0x84)},
	{ "IK_F22", static_cast< int >(0x85)},
	{ "IK_F23", static_cast< int >(0x86)},
	{ "IK_F24", static_cast< int >(0x87)},
	{ "IK_NUMLOCK", static_cast< int >(0x90)},
	{ "IK_SCROLL", static_cast< int >(0x91)},
	{ "IK_OEM_FJ_MASSHOU", static_cast< int >(0x93)},
	{ "IK_OEM_FJ_TOUROKU", static_cast< int >(0x94)},
	{ "IK_LSHIFT", static_cast< int >(0xA0)},
	{ "IK_RSHIFT", static_cast< int >(0xA1)},
	{ "IK_LCONTROL", static_cast< int >(0xA2)},
	{ "IK_RCONTROL", static_cast< int >(0xA3)},
	{ "IK_LMENU", static_cast< int >(0xA4)},
	{ "IK_RMENU", static_cast< int >(0xA5)},
	{ "IK_BROWSER_BACK", static_cast< int >(0xA6)},
	{ "IK_BROWSER_FORWARD", static_cast< int >(0xA7)},
	{ "IK_BROWSER_REFRESH", static_cast< int >(0xA8)},
	{ "IK_BROWSER_STOP", static_cast< int >(0xA9)},
	{ "IK_BROWSER_SEARCH", static_cast< int >(0xAA)},
	{ "IK_BROWSER_FAVORITES", static_cast< int >(0xAB)},
	{ "IK_BROWSER_HOME", static_cast< int >(0xAC)},
	{ "IK_VOLUME_MUTE", static_cast< int >(0xAD)},
	{ "IK_VOLUME_DOWN", static_cast< int >(0xAE)},
	{ "IK_VOLUME_UP", static_cast< int >(0xAF)},
	{ "IK_MEDIA_NEXT_TRACK", static_cast< int >(0xB0)},
	{ "IK_MEDIA_PREV_TRACK", static_cast< int >(0xB1)},
	{ "IK_MEDIA_STOP", static_cast< int >(0xB2)},
	{ "IK_MEDIA_PLAY_PAUSE", static_cast< int >(0xB3)},
	{ "IK_LAUNCH_MAIL", static_cast< int >(0xB4)},
	{ "IK_LAUNCH_MEDIA_SELECT", static_cast< int >(0xB5)},
	{ "IK_LAUNCH_APP1", static_cast< int >(0xB6)},
	{ "IK_LAUNCH_APP2", static_cast< int >(0xB7)},
	{ "IK_OEM_1", static_cast< int >(0xBA)},
	{ "IK_OEM_PLUS", static_cast< int >(0xBB)},
	{ "IK_OEM_COMMA", static_cast< int >(0xBC)},
	{ "IK_OEM_MINUS", static_cast< int >(0xBD)},
	{ "IK_OEM_PERIOD", static_cast< int >(0xBE)},
	{ "IK_OEM_2", static_cast< int >(0xBF)},
	{ "IK_OEM_3", static_cast< int >(0xC0)},
	{ "IK_OEM_4", static_cast< int >(0xDB)},
	{ "IK_OEM_5", static_cast< int >(0xDC)},
	{ "IK_OEM_6", static_cast< int >(0xDD)},
	{ "IK_OEM_7", static_cast< int >(0xDE)},
	{ "IK_OEM_102", static_cast< int >(0xE2)},
	{ "IK_PLAY", static_cast< int >(0xFA)},
	{ "IK_ZOOM", static_cast< int >(0xFB)},
	{ "IK_OEM_CLEAR", static_cast< int >(0xFE)},
	{ "CB_INIT", static_cast< int >(CB_INIT)},
	{ "CB_YES", static_cast< int >(CB_YES)},
	{ "CB_CLOSE", static_cast< int >(CB_CLOSE)},
	{ "CB_INVISIBLE", static_cast< int >(CB_INVISIBLE)},
	{ "CB_DESTROYING", static_cast< int >(CB_DESTROYING)},

};

for ( size_t _cidx = 0; _cidx < qnumber(cis); ++_cidx )
{
  const ci_t &ci = cis[_cidx];
  PyObject *o = SWIG_From_int(static_cast< int >(ci.val));
  SWIG_Python_SetConstant(d, ci.name, o);
}
  SWIG_PYTHON_INITIALIZE_THREADS;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

