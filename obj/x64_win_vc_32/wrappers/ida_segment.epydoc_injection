

ida_segment.ADDSEG_FILLGAP
"""
fill gap between new segment and previous one. i.e. if such a gap
exists, and this gap is less than 64K, then fill the gap by extending
the previous segment and adding .align directive to it. This way we
avoid gaps between segments. too many gaps lead to a virtual array
failure. it can not hold more than ~1000 gaps.
"""

ida_segment.ADDSEG_IDBENC
"""
non-ASCII bytes will be decoded accordingly

'name' and 'sclass' are given in the IDB encoding;
"""

ida_segment.ADDSEG_NOAA
"""
do not mark new segment for auto-analysis
"""

ida_segment.ADDSEG_NOSREG
"""
(undefine all default segment registers)

set all default segment register values to 'BADSEL'
"""

ida_segment.ADDSEG_NOTRUNC
"""
destroy/truncate old segments instead.

don't truncate the new segment at the beginning of the next segment if
they overlap.
"""

ida_segment.ADDSEG_OR_DIE
"""
 'qexit()' if can't add a segment
"""

ida_segment.ADDSEG_QUIET
"""
silent mode, no "Adding segment..." in the messages window
"""

ida_segment.ADDSEG_SPARSE
"""
use sparse storage method for the new segment
"""

ida_segment.CSS_BREAK
"""
memory reading process stopped by user
"""

ida_segment.CSS_NODBG
"""
debugger is not running
"""

ida_segment.CSS_NOMEM
"""
is too big)

not enough memory (might be because the segment
"""

ida_segment.CSS_NORANGE
"""
could not find corresponding memory range
"""

ida_segment.CSS_OK
"""
ok
"""

ida_segment.MAX_GROUPS
"""
max number of segment groups
"""

ida_segment.MAX_SEGM_TRANSLATIONS
"""
max number of segment translations
"""

ida_segment.MFS_NETMAP
"""
valid for 'rebase_program()'

change inf.netdelta if possible (this is faster)
"""

ida_segment.MOVE_SEGM_CHUNK
"""
Too many chunks are defined, can't move.
"""

ida_segment.MOVE_SEGM_IDP
"""
IDP module forbids moving the segment.
"""

ida_segment.MOVE_SEGM_LOADER
"""
The segment has been moved but the loader complained.
"""

ida_segment.MOVE_SEGM_ODD
"""
Can not move segments by an odd number of bytes.
"""

ida_segment.MOVE_SEGM_OK
"""
all ok
"""

ida_segment.MOVE_SEGM_ORPHAN
"""
Orphan bytes hinder segment movement.
"""

ida_segment.MOVE_SEGM_PARAM
"""
The specified segment does not exist.
"""

ida_segment.MOVE_SEGM_ROOM
"""
Not enough free room at the target address.
"""

ida_segment.MSF_FIXONCE
"""
valid for 'rebase_program()' . see 'loader_t::move_segm' .

call loader only once with the special calling method.
"""

ida_segment.MSF_LDKEEP
"""
keep the loader in the memory (optimization)
"""

ida_segment.MSF_NOFIX
"""
don't call the loader to fix relocations
"""

ida_segment.MSF_PRIORITY
"""
valid for 'move_segm()'

loader segments will overwrite any existing debugger segments when
moved.
"""

ida_segment.MSF_SILENT
"""
don't display a "please wait" box on the screen
"""

ida_segment.SEGMOD_KEEP
"""
keep information (code & data, etc)
"""

ida_segment.SEGMOD_KEEP0
"""
flag for internal use, don't set
"""

ida_segment.SEGMOD_KEEPSEL
"""
do not try to delete unused selector
"""

ida_segment.SEGMOD_KILL
"""
disable addresses if segment gets shrinked or deleted
"""

ida_segment.SEGMOD_NOMOVE
"""
(for 'set_segm_start()' )

don't move info from the start of segment to the new start address
"""

ida_segment.SEGMOD_SILENT
"""
be silent
"""

ida_segment.SEGMOD_SPARSE
"""
(for 'set_segm_start()' , 'set_segm_end()' )

use sparse storage if extending the segment
"""

ida_segment.SEGPERM_EXEC
"""
Execute.
"""

ida_segment.SEGPERM_READ
"""
Read.
"""

ida_segment.SEGPERM_WRITE
"""
Write.
"""

ida_segment.SEG_ABSSYM
"""
segment with definitions of absolute symbols
"""

ida_segment.SEG_BSS
"""
uninitialized segment
"""

ida_segment.SEG_CODE
"""
code segment
"""

ida_segment.SEG_COMM
"""
segment with communal definitions
"""

ida_segment.SEG_DATA
"""
data segment
"""

ida_segment.SEG_GRP
"""
group of segments
"""

ida_segment.SEG_IMEM
"""
internal processor memory & sfr (8051)
"""

ida_segment.SEG_IMP
"""
java: implementation segment
"""

ida_segment.SEG_NORM
"""
unknown type, no assumptions
"""

ida_segment.SEG_NULL
"""
zero-length segment
"""

ida_segment.SEG_UNDF
"""
undefined segment type (not used)
"""

ida_segment.SEG_XTRN
"""
no instructions are allowed

segment with 'extern' definitions.
"""

ida_segment.SFL_COMORG
"""
IDP dependent field (IBM PC: if set, ORG directive is not commented
out)
"""

ida_segment.SFL_DEBUG
"""
Is the segment created for the debugger?. Such segments are temporary
and do not have permanent flags.
"""

ida_segment.SFL_HEADER
"""
Header segment (do not create offsets to it in the disassembly)
"""

ida_segment.SFL_HIDDEN
"""
Is the segment hidden?
"""

ida_segment.SFL_HIDETYPE
"""
Hide segment type (do not print it in the listing)
"""

ida_segment.SFL_LOADER
"""
Is the segment created by the loader?
"""

ida_segment.SFL_OBOK
"""
Orgbase is present? (IDP dependent field)
"""

ida_segment.SREG_NUM
"""
Maximum number of segment registers is 16 (see 'segregs.hpp' )
"""

ida_segment.saAbs
"""
Absolute segment.
"""

ida_segment.saGroup
"""
Segment group.
"""

ida_segment.saRel1024Bytes
"""
1024 bytes
"""

ida_segment.saRel128Bytes
"""
128 bytes
"""

ida_segment.saRel2048Bytes
"""
2048 bytes
"""

ida_segment.saRel32Bytes
"""
32 bytes
"""

ida_segment.saRel4K
"""
alignment. It is not supported by LINK.

This value is used by the PharLap OMF for page (4K)
"""

ida_segment.saRel512Bytes
"""
512 bytes
"""

ida_segment.saRel64Bytes
"""
64 bytes
"""

ida_segment.saRelByte
"""
Relocatable, byte aligned.
"""

ida_segment.saRelDble
"""
boundary.

Relocatable, aligned on a double word (4-byte)
"""

ida_segment.saRelPage
"""
Relocatable, aligned on 256-byte boundary.
"""

ida_segment.saRelPara
"""
Relocatable, paragraph (16-byte) aligned.
"""

ida_segment.saRelQword
"""
8 bytes
"""

ida_segment.saRelWord
"""
Relocatable, word (2-byte) aligned.
"""

ida_segment.scCommon
"""
Common. Combine by overlay using maximum size.
"""

ida_segment.scGroup
"""
Segment group.
"""

ida_segment.scPriv
"""
segment.

Private. Do not combine with any other program
"""

ida_segment.scPub
"""
the alignment requirement.

Public. Combine by appending at an offset that meets
"""

ida_segment.scPub2
"""
As defined by Microsoft, same as C=2 (public).
"""

ida_segment.scPub3
"""
As defined by Microsoft, same as C=2 (public).
"""

ida_segment.scStack
"""
byte alignment.

Stack. Combine as for C=2. This combine type forces
"""