# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""IDA Plugin SDK API wrapper: fixup"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_fixup
else:
    import _ida_fixup

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

FIXUP_OFF8 = _ida_fixup.FIXUP_OFF8

FIXUP_OFF16 = _ida_fixup.FIXUP_OFF16

FIXUP_SEG16 = _ida_fixup.FIXUP_SEG16

FIXUP_PTR16 = _ida_fixup.FIXUP_PTR16

FIXUP_OFF32 = _ida_fixup.FIXUP_OFF32

FIXUP_PTR32 = _ida_fixup.FIXUP_PTR32

FIXUP_HI8 = _ida_fixup.FIXUP_HI8

FIXUP_HI16 = _ida_fixup.FIXUP_HI16

FIXUP_LOW8 = _ida_fixup.FIXUP_LOW8

FIXUP_LOW16 = _ida_fixup.FIXUP_LOW16

V695_FIXUP_VHIGH = _ida_fixup.V695_FIXUP_VHIGH

V695_FIXUP_VLOW = _ida_fixup.V695_FIXUP_VLOW

FIXUP_OFF64 = _ida_fixup.FIXUP_OFF64

FIXUP_CUSTOM = _ida_fixup.FIXUP_CUSTOM


def is_fixup_custom(*args):
    r"""is_fixup_custom(type) -> bool"""
    return _ida_fixup.is_fixup_custom(*args)
FIXUPF_REL = _ida_fixup.FIXUPF_REL

FIXUPF_EXTDEF = _ida_fixup.FIXUPF_EXTDEF

FIXUPF_UNUSED = _ida_fixup.FIXUPF_UNUSED

FIXUPF_CREATED = _ida_fixup.FIXUPF_CREATED

FIXUPF_LOADER_MASK = _ida_fixup.FIXUPF_LOADER_MASK

class fixup_data_t(object):
    r"""Proxy of C++ fixup_data_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sel = property(_ida_fixup.fixup_data_t_sel_get, _ida_fixup.fixup_data_t_sel_set, doc=r"""sel""")
    off = property(_ida_fixup.fixup_data_t_off_get, _ida_fixup.fixup_data_t_off_set, doc=r"""off""")
    displacement = property(_ida_fixup.fixup_data_t_displacement_get, _ida_fixup.fixup_data_t_displacement_set, doc=r"""displacement""")

    def __init__(self, *args):
        r"""
        __init__(self) -> fixup_data_t
        __init__(self, type_, flags_=0) -> fixup_data_t
        """
        _ida_fixup.fixup_data_t_swiginit(self, _ida_fixup.new_fixup_data_t(*args))

    def get_type(self, *args):
        r"""get_type(self) -> fixup_type_t"""
        return _ida_fixup.fixup_data_t_get_type(self, *args)

    def set_type(self, *args):
        r"""set_type(self, type_)"""
        return _ida_fixup.fixup_data_t_set_type(self, *args)

    def set_type_and_flags(self, *args):
        r"""set_type_and_flags(self, type_, flags_=0)"""
        return _ida_fixup.fixup_data_t_set_type_and_flags(self, *args)

    def is_custom(self, *args):
        r"""is_custom(self) -> bool"""
        return _ida_fixup.fixup_data_t_is_custom(self, *args)

    def get_flags(self, *args):
        r"""get_flags(self) -> uint32"""
        return _ida_fixup.fixup_data_t_get_flags(self, *args)

    def is_extdef(self, *args):
        r"""is_extdef(self) -> bool"""
        return _ida_fixup.fixup_data_t_is_extdef(self, *args)

    def set_extdef(self, *args):
        r"""set_extdef(self)"""
        return _ida_fixup.fixup_data_t_set_extdef(self, *args)

    def clr_extdef(self, *args):
        r"""clr_extdef(self)"""
        return _ida_fixup.fixup_data_t_clr_extdef(self, *args)

    def is_unused(self, *args):
        r"""is_unused(self) -> bool"""
        return _ida_fixup.fixup_data_t_is_unused(self, *args)

    def set_unused(self, *args):
        r"""set_unused(self)"""
        return _ida_fixup.fixup_data_t_set_unused(self, *args)

    def clr_unused(self, *args):
        r"""clr_unused(self)"""
        return _ida_fixup.fixup_data_t_clr_unused(self, *args)

    def has_base(self, *args):
        r"""has_base(self) -> bool"""
        return _ida_fixup.fixup_data_t_has_base(self, *args)

    def was_created(self, *args):
        r"""was_created(self) -> bool"""
        return _ida_fixup.fixup_data_t_was_created(self, *args)

    def get_base(self, *args):
        r"""get_base(self) -> ea_t"""
        return _ida_fixup.fixup_data_t_get_base(self, *args)

    def set_base(self, *args):
        r"""set_base(self, new_base)"""
        return _ida_fixup.fixup_data_t_set_base(self, *args)

    def set_sel(self, *args):
        r"""set_sel(self, seg)"""
        return _ida_fixup.fixup_data_t_set_sel(self, *args)

    def set_target_sel(self, *args):
        r"""set_target_sel(self)"""
        return _ida_fixup.fixup_data_t_set_target_sel(self, *args)

    def set(self, *args):
        r"""set(self, source)"""
        return _ida_fixup.fixup_data_t_set(self, *args)

    def get(self, *args):
        r"""get(self, source) -> bool"""
        return _ida_fixup.fixup_data_t_get(self, *args)

    def get_handler(self, *args):
        r"""get_handler(self) -> fixup_handler_t const *"""
        return _ida_fixup.fixup_data_t_get_handler(self, *args)

    def get_desc(self, *args):
        r"""get_desc(self, source) -> char const *"""
        return _ida_fixup.fixup_data_t_get_desc(self, *args)

    def calc_size(self, *args):
        r"""calc_size(self) -> int"""
        return _ida_fixup.fixup_data_t_calc_size(self, *args)

    def get_value(self, *args):
        r"""get_value(self, ea) -> uval_t"""
        return _ida_fixup.fixup_data_t_get_value(self, *args)

    def patch_value(self, *args):
        r"""patch_value(self, ea) -> bool"""
        return _ida_fixup.fixup_data_t_patch_value(self, *args)
    __swig_destroy__ = _ida_fixup.delete_fixup_data_t

# Register fixup_data_t in _ida_fixup:
_ida_fixup.fixup_data_t_swigregister(fixup_data_t)


def get_fixup(*args):
    r"""get_fixup(fd, source) -> bool"""
    return _ida_fixup.get_fixup(*args)

def exists_fixup(*args):
    r"""exists_fixup(source) -> bool"""
    return _ida_fixup.exists_fixup(*args)

def set_fixup(*args):
    r"""set_fixup(source, fd)"""
    return _ida_fixup.set_fixup(*args)

def del_fixup(*args):
    r"""del_fixup(source)"""
    return _ida_fixup.del_fixup(*args)

def get_first_fixup_ea(*args):
    r"""get_first_fixup_ea() -> ea_t"""
    return _ida_fixup.get_first_fixup_ea(*args)

def get_next_fixup_ea(*args):
    r"""get_next_fixup_ea(ea) -> ea_t"""
    return _ida_fixup.get_next_fixup_ea(*args)

def get_prev_fixup_ea(*args):
    r"""get_prev_fixup_ea(ea) -> ea_t"""
    return _ida_fixup.get_prev_fixup_ea(*args)

def get_fixup_handler(*args):
    r"""get_fixup_handler(type) -> fixup_handler_t const *"""
    return _ida_fixup.get_fixup_handler(*args)

def get_fixup_value(*args):
    r"""get_fixup_value(ea, type) -> uval_t"""
    return _ida_fixup.get_fixup_value(*args)

def patch_fixup_value(*args):
    r"""patch_fixup_value(ea, fd) -> bool"""
    return _ida_fixup.patch_fixup_value(*args)

def get_fixup_desc(*args):
    r"""get_fixup_desc(source, fd) -> char const *"""
    return _ida_fixup.get_fixup_desc(*args)

def calc_fixup_size(*args):
    r"""calc_fixup_size(type) -> int"""
    return _ida_fixup.calc_fixup_size(*args)

def find_custom_fixup(*args):
    r"""find_custom_fixup(name) -> fixup_type_t"""
    return _ida_fixup.find_custom_fixup(*args)
class fixup_info_t(object):
    r"""Proxy of C++ fixup_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea = property(_ida_fixup.fixup_info_t_ea_get, _ida_fixup.fixup_info_t_ea_set, doc=r"""ea""")
    fd = property(_ida_fixup.fixup_info_t_fd_get, _ida_fixup.fixup_info_t_fd_set, doc=r"""fd""")

    def __init__(self, *args):
        r"""__init__(self) -> fixup_info_t"""
        _ida_fixup.fixup_info_t_swiginit(self, _ida_fixup.new_fixup_info_t(*args))
    __swig_destroy__ = _ida_fixup.delete_fixup_info_t

# Register fixup_info_t in _ida_fixup:
_ida_fixup.fixup_info_t_swigregister(fixup_info_t)


def get_fixups(*args):
    r"""get_fixups(out, ea, size) -> bool"""
    return _ida_fixup.get_fixups(*args)

def contains_fixups(*args):
    r"""contains_fixups(ea, size) -> bool"""
    return _ida_fixup.contains_fixups(*args)

def gen_fix_fixups(*args):
    r"""gen_fix_fixups(_from, to, size)"""
    return _ida_fixup.gen_fix_fixups(*args)

if _BC695:
    FIXUP_CREATED=FIXUPF_CREATED
    FIXUP_EXTDEF=FIXUPF_EXTDEF
    FIXUP_REL=FIXUPF_REL




