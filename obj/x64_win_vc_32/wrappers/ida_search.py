# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""IDA Plugin SDK API wrapper: search"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_search
else:
    import _ida_search

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

SEARCH_UP = _ida_search.SEARCH_UP

SEARCH_DOWN = _ida_search.SEARCH_DOWN

SEARCH_NEXT = _ida_search.SEARCH_NEXT

SEARCH_CASE = _ida_search.SEARCH_CASE

SEARCH_REGEX = _ida_search.SEARCH_REGEX

SEARCH_NOBRK = _ida_search.SEARCH_NOBRK

SEARCH_NOSHOW = _ida_search.SEARCH_NOSHOW

SEARCH_IDENT = _ida_search.SEARCH_IDENT

SEARCH_BRK = _ida_search.SEARCH_BRK


def search_down(*args):
    r"""search_down(sflag) -> bool"""
    return _ida_search.search_down(*args)

def find_error(*args):
    r"""find_error(ea, sflag) -> ea_t"""
    return _ida_search.find_error(*args)

def find_notype(*args):
    r"""find_notype(ea, sflag) -> ea_t"""
    return _ida_search.find_notype(*args)

def find_unknown(*args):
    r"""find_unknown(ea, sflag) -> ea_t"""
    return _ida_search.find_unknown(*args)

def find_defined(*args):
    r"""find_defined(ea, sflag) -> ea_t"""
    return _ida_search.find_defined(*args)

def find_suspop(*args):
    r"""find_suspop(ea, sflag) -> ea_t"""
    return _ida_search.find_suspop(*args)

def find_data(*args):
    r"""find_data(ea, sflag) -> ea_t"""
    return _ida_search.find_data(*args)

def find_code(*args):
    r"""find_code(ea, sflag) -> ea_t"""
    return _ida_search.find_code(*args)

def find_not_func(*args):
    r"""find_not_func(ea, sflag) -> ea_t"""
    return _ida_search.find_not_func(*args)

def find_imm(*args):
    r"""find_imm(newEA, sflag, srchValue) -> ea_t"""
    return _ida_search.find_imm(*args)

def find_text(*args):
    r"""find_text(start_ea, y, x, ustr, sflag) -> ea_t"""
    return _ida_search.find_text(*args)

def find_binary(*args):
    r"""find_binary(arg1, arg2, arg3, arg4, arg5) -> ea_t"""
    return _ida_search.find_binary(*args)

if _BC695:
    find_void=find_suspop




