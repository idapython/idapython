/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_ida_idp_WRAP_H_
#define SWIG_ida_idp_WRAP_H_

#include <map>
#include <string>


class SwigDirector_IDP_Hooks : public IDP_Hooks, public Swig::Director {

public:
    SwigDirector_IDP_Hooks(PyObject *self);
    virtual ~SwigDirector_IDP_Hooks();
    virtual int ev_init(char const *idp_modname);
    virtual int ev_term();
    virtual int ev_newprc(int pnum, bool keep_cfg);
    virtual int ev_newasm(int asmnum);
    virtual int ev_newfile(char *fname);
    virtual int ev_oldfile(char *fname);
    virtual int ev_newbinary(char *filename, qoff64_t fileoff, ea_t basepara, ea_t binoff, uint64 nbytes);
    virtual int ev_endbinary(bool ok);
    virtual int ev_set_idp_options(char const *keyword, int value_type, void const *value, char const **errbuf);
    virtual int ev_set_proc_options(char const *options, int confidence);
    virtual bool ev_ana_insn(insn_t *out);
    virtual bool ev_emu_insn(insn_t const *insn);
    virtual void ev_out_header(outctx_t *outctx);
    virtual void ev_out_footer(outctx_t *outctx);
    virtual int ev_out_segstart(outctx_t *outctx, segment_t *seg);
    virtual int ev_out_segend(outctx_t *outctx, segment_t *seg);
    virtual int ev_out_assumes(outctx_t *outctx);
    virtual bool ev_out_insn(outctx_t *outctx);
    virtual int ev_out_mnem(outctx_t *outctx);
    virtual bool ev_out_operand(outctx_t *outctx, op_t const *op);
    virtual int ev_out_data(outctx_t *outctx, bool analyze_only);
    virtual int ev_out_label(outctx_t *outctx, char const *colored_name);
    virtual int ev_out_special_item(outctx_t *outctx, uchar segtype);
    virtual int ev_gen_stkvar_def(outctx_t *outctx, member_t const *mptr, sval_t v);
    virtual int ev_gen_regvar_def(outctx_t *outctx, regvar_t *v);
    virtual int ev_gen_src_file_lnnum();
    virtual int ev_creating_segm(segment_t *seg);
    virtual int ev_moving_segm(segment_t *seg, ea_t to, int flags);
    virtual int ev_coagulate(ea_t start_ea);
    virtual int ev_undefine(ea_t ea);
    virtual int ev_treat_hindering_item(ea_t hindering_item_ea, flags_t new_item_flags, ea_t new_item_ea, asize_t new_item_length);
    virtual int ev_rename(ea_t ea, char const *new_name);
    virtual int ev_is_far_jump(int icode);
    virtual int ev_is_sane_insn(insn_t const *insn, int no_crefs);
    virtual int ev_is_cond_insn(insn_t const *insn);
    virtual int ev_is_call_insn(insn_t const *insn);
    virtual int ev_is_ret_insn(insn_t const *insn, bool strict);
    virtual int ev_may_be_func(insn_t const *insn, int state);
    virtual int ev_is_basic_block_end(insn_t const *insn, bool call_insn_stops_block);
    virtual int ev_is_indirect_jump(insn_t const *insn);
    virtual int ev_is_insn_table_jump(insn_t const *insn);
    virtual int ev_is_switch(switch_info_t *si, insn_t const *insn);
    virtual int ev_calc_switch_cases(casevec_t *casevec, eavec_t *targets, ea_t insn_ea, switch_info_t *si);
    virtual int ev_create_switch_xrefs(ea_t jumpea, switch_info_t const *si);
    virtual int ev_is_align_insn(ea_t ea);
    virtual int ev_is_alloca_probe(ea_t ea);
    virtual PyObject *ev_delay_slot_insn(ea_t ea, bool bexec, bool fexec);
    virtual int ev_is_sp_based(int *mode, insn_t const *insn, op_t const *op);
    virtual int ev_can_have_type(op_t const *op);
    virtual int ev_cmp_operands(op_t const *op1, op_t const *op2);
    virtual int ev_adjust_refinfo(refinfo_t *ri, ea_t ea, int n, fixup_data_t const *fd);
    virtual int ev_get_operand_string(qstring *buf, insn_t const *insn, int opnum);
    virtual PyObject *ev_get_reg_name(int reg, size_t width, int reghi);
    virtual int ev_str2reg(char const *regname);
    virtual int ev_get_autocmt(qstring *buf, insn_t const *insn);
    virtual int ev_get_bg_color(bgcolor_t *color, ea_t ea);
    virtual int ev_is_jump_func(func_t *pfn, ea_t *jump_target, ea_t *func_pointer);
    virtual void ev_func_bounds(int *possible_return_code, func_t *pfn, ea_t max_func_end_ea);
    virtual int ev_verify_sp(func_t *pfn);
    virtual int ev_verify_noreturn(func_t *pfn);
    virtual int ev_create_func_frame(func_t *pfn);
    virtual int ev_get_frame_retsize(int *frsize, func_t const *pfn);
    virtual int ev_get_stkvar_scale_factor();
    virtual PyObject *ev_demangle_name(qstring *out, char const *name, uint32 disable_mask, int demreq);
    virtual int ev_add_cref(ea_t from, ea_t to, cref_t type);
    virtual int ev_add_dref(ea_t from, ea_t to, dref_t type);
    virtual int ev_del_cref(ea_t from, ea_t to, bool expand);
    virtual int ev_del_dref(ea_t from, ea_t to);
    virtual int ev_coagulate_dref(ea_t from, ea_t to, bool may_define, ea_t *code_ea);
    virtual int ev_may_show_sreg(ea_t current_ea);
    virtual void ev_auto_queue_empty(atype_t type);
    virtual int ev_validate_flirt_func(ea_t start_ea, char const *funcname);
    virtual int ev_adjust_libfunc_ea(idasgn_t const *sig, libfunc_t const *libfun, ea_t *ea);
    virtual PyObject *ev_assemble(ea_t ea, ea_t cs, ea_t ip, bool use32, char const *line);
    virtual int ev_extract_address(ea_t *out_ea, ea_t screen_ea, char const *string, size_t position);
    virtual int ev_realcvt(void *m, uint16 *e, uint16 swt);
    virtual void ev_gen_asm_or_lst(bool starting, FILE *fp, bool is_asm, int flags, gen_outline_t **outline);
    virtual int ev_gen_map_file(int *nlines, FILE *fp);
    virtual int ev_create_flat_group(ea_t image_base, int bitness, sel_t dataseg_sel);
    virtual int ev_getreg(uval_t *regval, int regnum);
    virtual int ev_analyze_prolog(ea_t ea);
    virtual int ev_calc_spdelta(sval_t *spdelta, insn_t const *insn);
    virtual int ev_calcrel();
    virtual PyObject *ev_find_reg_value(insn_t const *pinsn, int reg);
    virtual PyObject *ev_find_op_value(insn_t const *pinsn, int opn);
    virtual int ev_next_exec_insn(ea_t *target, ea_t ea, int tid, processor_t::regval_getter_t *getreg, regval_t const *regvalues);
    virtual int ev_calc_step_over(ea_t *target, ea_t ip);
    virtual int ev_calc_next_eas(eavec_t *res, insn_t const *insn, bool over);
    virtual int ev_get_macro_insn_head(ea_t *head, ea_t ip);
    virtual int ev_get_dbr_opnum(int *opnum, insn_t const *insn);
    virtual int ev_insn_reads_tbit(insn_t const *insn, processor_t::regval_getter_t *getreg, regval_t const *regvalues);
    virtual int ev_clean_tbit(ea_t ea, processor_t::regval_getter_t *getreg, regval_t const *regvalues);
    virtual int ev_get_reg_info(char const **main_regname, bitrange_t *bitrange, char const *regname);
    virtual void ev_setup_til();
    virtual int ev_get_abi_info(qstrvec_t *abi_names, qstrvec_t *abi_opts, comp_t comp);
    virtual int ev_max_ptr_size();
    virtual int ev_get_default_enum_size(cm_t cm);
    virtual int ev_get_cc_regs(callregs_t *regs, cm_t cc);
    virtual int ev_get_stkarg_offset();
    virtual int ev_shadow_args_size(int *shadow_args_size, func_t *pfn);
    virtual int ev_get_simd_types(simd_info_vec_t *out, simd_info_t const *simd_attrs, argloc_t const *argloc, bool create_tifs);
    virtual int ev_calc_cdecl_purged_bytes(ea_t ea);
    virtual int ev_calc_purged_bytes(int *p_purged_bytes, func_type_data_t const *fti);
    virtual int ev_calc_retloc(argloc_t *retloc, tinfo_t const *rettype, cm_t cc);
    virtual int ev_calc_arglocs(func_type_data_t *fti);
    virtual int ev_calc_varglocs(func_type_data_t *ftd, regobjs_t *regs, relobj_t *stkargs, int nfixed);
    virtual int ev_adjust_argloc(argloc_t *argloc, tinfo_t const *optional_type, int size);
    virtual int ev_lower_func_type(intvec_t *argnums, func_type_data_t *fti);
    virtual int ev_equal_reglocs(argloc_t *a1, argloc_t *a2);
    virtual int ev_use_stkarg_type(ea_t ea, funcarg_t const *arg);
    virtual PyObject *ev_use_regarg_type(ea_t ea, funcargvec_t const *rargs);
    virtual int ev_use_arg_types(ea_t ea, func_type_data_t *fti, funcargvec_t *rargs);
    virtual int ev_arg_addrs_ready(ea_t caller, int n, tinfo_t *tif, ea_t *addrs);
    virtual PyObject *ev_decorate_name(char const *name, bool mangle, int cc, tinfo_t const *optional_type);
    virtual int ev_loader();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class IDP_Hooks doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[115];
#endif

};


class SwigDirector_IDB_Hooks : public IDB_Hooks, public Swig::Director {

public:
    SwigDirector_IDB_Hooks(PyObject *self);
    virtual ~SwigDirector_IDB_Hooks();
    virtual int closebase();
    virtual int savebase();
    virtual int upgraded(int from);
    virtual int auto_empty();
    virtual int auto_empty_finally();
    virtual int determined_main(ea_t main);
    virtual int local_types_changed();
    virtual int extlang_changed(int kind, extlang_t *el, int idx);
    virtual int idasgn_loaded(char const *short_sig_name);
    virtual int kernel_config_loaded();
    virtual int loader_finished(linput_t *li, uint16 neflags, char const *filetypename);
    virtual int flow_chart_created(qflow_chart_t *fc);
    virtual int compiler_changed();
    virtual int changing_ti(ea_t ea, type_t const *new_type, p_list const *new_fnames);
    virtual int ti_changed(ea_t ea, type_t const *type, p_list const *fnames);
    virtual int changing_op_ti(ea_t ea, int n, type_t const *new_type, p_list const *new_fnames);
    virtual int op_ti_changed(ea_t ea, int n, type_t const *type, p_list const *fnames);
    virtual int changing_op_type(ea_t ea, int n, opinfo_t const *opinfo);
    virtual int op_type_changed(ea_t ea, int n);
    virtual int enum_created(enum_t id);
    virtual int deleting_enum(enum_t id);
    virtual int enum_deleted(enum_t id);
    virtual int renaming_enum(tid_t id, bool is_enum, char const *newname);
    virtual int enum_renamed(tid_t id);
    virtual int changing_enum_bf(enum_t id, bool new_bf);
    virtual int enum_bf_changed(enum_t id);
    virtual int changing_enum_cmt(tid_t id, bool repeatable, char const *newcmt);
    virtual int enum_cmt_changed(tid_t id, bool repeatable);
    virtual int enum_member_created(enum_t id, const_t cid);
    virtual int deleting_enum_member(enum_t id, const_t cid);
    virtual int enum_member_deleted(enum_t id, const_t cid);
    virtual int struc_created(tid_t struc_id);
    virtual int deleting_struc(struc_t *sptr);
    virtual int struc_deleted(tid_t struc_id);
    virtual int changing_struc_align(struc_t *sptr);
    virtual int struc_align_changed(struc_t *sptr);
    virtual int renaming_struc(tid_t id, char const *oldname, char const *newname);
    virtual int struc_renamed(struc_t *sptr);
    virtual int expanding_struc(struc_t *sptr, ea_t offset, adiff_t delta);
    virtual int struc_expanded(struc_t *sptr);
    virtual int struc_member_created(struc_t *sptr, member_t *mptr);
    virtual int deleting_struc_member(struc_t *sptr, member_t *mptr);
    virtual int struc_member_deleted(struc_t *sptr, tid_t member_id, ea_t offset);
    virtual int renaming_struc_member(struc_t *sptr, member_t *mptr, char const *newname);
    virtual int struc_member_renamed(struc_t *sptr, member_t *mptr);
    virtual int changing_struc_member(struc_t *sptr, member_t *mptr, flags_t flag, opinfo_t const *ti, asize_t nbytes);
    virtual int struc_member_changed(struc_t *sptr, member_t *mptr);
    virtual int changing_struc_cmt(tid_t struc_id, bool repeatable, char const *newcmt);
    virtual int struc_cmt_changed(tid_t struc_id, bool repeatable_cmt);
    virtual int segm_added(segment_t *s);
    virtual int deleting_segm(ea_t start_ea);
    virtual int segm_deleted(ea_t start_ea, ea_t end_ea);
    virtual int changing_segm_start(segment_t *s, ea_t new_start, int segmod_flags);
    virtual int segm_start_changed(segment_t *s, ea_t oldstart);
    virtual int changing_segm_end(segment_t *s, ea_t new_end, int segmod_flags);
    virtual int segm_end_changed(segment_t *s, ea_t oldend);
    virtual int changing_segm_name(segment_t *s, char const *oldname);
    virtual int segm_name_changed(segment_t *s, char const *name);
    virtual int changing_segm_class(segment_t *s);
    virtual int segm_class_changed(segment_t *s, char const *sclass);
    virtual int segm_attrs_updated(segment_t *s);
    virtual int segm_moved(ea_t from, ea_t to, asize_t size, bool changed_netmap);
    virtual int allsegs_moved(segm_move_infos_t *info);
    virtual int func_added(func_t *pfn);
    virtual int func_updated(func_t *pfn);
    virtual int set_func_start(func_t *pfn, ea_t new_start);
    virtual int set_func_end(func_t *pfn, ea_t new_end);
    virtual int deleting_func(func_t *pfn);
    virtual int frame_deleted(func_t *pfn);
    virtual int thunk_func_created(func_t *pfn);
    virtual int func_tail_appended(func_t *pfn, func_t *tail);
    virtual int deleting_func_tail(func_t *pfn, range_t const *tail);
    virtual int func_tail_deleted(func_t *pfn, ea_t tail_ea);
    virtual int tail_owner_changed(func_t *tail, ea_t owner_func, ea_t old_owner);
    virtual int func_noret_changed(func_t *pfn);
    virtual int stkpnts_changed(func_t *pfn);
    virtual int updating_tryblks(tryblks_t const *tbv);
    virtual int tryblks_updated(tryblks_t const *tbv);
    virtual int deleting_tryblks(range_t const *range);
    virtual int sgr_changed(ea_t start_ea, ea_t end_ea, int regnum, sel_t value, sel_t old_value, uchar tag);
    virtual int make_code(insn_t const *insn);
    virtual int make_data(ea_t ea, flags_t flags, tid_t tid, asize_t len);
    virtual int destroyed_items(ea_t ea1, ea_t ea2, bool will_disable_range);
    virtual int renamed(ea_t ea, char const *new_name, bool local_name);
    virtual int byte_patched(ea_t ea, uint32 old_value);
    virtual int changing_cmt(ea_t ea, bool repeatable_cmt, char const *newcmt);
    virtual int cmt_changed(ea_t ea, bool repeatable_cmt);
    virtual int changing_range_cmt(range_kind_t kind, range_t const *a, char const *cmt, bool repeatable);
    virtual int range_cmt_changed(range_kind_t kind, range_t const *a, char const *cmt, bool repeatable);
    virtual int extra_cmt_changed(ea_t ea, int line_idx, char const *cmt);
    virtual int item_color_changed(ea_t ea, bgcolor_t color);
    virtual int callee_addr_changed(ea_t ea, ea_t callee);
    virtual int bookmark_changed(uint32 index, lochist_entry_t const *pos, char const *desc);
    virtual int sgr_deleted(ea_t start_ea, ea_t end_ea, int regnum);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class IDB_Hooks doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[94];
#endif

};


#endif
