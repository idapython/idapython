# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""IDA Plugin SDK API wrapper: offset"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_offset
else:
    import _ida_offset

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func


def get_default_reftype(*args):
    r"""get_default_reftype(ea) -> reftype_t"""
    return _ida_offset.get_default_reftype(*args)

def op_offset_ex(*args):
    r"""op_offset_ex(ea, n, ri) -> int"""
    return _ida_offset.op_offset_ex(*args)

def op_offset(*args):
    r"""op_offset(ea, n, type, target=BADADDR, base=0, tdelta=0) -> int"""
    return _ida_offset.op_offset(*args)

def op_plain_offset(*args):
    r"""op_plain_offset(ea, n, base) -> bool"""
    return _ida_offset.op_plain_offset(*args)

def get_offbase(*args):
    r"""get_offbase(ea, n) -> ea_t"""
    return _ida_offset.get_offbase(*args)

def get_offset_expression(*args):
    r"""get_offset_expression(ea, n, _from, offset, getn_flags=0) -> int"""
    return _ida_offset.get_offset_expression(*args)

def get_offset_expr(*args):
    r"""get_offset_expr(ea, n, ri, _from, offset, getn_flags=0) -> int"""
    return _ida_offset.get_offset_expr(*args)

def can_be_off32(*args):
    r"""can_be_off32(ea) -> ea_t"""
    return _ida_offset.can_be_off32(*args)

def calc_offset_base(*args):
    r"""calc_offset_base(ea, n) -> ea_t"""
    return _ida_offset.calc_offset_base(*args)

def calc_probable_base_by_value(*args):
    r"""calc_probable_base_by_value(ea, off) -> ea_t"""
    return _ida_offset.calc_probable_base_by_value(*args)

def calc_reference_data(*args):
    r"""calc_reference_data(target, base, _from, ri, opval) -> bool"""
    return _ida_offset.calc_reference_data(*args)

def add_refinfo_dref(*args):
    r"""add_refinfo_dref(insn, _from, ri, opval, type, opoff) -> ea_t"""
    return _ida_offset.add_refinfo_dref(*args)

def calc_target(*args):
    r"""
    calc_target(_from, opval, ri) -> ea_t
    calc_target(_from, ea, n, opval) -> ea_t
    """
    return _ida_offset.calc_target(*args)

def calc_basevalue(*args):
    r"""calc_basevalue(target, base) -> ea_t"""
    return _ida_offset.calc_basevalue(*args)

if _BC695:
    calc_reference_basevalue=calc_basevalue
    calc_reference_target=calc_target
    def set_offset(ea, n, base):
        import ida_idaapi
        otype = get_default_reftype(ea)
        return op_offset(ea, n, otype, ida_idaapi.BADADDR, base) > 0




