/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_ida_dbg_WRAP_H_
#define SWIG_ida_dbg_WRAP_H_

#include <map>
#include <string>


class SwigDirector_DBG_Hooks : public DBG_Hooks, public Swig::Director {

public:
    SwigDirector_DBG_Hooks(PyObject *self);
    virtual ~SwigDirector_DBG_Hooks();
    virtual void dbg_process_start(pid_t pid, thid_t tid, ea_t ea, char const *modinfo_name, ea_t modinfo_base, asize_t modinfo_size);
    virtual void dbg_process_exit(pid_t pid, thid_t tid, ea_t ea, int exit_code);
    virtual void dbg_process_attach(pid_t pid, thid_t tid, ea_t ea, char const *modinfo_name, ea_t modinfo_base, asize_t modinfo_size);
    virtual void dbg_process_detach(pid_t pid, thid_t tid, ea_t ea);
    virtual void dbg_thread_start(pid_t pid, thid_t tid, ea_t ea);
    virtual void dbg_thread_exit(pid_t pid, thid_t tid, ea_t ea, int exit_code);
    virtual void dbg_library_load(pid_t pid, thid_t tid, ea_t ea, char const *modinfo_name, ea_t modinfo_base, asize_t modinfo_size);
    virtual void dbg_library_unload(pid_t pid, thid_t tid, ea_t ea, char const *info);
    virtual void dbg_information(pid_t pid, thid_t tid, ea_t ea, char const *info);
    virtual int dbg_exception(pid_t pid, thid_t tid, ea_t ea, int exc_code, bool exc_can_cont, ea_t exc_ea, char const *exc_info);
    virtual void dbg_suspend_process();
    virtual int dbg_bpt(thid_t tid, ea_t bptea);
    virtual int dbg_trace(thid_t tid, ea_t ip);
    virtual void dbg_request_error(int failed_command, int failed_dbg_notification);
    virtual void dbg_step_into();
    virtual void dbg_step_over();
    virtual void dbg_run_to(pid_t pid, thid_t tid, ea_t ea);
    virtual void dbg_step_until_ret();
    virtual void dbg_bpt_changed(int bptev_code, bpt_t *bpt);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class DBG_Hooks doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[19];
#endif

};


#endif
