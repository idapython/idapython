/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_DIRECTORS
#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    PyBytes_AsStringAndSize(str, &cstr, &len);
    newstr = (char *) malloc(len+1);
    memcpy(newstr, cstr, len+1);
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#else
# error Oh noes!
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(Py_TYPE(op), SwigPyObject_type()))
    return 1;
#else
  if (Py_TYPE(op) == SwigPyObject_type())
    return 1;
#endif

#ifndef Py_LIMITED_API
  return strcmp(Py_TYPE(op)->tp_name, "SwigPyObject") == 0;
#else
  //printf("### SwigPyObject_Check\n");
  PyObject* ty_name = PyObject_GetAttrString((PyObject*)Py_TYPE(op), "__name__");
  if (!ty_name)
    return 0;
  int cmp = PyUnicode_CompareWithASCIIString(ty_name, "SwigPyObject");
  Py_DECREF(ty_name);
  return cmp == 0;
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
#else // Py_LIMITED_API
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void*)SwigPyObject_dealloc },
    { Py_tp_repr, (void*)SwigPyObject_repr },
    { Py_tp_getattro, (void*)PyObject_GenericGetAttr },
    { Py_tp_doc, (void*)swigobject_doc },
    { Py_tp_richcompare, (void*)SwigPyObject_richcompare },
    { Py_tp_methods, (void*)swigobject_methods },
    { Py_nb_int, (void*)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {};
    spec.name = "SwigPyObject";
    spec.basicsize = sizeof(SwigPyObject);
    spec.flags = Py_TPFLAGS_DEFAULT;
    spec.slots = slots;
  return (PyTypeObject*)PyType_FromSpec(&spec);
#endif // Py_LIMITED_API
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  if (Py_TYPE(op) == SwigPyPacked_type())
    return 1;

#ifndef Py_LIMITED_API
  return strcmp(Py_TYPE(op)->tp_name, "SwigPyPacked") == 0;
#else
  //printf("### SwigPyPacked_Check\n");
  PyObject* ty_name = PyObject_GetAttrString((PyObject*)Py_TYPE(op), "__name__");
  if (!ty_name)
    return 0;
  int cmp = PyUnicode_CompareWithASCIIString(ty_name, "SwigPyPacked");
  Py_DECREF(ty_name);
  return cmp == 0;
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void*)SwigPyPacked_dealloc },
    { Py_tp_repr, (void*)SwigPyPacked_repr },
    { Py_tp_str, (void*)SwigPyPacked_str },
    { Py_tp_getattro, (void*)PyObject_GenericGetAttr },
    { Py_tp_doc, swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {};
    spec.name = "SwigPyPacked";
    spec.basicsize = sizeof(SwigPyPacked);
    spec.flags = Py_TPFLAGS_DEFAULT;
    spec.slots = slots;
  return (PyTypeObject*)PyType_FromSpec(&spec);
#endif  
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    const char *doc = pystr_doc ? SWIG_Python_str_AsChar(pystr_doc) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    SWIG_Python_str_DelForPy3(doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          PyObject_SetAttr(inst, SWIG_This(), swig_this);
#ifndef Py_LIMITED_API
          Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
          PyType_Modified(Py_TYPE(inst));
#endif
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, "__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
	      allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
          newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API // tp_name is not accessible
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
#endif      
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

#ifndef Py_LIMITED_API
SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
#endif // Py_LIMITED_API

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

/* simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
# define __PTHREAD__
# if defined(_WIN32) || defined(__WIN32__)
#  include <windows.h>
#  define pthread_mutex_lock EnterCriticalSection
#  define pthread_mutex_unlock LeaveCriticalSection
#  define pthread_mutex_t CRITICAL_SECTION
#  define SWIG_MUTEX_INIT(var) var
# else
#  include <pthread.h>
#  define SWIG_MUTEX_INIT(var) var = PTHREAD_MUTEX_INITIALIZER 
# endif
#endif

#ifdef  __PTHREAD__
  class Guard {
    pthread_mutex_t *_mutex;

  public:
    Guard(pthread_mutex_t &mutex) : _mutex(&mutex) {
      pthread_mutex_lock(_mutex);
    }

    ~Guard() {
      pthread_mutex_unlock(_mutex);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __PTHREAD__
    static pthread_mutex_t swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __PTHREAD__
  pthread_mutex_t SWIG_MUTEX_INIT(Director::swig_mutex_own);
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Hexrays_Hooks swig_types[0]
#define SWIGTYPE_p_TPopupMenu swig_types[1]
#define SWIGTYPE_p_TWidget swig_types[2]
#define SWIGTYPE_p___int64 swig_types[3]
#define SWIGTYPE_p__qstringT_char_t swig_types[4]
#define SWIGTYPE_p__qstringT_unsigned_char_t swig_types[5]
#define SWIGTYPE_p__qstringT_unsigned_short_t swig_types[6]
#define SWIGTYPE_p_a_6__unsigned_short swig_types[7]
#define SWIGTYPE_p_action_ctx_base_t swig_types[8]
#define SWIGTYPE_p_argloc_t swig_types[9]
#define SWIGTYPE_p_argpart_t swig_types[10]
#define SWIGTYPE_p_biggest_t swig_types[11]
#define SWIGTYPE_p_bit_bound_t swig_types[12]
#define SWIGTYPE_p_bitfield_type_data_t swig_types[13]
#define SWIGTYPE_p_bitset_t swig_types[14]
#define SWIGTYPE_p_bool swig_types[15]
#define SWIGTYPE_p_boundaries_iterator_t swig_types[16]
#define SWIGTYPE_p_bytevec_t swig_types[17]
#define SWIGTYPE_p_carg_t swig_types[18]
#define SWIGTYPE_p_carglist_t swig_types[19]
#define SWIGTYPE_p_casm_t swig_types[20]
#define SWIGTYPE_p_cblock_t swig_types[21]
#define SWIGTYPE_p_ccase_t swig_types[22]
#define SWIGTYPE_p_ccases_t swig_types[23]
#define SWIGTYPE_p_cdo_t swig_types[24]
#define SWIGTYPE_p_ceinsn_t swig_types[25]
#define SWIGTYPE_p_cexpr_t swig_types[26]
#define SWIGTYPE_p_cfor_t swig_types[27]
#define SWIGTYPE_p_cfunc_parentee_t swig_types[28]
#define SWIGTYPE_p_cfunc_t swig_types[29]
#define SWIGTYPE_p_cgoto_t swig_types[30]
#define SWIGTYPE_p_char swig_types[31]
#define SWIGTYPE_p_cif_t swig_types[32]
#define SWIGTYPE_p_cinsn_t swig_types[33]
#define SWIGTYPE_p_citem_cmt_t swig_types[34]
#define SWIGTYPE_p_citem_locator_t swig_types[35]
#define SWIGTYPE_p_citem_t swig_types[36]
#define SWIGTYPE_p_cloop_t swig_types[37]
#define SWIGTYPE_p_cnumber_t swig_types[38]
#define SWIGTYPE_p_codegen_t swig_types[39]
#define SWIGTYPE_p_const_iterator swig_types[40]
#define SWIGTYPE_p_control_graph_t swig_types[41]
#define SWIGTYPE_p_creturn_t swig_types[42]
#define SWIGTYPE_p_cswitch_t swig_types[43]
#define SWIGTYPE_p_ctext_position_t swig_types[44]
#define SWIGTYPE_p_ctree_anchor_t swig_types[45]
#define SWIGTYPE_p_ctree_item_t swig_types[46]
#define SWIGTYPE_p_ctree_parentee_t swig_types[47]
#define SWIGTYPE_p_ctree_visitor_t swig_types[48]
#define SWIGTYPE_p_cwhile_t swig_types[49]
#define SWIGTYPE_p_eamap_iterator_t swig_types[50]
#define SWIGTYPE_p_f_int_v_______p_void swig_types[51]
#define SWIGTYPE_p_f_p_TWidget_int_int_p_void__bool swig_types[52]
#define SWIGTYPE_p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void swig_types[53]
#define SWIGTYPE_p_f_p_TWidget_int_p_void__bool swig_types[54]
#define SWIGTYPE_p_f_p_TWidget_p_lochist_entry_t_p_void__void swig_types[55]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void swig_types[56]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int swig_types[57]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void swig_types[58]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int swig_types[59]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int swig_types[60]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool swig_types[61]
#define SWIGTYPE_p_f_p_TWidget_p_void__int swig_types[62]
#define SWIGTYPE_p_f_p_TWidget_p_void__void swig_types[63]
#define SWIGTYPE_p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t swig_types[64]
#define SWIGTYPE_p_f_p_chooser_t_ssize_t__chooser_t__cbret_t swig_types[65]
#define SWIGTYPE_p_f_p_lexer_t_r_q_const__token_t_r_q_const__token_t__p_char swig_types[66]
#define SWIGTYPE_p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool swig_types[67]
#define SWIGTYPE_p_f_p_q_const__char_p_void__void swig_types[68]
#define SWIGTYPE_p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int swig_types[69]
#define SWIGTYPE_p_f_p_q_const__char_v_______int swig_types[70]
#define SWIGTYPE_p_f_p_void_enum_hexrays_event_t_va_list__ssize_t swig_types[71]
#define SWIGTYPE_p_f_p_void_int_va_list__ssize_t swig_types[72]
#define SWIGTYPE_p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool swig_types[73]
#define SWIGTYPE_p_f_unsigned_int__bool swig_types[74]
#define SWIGTYPE_p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int swig_types[75]
#define SWIGTYPE_p_f_unsigned_int_p_void__bool swig_types[76]
#define SWIGTYPE_p_f_unsigned_int_unsigned_int__unsigned_int swig_types[77]
#define SWIGTYPE_p_file_printer_t swig_types[78]
#define SWIGTYPE_p_float swig_types[79]
#define SWIGTYPE_p_fnumber_t swig_types[80]
#define SWIGTYPE_p_func_t swig_types[81]
#define SWIGTYPE_p_func_type_data_t swig_types[82]
#define SWIGTYPE_p_hexrays_failure_t swig_types[83]
#define SWIGTYPE_p_hexwarn_t swig_types[84]
#define SWIGTYPE_p_history_item_t swig_types[85]
#define SWIGTYPE_p_insn_t swig_types[86]
#define SWIGTYPE_p_int swig_types[87]
#define SWIGTYPE_p_iterator swig_types[88]
#define SWIGTYPE_p_ivl_t swig_types[89]
#define SWIGTYPE_p_ivlset_t swig_types[90]
#define SWIGTYPE_p_location_t swig_types[91]
#define SWIGTYPE_p_long swig_types[92]
#define SWIGTYPE_p_long_long swig_types[93]
#define SWIGTYPE_p_lvar_locator_t swig_types[94]
#define SWIGTYPE_p_lvar_mapping_iterator_t swig_types[95]
#define SWIGTYPE_p_lvar_ref_t swig_types[96]
#define SWIGTYPE_p_lvar_saved_info_t swig_types[97]
#define SWIGTYPE_p_lvar_t swig_types[98]
#define SWIGTYPE_p_lvar_uservec_t swig_types[99]
#define SWIGTYPE_p_lvars_t swig_types[100]
#define SWIGTYPE_p_mbl_array_t swig_types[101]
#define SWIGTYPE_p_mbl_graph_t swig_types[102]
#define SWIGTYPE_p_mblock_t swig_types[103]
#define SWIGTYPE_p_mcallarg_t swig_types[104]
#define SWIGTYPE_p_mcases_t swig_types[105]
#define SWIGTYPE_p_member_t swig_types[106]
#define SWIGTYPE_p_microcode_filter_t swig_types[107]
#define SWIGTYPE_p_minsn_t swig_types[108]
#define SWIGTYPE_p_minsn_visitor_t swig_types[109]
#define SWIGTYPE_p_mlist_t swig_types[110]
#define SWIGTYPE_p_mnumber_t swig_types[111]
#define SWIGTYPE_p_mop_addr_t swig_types[112]
#define SWIGTYPE_p_mop_t swig_types[113]
#define SWIGTYPE_p_mop_visitor_t swig_types[114]
#define SWIGTYPE_p_number_format_t swig_types[115]
#define SWIGTYPE_p_op_parent_info_t swig_types[116]
#define SWIGTYPE_p_operand_locator_t swig_types[117]
#define SWIGTYPE_p_operator_info_t swig_types[118]
#define SWIGTYPE_p_p_carg_t swig_types[119]
#define SWIGTYPE_p_p_ccase_t swig_types[120]
#define SWIGTYPE_p_p_cexpr_t swig_types[121]
#define SWIGTYPE_p_p_char swig_types[122]
#define SWIGTYPE_p_p_cinsn_t swig_types[123]
#define SWIGTYPE_p_p_citem_t swig_types[124]
#define SWIGTYPE_p_p_struc_t swig_types[125]
#define SWIGTYPE_p_p_unsigned_long swig_types[126]
#define SWIGTYPE_p_qflow_chart_t swig_types[127]
#define SWIGTYPE_p_qlistT_cinsn_t_t swig_types[128]
#define SWIGTYPE_p_qlistT_cinsn_t_t__const_reverse_iterator swig_types[129]
#define SWIGTYPE_p_qlistT_cinsn_t_t__iterator swig_types[130]
#define SWIGTYPE_p_qlistT_cinsn_t_t__reverse_iterator swig_types[131]
#define SWIGTYPE_p_qlist_cinsn_t_iterator swig_types[132]
#define SWIGTYPE_p_qrefcnt_tT_cfunc_t_t swig_types[133]
#define SWIGTYPE_p_qstackT_history_item_t_t swig_types[134]
#define SWIGTYPE_p_qstring_printer_t swig_types[135]
#define SWIGTYPE_p_qvectorT__qstringT_unsigned_short_t_t swig_types[136]
#define SWIGTYPE_p_qvectorT_argloc_t_t swig_types[137]
#define SWIGTYPE_p_qvectorT_bitset_t_t swig_types[138]
#define SWIGTYPE_p_qvectorT_bool_t swig_types[139]
#define SWIGTYPE_p_qvectorT_carg_t_t swig_types[140]
#define SWIGTYPE_p_qvectorT_ccase_t_t swig_types[141]
#define SWIGTYPE_p_qvectorT_channel_redir_t_t swig_types[142]
#define SWIGTYPE_p_qvectorT_cinsn_t_p_t swig_types[143]
#define SWIGTYPE_p_qvectorT_citem_t_p_t swig_types[144]
#define SWIGTYPE_p_qvectorT_compiled_binpat_t_t swig_types[145]
#define SWIGTYPE_p_qvectorT_funcarg_t_t swig_types[146]
#define SWIGTYPE_p_qvectorT_hexwarn_t_t swig_types[147]
#define SWIGTYPE_p_qvectorT_history_item_t_t swig_types[148]
#define SWIGTYPE_p_qvectorT_int_t swig_types[149]
#define SWIGTYPE_p_qvectorT_ivlset_t_t swig_types[150]
#define SWIGTYPE_p_qvectorT_lvar_saved_info_t_t swig_types[151]
#define SWIGTYPE_p_qvectorT_lvar_t_t swig_types[152]
#define SWIGTYPE_p_qvectorT_mcallarg_t_t swig_types[153]
#define SWIGTYPE_p_qvectorT_minsn_t_p_t swig_types[154]
#define SWIGTYPE_p_qvectorT_mlist_t_t swig_types[155]
#define SWIGTYPE_p_qvectorT_mop_t_p_t swig_types[156]
#define SWIGTYPE_p_qvectorT_mop_t_t swig_types[157]
#define SWIGTYPE_p_qvectorT_range_t_t swig_types[158]
#define SWIGTYPE_p_qvectorT_rangeset_t_const_p_t swig_types[159]
#define SWIGTYPE_p_qvectorT_rangeset_t_t swig_types[160]
#define SWIGTYPE_p_qvectorT_refinfo_desc_t_t swig_types[161]
#define SWIGTYPE_p_qvectorT_reg_info_t_t swig_types[162]
#define SWIGTYPE_p_qvectorT_simd_info_t_t swig_types[163]
#define SWIGTYPE_p_qvectorT_simpleline_t_t swig_types[164]
#define SWIGTYPE_p_qvectorT_size_t_t swig_types[165]
#define SWIGTYPE_p_qvectorT_tinfo_t_t swig_types[166]
#define SWIGTYPE_p_qvectorT_type_attr_t_t swig_types[167]
#define SWIGTYPE_p_qvectorT_udt_member_t_t swig_types[168]
#define SWIGTYPE_p_qvectorT_unsigned_char_t swig_types[169]
#define SWIGTYPE_p_qvectorT_unsigned_int_t swig_types[170]
#define SWIGTYPE_p_qvectorT_unsigned_long_long_t swig_types[171]
#define SWIGTYPE_p_rangeset_t swig_types[172]
#define SWIGTYPE_p_reg_info_t swig_types[173]
#define SWIGTYPE_p_relobj_t swig_types[174]
#define SWIGTYPE_p_reloc_info_t swig_types[175]
#define SWIGTYPE_p_rlist_t swig_types[176]
#define SWIGTYPE_p_scattered_aloc_t swig_types[177]
#define SWIGTYPE_p_scif_t swig_types[178]
#define SWIGTYPE_p_short swig_types[179]
#define SWIGTYPE_p_signed___int64 swig_types[180]
#define SWIGTYPE_p_signed_char swig_types[181]
#define SWIGTYPE_p_simple_graph_t swig_types[182]
#define SWIGTYPE_p_size_t swig_types[183]
#define SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t swig_types[184]
#define SWIGTYPE_p_std__mapT_citem_locator_t_int_t swig_types[185]
#define SWIGTYPE_p_std__mapT_int__qstringT_char_t_t swig_types[186]
#define SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t swig_types[187]
#define SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t swig_types[188]
#define SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t swig_types[189]
#define SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t swig_types[190]
#define SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t swig_types[191]
#define SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t swig_types[192]
#define SWIGTYPE_p_std__out_of_range swig_types[193]
#define SWIGTYPE_p_std__setT__qstringT_char_t_t swig_types[194]
#define SWIGTYPE_p_std__setT_minsn_t_p_t swig_types[195]
#define SWIGTYPE_p_std__setT_unsigned_int_t swig_types[196]
#define SWIGTYPE_p_stkpnts_t swig_types[197]
#define SWIGTYPE_p_stkvar_ref_t swig_types[198]
#define SWIGTYPE_p_struc_t swig_types[199]
#define SWIGTYPE_p_tinfo_t swig_types[200]
#define SWIGTYPE_p_treeloc_t swig_types[201]
#define SWIGTYPE_p_udc_filter_t swig_types[202]
#define SWIGTYPE_p_udcall_map_iterator_t swig_types[203]
#define SWIGTYPE_p_udcall_t swig_types[204]
#define SWIGTYPE_p_udt_type_data_t swig_types[205]
#define SWIGTYPE_p_unsigned___int64 swig_types[206]
#define SWIGTYPE_p_unsigned_char swig_types[207]
#define SWIGTYPE_p_unsigned_int swig_types[208]
#define SWIGTYPE_p_unsigned_long swig_types[209]
#define SWIGTYPE_p_unsigned_long_long swig_types[210]
#define SWIGTYPE_p_unsigned_short swig_types[211]
#define SWIGTYPE_p_user_cmts_iterator_t swig_types[212]
#define SWIGTYPE_p_user_iflags_iterator_t swig_types[213]
#define SWIGTYPE_p_user_labels_iterator_t swig_types[214]
#define SWIGTYPE_p_user_lvar_modifier_t swig_types[215]
#define SWIGTYPE_p_user_numforms_iterator_t swig_types[216]
#define SWIGTYPE_p_user_unions_iterator_t swig_types[217]
#define SWIGTYPE_p_valrng_t swig_types[218]
#define SWIGTYPE_p_value_type swig_types[219]
#define SWIGTYPE_p_var_ref_t swig_types[220]
#define SWIGTYPE_p_vc_printer_t swig_types[221]
#define SWIGTYPE_p_vd_failure_t swig_types[222]
#define SWIGTYPE_p_vd_interr_t swig_types[223]
#define SWIGTYPE_p_vd_printer_t swig_types[224]
#define SWIGTYPE_p_vdloc_t swig_types[225]
#define SWIGTYPE_p_vdui_t swig_types[226]
#define SWIGTYPE_p_vivl_t swig_types[227]
#define SWIGTYPE_p_voff_t swig_types[228]
#define SWIGTYPE_p_void swig_types[229]
#define SWIGTYPE_p_wrapped_array_tT_unsigned_short_6_t swig_types[230]
static swig_type_info *swig_types[232];
static swig_module_info swig_module = {swig_types, 231, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _ida_hexrays.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__ida_hexrays

#else
#  define SWIG_init    init_ida_hexrays

#endif
#define SWIG_name    "_ida_hexrays"

#define SWIGVERSION 0x040001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#ifndef USE_DANGEROUS_FUNCTIONS
  #define USE_DANGEROUS_FUNCTIONS 1
#endif
#include <pro.h>


#include "../../../idapy.hpp"


static void __raise_ba(const std::bad_alloc &ba)
{
  PyErr_SetString(PyExc_MemoryError, "Out of memory (bad_alloc)");
}

static void __raise_u()
{
  PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
}

static void __raise_e(const std::exception &e)
{
  const char *what = e.what();
  if ( what == NULL || what[0] == '\0' )
  {
    __raise_u();
  }
  else
  {
    PyErr_SetString(PyExc_RuntimeError, what);
  }
}

static void __raise_ie(const interr_exc_t &ie)
{
  qstring emsg;
  emsg.sprnt(INTERR_EXC_FMT, ie.code);
  PyErr_SetString(PyExc_RuntimeError, emsg.begin());
}

static void __raise_de(const Swig::DirectorException &e)
{
  PyErr_SetString(PyExc_RuntimeError, e.getMessage());
}

static void __raise_oor(const std::out_of_range &e)
{
  PyErr_SetString(PyExc_IndexError, e.what());
}

static bool __chkthr()
{
  bool ok = is_main_thread();
  if ( !ok )
    PyErr_SetString(PyExc_RuntimeError, "Function can be called from the main thread only");
  return ok;
}



/* strnlen() arrived on OSX at v10.7. Provide it ourselves if needed. */
#ifdef __MAC__
#ifndef MAC_OS_X_VERSION_10_7
#define MAC_OS_X_VERSION_10_7 1070
#endif
#if (MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_7)
inline size_t strnlen(const char *s, size_t maxlen)
{
  const char *found = (const char *) memchr(s, 0, maxlen);
  return found != NULL ? size_t(found - s) : maxlen;
}
#endif
#endif


template <typename Type, size_t N>
struct wrapped_array_t {
  Type (&data)[N];
  wrapped_array_t(Type (&data)[N]) : data(data) { }
};


template <typename Type>
struct dynamic_wrapped_array_t {
  Type *data;
  size_t count;
  dynamic_wrapped_array_t(Type *_data, size_t _count)
    : data(_data), count(_count) { }
};


static PyObject *qstrvec2pylist(const qstrvec_t &vec)
{
  size_t n = vec.size();
  PyObject *py_list = PyList_New(n);
  for ( size_t i=0; i < n; ++i )
    PyList_SetItem(
            py_list,
            i,
            IDAPyStr_FromUTF8AndSize(vec[i].c_str(), vec[i].length()));
  return py_list;
}


#include <expr.hpp>
#include <ieee.h>
#include "../../../pywraps.hpp"


#include <hexrays.hpp>


static void _kludge_use_TPopupMenu(TPopupMenu *) {}


static void _kludge_use_TPopupMenu(TPopupMenu *m);


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif

SWIGINTERN size_t qvector_Sl_hexwarn_t_Sg____len__(qvector< hexwarn_t > const *self){ return self->size(); }
SWIGINTERN hexwarn_t const &qvector_Sl_hexwarn_t_Sg____getitem__(qvector< hexwarn_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_hexwarn_t_Sg____setitem__(qvector< hexwarn_t > *self,size_t i,hexwarn_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }
SWIGINTERN size_t qvector_Sl_citem_t_Sm__Sg____len__(qvector< citem_t * > const *self){ return self->size(); }
SWIGINTERN citem_t *const &qvector_Sl_citem_t_Sm__Sg____getitem__(qvector< citem_t * > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_citem_t_Sm__Sg____setitem__(qvector< citem_t * > *self,size_t i,citem_t *const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }

SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN size_t qvector_Sl_cinsn_t_Sm__Sg____len__(qvector< cinsn_t * > const *self){ return self->size(); }
SWIGINTERN cinsn_t *const &qvector_Sl_cinsn_t_Sm__Sg____getitem__(qvector< cinsn_t * > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_cinsn_t_Sm__Sg____setitem__(qvector< cinsn_t * > *self,size_t i,cinsn_t *const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }

inline const int32 &py_user_iflags_second(user_iflags_iterator_t p) { return user_iflags_second(p); }


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}

 void hexrays_deregister_python_clearable_instance(void *ptr); 
SWIGINTERN void delete_qrefcnt_t_Sl_cfunc_t_Sg_(qrefcnt_t< cfunc_t > *self){
    hexrays_deregister_python_clearable_instance(self);
    delete self;
  }

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}




SWIGINTERN size_t qvector_Sl_history_item_t_Sg____len__(qvector< history_item_t > const *self){ return self->size(); }
SWIGINTERN history_item_t const &qvector_Sl_history_item_t_Sg____getitem__(qvector< history_item_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_history_item_t_Sg____setitem__(qvector< history_item_t > *self,size_t i,history_item_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }

typedef qlist<cinsn_t>::iterator qlist_cinsn_t_iterator;

SWIGINTERN cinsn_t const &qlist_cinsn_t_iterator_cur_get(qlist_cinsn_t_iterator *self){ return *(*self); }
SWIGINTERN void qlist_cinsn_t_iterator_next(qlist_cinsn_t_iterator *self){ (*self)++; }
SWIGINTERN bool qlist_cinsn_t_iterator_operator_Se__Se_(qlist_cinsn_t_iterator const *self,qlist_cinsn_t_iterator const *x){ return &(self->operator*()) == &(x->operator*()); }
SWIGINTERN bool qlist_cinsn_t_iterator_operator_SN__Se_(qlist_cinsn_t_iterator const *self,qlist_cinsn_t_iterator const *x){ return &(self->operator*()) != &(x->operator*()); }
SWIGINTERN size_t qvector_Sl_lvar_t_Sg____len__(qvector< lvar_t > const *self){ return self->size(); }
SWIGINTERN lvar_t const &qvector_Sl_lvar_t_Sg____getitem__(qvector< lvar_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_lvar_t_Sg____setitem__(qvector< lvar_t > *self,size_t i,lvar_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }
SWIGINTERN qlist_cinsn_t_iterator qlist_Sl_cinsn_t_Sg__begin(qlist< cinsn_t > *self){ return self->begin(); }
SWIGINTERN qlist_cinsn_t_iterator qlist_Sl_cinsn_t_Sg__end(qlist< cinsn_t > *self){ return self->end(); }
SWIGINTERN qlist_cinsn_t_iterator qlist_Sl_cinsn_t_Sg__insert__SWIG_3(qlist< cinsn_t > *self,qlist_cinsn_t_iterator p,cinsn_t const &x){ return self->insert(p, x); }
SWIGINTERN void qlist_Sl_cinsn_t_Sg__erase__SWIG_2(qlist< cinsn_t > *self,qlist_cinsn_t_iterator p){ self->erase(p); }
SWIGINTERN size_t qvector_Sl_carg_t_Sg____len__(qvector< carg_t > const *self){ return self->size(); }
SWIGINTERN carg_t const &qvector_Sl_carg_t_Sg____getitem__(qvector< carg_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_carg_t_Sg____setitem__(qvector< carg_t > *self,size_t i,carg_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }
SWIGINTERN size_t qvector_Sl_ccase_t_Sg____len__(qvector< ccase_t > const *self){ return self->size(); }
SWIGINTERN ccase_t const &qvector_Sl_ccase_t_Sg____getitem__(qvector< ccase_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_ccase_t_Sg____setitem__(qvector< ccase_t > *self,size_t i,ccase_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }
SWIGINTERN size_t qvector_Sl_lvar_saved_info_t_Sg____len__(qvector< lvar_saved_info_t > const *self){ return self->size(); }
SWIGINTERN lvar_saved_info_t const &qvector_Sl_lvar_saved_info_t_Sg____getitem__(qvector< lvar_saved_info_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_lvar_saved_info_t_Sg____setitem__(qvector< lvar_saved_info_t > *self,size_t i,lvar_saved_info_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }

//<code(py_hexrays)>
#ifdef WITH_HEXRAYS
static int _debug_hexrays_ctree = -1;
static bool is_debug_hexrays_ctree()
{
  if ( _debug_hexrays_ctree < 0 )
    _debug_hexrays_ctree = qgetenv("IDAPYTHON_DEBUG_HEXRAYS_CTREEE");
  return bool(_debug_hexrays_ctree);
}

//-------------------------------------------------------------------------
static void debug_hexrays_ctree(const char *format, ...)
{
  if ( is_debug_hexrays_ctree() )
  {
    va_list va;
    va_start(va, format);
    msg("HEXRAYS CTREE: ");
    vmsg(format, va);
    va_end(va);
  }
}

//-------------------------------------------------------------------------
// The hexrays+IDAPython term sequence goes as follows:
//   - hexrays is unloaded before IDAPython
//   - we receive the notification about hexrays going away and:
//        + call hexrays_unloading__clear_python_clearable_references();
//        + set 'hexdsp = exit_time_dummy_hexdsp' (an NOP hexdsp)
//   - we receive 'ui_term', and
//        + set 'hexdsp = init_time_dummy_hexdsp'
//   - IDAPython is unloaded, and during cleanup of the runtime data,
//     reachable citem_t's will get destroyed.
// => this means we vill receive 'hx_c*t_cleanup' and 'hx_remitem'
//    notifications most likely in the init_time_dummy_hexdsp(),
//    rather than in exit_time_dummy_hexdsp() -- which is more than
//    just a little counter-intuitive.
static void *idaapi init_time_dummy_hexdsp(int code, ...)
{
  switch ( code )
  {
    case hx_remitem:
    case hx_cexpr_t_cleanup:
    case hx_cinsn_t_cleanup:
      {
#ifdef _DEBUG
        va_list va;
        va_start(va, code);
        citem_t *item = va_arg(va, citem_t *);
        // catch leaks
        if ( code == hx_cexpr_t_cleanup )
          QASSERT(30497, ((cexpr_t *)item)->op == cot_empty && ((cexpr_t *)item)->n == NULL);
        else if ( code == hx_cinsn_t_cleanup )
          QASSERT(30498, ((cinsn_t *)item)->op == cit_empty && ((cinsn_t *)item)->cblock == NULL);
        else // code == hx_remitem
          QASSERT(30529, item->op == cot_empty || item->op == cit_empty);
        va_end(va);
#endif
      }
      break;
    default:
      warning("Hex-Rays Decompiler got called from Python without being loaded");
      break;
  }
  return NULL;
}

hexdsp_t *hexdsp = init_time_dummy_hexdsp;
#endif // WITH_HEXRAYS

#define MODULE_NAME   "Hex-Rays Decompiler" // Copied from vd/hexrays.cpp

//-------------------------------------------------------------------------
qstring_printer_t *new_qstring_printer_t(const cfunc_t *f, bool tags)
{
  return new qstring_printer_t(f, * (new qstring()), tags);
}

//-------------------------------------------------------------------------
void delete_qstring_printer_t(qstring_printer_t *qs)
{
  delete &(qs->s);
  delete qs;
}

//---------------------------------------------------------------------
static ref_t hexrays_python_call(ref_t fct, ref_t args)
{
  PYW_GIL_GET;

  newref_t resultobj(PyEval_CallObject(fct.o, args.o));
  if ( PyErr_Occurred() )
  {
    PyErr_Print();
    return borref_t(Py_None);
  }
  return resultobj;
}

//---------------------------------------------------------------------
static int hexrays_python_intcall(ref_t fct, ref_t args)
{
  PYW_GIL_GET;

  ref_t resultobj = hexrays_python_call(fct, args);
  int result;
  if ( SWIG_IsOK(SWIG_AsVal_int(resultobj.o, &result)) )
    return result;
  msg("IDAPython: Hex-rays python callback returned non-integer; value ignored.\n");
  return 0;
}

//---------------------------------------------------------------------
static bool idaapi __python_custom_viewer_popup_item_callback(void *ud)
{
  PYW_GIL_GET;

  int ret;
  borref_t fct((PyObject *)ud);
  newref_t nil(NULL);
  ret = hexrays_python_intcall(fct, nil);
  return ret ? true : false;
}

//-------------------------------------------------------------------------
//                        Clearable objects
//-------------------------------------------------------------------------
// A set of objects that were created from IDAPython. This is necessary in
// order to delete those objects before the hexrays plugin is unloaded.
// Otherwise, IDAPython will still delete them, but the plugin's 'hexdsp'
// dispatcher function will point to dlclose()'d code.
enum hx_clearable_type_t
{
  hxclr_unknown = 0,
  hxclr_cfuncptr,
  hxclr_cinsn,
  hxclr_cexpr,
  hxclr_cblock,
};
struct hx_clearable_t
{
  void *ptr;
  hx_clearable_type_t type;
};
DECLARE_TYPE_AS_MOVABLE(hx_clearable_t);

typedef qvector<hx_clearable_t> hx_clearables_t;
static hx_clearables_t python_clearables;
void hexrays_unloading__clear_python_clearable_references(void)
{
  debug_hexrays_ctree("hexrays_unloading__clear_python_clearable_references()\n");
  for ( size_t i = 0, n = python_clearables.size(); i < n; ++i )
  {
    const hx_clearable_t &hxc = python_clearables[i];
    debug_hexrays_ctree("cleaning up %p (%d)\n", hxc.ptr, int(hxc.type));
    switch ( hxc.type )
    {
      case hxclr_cfuncptr:
        ((cfuncptr_t*) hxc.ptr)->reset();
        break;
      case hxclr_cinsn:
        ((cinsn_t *) hxc.ptr)->cleanup();
        break;
      case hxclr_cexpr:
        ((cexpr_t *) hxc.ptr)->cleanup();
        break;
      case hxclr_cblock:
        ((cblock_t *) hxc.ptr)->clear();
        break;
      default: INTERR(30499);
    }
  }
}

//-------------------------------------------------------------------------
void hexrays_register_python_clearable_instance(
        void *ptr,
        hx_clearable_type_t type)
{
  for ( size_t i = 0, n = python_clearables.size(); i < n; ++i )
    if ( python_clearables[i].ptr == ptr )
      return;
  hx_clearable_t &hxc = python_clearables.push_back();
  hxc.ptr = ptr;
  hxc.type = type;
  debug_hexrays_ctree("registered %p\n", hxc.ptr);
}

//-------------------------------------------------------------------------
// Note: drop ownership, but don't cleanup! The cleanup will be done by
// the SWiG destructor wrapper if this object's still owned by the Python
// runtime, or it will be done by the C tree itself later.
void hexrays_deregister_python_clearable_instance(void *ptr)
{
  for ( size_t i = 0, n = python_clearables.size(); i < n; ++i )
  {
    const hx_clearable_t &hxc = python_clearables[i];
    if ( hxc.ptr == ptr )
    {
      python_clearables.erase(python_clearables.begin() + i);
      debug_hexrays_ctree("de-registered %p\n", hxc.ptr);
      break;
    }
  }
}

//-------------------------------------------------------------------------
#ifdef TESTABLE_BUILD
hx_clearable_type_t hexrays_is_registered_python_clearable_instance(
        const void *ptr)
{
  for ( size_t i = 0, n = python_clearables.size(); i < n; ++i )
    if ( python_clearables[i].ptr == ptr )
      return python_clearables[i].type;
  return hxclr_unknown;
}
#endif

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
cfuncptr_t _decompile(func_t *pfn, hexrays_failure_t *hf)
{
  try
  {
    cfuncptr_t cfunc = decompile(pfn, hf);
    return cfunc;
  }
  catch(...)
  {
    error("Hex-Rays Python: decompiler threw an exception.\n");
  }
  return cfuncptr_t(0);
}

//-------------------------------------------------------------------------
static bool is_hexrays_plugin(const plugin_info_t *pinfo)
{
  bool is_hx = false;
  if ( pinfo != NULL && pinfo->entry != NULL )
  {
    const plugin_t *p = pinfo->entry;
    if ( streq(p->wanted_name, MODULE_NAME) )
      is_hx = true;
  }
  return is_hx;
}

//-------------------------------------------------------------------------
static void try_init()
{
  init_hexrays_plugin(0);
  if ( hexdsp != NULL )
    msg("IDAPython Hex-Rays bindings initialized.\n");
}

//-------------------------------------------------------------------------
static void *idaapi exit_time_dummy_hexdsp(int code, ...)
{
/* This callback exists to avoid crashes if the user calls any hexrays functions
   after unloading the decompiler.
  switch ( code )
  {
    case hx_cexpr_t_cleanup: break;
    case hx_cinsn_t_cleanup: break;
    default: break;
  }*/
  return NULL;
}

//-------------------------------------------------------------------------
inline bool hexdsp_inited()
{
  return hexdsp != NULL
      && hexdsp != init_time_dummy_hexdsp
      && hexdsp != exit_time_dummy_hexdsp;
}

//-------------------------------------------------------------------------
static void hexrays_unloading__unhook_hooks(void);
static ssize_t idaapi ida_hexrays_ui_notification(void *, int code, va_list va)
{
  switch ( code )
  {
    case ui_plugin_loaded:
      if ( !hexdsp_inited() )
      {
        const plugin_info_t *pi = va_arg(va, plugin_info_t *);
        if ( is_hexrays_plugin(pi) )
          try_init();
      }
      break;

    case ui_plugin_unloading:
      if ( hexdsp != NULL && hexdsp != init_time_dummy_hexdsp )
      {
        const plugin_info_t *pi = va_arg(va, plugin_info_t *);
        if ( is_hexrays_plugin(pi) )
        {
          QASSERT(30500, hexdsp != exit_time_dummy_hexdsp);

          // Make sure all the refcounted objects are cleared right away.
          hexrays_unloading__clear_python_clearable_references();

          // Make sure all hooks are unhooked
          hexrays_unloading__unhook_hooks();

          hexdsp = exit_time_dummy_hexdsp;
        }
      }
      break;
    case ui_term:
      hexdsp = init_time_dummy_hexdsp;
      break;
  }
  return 0;
}

//-------------------------------------------------------------------------
static void ida_hexrays_term(void)
{
  idapython_unhook_from_notification_point(
          HT_UI, ida_hexrays_ui_notification, NULL);
}

//-------------------------------------------------------------------------
static void ida_hexrays_closebase(void) {}
//</code(py_hexrays)>

SWIGINTERN size_t wrapped_array_t_Sl_uint16_Sc_6_Sg____len__(wrapped_array_t< uint16,6 > const *self){ return 6; }
SWIGINTERN unsigned short const &wrapped_array_t_Sl_uint16_Sc_6_Sg____getitem__(wrapped_array_t< uint16,6 > const *self,size_t i){
    if (i >= 6 || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->data[i];
  }

  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}

SWIGINTERN void wrapped_array_t_Sl_uint16_Sc_6_Sg____setitem__(wrapped_array_t< uint16,6 > *self,size_t i,unsigned short const &v){
    if (i >= 6 || i < 0)
      throw std::out_of_range("out of bounds access");
    self->data[i] = v;
  }

//<inline(py_hexrays)>
//-------------------------------------------------------------------------
void py_debug_hexrays_ctree(const char *msg)
{
  debug_hexrays_ctree(msg);
}

//---------------------------------------------------------------------
bool py_init_hexrays_plugin(int flags=0)
{
  // Only initialize one time
  return hexdsp_inited() || init_hexrays_plugin(flags);
}

cfuncptr_t _decompile(func_t *pfn, hexrays_failure_t *hf);

//-------------------------------------------------------------------------
bool py_decompile_many(const char *outfile, PyObject *funcaddrs, int flags)
{
  eavec_t leas, *eas = NULL;
  if ( funcaddrs != Py_None )
  {
    if ( !PySequence_Check(funcaddrs)
      || PyW_PyListToEaVec(&leas, funcaddrs) < 0 )
    {
      return false;
    }
    eas = &leas;
  }
  return decompile_many(outfile, eas, flags);
}

//-------------------------------------------------------------------------
// Some examples will want to use action_handler_t's whose update() method
// calls get_widget_vdui() to figure out whether the action should be enabled
// for the current widget. Unfortunately, if hexrays is first unloaded before
// the widget cleanup is performed (e.g., while loading another IDB),
// the action would crash. Ideally we should wrap all toplevel calls
// with such wrappers, but it doesn't seem to be really necessary at the
// moment: only corner-cases will reveal this issue (reported by
// the idapython_hr-decompile test.)
vdui_t *py_get_widget_vdui(TWidget *f)
{
  return hexdsp_inited() ? get_widget_vdui(f) : NULL;
}

inline boundaries_iterator_t py_boundaries_find(const boundaries_t *map, const cinsn_t *key)
{
  return boundaries_find(map, key);
}

inline boundaries_iterator_t py_boundaries_insert(boundaries_t *map, const cinsn_t *key, const rangeset_t &val)
{
  return boundaries_insert(map, key, val);
}

//-------------------------------------------------------------------------
void py_term_hexrays_plugin(void) {}
//</inline(py_hexrays)>


//<inline(py_hexrays_hooks)>
//-------------------------------------------------------------------------
// Hexrays hooks
//---------------------------------------------------------------------------
ssize_t idaapi Hexrays_Callback(void *ud, hexrays_event_t event, va_list va);
class control_graph_t;

class Hexrays_Hooks
{
  friend ssize_t idaapi Hexrays_Callback(void *ud, hexrays_event_t event, va_list va);
  static ssize_t handle_create_hint_output(PyObject *o, vdui_t *, qstring *out_hint, int *out_implines)
  {
    ssize_t rc = 0;
    if ( o != NULL && PySequence_Check(o) && PySequence_Size(o) == 3 )
    {
      newref_t py_rc(PySequence_GetItem(o, 0));
      newref_t py_hint(PySequence_GetItem(o, 1));
      newref_t py_implines(PySequence_GetItem(o, 2));
      if ( IDAPyInt_Check(py_rc.o) && IDAPyStr_Check(py_hint.o) && IDAPyInt_Check(py_implines.o) )
      {
        char *buf;
        Py_ssize_t bufsize;
        if ( IDAPyBytes_AsMemAndSize(py_hint.o, &buf, &bufsize) > -1 )
        {
          rc = IDAPyInt_AsLong(py_rc.o);
          qstring tmp(buf, bufsize);
          out_hint->swap(tmp);
          *out_implines = IDAPyInt_AsLong(py_implines.o);
        }
      }
    }
    return rc;
  }

  bool hooked;

public:
  Hexrays_Hooks();
  virtual ~Hexrays_Hooks();

  bool hook()
  {
    if ( !hooked )
      hooked = install_hexrays_callback(Hexrays_Callback, this);
    return hooked;
  }
  bool unhook()
  {
    if ( hooked )
      hooked = !remove_hexrays_callback(Hexrays_Callback, this);
    return !hooked;
  }

  // hookgenHEXRAYS:methods
virtual int flowchart(qflow_chart_t * fc) {qnotused(fc); return 0;}
virtual int stkpnts(mbl_array_t * mba, stkpnts_t * stkpnts) {qnotused(mba); qnotused(stkpnts); return 0;}
virtual int prolog(mbl_array_t * mba, qflow_chart_t * fc, bitset_t * reachable_blocks) {qnotused(mba); qnotused(fc); qnotused(reachable_blocks); return 0;}
virtual int microcode(mbl_array_t * mba) {qnotused(mba); return 0;}
virtual int preoptimized(mbl_array_t * mba) {qnotused(mba); return 0;}
virtual int locopt(mbl_array_t * mba) {qnotused(mba); return 0;}
virtual int prealloc(mbl_array_t * mba) {qnotused(mba); return 0;}
virtual int glbopt(mbl_array_t * mba) {qnotused(mba); return 0;}
virtual int structural(control_graph_t * ct) {qnotused(ct); return 0;}
virtual int maturity(cfunc_t * cfunc, ctree_maturity_t new_maturity) {qnotused(cfunc); qnotused(new_maturity); return 0;}
virtual int interr(int  errcode) {qnotused(errcode); return 0;}
virtual int combine(mblock_t * blk, minsn_t * insn) {qnotused(blk); qnotused(insn); return 0;}
virtual int print_func(cfunc_t * cfunc, vc_printer_t * vp) {qnotused(cfunc); qnotused(vp); return 0;}
virtual int func_printed(cfunc_t * cfunc) {qnotused(cfunc); return 0;}
virtual int resolve_stkaddrs(mbl_array_t * mba) {qnotused(mba); return 0;}
virtual int open_pseudocode(vdui_t * vu) {qnotused(vu); return 0;}
virtual int switch_pseudocode(vdui_t * vu) {qnotused(vu); return 0;}
virtual int refresh_pseudocode(vdui_t * vu) {qnotused(vu); return 0;}
virtual int close_pseudocode(vdui_t * vu) {qnotused(vu); return 0;}
virtual int keyboard(vdui_t * vu, int key_code, int shift_state) {qnotused(vu); qnotused(key_code); qnotused(shift_state); return 0;}
virtual int right_click(vdui_t * vu) {qnotused(vu); return 0;}
virtual int double_click(vdui_t * vu, int shift_state) {qnotused(vu); qnotused(shift_state); return 0;}
virtual int curpos(vdui_t * vu) {qnotused(vu); return 0;}
virtual PyObject * create_hint(vdui_t * vu) {qnotused(vu); Py_RETURN_NONE;}
virtual int text_ready(vdui_t * vu) {qnotused(vu); return 0;}
virtual int populating_popup(TWidget * widget, TPopupMenu * popup_handle, vdui_t * vu) {qnotused(widget); qnotused(popup_handle); qnotused(vu); return 0;}
virtual int lvar_name_changed(vdui_t * vu, lvar_t * v, const char * name, bool is_user_name) {qnotused(vu); qnotused(v); qnotused(name); qnotused(is_user_name); return 0;}
virtual int lvar_type_changed(vdui_t * vu, lvar_t * v, const tinfo_t * tinfo) {qnotused(vu); qnotused(v); qnotused(tinfo); return 0;}
virtual int lvar_cmt_changed(vdui_t * vu, lvar_t * v, const char * cmt) {qnotused(vu); qnotused(v); qnotused(cmt); return 0;}
virtual int lvar_mapping_changed(vdui_t * vu, lvar_t * from, lvar_t * to) {qnotused(vu); qnotused(from); qnotused(to); return 0;}
virtual int cmt_changed(cfunc_t * cfunc, const treeloc_t * loc, const char * cmt) {qnotused(cfunc); qnotused(loc); qnotused(cmt); return 0;}
};
//</inline(py_hexrays_hooks)>


//<code(py_hexrays_hooks)>
//---------------------------------------------------------------------------
ssize_t idaapi Hexrays_Callback(void *ud, hexrays_event_t event, va_list va)
{
  // This hook gets called from the kernel. Ensure we hold the GIL.
  PYW_GIL_GET;
  class Hexrays_Hooks *proxy = (class Hexrays_Hooks *)ud;
  ssize_t ret = 0;
  try
  {
    switch ( event )
    {
      // hookgenHEXRAYS:notifications
case hxe_flowchart:
{
  qflow_chart_t * fc = va_arg(va, qflow_chart_t *);
  ret = proxy->flowchart(fc);
}
break;

case hxe_stkpnts:
{
  mbl_array_t * mba = va_arg(va, mbl_array_t *);
  stkpnts_t * stkpnts = va_arg(va, stkpnts_t *);
  ret = proxy->stkpnts(mba, stkpnts);
}
break;

case hxe_prolog:
{
  mbl_array_t * mba = va_arg(va, mbl_array_t *);
  qflow_chart_t * fc = va_arg(va, qflow_chart_t *);
  bitset_t * reachable_blocks = va_arg(va, bitset_t *);
  ret = proxy->prolog(mba, fc, reachable_blocks);
}
break;

case hxe_microcode:
{
  mbl_array_t * mba = va_arg(va, mbl_array_t *);
  ret = proxy->microcode(mba);
}
break;

case hxe_preoptimized:
{
  mbl_array_t * mba = va_arg(va, mbl_array_t *);
  ret = proxy->preoptimized(mba);
}
break;

case hxe_locopt:
{
  mbl_array_t * mba = va_arg(va, mbl_array_t *);
  ret = proxy->locopt(mba);
}
break;

case hxe_prealloc:
{
  mbl_array_t * mba = va_arg(va, mbl_array_t *);
  ret = proxy->prealloc(mba);
}
break;

case hxe_glbopt:
{
  mbl_array_t * mba = va_arg(va, mbl_array_t *);
  ret = proxy->glbopt(mba);
}
break;

case hxe_structural:
{
  control_graph_t * ct = va_arg(va, control_graph_t *);
  ret = proxy->structural(ct);
}
break;

case hxe_maturity:
{
  cfunc_t * cfunc = va_arg(va, cfunc_t *);
  ctree_maturity_t new_maturity = ctree_maturity_t(va_arg(va, int));
  ret = proxy->maturity(cfunc, new_maturity);
}
break;

case hxe_interr:
{
  int  errcode = va_arg(va, int );
  ret = proxy->interr(errcode);
}
break;

case hxe_combine:
{
  mblock_t * blk = va_arg(va, mblock_t *);
  minsn_t * insn = va_arg(va, minsn_t *);
  ret = proxy->combine(blk, insn);
}
break;

case hxe_print_func:
{
  cfunc_t * cfunc = va_arg(va, cfunc_t *);
  vc_printer_t * vp = va_arg(va, vc_printer_t *);
  ret = proxy->print_func(cfunc, vp);
}
break;

case hxe_func_printed:
{
  cfunc_t * cfunc = va_arg(va, cfunc_t *);
  ret = proxy->func_printed(cfunc);
}
break;

case hxe_resolve_stkaddrs:
{
  mbl_array_t * mba = va_arg(va, mbl_array_t *);
  ret = proxy->resolve_stkaddrs(mba);
}
break;

case hxe_open_pseudocode:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  ret = proxy->open_pseudocode(vu);
}
break;

case hxe_switch_pseudocode:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  ret = proxy->switch_pseudocode(vu);
}
break;

case hxe_refresh_pseudocode:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  ret = proxy->refresh_pseudocode(vu);
}
break;

case hxe_close_pseudocode:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  ret = proxy->close_pseudocode(vu);
}
break;

case hxe_keyboard:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  int key_code = va_arg(va, int);
  int shift_state = va_arg(va, int);
  ret = proxy->keyboard(vu, key_code, shift_state);
}
break;

case hxe_right_click:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  ret = proxy->right_click(vu);
}
break;

case hxe_double_click:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  int shift_state = va_arg(va, int);
  ret = proxy->double_click(vu, shift_state);
}
break;

case hxe_curpos:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  ret = proxy->curpos(vu);
}
break;

case hxe_create_hint:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  qstring * result_hint = va_arg(va, qstring *);
  int * implines = va_arg(va, int *);
  PyObject * _tmp = proxy->create_hint(vu);
  ret = Hexrays_Hooks::handle_create_hint_output(_tmp, vu, result_hint, implines);
}
break;

case hxe_text_ready:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  ret = proxy->text_ready(vu);
}
break;

case hxe_populating_popup:
{
  TWidget * widget = va_arg(va, TWidget *);
  TPopupMenu * popup_handle = va_arg(va, TPopupMenu *);
  vdui_t * vu = va_arg(va, vdui_t *);
  ret = proxy->populating_popup(widget, popup_handle, vu);
}
break;

case lxe_lvar_name_changed:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  lvar_t * v = va_arg(va, lvar_t *);
  const char * name = va_arg(va, const char *);
  bool is_user_name = bool(va_arg(va, int));
  ret = proxy->lvar_name_changed(vu, v, name, is_user_name);
}
break;

case lxe_lvar_type_changed:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  lvar_t * v = va_arg(va, lvar_t *);
  const tinfo_t * tinfo = va_arg(va, const tinfo_t *);
  ret = proxy->lvar_type_changed(vu, v, tinfo);
}
break;

case lxe_lvar_cmt_changed:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  lvar_t * v = va_arg(va, lvar_t *);
  const char * cmt = va_arg(va, const char *);
  ret = proxy->lvar_cmt_changed(vu, v, cmt);
}
break;

case lxe_lvar_mapping_changed:
{
  vdui_t * vu = va_arg(va, vdui_t *);
  lvar_t * from = va_arg(va, lvar_t *);
  lvar_t * to = va_arg(va, lvar_t *);
  ret = proxy->lvar_mapping_changed(vu, from, to);
}
break;

case hxe_cmt_changed:
{
  cfunc_t * cfunc = va_arg(va, cfunc_t *);
  const treeloc_t * loc = va_arg(va, const treeloc_t *);
  const char * cmt = va_arg(va, const char *);
  ret = proxy->cmt_changed(cfunc, loc, cmt);
}
break;

    }
  }
  catch (Swig::DirectorException &e)
  {
    msg("Exception in Hexrays Hook function: %s\n", e.getMessage());
    PYW_GIL_CHECK_LOCKED_SCOPE();
    if ( PyErr_Occurred() )
      PyErr_Print();
  }
  return ret;
}

//-------------------------------------------------------------------------
static qvector<Hexrays_Hooks*> hexrays_hooks_instances;

//-------------------------------------------------------------------------
static void hexrays_unloading__unhook_hooks(void)
{
  for ( size_t i = 0, n = hexrays_hooks_instances.size(); i < n; ++i )
    hexrays_hooks_instances[i]->unhook();
}

//-------------------------------------------------------------------------
Hexrays_Hooks::Hexrays_Hooks()
  : hooked(false)
{
  hexrays_hooks_instances.push_back(this);
}

//-------------------------------------------------------------------------
Hexrays_Hooks::~Hexrays_Hooks()
{
  hexrays_hooks_instances.del(this);
  unhook();
}
//</code(py_hexrays_hooks)>


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN qstring qstring_printer_t_get_s(qstring_printer_t *self){
     return self->s;
   }

#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif

SWIGINTERN wrapped_array_t< uint16,6 > fnumber_t___get_fnum(fnumber_t *self){
    return wrapped_array_t<uint16,6>(self->fnum);
  }
SWIGINTERN char const *citem_cmt_t_c_str(citem_cmt_t const *self){ return self->c_str(); }
SWIGINTERN char const *citem_cmt_t___str__(citem_cmt_t const *self){
      return self->c_str();
    }

SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN cinsn_t *const citem_t_cinsn_get(citem_t *self){ return (cinsn_t *)self; }
SWIGINTERN cexpr_t *const citem_t_cexpr_get(citem_t *self){ return (cexpr_t *)self; }
SWIGINTERN ctype_t citem_t__get_op(citem_t const *self){ return self->op; }
SWIGINTERN void citem_t__set_op(citem_t *self,ctype_t v){ self->op = v; }
SWIGINTERN PyObject *citem_t__obj_id(citem_t const *self){ return PyLong_FromSize_t(size_t(self)); }
SWIGINTERN void cexpr_t__deregister(cexpr_t *self){ hexrays_deregister_python_clearable_instance(self); }
SWIGINTERN void cexpr_t__register(cexpr_t *self){ hexrays_register_python_clearable_instance(self, hxclr_cexpr); }
SWIGINTERN cnumber_t *cexpr_t__get_n(cexpr_t const *self){ return self->n; }
SWIGINTERN void cexpr_t__set_n(cexpr_t *self,cnumber_t *_v){ self->n = _v; }
SWIGINTERN fnumber_t *cexpr_t__get_fpc(cexpr_t const *self){ return self->fpc; }
SWIGINTERN void cexpr_t__set_fpc(cexpr_t *self,fnumber_t *_v){ self->fpc = _v; }
SWIGINTERN var_ref_t *cexpr_t_get_v(cexpr_t *self){ if ( self->op == cot_var ) { return &self->v; } else { return NULL; } }
SWIGINTERN void cexpr_t_set_v(cexpr_t *self,var_ref_t const *v){ if ( self->op == cot_var ) { self->v = *v; } }
SWIGINTERN ea_t cexpr_t__get_obj_ea(cexpr_t const *self){ return self->obj_ea; }
SWIGINTERN void cexpr_t__set_obj_ea(cexpr_t *self,ea_t _v){ self->obj_ea = _v; }
SWIGINTERN int cexpr_t__get_refwidth(cexpr_t const *self){ return self->refwidth; }
SWIGINTERN void cexpr_t__set_refwidth(cexpr_t *self,int _v){ self->refwidth = _v; }
SWIGINTERN cexpr_t *cexpr_t__get_x(cexpr_t const *self){ return self->x; }
SWIGINTERN void cexpr_t__set_x(cexpr_t *self,cexpr_t *_v){ self->x = _v; }
SWIGINTERN cexpr_t *cexpr_t__get_y(cexpr_t const *self){ return self->y; }
SWIGINTERN void cexpr_t__set_y(cexpr_t *self,cexpr_t *_v){ self->y = _v; }
SWIGINTERN carglist_t *cexpr_t__get_a(cexpr_t const *self){ return self->a; }
SWIGINTERN void cexpr_t__set_a(cexpr_t *self,carglist_t *_v){ self->a = _v; }
SWIGINTERN int cexpr_t__get_m(cexpr_t const *self){ return self->m; }
SWIGINTERN void cexpr_t__set_m(cexpr_t *self,int _v){ self->m = _v; }
SWIGINTERN cexpr_t *cexpr_t__get_z(cexpr_t const *self){ return self->z; }
SWIGINTERN void cexpr_t__set_z(cexpr_t *self,cexpr_t *_v){ self->z = _v; }
SWIGINTERN int cexpr_t__get_ptrsize(cexpr_t const *self){ return self->ptrsize; }
SWIGINTERN void cexpr_t__set_ptrsize(cexpr_t *self,int _v){ self->ptrsize = _v; }
SWIGINTERN cinsn_t *cexpr_t__get_insn(cexpr_t const *self){ return self->insn; }
SWIGINTERN void cexpr_t__set_insn(cexpr_t *self,cinsn_t *_v){ self->insn = _v; }
SWIGINTERN char *cexpr_t__get_helper(cexpr_t const *self){ return self->helper; }
SWIGINTERN void cexpr_t__set_helper(cexpr_t *self,char *_v){ self->helper = ::qstrdup(_v); }
SWIGINTERN char *cexpr_t__get_string(cexpr_t const *self){ return self->string; }
SWIGINTERN void cexpr_t__set_string(cexpr_t *self,char *_v){ self->string = ::qstrdup(_v); }
SWIGINTERN void cinsn_t__deregister(cinsn_t *self){ hexrays_deregister_python_clearable_instance(self); }
SWIGINTERN void cinsn_t__register(cinsn_t *self){ hexrays_register_python_clearable_instance(self, hxclr_cinsn); }
SWIGINTERN cblock_t *cinsn_t__get_cblock(cinsn_t const *self){ return self->cblock; }
SWIGINTERN void cinsn_t__set_cblock(cinsn_t *self,cblock_t *_v){ self->cblock = _v; }
SWIGINTERN cexpr_t *cinsn_t__get_cexpr(cinsn_t const *self){ return self->cexpr; }
SWIGINTERN void cinsn_t__set_cexpr(cinsn_t *self,cexpr_t *_v){ self->cexpr = _v; }
SWIGINTERN cif_t *cinsn_t__get_cif(cinsn_t const *self){ return self->cif; }
SWIGINTERN void cinsn_t__set_cif(cinsn_t *self,cif_t *_v){ self->cif = _v; }
SWIGINTERN cfor_t *cinsn_t__get_cfor(cinsn_t const *self){ return self->cfor; }
SWIGINTERN void cinsn_t__set_cfor(cinsn_t *self,cfor_t *_v){ self->cfor = _v; }
SWIGINTERN cwhile_t *cinsn_t__get_cwhile(cinsn_t const *self){ return self->cwhile; }
SWIGINTERN void cinsn_t__set_cwhile(cinsn_t *self,cwhile_t *_v){ self->cwhile = _v; }
SWIGINTERN cdo_t *cinsn_t__get_cdo(cinsn_t const *self){ return self->cdo; }
SWIGINTERN void cinsn_t__set_cdo(cinsn_t *self,cdo_t *_v){ self->cdo = _v; }
SWIGINTERN cswitch_t *cinsn_t__get_cswitch(cinsn_t const *self){ return self->cswitch; }
SWIGINTERN void cinsn_t__set_cswitch(cinsn_t *self,cswitch_t *_v){ self->cswitch = _v; }
SWIGINTERN creturn_t *cinsn_t__get_creturn(cinsn_t const *self){ return self->creturn; }
SWIGINTERN void cinsn_t__set_creturn(cinsn_t *self,creturn_t *_v){ self->creturn = _v; }
SWIGINTERN cgoto_t *cinsn_t__get_cgoto(cinsn_t const *self){ return self->cgoto; }
SWIGINTERN void cinsn_t__set_cgoto(cinsn_t *self,cgoto_t *_v){ self->cgoto = _v; }
SWIGINTERN casm_t *cinsn_t__get_casm(cinsn_t const *self){ return self->casm; }
SWIGINTERN void cinsn_t__set_casm(cinsn_t *self,casm_t *_v){ self->casm = _v; }
SWIGINTERN bool cinsn_t_insn_is_epilog(cinsn_t const *insn){ return insn == INS_EPILOG; }
SWIGINTERN cblock_t *new_cblock_t(){
    cblock_t *cb = new cblock_t();
    hexrays_register_python_clearable_instance(cb, hxclr_cblock);
    return cb;
  }
SWIGINTERN void delete_cblock_t(cblock_t *self){
    hexrays_deregister_python_clearable_instance(self);
    delete self;
  }
SWIGINTERN void cblock_t__deregister(cblock_t *self){ hexrays_deregister_python_clearable_instance(self); }
SWIGINTERN citem_t *ctree_item_t__get_it(ctree_item_t const *self){ return self->it; }
SWIGINTERN cexpr_t *ctree_item_t__get_e(ctree_item_t const *self){                                                                          if ( self->citype == VDI_EXPR )                                       return self->e;                                                   else                                                                       return NULL;                                                         }
SWIGINTERN cinsn_t *ctree_item_t__get_i(ctree_item_t const *self){                                                                          if ( self->citype == VDI_EXPR )                                       return self->i;                                                   else                                                                       return NULL;                                                         }
SWIGINTERN lvar_t *ctree_item_t__get_l(ctree_item_t const *self){                                                                          if ( self->citype == VDI_LVAR )                                       return self->l;                                                   else                                                                       return NULL;                                                         }
SWIGINTERN cfunc_t *ctree_item_t__get_f(ctree_item_t const *self){                                                                          if ( self->citype == VDI_FUNC )                                       return self->f;                                                   else                                                                       return NULL;                                                         }
SWIGINTERN treeloc_t *const ctree_item_t_loc_get(ctree_item_t *self){ if ( self->citype == VDI_TAIL ) { return &self->loc; } else { return NULL; } }
SWIGINTERN PyObject *cfunc_t_find_item_coords__SWIG_1(cfunc_t *self,citem_t const *item){
     int px = 0;
     int py = 0;
     if ( self->find_item_coords(item, &px, &py) )
       return Py_BuildValue("(ii)", px, py);
     else
       return Py_BuildValue("(OO)", Py_None, Py_None);
   }
SWIGINTERN qstring cfunc_t___str__(cfunc_t const *self){
     qstring qs;
     qstring_printer_t p(self, qs, 0);
     self->print_func(p);
     return qs;
   }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "hexrays.h"

SwigDirector_Hexrays_Hooks::SwigDirector_Hexrays_Hooks(PyObject *self): Hexrays_Hooks(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((Hexrays_Hooks *)this, this); 
}




SwigDirector_Hexrays_Hooks::~SwigDirector_Hexrays_Hooks() {
}

int SwigDirector_Hexrays_Hooks::flowchart(qflow_chart_t *fc) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(fc), SWIGTYPE_p_qflow_chart_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "flowchart";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("flowchart");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.flowchart'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'flowchart'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::stkpnts(mbl_array_t *mba, stkpnts_t *stkpnts) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(mba), SWIGTYPE_p_mbl_array_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(stkpnts), SWIGTYPE_p_stkpnts_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "stkpnts";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("stkpnts");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.stkpnts'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'stkpnts'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::prolog(mbl_array_t *mba, qflow_chart_t *fc, bitset_t *reachable_blocks) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(mba), SWIGTYPE_p_mbl_array_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(fc), SWIGTYPE_p_qflow_chart_t,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(reachable_blocks), SWIGTYPE_p_bitset_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "prolog";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("prolog");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.prolog'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'prolog'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::microcode(mbl_array_t *mba) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(mba), SWIGTYPE_p_mbl_array_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "microcode";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("microcode");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.microcode'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'microcode'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::preoptimized(mbl_array_t *mba) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(mba), SWIGTYPE_p_mbl_array_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "preoptimized";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("preoptimized");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.preoptimized'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'preoptimized'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::locopt(mbl_array_t *mba) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(mba), SWIGTYPE_p_mbl_array_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "locopt";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("locopt");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.locopt'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'locopt'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::prealloc(mbl_array_t *mba) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(mba), SWIGTYPE_p_mbl_array_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char *const swig_method_name = "prealloc";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("prealloc");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.prealloc'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'prealloc'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::glbopt(mbl_array_t *mba) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(mba), SWIGTYPE_p_mbl_array_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char *const swig_method_name = "glbopt";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("glbopt");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.glbopt'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'glbopt'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::structural(control_graph_t *ct) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(ct), SWIGTYPE_p_control_graph_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char *const swig_method_name = "structural";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("structural");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.structural'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'structural'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::maturity(cfunc_t *cfunc, ctree_maturity_t new_maturity) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(cfunc), SWIGTYPE_p_cfunc_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(new_maturity));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 9;
  const char *const swig_method_name = "maturity";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("maturity");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.maturity'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'maturity'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::interr(int errcode) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(errcode));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 10;
  const char *const swig_method_name = "interr";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("interr");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.interr'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'interr'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::combine(mblock_t *blk, minsn_t *insn) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(blk), SWIGTYPE_p_mblock_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(insn), SWIGTYPE_p_minsn_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 11;
  const char *const swig_method_name = "combine";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("combine");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.combine'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'combine'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::print_func(cfunc_t *cfunc, vc_printer_t *vp) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(cfunc), SWIGTYPE_p_cfunc_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(vp), SWIGTYPE_p_vc_printer_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 12;
  const char *const swig_method_name = "print_func";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("print_func");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.print_func'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'print_func'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::func_printed(cfunc_t *cfunc) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(cfunc), SWIGTYPE_p_cfunc_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 13;
  const char *const swig_method_name = "func_printed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("func_printed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.func_printed'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'func_printed'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::resolve_stkaddrs(mbl_array_t *mba) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(mba), SWIGTYPE_p_mbl_array_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 14;
  const char *const swig_method_name = "resolve_stkaddrs";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("resolve_stkaddrs");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.resolve_stkaddrs'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'resolve_stkaddrs'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::open_pseudocode(vdui_t *vu) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 15;
  const char *const swig_method_name = "open_pseudocode";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("open_pseudocode");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.open_pseudocode'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'open_pseudocode'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::switch_pseudocode(vdui_t *vu) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 16;
  const char *const swig_method_name = "switch_pseudocode";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("switch_pseudocode");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.switch_pseudocode'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'switch_pseudocode'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::refresh_pseudocode(vdui_t *vu) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 17;
  const char *const swig_method_name = "refresh_pseudocode";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("refresh_pseudocode");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.refresh_pseudocode'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'refresh_pseudocode'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::close_pseudocode(vdui_t *vu) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 18;
  const char *const swig_method_name = "close_pseudocode";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("close_pseudocode");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.close_pseudocode'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'close_pseudocode'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::keyboard(vdui_t *vu, int key_code, int shift_state) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(key_code));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_int(static_cast< int >(shift_state));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 19;
  const char *const swig_method_name = "keyboard";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("keyboard");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.keyboard'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'keyboard'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::right_click(vdui_t *vu) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 20;
  const char *const swig_method_name = "right_click";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("right_click");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.right_click'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'right_click'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::double_click(vdui_t *vu, int shift_state) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(shift_state));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 21;
  const char *const swig_method_name = "double_click";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("double_click");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.double_click'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'double_click'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::curpos(vdui_t *vu) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 22;
  const char *const swig_method_name = "curpos";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("curpos");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.curpos'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'curpos'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


PyObject *SwigDirector_Hexrays_Hooks::create_hint(vdui_t *vu) {
  PyObject *c_result = 0 ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 23;
  const char *const swig_method_name = "create_hint";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("create_hint");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.create_hint'");
    }
  }
  /*%dout%*/c_result = result;Py_XINCREF(c_result);
  return (PyObject *) c_result;
}


int SwigDirector_Hexrays_Hooks::text_ready(vdui_t *vu) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 24;
  const char *const swig_method_name = "text_ready";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("text_ready");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.text_ready'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'text_ready'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::populating_popup(TWidget *widget, TPopupMenu *popup_handle, vdui_t *vu) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(widget), SWIGTYPE_p_TWidget,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(popup_handle), SWIGTYPE_p_TPopupMenu,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 25;
  const char *const swig_method_name = "populating_popup";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("populating_popup");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.populating_popup'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'populating_popup'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::lvar_name_changed(vdui_t *vu, lvar_t *v, char const *name, bool is_user_name) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(v), SWIGTYPE_p_lvar_t,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_FromCharPtr((const char *)name);
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_From_bool(static_cast< bool >(is_user_name));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 26;
  const char *const swig_method_name = "lvar_name_changed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("lvar_name_changed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.lvar_name_changed'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'lvar_name_changed'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::lvar_type_changed(vdui_t *vu, lvar_t *v, tinfo_t const *tinfo) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(v), SWIGTYPE_p_lvar_t,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(tinfo), SWIGTYPE_p_tinfo_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 27;
  const char *const swig_method_name = "lvar_type_changed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("lvar_type_changed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.lvar_type_changed'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'lvar_type_changed'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::lvar_cmt_changed(vdui_t *vu, lvar_t *v, char const *cmt) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(v), SWIGTYPE_p_lvar_t,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_FromCharPtr((const char *)cmt);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 28;
  const char *const swig_method_name = "lvar_cmt_changed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("lvar_cmt_changed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.lvar_cmt_changed'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'lvar_cmt_changed'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::lvar_mapping_changed(vdui_t *vu, lvar_t *from, lvar_t *to) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(vu), SWIGTYPE_p_vdui_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(from), SWIGTYPE_p_lvar_t,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(to), SWIGTYPE_p_lvar_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 29;
  const char *const swig_method_name = "lvar_mapping_changed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("lvar_mapping_changed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.lvar_mapping_changed'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'lvar_mapping_changed'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_Hexrays_Hooks::cmt_changed(cfunc_t *cfunc, treeloc_t const *loc, char const *cmt) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(cfunc), SWIGTYPE_p_cfunc_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(loc), SWIGTYPE_p_treeloc_t,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_FromCharPtr((const char *)cmt);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Hexrays_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 30;
  const char *const swig_method_name = "cmt_changed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("cmt_changed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Hexrays_Hooks.cmt_changed'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'cmt_changed'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


SwigDirector_user_lvar_modifier_t::SwigDirector_user_lvar_modifier_t(PyObject *self): user_lvar_modifier_t(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((user_lvar_modifier_t *)this, this); 
}




bool SwigDirector_user_lvar_modifier_t::modify_lvars(lvar_uservec_t *lvinf) {
  bool c_result = SwigValueInit< bool >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(lvinf), SWIGTYPE_p_lvar_uservec_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call user_lvar_modifier_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "modify_lvars";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("modify_lvars");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'user_lvar_modifier_t.modify_lvars'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'" " in method 'modify_lvars'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


SwigDirector_microcode_filter_t::SwigDirector_microcode_filter_t(PyObject *self): microcode_filter_t(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((microcode_filter_t *)this, this); 
}




bool SwigDirector_microcode_filter_t::match(codegen_t &cdg) {
  PYW_GIL_GET; // patched by patch_codegen.py
  bool c_result = SwigValueInit< bool >() ;

  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&cdg), SWIGTYPE_p_codegen_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call microcode_filter_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "match";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("match");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'microcode_filter_t.match'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'" " in method 'match'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


merror_t SwigDirector_microcode_filter_t::apply(codegen_t &cdg) {
  PYW_GIL_GET; // patched by patch_codegen.py
  merror_t c_result = SwigValueInit< merror_t >() ;

  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&cdg), SWIGTYPE_p_codegen_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call microcode_filter_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "apply";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("apply");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'microcode_filter_t.apply'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""merror_t""'" " in method 'apply'");
  }
  c_result = static_cast< merror_t >(swig_val);
  return (merror_t) c_result;
}


SwigDirector_udc_filter_t::SwigDirector_udc_filter_t(PyObject *self): udc_filter_t(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((udc_filter_t *)this, this); 
}




bool SwigDirector_udc_filter_t::match(codegen_t &cdg) {
  PYW_GIL_GET; // patched by patch_codegen.py
  bool c_result = SwigValueInit< bool >() ;

  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&cdg), SWIGTYPE_p_codegen_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call udc_filter_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "match";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("match");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'udc_filter_t.match'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'" " in method 'match'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


SwigDirector_codegen_t::SwigDirector_codegen_t(PyObject *self, mbl_array_t *m): codegen_t(m), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((codegen_t *)this, this); 
}




SwigDirector_codegen_t::~SwigDirector_codegen_t() {
}

merror_t SwigDirector_codegen_t::analyze_prolog(qflow_chart_t const &fc, bitset_t const &reachable) {
  merror_t c_result = SwigValueInit< merror_t >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&fc), SWIGTYPE_p_qflow_chart_t,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&reachable), SWIGTYPE_p_bitset_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call codegen_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "analyze_prolog";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("analyze_prolog");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'codegen_t.analyze_prolog'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""merror_t""'" " in method 'analyze_prolog'");
  }
  c_result = static_cast< merror_t >(swig_val);
  return (merror_t) c_result;
}


merror_t SwigDirector_codegen_t::gen_micro() {
  merror_t c_result = SwigValueInit< merror_t >() ;
  
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call codegen_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "gen_micro";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("gen_micro");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'codegen_t.gen_micro'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""merror_t""'" " in method 'gen_micro'");
  }
  c_result = static_cast< merror_t >(swig_val);
  return (merror_t) c_result;
}


mreg_t SwigDirector_codegen_t::load_operand(int opnum) {
  mreg_t c_result = SwigValueInit< mreg_t >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(opnum));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call codegen_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "load_operand";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("load_operand");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'codegen_t.load_operand'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""mreg_t""'" " in method 'load_operand'");
  }
  c_result = static_cast< mreg_t >(swig_val);
  return (mreg_t) c_result;
}


minsn_t *SwigDirector_codegen_t::emit_micro_mvm(mcode_t code, op_dtype_t dtype, uval_t l, uval_t r, uval_t d, int offsize) {
  minsn_t *c_result = 0 ;
  void *swig_argp ;
  int swig_res ;
  swig_owntype own ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(code));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(dtype));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(l));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(r));
  swig::SwigVar_PyObject obj4;
  obj4 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(d));
  swig::SwigVar_PyObject obj5;
  obj5 = SWIG_From_int(static_cast< int >(offsize));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call codegen_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "emit_micro_mvm";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("emit_micro_mvm");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'codegen_t.emit_micro_mvm'");
    }
  }
  swig_res = SWIG_ConvertPtrAndOwn(result, &swig_argp, SWIGTYPE_p_minsn_t,  0  | SWIG_POINTER_DISOWN, &own);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""minsn_t *""'" " in method 'emit_micro_mvm'");
  }
  c_result = reinterpret_cast< minsn_t * >(swig_argp);
  swig_acquire_ownership_obj(SWIG_as_voidptr(c_result), own /* & TODO: SWIG_POINTER_OWN */);
  return (minsn_t *) c_result;
}


SwigDirector_ctree_visitor_t::SwigDirector_ctree_visitor_t(PyObject *self, int _flags): ctree_visitor_t(_flags), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ctree_visitor_t *)this, this); 
}




int SwigDirector_ctree_visitor_t::visit_insn(cinsn_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cinsn_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ctree_visitor_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "visit_insn";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("visit_insn");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ctree_visitor_t.visit_insn'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'visit_insn'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_ctree_visitor_t::visit_expr(cexpr_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cexpr_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ctree_visitor_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "visit_expr";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("visit_expr");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ctree_visitor_t.visit_expr'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'visit_expr'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_ctree_visitor_t::leave_insn(cinsn_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cinsn_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ctree_visitor_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "leave_insn";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("leave_insn");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ctree_visitor_t.leave_insn'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'leave_insn'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_ctree_visitor_t::leave_expr(cexpr_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cexpr_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ctree_visitor_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "leave_expr";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("leave_expr");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ctree_visitor_t.leave_expr'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'leave_expr'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


SwigDirector_ctree_parentee_t::SwigDirector_ctree_parentee_t(PyObject *self, bool post): ctree_parentee_t(post), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ctree_parentee_t *)this, this); 
}




int SwigDirector_ctree_parentee_t::visit_insn(cinsn_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cinsn_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ctree_parentee_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "visit_insn";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("visit_insn");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ctree_parentee_t.visit_insn'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'visit_insn'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_ctree_parentee_t::visit_expr(cexpr_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cexpr_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ctree_parentee_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "visit_expr";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("visit_expr");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ctree_parentee_t.visit_expr'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'visit_expr'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_ctree_parentee_t::leave_insn(cinsn_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cinsn_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ctree_parentee_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "leave_insn";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("leave_insn");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ctree_parentee_t.leave_insn'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'leave_insn'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_ctree_parentee_t::leave_expr(cexpr_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cexpr_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ctree_parentee_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "leave_expr";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("leave_expr");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ctree_parentee_t.leave_expr'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'leave_expr'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


SwigDirector_cfunc_parentee_t::SwigDirector_cfunc_parentee_t(PyObject *self, cfunc_t *f, bool post): cfunc_parentee_t(f, post), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((cfunc_parentee_t *)this, this); 
}




int SwigDirector_cfunc_parentee_t::visit_insn(cinsn_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cinsn_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call cfunc_parentee_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "visit_insn";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("visit_insn");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'cfunc_parentee_t.visit_insn'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'visit_insn'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_cfunc_parentee_t::visit_expr(cexpr_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cexpr_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call cfunc_parentee_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "visit_expr";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("visit_expr");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'cfunc_parentee_t.visit_expr'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'visit_expr'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_cfunc_parentee_t::leave_insn(cinsn_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cinsn_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call cfunc_parentee_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "leave_insn";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("leave_insn");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'cfunc_parentee_t.leave_insn'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'leave_insn'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_cfunc_parentee_t::leave_expr(cexpr_t *arg0) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(arg0), SWIGTYPE_p_cexpr_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call cfunc_parentee_t.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "leave_expr";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("leave_expr");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'cfunc_parentee_t.leave_expr'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'leave_expr'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap__kludge_use_TPopupMenu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TPopupMenu *arg1 = (TPopupMenu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TPopupMenu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_kludge_use_TPopupMenu" "', argument " "1"" of type '" "TPopupMenu *""'"); 
  }
  arg1 = reinterpret_cast< TPopupMenu * >(argp1);
  {
    try
    {
      _kludge_use_TPopupMenu(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< operand_locator_t,number_format_t > *arg1 = (std::map< operand_locator_t,number_format_t > *) 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  number_format_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_numforms_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_t_at" "', argument " "1"" of type '" "std::map< operand_locator_t,number_format_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< operand_locator_t,number_format_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_numforms_t_at" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_t_at" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = (number_format_t *) &(arg1)->at((operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_number_format_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< operand_locator_t,number_format_t > *arg1 = (std::map< operand_locator_t,number_format_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_t_size" "', argument " "1"" of type '" "std::map< operand_locator_t,number_format_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< operand_locator_t,number_format_t > * >(argp1);
  {
    try
    {
      result = ((std::map< operand_locator_t,number_format_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_user_numforms_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< operand_locator_t,number_format_t > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_numforms_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (std::map< operand_locator_t,number_format_t > *)new std::map< operand_locator_t,number_format_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_numforms_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< operand_locator_t,number_format_t > *arg1 = (std::map< operand_locator_t,number_format_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_numforms_t" "', argument " "1"" of type '" "std::map< operand_locator_t,number_format_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< operand_locator_t,number_format_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_numforms_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_numforms_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_lvar_mapping_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< lvar_locator_t,lvar_locator_t > *arg1 = (std::map< lvar_locator_t,lvar_locator_t > *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  lvar_locator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_mapping_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_t_at" "', argument " "1"" of type '" "std::map< lvar_locator_t,lvar_locator_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< lvar_locator_t,lvar_locator_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_mapping_t_at" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_t_at" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (lvar_locator_t *) &(arg1)->at((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< lvar_locator_t,lvar_locator_t > *arg1 = (std::map< lvar_locator_t,lvar_locator_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_t_size" "', argument " "1"" of type '" "std::map< lvar_locator_t,lvar_locator_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< lvar_locator_t,lvar_locator_t > * >(argp1);
  {
    try
    {
      result = ((std::map< lvar_locator_t,lvar_locator_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lvar_mapping_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< lvar_locator_t,lvar_locator_t > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_lvar_mapping_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (std::map< lvar_locator_t,lvar_locator_t > *)new std::map< lvar_locator_t,lvar_locator_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lvar_mapping_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< lvar_locator_t,lvar_locator_t > *arg1 = (std::map< lvar_locator_t,lvar_locator_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lvar_mapping_t" "', argument " "1"" of type '" "std::map< lvar_locator_t,lvar_locator_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< lvar_locator_t,lvar_locator_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lvar_mapping_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *lvar_mapping_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_hexwarns_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< hexwarn_t > *)new qvector< hexwarn_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_hexwarn_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hexwarns_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< hexwarn_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_hexwarn_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_hexwarns_t" "', argument " "1"" of type '" "qvector< hexwarn_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_hexwarns_t" "', argument " "1"" of type '" "qvector< hexwarn_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = (qvector< hexwarn_t > *)new qvector< hexwarn_t >((qvector< hexwarn_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_hexwarn_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hexwarns_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_hexwarns_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_hexwarns_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_hexwarn_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_hexwarns_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_hexwarns_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< hexwarn_t >::qvector()\n"
    "    qvector< hexwarn_t >::qvector(qvector< hexwarn_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_hexwarns_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexwarns_t" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_push_back" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_push_back" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t_push_back" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hexwarn_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_push_back" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = (hexwarn_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "hexwarns_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hexwarns_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hexwarn_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hexwarns_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'hexwarns_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< hexwarn_t >::push_back(hexwarn_t const &)\n"
    "    qvector< hexwarn_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_pop_back" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_size" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = ((qvector< hexwarn_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_empty" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< hexwarn_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hexwarn_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_at" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexwarns_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (hexwarn_t *) &((qvector< hexwarn_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_qclear" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_clear" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  size_t arg2 ;
  hexwarn_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_resize" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexwarns_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hexwarns_t_resize" "', argument " "3"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t_resize" "', argument " "3"" of type '" "hexwarn_t const &""'"); 
  }
  arg3 = reinterpret_cast< hexwarn_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(hexwarn_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_resize" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexwarns_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "hexwarns_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_hexwarns_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hexwarn_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_hexwarns_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'hexwarns_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< hexwarn_t >::resize(size_t,hexwarn_t const &)\n"
    "    qvector< hexwarn_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  hexwarn_t const &arg2_defvalue = hexwarn_t() ;
  hexwarn_t *arg2 = (hexwarn_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_grow" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_grow" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t_grow" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
    }
    arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_capacity" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = ((qvector< hexwarn_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_reserve" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexwarns_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_truncate" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  qvector< hexwarn_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_swap" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_hexwarn_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_swap" "', argument " "2"" of type '" "qvector< hexwarn_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t_swap" "', argument " "2"" of type '" "qvector< hexwarn_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< hexwarn_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hexwarn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_extract" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = (hexwarn_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  hexwarn_t *arg2 = (hexwarn_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_inject" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_inject" "', argument " "2"" of type '" "hexwarn_t *""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hexwarns_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  qvector< hexwarn_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t___eq__" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_hexwarn_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t___eq__" "', argument " "2"" of type '" "qvector< hexwarn_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t___eq__" "', argument " "2"" of type '" "qvector< hexwarn_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< hexwarn_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< hexwarn_t > const *)arg1)->operator ==((qvector< hexwarn_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_hexwarns_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  qvector< hexwarn_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t___ne__" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_hexwarn_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t___ne__" "', argument " "2"" of type '" "qvector< hexwarn_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t___ne__" "', argument " "2"" of type '" "qvector< hexwarn_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< hexwarn_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< hexwarn_t > const *)arg1)->operator !=((qvector< hexwarn_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< hexwarn_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_begin" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = (qvector< hexwarn_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< hexwarn_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_end" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = (qvector< hexwarn_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< hexwarn_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_begin" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = (qvector< hexwarn_t >::const_iterator)((qvector< hexwarn_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "hexwarns_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hexwarns_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hexwarns_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'hexwarns_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< hexwarn_t >::begin()\n"
    "    qvector< hexwarn_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< hexwarn_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_end" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = (qvector< hexwarn_t >::const_iterator)((qvector< hexwarn_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "hexwarns_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hexwarns_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hexwarns_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'hexwarns_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< hexwarn_t >::end()\n"
    "    qvector< hexwarn_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  qvector< hexwarn_t >::iterator arg2 = (qvector< hexwarn_t >::iterator) 0 ;
  hexwarn_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< hexwarn_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_insert" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_insert" "', argument " "2"" of type '" "qvector< hexwarn_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< hexwarn_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hexwarns_t_insert" "', argument " "3"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t_insert" "', argument " "3"" of type '" "hexwarn_t const &""'"); 
  }
  arg3 = reinterpret_cast< hexwarn_t * >(argp3);
  {
    try
    {
      result = (qvector< hexwarn_t >::iterator)(arg1)->insert(arg2,(hexwarn_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  qvector< hexwarn_t >::iterator arg2 = (qvector< hexwarn_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< hexwarn_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_erase" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_erase" "', argument " "2"" of type '" "qvector< hexwarn_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< hexwarn_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< hexwarn_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  qvector< hexwarn_t >::iterator arg2 = (qvector< hexwarn_t >::iterator) 0 ;
  qvector< hexwarn_t >::iterator arg3 = (qvector< hexwarn_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< hexwarn_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_erase" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_erase" "', argument " "2"" of type '" "qvector< hexwarn_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< hexwarn_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hexwarns_t_erase" "', argument " "3"" of type '" "qvector< hexwarn_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< hexwarn_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< hexwarn_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "hexwarns_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexwarn_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hexwarns_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexwarn_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_hexwarn_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_hexwarns_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'hexwarns_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< hexwarn_t >::erase(qvector< hexwarn_t >::iterator)\n"
    "    qvector< hexwarn_t >::erase(qvector< hexwarn_t >::iterator,qvector< hexwarn_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< hexwarn_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_find" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_find" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t_find" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (qvector< hexwarn_t >::iterator)(arg1)->find((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< hexwarn_t >::const_iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_find" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_find" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t_find" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (qvector< hexwarn_t >::const_iterator)((qvector< hexwarn_t > const *)arg1)->find((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "hexwarns_t_find", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hexwarn_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hexwarns_t_find__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_hexwarn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hexwarn_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hexwarns_t_find__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'hexwarns_t_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< hexwarn_t >::find(hexwarn_t const &)\n"
    "    qvector< hexwarn_t >::find(hexwarn_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t_has", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_has" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_has" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t_has" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (bool)((qvector< hexwarn_t > const *)arg1)->has((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t_add_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t_add_unique", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t_add_unique" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t_add_unique" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t_add_unique" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->add_unique((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t__del(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t__del", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t__del" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarns_t__del" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t__del" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->del((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t___len__" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_hexwarn_t_Sg____len__((qvector< hexwarn_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hexwarn_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t___getitem__" "', argument " "1"" of type '" "qvector< hexwarn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexwarns_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (hexwarn_t *) &qvector_Sl_hexwarn_t_Sg____getitem__((qvector< hexwarn_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarns_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< hexwarn_t > *arg1 = (qvector< hexwarn_t > *) 0 ;
  size_t arg2 ;
  hexwarn_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarns_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarns_t___setitem__" "', argument " "1"" of type '" "qvector< hexwarn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< hexwarn_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexwarns_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hexwarns_t___setitem__" "', argument " "3"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarns_t___setitem__" "', argument " "3"" of type '" "hexwarn_t const &""'"); 
  }
  arg3 = reinterpret_cast< hexwarn_t * >(argp3);
  {
    try
    {
      qvector_Sl_hexwarn_t_Sg____setitem__(arg1,arg2,(hexwarn_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *hexwarns_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_hexwarn_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *hexwarns_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ctree_items_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< citem_t * > *)new qvector< citem_t * >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_citem_t_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ctree_items_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< citem_t * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_citem_t_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ctree_items_t" "', argument " "1"" of type '" "qvector< citem_t * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ctree_items_t" "', argument " "1"" of type '" "qvector< citem_t * > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = (qvector< citem_t * > *)new qvector< citem_t * >((qvector< citem_t * > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_citem_t_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ctree_items_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ctree_items_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ctree_items_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_citem_t_p_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ctree_items_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ctree_items_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< citem_t * >::qvector()\n"
    "    qvector< citem_t * >::qvector(qvector< citem_t * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ctree_items_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ctree_items_t" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  citem_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  citem_t *temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_push_back" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_push_back" "', argument " "2"" of type '" "citem_t *""'"); 
  }
  temp2 = reinterpret_cast< citem_t * >(argp2);
  arg2 = reinterpret_cast< citem_t ** >(&temp2);
  {
    try
    {
      (arg1)->push_back((citem_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  citem_t **result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_push_back" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = (citem_t **) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ctree_items_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ctree_items_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ctree_items_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ctree_items_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< citem_t * >::push_back(citem_t *const &)\n"
    "    qvector< citem_t * >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_pop_back" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_size" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = ((qvector< citem_t * > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_empty" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< citem_t * > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_qclear" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_clear" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  size_t arg2 ;
  citem_t **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  citem_t *temp3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_resize" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctree_items_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ctree_items_t_resize" "', argument " "3"" of type '" "citem_t *""'"); 
  }
  temp3 = reinterpret_cast< citem_t * >(argp3);
  arg3 = reinterpret_cast< citem_t ** >(&temp3);
  {
    try
    {
      (arg1)->resize(arg2,(citem_t *const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_resize" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctree_items_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ctree_items_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ctree_items_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_citem_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ctree_items_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ctree_items_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< citem_t * >::resize(size_t,citem_t *const &)\n"
    "    qvector< citem_t * >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_capacity" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = ((qvector< citem_t * > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_reserve" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctree_items_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_truncate" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  qvector< citem_t * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_swap" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_citem_t_p_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_swap" "', argument " "2"" of type '" "qvector< citem_t * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctree_items_t_swap" "', argument " "2"" of type '" "qvector< citem_t * > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< citem_t * > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  citem_t **result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_extract" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = (citem_t **)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  citem_t **arg2 = (citem_t **) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_inject" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_inject" "', argument " "2"" of type '" "citem_t **""'"); 
  }
  arg2 = reinterpret_cast< citem_t ** >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ctree_items_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  qvector< citem_t * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t___eq__" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_citem_t_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t___eq__" "', argument " "2"" of type '" "qvector< citem_t * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctree_items_t___eq__" "', argument " "2"" of type '" "qvector< citem_t * > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< citem_t * > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< citem_t * > const *)arg1)->operator ==((qvector< citem_t * > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ctree_items_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  qvector< citem_t * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t___ne__" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_citem_t_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t___ne__" "', argument " "2"" of type '" "qvector< citem_t * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctree_items_t___ne__" "', argument " "2"" of type '" "qvector< citem_t * > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< citem_t * > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< citem_t * > const *)arg1)->operator !=((qvector< citem_t * > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< citem_t * >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_begin" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = (qvector< citem_t * >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< citem_t * >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_end" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = (qvector< citem_t * >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< citem_t * >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_begin" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = (qvector< citem_t * >::const_iterator)((qvector< citem_t * > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ctree_items_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ctree_items_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ctree_items_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ctree_items_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< citem_t * >::begin()\n"
    "    qvector< citem_t * >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< citem_t * >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_end" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = (qvector< citem_t * >::const_iterator)((qvector< citem_t * > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ctree_items_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ctree_items_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ctree_items_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ctree_items_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< citem_t * >::end()\n"
    "    qvector< citem_t * >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  qvector< citem_t * >::iterator arg2 = (qvector< citem_t * >::iterator) 0 ;
  citem_t **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  citem_t *temp3 ;
  PyObject *swig_obj[3] ;
  qvector< citem_t * >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_insert" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_insert" "', argument " "2"" of type '" "qvector< citem_t * >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< citem_t * >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ctree_items_t_insert" "', argument " "3"" of type '" "citem_t *""'"); 
  }
  temp3 = reinterpret_cast< citem_t * >(argp3);
  arg3 = reinterpret_cast< citem_t ** >(&temp3);
  {
    try
    {
      result = (qvector< citem_t * >::iterator)(arg1)->insert(arg2,(citem_t *const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  qvector< citem_t * >::iterator arg2 = (qvector< citem_t * >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< citem_t * >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_erase" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_erase" "', argument " "2"" of type '" "qvector< citem_t * >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< citem_t * >::iterator >(argp2);
  {
    try
    {
      result = (qvector< citem_t * >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  qvector< citem_t * >::iterator arg2 = (qvector< citem_t * >::iterator) 0 ;
  qvector< citem_t * >::iterator arg3 = (qvector< citem_t * >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< citem_t * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_erase" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_erase" "', argument " "2"" of type '" "qvector< citem_t * >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< citem_t * >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ctree_items_t_erase" "', argument " "3"" of type '" "qvector< citem_t * >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< citem_t * >::iterator >(argp3);
  {
    try
    {
      result = (qvector< citem_t * >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ctree_items_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ctree_items_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_citem_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ctree_items_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ctree_items_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< citem_t * >::erase(qvector< citem_t * >::iterator)\n"
    "    qvector< citem_t * >::erase(qvector< citem_t * >::iterator,qvector< citem_t * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  citem_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  citem_t *temp2 ;
  qvector< citem_t * >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_find" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_find" "', argument " "2"" of type '" "citem_t *""'"); 
  }
  temp2 = reinterpret_cast< citem_t * >(argp2);
  arg2 = reinterpret_cast< citem_t ** >(&temp2);
  {
    try
    {
      result = (qvector< citem_t * >::iterator)(arg1)->find((citem_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  citem_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  citem_t *temp2 ;
  qvector< citem_t * >::const_iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_find" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_find" "', argument " "2"" of type '" "citem_t *""'"); 
  }
  temp2 = reinterpret_cast< citem_t * >(argp2);
  arg2 = reinterpret_cast< citem_t ** >(&temp2);
  {
    try
    {
      result = (qvector< citem_t * >::const_iterator)((qvector< citem_t * > const *)arg1)->find((citem_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ctree_items_t_find", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ctree_items_t_find__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_citem_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ctree_items_t_find__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ctree_items_t_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< citem_t * >::find(citem_t *const &)\n"
    "    qvector< citem_t * >::find(citem_t *const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  citem_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  citem_t *temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t_has", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_has" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_has" "', argument " "2"" of type '" "citem_t *""'"); 
  }
  temp2 = reinterpret_cast< citem_t * >(argp2);
  arg2 = reinterpret_cast< citem_t ** >(&temp2);
  {
    try
    {
      result = (bool)((qvector< citem_t * > const *)arg1)->has((citem_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t_add_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  citem_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  citem_t *temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t_add_unique", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t_add_unique" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t_add_unique" "', argument " "2"" of type '" "citem_t *""'"); 
  }
  temp2 = reinterpret_cast< citem_t * >(argp2);
  arg2 = reinterpret_cast< citem_t ** >(&temp2);
  {
    try
    {
      result = (bool)(arg1)->add_unique((citem_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t__del(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  citem_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  citem_t *temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t__del", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t__del" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_items_t__del" "', argument " "2"" of type '" "citem_t *""'"); 
  }
  temp2 = reinterpret_cast< citem_t * >(argp2);
  arg2 = reinterpret_cast< citem_t ** >(&temp2);
  {
    try
    {
      result = (bool)(arg1)->del((citem_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t___len__" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  {
    try
    {
      result = qvector_Sl_citem_t_Sm__Sg____len__((qvector< citem_t * > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  citem_t **result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t___getitem__" "', argument " "1"" of type '" "qvector< citem_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctree_items_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (citem_t **) &qvector_Sl_citem_t_Sm__Sg____getitem__((qvector< citem_t * > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_items_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< citem_t * > *arg1 = (qvector< citem_t * > *) 0 ;
  size_t arg2 ;
  citem_t **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  citem_t *temp3 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_items_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_items_t___setitem__" "', argument " "1"" of type '" "qvector< citem_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< citem_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctree_items_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ctree_items_t___setitem__" "', argument " "3"" of type '" "citem_t *""'"); 
  }
  temp3 = reinterpret_cast< citem_t * >(argp3);
  arg3 = reinterpret_cast< citem_t ** >(&temp3);
  {
    try
    {
      qvector_Sl_citem_t_Sm__Sg____setitem__(arg1,arg2,(citem_t *const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ctree_items_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_citem_t_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ctree_items_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_labels_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,qstring > *arg1 = (std::map< int,qstring > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  _qstring< char > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_labels_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_t_at" "', argument " "1"" of type '" "std::map< int,qstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,qstring > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_labels_t_at" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (_qstring< char > *) &(arg1)->at((int const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__qstringT_char_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,qstring > *arg1 = (std::map< int,qstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_t_size" "', argument " "1"" of type '" "std::map< int,qstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,qstring > * >(argp1);
  {
    try
    {
      result = ((std::map< int,qstring > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_user_labels_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,qstring > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_labels_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (std::map< int,qstring > *)new std::map< int,qstring >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_labels_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,qstring > *arg1 = (std::map< int,qstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_labels_t" "', argument " "1"" of type '" "std::map< int,qstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,qstring > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_labels_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_labels_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_cmts_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< treeloc_t,citem_cmt_t > *arg1 = (std::map< treeloc_t,citem_cmt_t > *) 0 ;
  treeloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  citem_cmt_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_cmts_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_t_at" "', argument " "1"" of type '" "std::map< treeloc_t,citem_cmt_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< treeloc_t,citem_cmt_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_cmts_t_at" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_t_at" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  {
    try
    {
      result = (citem_cmt_t *) &(arg1)->at((treeloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_cmt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< treeloc_t,citem_cmt_t > *arg1 = (std::map< treeloc_t,citem_cmt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_t_size" "', argument " "1"" of type '" "std::map< treeloc_t,citem_cmt_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< treeloc_t,citem_cmt_t > * >(argp1);
  {
    try
    {
      result = ((std::map< treeloc_t,citem_cmt_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_user_cmts_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< treeloc_t,citem_cmt_t > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_cmts_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (std::map< treeloc_t,citem_cmt_t > *)new std::map< treeloc_t,citem_cmt_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_cmts_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< treeloc_t,citem_cmt_t > *arg1 = (std::map< treeloc_t,citem_cmt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_cmts_t" "', argument " "1"" of type '" "std::map< treeloc_t,citem_cmt_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< treeloc_t,citem_cmt_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_cmts_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_cmts_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_iflags_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< citem_locator_t,int32 > *arg1 = (std::map< citem_locator_t,int32 > *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_iflags_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_t_at" "', argument " "1"" of type '" "std::map< citem_locator_t,int32 > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< citem_locator_t,int32 > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_iflags_t_at" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_t_at" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (int *) &(arg1)->at((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< citem_locator_t,int32 > *arg1 = (std::map< citem_locator_t,int32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_t_size" "', argument " "1"" of type '" "std::map< citem_locator_t,int32 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< citem_locator_t,int32 > * >(argp1);
  {
    try
    {
      result = ((std::map< citem_locator_t,int32 > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_user_iflags_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< citem_locator_t,int32 > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_iflags_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (std::map< citem_locator_t,int32 > *)new std::map< citem_locator_t,int32 >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_citem_locator_t_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_iflags_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< citem_locator_t,int32 > *arg1 = (std::map< citem_locator_t,int32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_iflags_t" "', argument " "1"" of type '" "std::map< citem_locator_t,int32 > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< citem_locator_t,int32 > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_iflags_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_citem_locator_t_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_iflags_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_unions_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< ea_t,intvec_t > *arg1 = (std::map< ea_t,intvec_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  qvector< int > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_unions_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_t_at" "', argument " "1"" of type '" "std::map< ea_t,intvec_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< ea_t,intvec_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_unions_t_at" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (qvector< int > *) &(arg1)->at((unsigned int const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< ea_t,intvec_t > *arg1 = (std::map< ea_t,intvec_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_t_size" "', argument " "1"" of type '" "std::map< ea_t,intvec_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< ea_t,intvec_t > * >(argp1);
  {
    try
    {
      result = ((std::map< ea_t,intvec_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_user_unions_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< ea_t,intvec_t > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_unions_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (std::map< ea_t,intvec_t > *)new std::map< ea_t,intvec_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_unions_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< ea_t,intvec_t > *arg1 = (std::map< ea_t,intvec_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_unions_t" "', argument " "1"" of type '" "std::map< ea_t,intvec_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< ea_t,intvec_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_unions_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_unions_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_cinsnptrvec_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< cinsn_t * > *)new qvector< cinsn_t * >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_cinsn_t_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cinsnptrvec_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< cinsn_t * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_cinsn_t_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cinsnptrvec_t" "', argument " "1"" of type '" "qvector< cinsn_t * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cinsnptrvec_t" "', argument " "1"" of type '" "qvector< cinsn_t * > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = (qvector< cinsn_t * > *)new qvector< cinsn_t * >((qvector< cinsn_t * > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_cinsn_t_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cinsnptrvec_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_cinsnptrvec_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_cinsnptrvec_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_cinsn_t_p_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_cinsnptrvec_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_cinsnptrvec_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< cinsn_t * >::qvector()\n"
    "    qvector< cinsn_t * >::qvector(qvector< cinsn_t * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_cinsnptrvec_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cinsnptrvec_t" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  cinsn_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cinsn_t *temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_push_back" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_push_back" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  temp2 = reinterpret_cast< cinsn_t * >(argp2);
  arg2 = reinterpret_cast< cinsn_t ** >(&temp2);
  {
    try
    {
      (arg1)->push_back((cinsn_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cinsn_t **result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_push_back" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = (cinsn_t **) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cinsnptrvec_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cinsn_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cinsnptrvec_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cinsnptrvec_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< cinsn_t * >::push_back(cinsn_t *const &)\n"
    "    qvector< cinsn_t * >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_pop_back" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_size" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = ((qvector< cinsn_t * > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_empty" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< cinsn_t * > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_qclear" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_clear" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  size_t arg2 ;
  cinsn_t **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  cinsn_t *temp3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_resize" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cinsnptrvec_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cinsnptrvec_t_resize" "', argument " "3"" of type '" "cinsn_t *""'"); 
  }
  temp3 = reinterpret_cast< cinsn_t * >(argp3);
  arg3 = reinterpret_cast< cinsn_t ** >(&temp3);
  {
    try
    {
      (arg1)->resize(arg2,(cinsn_t *const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_resize" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cinsnptrvec_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_cinsnptrvec_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cinsn_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_cinsnptrvec_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cinsnptrvec_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< cinsn_t * >::resize(size_t,cinsn_t *const &)\n"
    "    qvector< cinsn_t * >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_capacity" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = ((qvector< cinsn_t * > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_reserve" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cinsnptrvec_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_truncate" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  qvector< cinsn_t * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_swap" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_cinsn_t_p_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_swap" "', argument " "2"" of type '" "qvector< cinsn_t * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsnptrvec_t_swap" "', argument " "2"" of type '" "qvector< cinsn_t * > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< cinsn_t * > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t **result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_extract" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = (cinsn_t **)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  cinsn_t **arg2 = (cinsn_t **) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_inject" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_inject" "', argument " "2"" of type '" "cinsn_t **""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t ** >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cinsnptrvec_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  qvector< cinsn_t * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t___eq__" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_cinsn_t_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t___eq__" "', argument " "2"" of type '" "qvector< cinsn_t * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsnptrvec_t___eq__" "', argument " "2"" of type '" "qvector< cinsn_t * > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< cinsn_t * > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< cinsn_t * > const *)arg1)->operator ==((qvector< cinsn_t * > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  qvector< cinsn_t * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t___ne__" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_cinsn_t_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t___ne__" "', argument " "2"" of type '" "qvector< cinsn_t * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsnptrvec_t___ne__" "', argument " "2"" of type '" "qvector< cinsn_t * > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< cinsn_t * > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< cinsn_t * > const *)arg1)->operator !=((qvector< cinsn_t * > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< cinsn_t * >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_begin" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = (qvector< cinsn_t * >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< cinsn_t * >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_end" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = (qvector< cinsn_t * >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< cinsn_t * >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_begin" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = (qvector< cinsn_t * >::const_iterator)((qvector< cinsn_t * > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cinsnptrvec_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cinsnptrvec_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cinsnptrvec_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< cinsn_t * >::begin()\n"
    "    qvector< cinsn_t * >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< cinsn_t * >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_end" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = (qvector< cinsn_t * >::const_iterator)((qvector< cinsn_t * > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cinsnptrvec_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cinsnptrvec_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cinsnptrvec_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< cinsn_t * >::end()\n"
    "    qvector< cinsn_t * >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  qvector< cinsn_t * >::iterator arg2 = (qvector< cinsn_t * >::iterator) 0 ;
  cinsn_t **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  cinsn_t *temp3 ;
  PyObject *swig_obj[3] ;
  qvector< cinsn_t * >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_insert" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_insert" "', argument " "2"" of type '" "qvector< cinsn_t * >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< cinsn_t * >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cinsnptrvec_t_insert" "', argument " "3"" of type '" "cinsn_t *""'"); 
  }
  temp3 = reinterpret_cast< cinsn_t * >(argp3);
  arg3 = reinterpret_cast< cinsn_t ** >(&temp3);
  {
    try
    {
      result = (qvector< cinsn_t * >::iterator)(arg1)->insert(arg2,(cinsn_t *const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  qvector< cinsn_t * >::iterator arg2 = (qvector< cinsn_t * >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< cinsn_t * >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_erase" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_erase" "', argument " "2"" of type '" "qvector< cinsn_t * >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< cinsn_t * >::iterator >(argp2);
  {
    try
    {
      result = (qvector< cinsn_t * >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  qvector< cinsn_t * >::iterator arg2 = (qvector< cinsn_t * >::iterator) 0 ;
  qvector< cinsn_t * >::iterator arg3 = (qvector< cinsn_t * >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< cinsn_t * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_erase" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_erase" "', argument " "2"" of type '" "qvector< cinsn_t * >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< cinsn_t * >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cinsnptrvec_t_erase" "', argument " "3"" of type '" "qvector< cinsn_t * >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< cinsn_t * >::iterator >(argp3);
  {
    try
    {
      result = (qvector< cinsn_t * >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_cinsn_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cinsnptrvec_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_cinsn_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_cinsn_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_cinsnptrvec_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cinsnptrvec_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< cinsn_t * >::erase(qvector< cinsn_t * >::iterator)\n"
    "    qvector< cinsn_t * >::erase(qvector< cinsn_t * >::iterator,qvector< cinsn_t * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  cinsn_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cinsn_t *temp2 ;
  qvector< cinsn_t * >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_find" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_find" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  temp2 = reinterpret_cast< cinsn_t * >(argp2);
  arg2 = reinterpret_cast< cinsn_t ** >(&temp2);
  {
    try
    {
      result = (qvector< cinsn_t * >::iterator)(arg1)->find((cinsn_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  cinsn_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cinsn_t *temp2 ;
  qvector< cinsn_t * >::const_iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_find" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_find" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  temp2 = reinterpret_cast< cinsn_t * >(argp2);
  arg2 = reinterpret_cast< cinsn_t ** >(&temp2);
  {
    try
    {
      result = (qvector< cinsn_t * >::const_iterator)((qvector< cinsn_t * > const *)arg1)->find((cinsn_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_find", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cinsn_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cinsnptrvec_t_find__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cinsn_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cinsnptrvec_t_find__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cinsnptrvec_t_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< cinsn_t * >::find(cinsn_t *const &)\n"
    "    qvector< cinsn_t * >::find(cinsn_t *const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  cinsn_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cinsn_t *temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_has", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_has" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_has" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  temp2 = reinterpret_cast< cinsn_t * >(argp2);
  arg2 = reinterpret_cast< cinsn_t ** >(&temp2);
  {
    try
    {
      result = (bool)((qvector< cinsn_t * > const *)arg1)->has((cinsn_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t_add_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  cinsn_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cinsn_t *temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t_add_unique", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t_add_unique" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t_add_unique" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  temp2 = reinterpret_cast< cinsn_t * >(argp2);
  arg2 = reinterpret_cast< cinsn_t ** >(&temp2);
  {
    try
    {
      result = (bool)(arg1)->add_unique((cinsn_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t__del(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  cinsn_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cinsn_t *temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t__del", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t__del" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsnptrvec_t__del" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  temp2 = reinterpret_cast< cinsn_t * >(argp2);
  arg2 = reinterpret_cast< cinsn_t ** >(&temp2);
  {
    try
    {
      result = (bool)(arg1)->del((cinsn_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t___len__" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  {
    try
    {
      result = qvector_Sl_cinsn_t_Sm__Sg____len__((qvector< cinsn_t * > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cinsn_t **result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t___getitem__" "', argument " "1"" of type '" "qvector< cinsn_t * > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cinsnptrvec_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (cinsn_t **) &qvector_Sl_cinsn_t_Sm__Sg____getitem__((qvector< cinsn_t * > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsnptrvec_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< cinsn_t * > *arg1 = (qvector< cinsn_t * > *) 0 ;
  size_t arg2 ;
  cinsn_t **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  cinsn_t *temp3 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsnptrvec_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsnptrvec_t___setitem__" "', argument " "1"" of type '" "qvector< cinsn_t * > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< cinsn_t * > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cinsnptrvec_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cinsnptrvec_t___setitem__" "', argument " "3"" of type '" "cinsn_t *""'"); 
  }
  temp3 = reinterpret_cast< cinsn_t * >(argp3);
  arg3 = reinterpret_cast< cinsn_t ** >(&temp3);
  {
    try
    {
      qvector_Sl_cinsn_t_Sm__Sg____setitem__(arg1,arg2,(cinsn_t *const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cinsnptrvec_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_cinsn_t_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cinsnptrvec_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_eamap_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< ea_t,cinsnptrvec_t > *arg1 = (std::map< ea_t,cinsnptrvec_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  cinsnptrvec_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "eamap_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_t_at" "', argument " "1"" of type '" "std::map< ea_t,cinsnptrvec_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< ea_t,cinsnptrvec_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "eamap_t_at" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (cinsnptrvec_t *) &(arg1)->at((unsigned int const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< ea_t,cinsnptrvec_t > *arg1 = (std::map< ea_t,cinsnptrvec_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_t_size" "', argument " "1"" of type '" "std::map< ea_t,cinsnptrvec_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< ea_t,cinsnptrvec_t > * >(argp1);
  {
    try
    {
      result = ((std::map< ea_t,cinsnptrvec_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_eamap_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< ea_t,cinsnptrvec_t > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_eamap_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (std::map< ea_t,cinsnptrvec_t > *)new std::map< ea_t,cinsnptrvec_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_eamap_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< ea_t,cinsnptrvec_t > *arg1 = (std::map< ea_t,cinsnptrvec_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_eamap_t" "', argument " "1"" of type '" "std::map< ea_t,cinsnptrvec_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< ea_t,cinsnptrvec_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *eamap_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *eamap_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_boundaries_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< cinsn_t *,rangeset_t > *arg1 = (std::map< cinsn_t *,rangeset_t > *) 0 ;
  cinsn_t **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cinsn_t *temp2 ;
  PyObject *swig_obj[2] ;
  rangeset_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "boundaries_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_t_at" "', argument " "1"" of type '" "std::map< cinsn_t *,rangeset_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< cinsn_t *,rangeset_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundaries_t_at" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  temp2 = reinterpret_cast< cinsn_t * >(argp2);
  arg2 = reinterpret_cast< cinsn_t ** >(&temp2);
  {
    try
    {
      result = (rangeset_t *) &(arg1)->at((cinsn_t *const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_rangeset_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< cinsn_t *,rangeset_t > *arg1 = (std::map< cinsn_t *,rangeset_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_t_size" "', argument " "1"" of type '" "std::map< cinsn_t *,rangeset_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< cinsn_t *,rangeset_t > * >(argp1);
  {
    try
    {
      result = ((std::map< cinsn_t *,rangeset_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_boundaries_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< cinsn_t *,rangeset_t > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_boundaries_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (std::map< cinsn_t *,rangeset_t > *)new std::map< cinsn_t *,rangeset_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_boundaries_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< cinsn_t *,rangeset_t > *arg1 = (std::map< cinsn_t *,rangeset_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_boundaries_t" "', argument " "1"" of type '" "std::map< cinsn_t *,rangeset_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< cinsn_t *,rangeset_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *boundaries_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *boundaries_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_iflags_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_iflags_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_second" "', argument " "1"" of type '" "user_iflags_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_second" "', argument " "1"" of type '" "user_iflags_iterator_t""'");
    } else {
      user_iflags_iterator_t * temp = reinterpret_cast< user_iflags_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (int32 *) &py_user_iflags_second(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cfuncptr_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qrefcnt_t< cfunc_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cfuncptr_t" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (qrefcnt_t< cfunc_t > *)new qrefcnt_t< cfunc_t >(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cfuncptr_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qrefcnt_t< cfunc_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qrefcnt_tT_cfunc_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cfuncptr_t" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cfuncptr_t" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (qrefcnt_t< cfunc_t > *)new qrefcnt_t< cfunc_t >((qrefcnt_t< cfunc_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cfuncptr_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_cfuncptr_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cfunc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_cfuncptr_t__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_cfuncptr_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_cfuncptr_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qrefcnt_t< cfunc_t >::qrefcnt_t(cfunc_t *)\n"
    "    qrefcnt_t< cfunc_t >::qrefcnt_t(qrefcnt_t< cfunc_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_reset" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cfunc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t___deref__" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (cfunc_t *)((qrefcnt_t< cfunc_t > const *)arg1)->operator ->();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cfunc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cfunc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t___ref__" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (cfunc_t *) &((qrefcnt_t< cfunc_t > const *)arg1)->operator *();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cfunc_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_cfuncptr_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cfuncptr_t" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      delete_qrefcnt_t_Sl_cfunc_t_Sg_(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_entry_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_entry_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_entry_ea_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "cfuncptr_t_entry_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      if (arg1) (*arg1)->entry_ea = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_entry_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_entry_ea_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (ea_t) ((*arg1)->entry_ea);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_mba_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_mba_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_mba_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_mba_set" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->mba = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_mba_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mbl_array_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_mba_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (mbl_array_t *) ((*arg1)->mba);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mbl_array_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_body_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_body_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_body_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_body_set" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->body = *arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_body_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_body_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (cinsn_t *)& ((*arg1)->body);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_argidx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  intvec_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_argidx_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (intvec_t *) &(intvec_t &) ((*arg1)->argidx);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_maturity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  ctree_maturity_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_maturity_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_maturity_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfuncptr_t_maturity_set" "', argument " "2"" of type '" "ctree_maturity_t""'");
  } 
  arg2 = static_cast< ctree_maturity_t >(val2);
  {
    try
    {
      if (arg1) (*arg1)->maturity = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_maturity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctree_maturity_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_maturity_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (ctree_maturity_t) ((*arg1)->maturity);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_user_labels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  user_labels_t *arg2 = (user_labels_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_user_labels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_user_labels_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_user_labels_set" "', argument " "2"" of type '" "user_labels_t *""'"); 
  }
  arg2 = reinterpret_cast< user_labels_t * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->user_labels = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_user_labels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_labels_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_user_labels_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (user_labels_t *) ((*arg1)->user_labels);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_user_cmts_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  user_cmts_t *arg2 = (user_cmts_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_user_cmts_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_user_cmts_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_user_cmts_set" "', argument " "2"" of type '" "user_cmts_t *""'"); 
  }
  arg2 = reinterpret_cast< user_cmts_t * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->user_cmts = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_user_cmts_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_cmts_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_user_cmts_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (user_cmts_t *) ((*arg1)->user_cmts);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_numforms_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  user_numforms_t *arg2 = (user_numforms_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_numforms_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_numforms_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_numforms_set" "', argument " "2"" of type '" "user_numforms_t *""'"); 
  }
  arg2 = reinterpret_cast< user_numforms_t * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->numforms = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_numforms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_numforms_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_numforms_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (user_numforms_t *) ((*arg1)->numforms);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_user_iflags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  user_iflags_t *arg2 = (user_iflags_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_user_iflags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_user_iflags_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_user_iflags_set" "', argument " "2"" of type '" "user_iflags_t *""'"); 
  }
  arg2 = reinterpret_cast< user_iflags_t * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->user_iflags = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_user_iflags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_iflags_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_user_iflags_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (user_iflags_t *) ((*arg1)->user_iflags);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_user_unions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  user_unions_t *arg2 = (user_unions_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_user_unions_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_user_unions_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_user_unions_set" "', argument " "2"" of type '" "user_unions_t *""'"); 
  }
  arg2 = reinterpret_cast< user_unions_t * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->user_unions = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_user_unions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_unions_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_user_unions_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (user_unions_t *) ((*arg1)->user_unions);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_refcnt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_refcnt_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_refcnt_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfuncptr_t_refcnt_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (*arg1)->refcnt = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_refcnt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_refcnt_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (int) ((*arg1)->refcnt);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_statebits_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_statebits_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_statebits_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfuncptr_t_statebits_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (*arg1)->statebits = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_statebits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_statebits_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (int) ((*arg1)->statebits);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_hdrlines_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_hdrlines_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_hdrlines_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfuncptr_t_hdrlines_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (*arg1)->hdrlines = arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_hdrlines_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_hdrlines_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (int) ((*arg1)->hdrlines);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_treeitems_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  ctree_items_t *arg2 = (ctree_items_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_treeitems_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_treeitems_set" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_treeitems_set" "', argument " "2"" of type '" "ctree_items_t *""'"); 
  }
  arg2 = reinterpret_cast< ctree_items_t * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->treeitems = *arg2;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_treeitems_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctree_items_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_treeitems_get" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (ctree_items_t *)& ((*arg1)->treeitems);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_release(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_release" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (*arg1)->release();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_build_c_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_build_c_tree" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (*arg1)->build_c_tree();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_verify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  allow_unused_labels_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_verify", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_verify" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfuncptr_t_verify" "', argument " "2"" of type '" "allow_unused_labels_t""'");
  } 
  arg2 = static_cast< allow_unused_labels_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cfuncptr_t_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      (*arg1)->verify(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_print_dcl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qstring temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp2)
    arg2 = &temp2;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_print_dcl" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (*arg1)->print_dcl(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // bytes_container typemap(argout) (qstring *vout)
    Py_XDECREF(resultobj);
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg2->c_str(), arg2->length());
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_print_func(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  vc_printer_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_print_func", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_print_func" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vc_printer_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_print_func" "', argument " "2"" of type '" "vc_printer_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfuncptr_t_print_func" "', argument " "2"" of type '" "vc_printer_t &""'"); 
  }
  arg2 = reinterpret_cast< vc_printer_t * >(argp2);
  {
    try
    {
      (*arg1)->print_func(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_func_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_get_func_type", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_func_type" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_get_func_type" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfuncptr_t_get_func_type" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  {
    try
    {
      result = (bool)(*arg1)->get_func_type(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_lvars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvars_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_lvars" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (lvars_t *)(*arg1)->get_lvars();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvars_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_stkoff_delta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sval_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_stkoff_delta" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (sval_t)(*arg1)->get_stkoff_delta();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_find_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  citem_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_find_label", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_find_label" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfuncptr_t_find_label" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (citem_t *)(*arg1)->find_label(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_remove_unused_labels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_remove_unused_labels" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (*arg1)->remove_unused_labels();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_user_cmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  treeloc_t *arg2 = 0 ;
  cmt_retrieval_type_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_get_user_cmt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_user_cmt" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_get_user_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfuncptr_t_get_user_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cfuncptr_t_get_user_cmt" "', argument " "3"" of type '" "cmt_retrieval_type_t""'");
  } 
  arg3 = static_cast< cmt_retrieval_type_t >(val3);
  {
    try
    {
      result = (char *)(*arg1)->get_user_cmt((treeloc_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_set_user_cmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  treeloc_t *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_set_user_cmt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_set_user_cmt" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_set_user_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfuncptr_t_set_user_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfuncptr_t_set_user_cmt" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      (*arg1)->set_user_cmt((treeloc_t const &)*arg2,(char const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_user_iflags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int32 result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_get_user_iflags", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_user_iflags" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_get_user_iflags" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfuncptr_t_get_user_iflags" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (int32)(*arg1)->get_user_iflags((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_set_user_iflags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  citem_locator_t *arg2 = 0 ;
  int32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_set_user_iflags", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_set_user_iflags" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_set_user_iflags" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfuncptr_t_set_user_iflags" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cfuncptr_t_set_user_iflags" "', argument " "3"" of type '" "int32""'");
  } 
  arg3 = static_cast< int32 >(val3);
  {
    try
    {
      (*arg1)->set_user_iflags((citem_locator_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_has_orphan_cmts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_has_orphan_cmts" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (bool)(*arg1)->has_orphan_cmts();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_del_orphan_cmts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_del_orphan_cmts" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (int)(*arg1)->del_orphan_cmts();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_user_union_selection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  ea_t arg2 ;
  intvec_t *arg3 = (intvec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_get_user_union_selection", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_user_union_selection" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "cfuncptr_t_get_user_union_selection" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_qvectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfuncptr_t_get_user_union_selection" "', argument " "3"" of type '" "intvec_t *""'"); 
  }
  arg3 = reinterpret_cast< intvec_t * >(argp3);
  {
    try
    {
      result = (bool)(*arg1)->get_user_union_selection(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_set_user_union_selection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  ea_t arg2 ;
  intvec_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_set_user_union_selection", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_set_user_union_selection" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "cfuncptr_t_set_user_union_selection" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_qvectorT_int_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfuncptr_t_set_user_union_selection" "', argument " "3"" of type '" "intvec_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfuncptr_t_set_user_union_selection" "', argument " "3"" of type '" "intvec_t const &""'"); 
  }
  arg3 = reinterpret_cast< intvec_t * >(argp3);
  {
    try
    {
      (*arg1)->set_user_union_selection(arg2,(intvec_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_save_user_labels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_save_user_labels" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (*arg1)->save_user_labels();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_save_user_cmts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_save_user_cmts" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (*arg1)->save_user_cmts();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_save_user_numforms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_save_user_numforms" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (*arg1)->save_user_numforms();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_save_user_iflags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_save_user_iflags" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (*arg1)->save_user_iflags();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_save_user_unions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_save_user_unions" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      (*arg1)->save_user_unions();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_line_item(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  ctree_item_t *arg5 = (ctree_item_t *) 0 ;
  ctree_item_t *arg6 = (ctree_item_t *) 0 ;
  ctree_item_t *arg7 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject *swig_obj[7] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_get_line_item", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_line_item" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_get_line_item" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cfuncptr_t_get_line_item" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cfuncptr_t_get_line_item" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cfuncptr_t_get_line_item" "', argument " "5"" of type '" "ctree_item_t *""'"); 
  }
  arg5 = reinterpret_cast< ctree_item_t * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cfuncptr_t_get_line_item" "', argument " "6"" of type '" "ctree_item_t *""'"); 
  }
  arg6 = reinterpret_cast< ctree_item_t * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "cfuncptr_t_get_line_item" "', argument " "7"" of type '" "ctree_item_t *""'"); 
  }
  arg7 = reinterpret_cast< ctree_item_t * >(argp7);
  {
    try
    {
      result = (bool)(*arg1)->get_line_item((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_warnings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hexwarns_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_warnings" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (hexwarns_t *) &(*arg1)->get_warnings();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_eamap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eamap_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_eamap" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (eamap_t *) &(*arg1)->get_eamap();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_boundaries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  boundaries_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_boundaries" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (boundaries_t *) &(*arg1)->get_boundaries();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_get_pseudocode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  strvec_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_get_pseudocode" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = (strvec_t *) &(*arg1)->get_pseudocode();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_simpleline_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_gather_derefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  ctree_item_t *arg2 = 0 ;
  udt_type_data_t *arg3 = (udt_type_data_t *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfuncptr_t_gather_derefs", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_gather_derefs" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctree_item_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_gather_derefs" "', argument " "2"" of type '" "ctree_item_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfuncptr_t_gather_derefs" "', argument " "2"" of type '" "ctree_item_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctree_item_t * >(argp2);
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_udt_type_data_t, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfuncptr_t_gather_derefs" "', argument " "3"" of type '" "udt_type_data_t *""'"); 
    }
    arg3 = reinterpret_cast< udt_type_data_t * >(argp3);
  }
  {
    try
    {
      result = (bool)(*arg1)->gather_derefs((ctree_item_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_find_item_coords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_find_item_coords" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_find_item_coords" "', argument " "2"" of type '" "citem_t const *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfuncptr_t_find_item_coords" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cfuncptr_t_find_item_coords" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try
    {
      result = (bool)(*arg1)->find_item_coords((citem_t const *)arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_find_item_coords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t_find_item_coords" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfuncptr_t_find_item_coords" "', argument " "2"" of type '" "citem_t const *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  {
    try
    {
      result = (PyObject *)cfunc_t_find_item_coords__SWIG_1((cfunc_t*)(arg1)->operator ->(),(citem_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t_find_item_coords(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cfuncptr_t_find_item_coords", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cfuncptr_t_find_item_coords__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_int, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_cfuncptr_t_find_item_coords__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cfuncptr_t_find_item_coords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cfunc_t::find_item_coords(citem_t const *,int *,int *)\n"
    "    cfunc_t::find_item_coords(citem_t const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cfuncptr_t___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qrefcnt_t< cfunc_t > *arg1 = (qrefcnt_t< cfunc_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< _qstring< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfuncptr_t___str__" "', argument " "1"" of type '" "qrefcnt_t< cfunc_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qrefcnt_t< cfunc_t > * >(argp1);
  {
    try
    {
      result = cfunc_t___str__((cfunc_t*)(arg1)->operator ->());
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // bytes_container typemap(out) qstring
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) (&result)->c_str(), (&result)->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cfuncptr_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cfuncptr_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_qvector_history_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< history_item_t > *)new qvector< history_item_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_history_item_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qvector_history_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< history_item_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_history_item_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_qvector_history_t" "', argument " "1"" of type '" "qvector< history_item_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_qvector_history_t" "', argument " "1"" of type '" "qvector< history_item_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = (qvector< history_item_t > *)new qvector< history_item_t >((qvector< history_item_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_history_item_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qvector_history_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_qvector_history_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_qvector_history_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_history_item_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_qvector_history_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_qvector_history_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< history_item_t >::qvector()\n"
    "    qvector< history_item_t >::qvector(qvector< history_item_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_qvector_history_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_qvector_history_t" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  history_item_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_push_back" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_push_back" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t_push_back" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  arg2 = reinterpret_cast< history_item_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((history_item_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  history_item_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_push_back" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = (history_item_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_history_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_history_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_history_item_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_history_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_history_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< history_item_t >::push_back(history_item_t const &)\n"
    "    qvector< history_item_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_pop_back" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_size" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = ((qvector< history_item_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_empty" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< history_item_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  history_item_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_at" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_history_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (history_item_t *) &((qvector< history_item_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_qclear" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_clear" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  size_t arg2 ;
  history_item_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_resize" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_history_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_history_t_resize" "', argument " "3"" of type '" "history_item_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t_resize" "', argument " "3"" of type '" "history_item_t const &""'"); 
  }
  arg3 = reinterpret_cast< history_item_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(history_item_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_resize" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_history_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_history_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_qvector_history_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_history_item_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qvector_history_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_history_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< history_item_t >::resize(size_t,history_item_t const &)\n"
    "    qvector< history_item_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  history_item_t const &arg2_defvalue = history_item_t() ;
  history_item_t *arg2 = (history_item_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_grow" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_history_item_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_grow" "', argument " "2"" of type '" "history_item_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t_grow" "', argument " "2"" of type '" "history_item_t const &""'"); 
    }
    arg2 = reinterpret_cast< history_item_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((history_item_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_capacity" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = ((qvector< history_item_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_reserve" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_history_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_truncate" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  qvector< history_item_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_swap" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_history_item_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_swap" "', argument " "2"" of type '" "qvector< history_item_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t_swap" "', argument " "2"" of type '" "qvector< history_item_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< history_item_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  history_item_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_extract" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = (history_item_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  history_item_t *arg2 = (history_item_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_inject" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_history_item_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_inject" "', argument " "2"" of type '" "history_item_t *""'"); 
  }
  arg2 = reinterpret_cast< history_item_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "qvector_history_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  qvector< history_item_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t___eq__" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_history_item_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t___eq__" "', argument " "2"" of type '" "qvector< history_item_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t___eq__" "', argument " "2"" of type '" "qvector< history_item_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< history_item_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< history_item_t > const *)arg1)->operator ==((qvector< history_item_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qvector_history_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  qvector< history_item_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t___ne__" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_history_item_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t___ne__" "', argument " "2"" of type '" "qvector< history_item_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t___ne__" "', argument " "2"" of type '" "qvector< history_item_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< history_item_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< history_item_t > const *)arg1)->operator !=((qvector< history_item_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< history_item_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_begin" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = (qvector< history_item_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< history_item_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_end" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = (qvector< history_item_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< history_item_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_begin" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = (qvector< history_item_t >::const_iterator)((qvector< history_item_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_history_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_history_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_history_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_history_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< history_item_t >::begin()\n"
    "    qvector< history_item_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< history_item_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_end" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = (qvector< history_item_t >::const_iterator)((qvector< history_item_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_history_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_history_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_history_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_history_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< history_item_t >::end()\n"
    "    qvector< history_item_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  qvector< history_item_t >::iterator arg2 = (qvector< history_item_t >::iterator) 0 ;
  history_item_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< history_item_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_insert" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_history_item_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_insert" "', argument " "2"" of type '" "qvector< history_item_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< history_item_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_history_t_insert" "', argument " "3"" of type '" "history_item_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t_insert" "', argument " "3"" of type '" "history_item_t const &""'"); 
  }
  arg3 = reinterpret_cast< history_item_t * >(argp3);
  {
    try
    {
      result = (qvector< history_item_t >::iterator)(arg1)->insert(arg2,(history_item_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  qvector< history_item_t >::iterator arg2 = (qvector< history_item_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< history_item_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_erase" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_history_item_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_erase" "', argument " "2"" of type '" "qvector< history_item_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< history_item_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< history_item_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  qvector< history_item_t >::iterator arg2 = (qvector< history_item_t >::iterator) 0 ;
  qvector< history_item_t >::iterator arg3 = (qvector< history_item_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< history_item_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_erase" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_history_item_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_erase" "', argument " "2"" of type '" "qvector< history_item_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< history_item_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_history_item_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_history_t_erase" "', argument " "3"" of type '" "qvector< history_item_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< history_item_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< history_item_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_history_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_history_item_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_history_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_history_item_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_history_item_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qvector_history_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_history_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< history_item_t >::erase(qvector< history_item_t >::iterator)\n"
    "    qvector< history_item_t >::erase(qvector< history_item_t >::iterator,qvector< history_item_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  history_item_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< history_item_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_find" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_find" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t_find" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  arg2 = reinterpret_cast< history_item_t * >(argp2);
  {
    try
    {
      result = (qvector< history_item_t >::iterator)(arg1)->find((history_item_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  history_item_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< history_item_t >::const_iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_find" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_find" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t_find" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  arg2 = reinterpret_cast< history_item_t * >(argp2);
  {
    try
    {
      result = (qvector< history_item_t >::const_iterator)((qvector< history_item_t > const *)arg1)->find((history_item_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_history_t_find", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_history_item_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_history_t_find__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_history_item_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_history_t_find__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_history_t_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< history_item_t >::find(history_item_t const &)\n"
    "    qvector< history_item_t >::find(history_item_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  history_item_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t_has", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_has" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_has" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t_has" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  arg2 = reinterpret_cast< history_item_t * >(argp2);
  {
    try
    {
      result = (bool)((qvector< history_item_t > const *)arg1)->has((history_item_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t_add_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  history_item_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t_add_unique", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t_add_unique" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t_add_unique" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t_add_unique" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  arg2 = reinterpret_cast< history_item_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->add_unique((history_item_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t__del(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  history_item_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t__del", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t__del" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_history_t__del" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t__del" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  arg2 = reinterpret_cast< history_item_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->del((history_item_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t___len__" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_history_item_t_Sg____len__((qvector< history_item_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  history_item_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t___getitem__" "', argument " "1"" of type '" "qvector< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_history_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (history_item_t *) &qvector_Sl_history_item_t_Sg____getitem__((qvector< history_item_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_history_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< history_item_t > *arg1 = (qvector< history_item_t > *) 0 ;
  size_t arg2 ;
  history_item_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_history_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_history_t___setitem__" "', argument " "1"" of type '" "qvector< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< history_item_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_history_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_history_t___setitem__" "', argument " "3"" of type '" "history_item_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_history_t___setitem__" "', argument " "3"" of type '" "history_item_t const &""'"); 
  }
  arg3 = reinterpret_cast< history_item_t * >(argp3);
  {
    try
    {
      qvector_Sl_history_item_t_Sg____setitem__(arg1,arg2,(history_item_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *qvector_history_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_history_item_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *qvector_history_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_history_t_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstack< history_item_t > *arg1 = (qstack< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  history_item_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstackT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "history_t_pop" "', argument " "1"" of type '" "qstack< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qstack< history_item_t > * >(argp1);
  {
    try
    {
      result = (arg1)->pop();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new history_item_t(static_cast< const history_item_t& >(result))), SWIGTYPE_p_history_item_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_history_t_top__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qstack< history_item_t > *arg1 = (qstack< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  history_item_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstackT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "history_t_top" "', argument " "1"" of type '" "qstack< history_item_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qstack< history_item_t > * >(argp1);
  {
    try
    {
      result = (history_item_t *) &((qstack< history_item_t > const *)arg1)->top();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_history_t_top__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qstack< history_item_t > *arg1 = (qstack< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  history_item_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstackT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "history_t_top" "', argument " "1"" of type '" "qstack< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qstack< history_item_t > * >(argp1);
  {
    try
    {
      result = (history_item_t *) &(arg1)->top();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_history_t_top(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "history_t_top", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qstackT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_history_t_top__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qstackT_history_item_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_history_t_top__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'history_t_top'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qstack< history_item_t >::top() const\n"
    "    qstack< history_item_t >::top()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_history_t_push(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstack< history_item_t > *arg1 = (qstack< history_item_t > *) 0 ;
  history_item_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "history_t_push", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstackT_history_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "history_t_push" "', argument " "1"" of type '" "qstack< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qstack< history_item_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_history_item_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "history_t_push" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "history_t_push" "', argument " "2"" of type '" "history_item_t const &""'"); 
  }
  arg2 = reinterpret_cast< history_item_t * >(argp2);
  {
    try
    {
      (arg1)->push((history_item_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_history_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstack< history_item_t > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_history_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (qstack< history_item_t > *)new qstack< history_item_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qstackT_history_item_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_history_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstack< history_item_t > *arg1 = (qstack< history_item_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstackT_history_item_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_history_t" "', argument " "1"" of type '" "qstack< history_item_t > *""'"); 
  }
  arg1 = reinterpret_cast< qstack< history_item_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *history_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qstackT_history_item_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *history_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_qlist_cinsn_t_iterator_cur_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist_cinsn_t_iterator *arg1 = (qlist_cinsn_t_iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlist_cinsn_t_iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_iterator_cur_get" "', argument " "1"" of type '" "qlist_cinsn_t_iterator *""'"); 
  }
  arg1 = reinterpret_cast< qlist_cinsn_t_iterator * >(argp1);
  {
    try
    {
      result = (cinsn_t *) &qlist_cinsn_t_iterator_cur_get(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_iterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist_cinsn_t_iterator *arg1 = (qlist_cinsn_t_iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlist_cinsn_t_iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_iterator_next" "', argument " "1"" of type '" "qlist_cinsn_t_iterator *""'"); 
  }
  arg1 = reinterpret_cast< qlist_cinsn_t_iterator * >(argp1);
  {
    try
    {
      qlist_cinsn_t_iterator_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_iterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist_cinsn_t_iterator *arg1 = (qlist_cinsn_t_iterator *) 0 ;
  qlist_cinsn_t_iterator *arg2 = (qlist_cinsn_t_iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_iterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlist_cinsn_t_iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_iterator___eq__" "', argument " "1"" of type '" "qlist_cinsn_t_iterator const *""'"); 
  }
  arg1 = reinterpret_cast< qlist_cinsn_t_iterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qlist_cinsn_t_iterator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_iterator___eq__" "', argument " "2"" of type '" "qlist_cinsn_t_iterator const *""'"); 
  }
  arg2 = reinterpret_cast< qlist_cinsn_t_iterator * >(argp2);
  {
    try
    {
      result = (bool)qlist_cinsn_t_iterator_operator_Se__Se_((qlist_cinsn_t_iterator const *)arg1,(qlist_cinsn_t_iterator const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_iterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist_cinsn_t_iterator *arg1 = (qlist_cinsn_t_iterator *) 0 ;
  qlist_cinsn_t_iterator *arg2 = (qlist_cinsn_t_iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_iterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlist_cinsn_t_iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_iterator___ne__" "', argument " "1"" of type '" "qlist_cinsn_t_iterator const *""'"); 
  }
  arg1 = reinterpret_cast< qlist_cinsn_t_iterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qlist_cinsn_t_iterator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_iterator___ne__" "', argument " "2"" of type '" "qlist_cinsn_t_iterator const *""'"); 
  }
  arg2 = reinterpret_cast< qlist_cinsn_t_iterator * >(argp2);
  {
    try
    {
      result = (bool)qlist_cinsn_t_iterator_operator_SN__Se_((qlist_cinsn_t_iterator const *)arg1,(qlist_cinsn_t_iterator const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_qlist_cinsn_t_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist_cinsn_t_iterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_qlist_cinsn_t_iterator", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (qlist_cinsn_t_iterator *)new qlist_cinsn_t_iterator();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qlist_cinsn_t_iterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_qlist_cinsn_t_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist_cinsn_t_iterator *arg1 = (qlist_cinsn_t_iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlist_cinsn_t_iterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_qlist_cinsn_t_iterator" "', argument " "1"" of type '" "qlist_cinsn_t_iterator *""'"); 
  }
  arg1 = reinterpret_cast< qlist_cinsn_t_iterator * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *qlist_cinsn_t_iterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qlist_cinsn_t_iterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *qlist_cinsn_t_iterator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_qvector_lvar_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< lvar_t > *)new qvector< lvar_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_lvar_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qvector_lvar_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_lvar_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_qvector_lvar_t" "', argument " "1"" of type '" "qvector< lvar_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_qvector_lvar_t" "', argument " "1"" of type '" "qvector< lvar_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_t > *)new qvector< lvar_t >((qvector< lvar_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_lvar_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qvector_lvar_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_qvector_lvar_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_qvector_lvar_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_lvar_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_qvector_lvar_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_qvector_lvar_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_t >::qvector()\n"
    "    qvector< lvar_t >::qvector(qvector< lvar_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_qvector_lvar_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_qvector_lvar_t" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  lvar_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_push_back" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_push_back" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t_push_back" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((lvar_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lvar_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_push_back" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = (lvar_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_lvar_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_lvar_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lvar_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_lvar_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_lvar_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_t >::push_back(lvar_t const &)\n"
    "    qvector< lvar_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_pop_back" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_size" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = ((qvector< lvar_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_empty" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< lvar_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  lvar_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_at" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_lvar_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (lvar_t *) &((qvector< lvar_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_qclear" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_clear" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  size_t arg2 ;
  lvar_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_resize" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_lvar_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_lvar_t_resize" "', argument " "3"" of type '" "lvar_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t_resize" "', argument " "3"" of type '" "lvar_t const &""'"); 
  }
  arg3 = reinterpret_cast< lvar_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(lvar_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_resize" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_lvar_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_lvar_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_qvector_lvar_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lvar_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qvector_lvar_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_lvar_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_t >::resize(size_t,lvar_t const &)\n"
    "    qvector< lvar_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  lvar_t const &arg2_defvalue = lvar_t() ;
  lvar_t *arg2 = (lvar_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_grow" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_grow" "', argument " "2"" of type '" "lvar_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t_grow" "', argument " "2"" of type '" "lvar_t const &""'"); 
    }
    arg2 = reinterpret_cast< lvar_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((lvar_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_capacity" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = ((qvector< lvar_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_reserve" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_lvar_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_truncate" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  qvector< lvar_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_swap" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_lvar_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_swap" "', argument " "2"" of type '" "qvector< lvar_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t_swap" "', argument " "2"" of type '" "qvector< lvar_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_extract" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = (lvar_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_inject" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_inject" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "qvector_lvar_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  qvector< lvar_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t___eq__" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_lvar_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t___eq__" "', argument " "2"" of type '" "qvector< lvar_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t___eq__" "', argument " "2"" of type '" "qvector< lvar_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< lvar_t > const *)arg1)->operator ==((qvector< lvar_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  qvector< lvar_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t___ne__" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_lvar_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t___ne__" "', argument " "2"" of type '" "qvector< lvar_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t___ne__" "', argument " "2"" of type '" "qvector< lvar_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< lvar_t > const *)arg1)->operator !=((qvector< lvar_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_begin" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_end" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_begin" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_t >::const_iterator)((qvector< lvar_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_lvar_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_lvar_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_lvar_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_lvar_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_t >::begin()\n"
    "    qvector< lvar_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_end" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_t >::const_iterator)((qvector< lvar_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_lvar_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_lvar_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_lvar_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_lvar_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_t >::end()\n"
    "    qvector< lvar_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  qvector< lvar_t >::iterator arg2 = (qvector< lvar_t >::iterator) 0 ;
  lvar_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< lvar_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_insert" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_insert" "', argument " "2"" of type '" "qvector< lvar_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_lvar_t_insert" "', argument " "3"" of type '" "lvar_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t_insert" "', argument " "3"" of type '" "lvar_t const &""'"); 
  }
  arg3 = reinterpret_cast< lvar_t * >(argp3);
  {
    try
    {
      result = (qvector< lvar_t >::iterator)(arg1)->insert(arg2,(lvar_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  qvector< lvar_t >::iterator arg2 = (qvector< lvar_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< lvar_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_erase" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_erase" "', argument " "2"" of type '" "qvector< lvar_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< lvar_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  qvector< lvar_t >::iterator arg2 = (qvector< lvar_t >::iterator) 0 ;
  qvector< lvar_t >::iterator arg3 = (qvector< lvar_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< lvar_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_erase" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_erase" "', argument " "2"" of type '" "qvector< lvar_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_lvar_t_erase" "', argument " "3"" of type '" "qvector< lvar_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< lvar_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< lvar_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_lvar_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lvar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_lvar_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lvar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_lvar_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qvector_lvar_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_lvar_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_t >::erase(qvector< lvar_t >::iterator)\n"
    "    qvector< lvar_t >::erase(qvector< lvar_t >::iterator,qvector< lvar_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  lvar_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< lvar_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_find" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_find" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t_find" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (qvector< lvar_t >::iterator)(arg1)->find((lvar_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  lvar_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< lvar_t >::const_iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_find" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_find" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t_find" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (qvector< lvar_t >::const_iterator)((qvector< lvar_t > const *)arg1)->find((lvar_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_lvar_t_find", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lvar_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_lvar_t_find__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lvar_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_lvar_t_find__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_lvar_t_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_t >::find(lvar_t const &)\n"
    "    qvector< lvar_t >::find(lvar_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  lvar_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t_has", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_has" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_has" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t_has" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)((qvector< lvar_t > const *)arg1)->has((lvar_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t_add_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  lvar_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t_add_unique", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t_add_unique" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t_add_unique" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t_add_unique" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->add_unique((lvar_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t__del(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  lvar_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t__del", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t__del" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_lvar_t__del" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t__del" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->del((lvar_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t___len__" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_lvar_t_Sg____len__((qvector< lvar_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  lvar_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t___getitem__" "', argument " "1"" of type '" "qvector< lvar_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_lvar_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (lvar_t *) &qvector_Sl_lvar_t_Sg____getitem__((qvector< lvar_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_lvar_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_t > *arg1 = (qvector< lvar_t > *) 0 ;
  size_t arg2 ;
  lvar_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_lvar_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_lvar_t___setitem__" "', argument " "1"" of type '" "qvector< lvar_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_lvar_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_lvar_t___setitem__" "', argument " "3"" of type '" "lvar_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_lvar_t___setitem__" "', argument " "3"" of type '" "lvar_t const &""'"); 
  }
  arg3 = reinterpret_cast< lvar_t * >(argp3);
  {
    try
    {
      qvector_Sl_lvar_t_Sg____setitem__(arg1,arg2,(lvar_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *qvector_lvar_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_lvar_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *qvector_lvar_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_qlist_cinsn_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qlist< cinsn_t > *)new qlist< cinsn_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qlistT_cinsn_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qlist_cinsn_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qlist< cinsn_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qlistT_cinsn_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_qlist_cinsn_t" "', argument " "1"" of type '" "qlist< cinsn_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_qlist_cinsn_t" "', argument " "1"" of type '" "qlist< cinsn_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = (qlist< cinsn_t > *)new qlist< cinsn_t >((qlist< cinsn_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qlistT_cinsn_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qlist_cinsn_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_qlist_cinsn_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_qlist_cinsn_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qlistT_cinsn_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_qlist_cinsn_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_qlist_cinsn_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qlist< cinsn_t >::qlist()\n"
    "    qlist< cinsn_t >::qlist(qlist< cinsn_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_qlist_cinsn_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_qlist_cinsn_t" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  qlist< cinsn_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_swap" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qlistT_cinsn_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_swap" "', argument " "2"" of type '" "qlist< cinsn_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_swap" "', argument " "2"" of type '" "qlist< cinsn_t > &""'"); 
  }
  arg2 = reinterpret_cast< qlist< cinsn_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_empty" "', argument " "1"" of type '" "qlist< cinsn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = (bool)((qlist< cinsn_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_size" "', argument " "1"" of type '" "qlist< cinsn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = ((qlist< cinsn_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_front__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cinsn_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_front" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = (cinsn_t *) &(arg1)->front();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cinsn_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_back" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = (cinsn_t *) &(arg1)->back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_front__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cinsn_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_front" "', argument " "1"" of type '" "qlist< cinsn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = (cinsn_t *) &((qlist< cinsn_t > const *)arg1)->front();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_front(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_front", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qlist_cinsn_t_front__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qlist_cinsn_t_front__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qlist_cinsn_t_front'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qlist< cinsn_t >::front()\n"
    "    qlist< cinsn_t >::front() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cinsn_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_back" "', argument " "1"" of type '" "qlist< cinsn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = (cinsn_t *) &((qlist< cinsn_t > const *)arg1)->back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_back", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qlist_cinsn_t_back__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qlist_cinsn_t_back__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qlist_cinsn_t_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qlist< cinsn_t >::back()\n"
    "    qlist< cinsn_t >::back() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_rbegin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qlist< cinsn_t >::reverse_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_rbegin" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = (arg1)->rbegin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new qlist< cinsn_t >::reverse_iterator(static_cast< const qlist< cinsn_t >::reverse_iterator& >(result))), SWIGTYPE_p_qlistT_cinsn_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_rend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qlist< cinsn_t >::reverse_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_rend" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = (arg1)->rend();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new qlist< cinsn_t >::reverse_iterator(static_cast< const qlist< cinsn_t >::reverse_iterator& >(result))), SWIGTYPE_p_qlistT_cinsn_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_rbegin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qlist< cinsn_t >::const_reverse_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_rbegin" "', argument " "1"" of type '" "qlist< cinsn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = ((qlist< cinsn_t > const *)arg1)->rbegin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new qlist< cinsn_t >::const_reverse_iterator(static_cast< const qlist< cinsn_t >::const_reverse_iterator& >(result))), SWIGTYPE_p_qlistT_cinsn_t_t__const_reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_rbegin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_rbegin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qlist_cinsn_t_rbegin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qlist_cinsn_t_rbegin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qlist_cinsn_t_rbegin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qlist< cinsn_t >::rbegin()\n"
    "    qlist< cinsn_t >::rbegin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_rend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qlist< cinsn_t >::const_reverse_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_rend" "', argument " "1"" of type '" "qlist< cinsn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = ((qlist< cinsn_t > const *)arg1)->rend();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new qlist< cinsn_t >::const_reverse_iterator(static_cast< const qlist< cinsn_t >::const_reverse_iterator& >(result))), SWIGTYPE_p_qlistT_cinsn_t_t__const_reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_rend(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_rend", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qlist_cinsn_t_rend__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qlist_cinsn_t_rend__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qlist_cinsn_t_rend'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qlist< cinsn_t >::rend()\n"
    "    qlist< cinsn_t >::rend() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  qlist< cinsn_t >::iterator arg2 ;
  cinsn_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qlist< cinsn_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_insert" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qlistT_cinsn_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_insert" "', argument " "2"" of type '" "qlist< cinsn_t >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_insert" "', argument " "2"" of type '" "qlist< cinsn_t >::iterator""'");
    } else {
      qlist< cinsn_t >::iterator * temp = reinterpret_cast< qlist< cinsn_t >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qlist_cinsn_t_insert" "', argument " "3"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_insert" "', argument " "3"" of type '" "cinsn_t const &""'"); 
  }
  arg3 = reinterpret_cast< cinsn_t * >(argp3);
  {
    try
    {
      result = (arg1)->insert(arg2,(cinsn_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new qlist< cinsn_t >::iterator(static_cast< const qlist< cinsn_t >::iterator& >(result))), SWIGTYPE_p_qlistT_cinsn_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  qlist< cinsn_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cinsn_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_insert" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qlistT_cinsn_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_insert" "', argument " "2"" of type '" "qlist< cinsn_t >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_insert" "', argument " "2"" of type '" "qlist< cinsn_t >::iterator""'");
    } else {
      qlist< cinsn_t >::iterator * temp = reinterpret_cast< qlist< cinsn_t >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (cinsn_t *) &(arg1)->insert(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_push_front", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_push_front" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_push_front" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_push_front" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    try
    {
      (arg1)->push_front((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_push_back" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_push_back" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_push_back" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cinsn_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_push_back" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = (cinsn_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qlist_cinsn_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cinsn_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qlist_cinsn_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qlist_cinsn_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qlist< cinsn_t >::push_back(cinsn_t const &)\n"
    "    qlist< cinsn_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  qlist< cinsn_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  qlist< cinsn_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_erase" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qlistT_cinsn_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_erase" "', argument " "2"" of type '" "qlist< cinsn_t >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_erase" "', argument " "2"" of type '" "qlist< cinsn_t >::iterator""'");
    } else {
      qlist< cinsn_t >::iterator * temp = reinterpret_cast< qlist< cinsn_t >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new qlist< cinsn_t >::iterator(static_cast< const qlist< cinsn_t >::iterator& >(result))), SWIGTYPE_p_qlistT_cinsn_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  qlist< cinsn_t >::iterator arg2 ;
  qlist< cinsn_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_erase" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qlistT_cinsn_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_erase" "', argument " "2"" of type '" "qlist< cinsn_t >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_erase" "', argument " "2"" of type '" "qlist< cinsn_t >::iterator""'");
    } else {
      qlist< cinsn_t >::iterator * temp = reinterpret_cast< qlist< cinsn_t >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_qlistT_cinsn_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qlist_cinsn_t_erase" "', argument " "3"" of type '" "qlist< cinsn_t >::iterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_erase" "', argument " "3"" of type '" "qlist< cinsn_t >::iterator""'");
    } else {
      qlist< cinsn_t >::iterator * temp = reinterpret_cast< qlist< cinsn_t >::iterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      (arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_clear" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_pop_front" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_front();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_pop_back" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  qlist< cinsn_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qlist_cinsn_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t___eq__" "', argument " "1"" of type '" "qlist< cinsn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qlistT_cinsn_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t___eq__" "', argument " "2"" of type '" "qlist< cinsn_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t___eq__" "', argument " "2"" of type '" "qlist< cinsn_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qlist< cinsn_t > * >(argp2);
  {
    try
    {
      result = (bool)((qlist< cinsn_t > const *)arg1)->operator ==((qlist< cinsn_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  qlist< cinsn_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qlist_cinsn_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t___ne__" "', argument " "1"" of type '" "qlist< cinsn_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qlistT_cinsn_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t___ne__" "', argument " "2"" of type '" "qlist< cinsn_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t___ne__" "', argument " "2"" of type '" "qlist< cinsn_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qlist< cinsn_t > * >(argp2);
  {
    try
    {
      result = (bool)((qlist< cinsn_t > const *)arg1)->operator !=((qlist< cinsn_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qlist_cinsn_t_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_begin" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = qlist_Sl_cinsn_t_Sg__begin(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new qlist_cinsn_t_iterator(static_cast< const qlist_cinsn_t_iterator& >(result))), SWIGTYPE_p_qlist_cinsn_t_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qlist_cinsn_t_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_end" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    try
    {
      result = qlist_Sl_cinsn_t_Sg__end(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new qlist_cinsn_t_iterator(static_cast< const qlist_cinsn_t_iterator& >(result))), SWIGTYPE_p_qlist_cinsn_t_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_insert__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  qlist_cinsn_t_iterator arg2 ;
  cinsn_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qlist_cinsn_t_iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_insert" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qlist_cinsn_t_iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_insert" "', argument " "2"" of type '" "qlist_cinsn_t_iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_insert" "', argument " "2"" of type '" "qlist_cinsn_t_iterator""'");
    } else {
      qlist_cinsn_t_iterator * temp = reinterpret_cast< qlist_cinsn_t_iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qlist_cinsn_t_insert" "', argument " "3"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_insert" "', argument " "3"" of type '" "cinsn_t const &""'"); 
  }
  arg3 = reinterpret_cast< cinsn_t * >(argp3);
  {
    try
    {
      result = qlist_Sl_cinsn_t_Sg__insert__SWIG_3(arg1,arg2,(cinsn_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new qlist_cinsn_t_iterator(static_cast< const qlist_cinsn_t_iterator& >(result))), SWIGTYPE_p_qlist_cinsn_t_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_insert", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qlistT_cinsn_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qlist_cinsn_t_insert__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qlistT_cinsn_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_cinsn_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qlist_cinsn_t_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qlist_cinsn_t_iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_cinsn_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qlist_cinsn_t_insert__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qlist_cinsn_t_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qlist< cinsn_t >::insert(qlist< cinsn_t >::iterator,cinsn_t const &)\n"
    "    qlist< cinsn_t >::insert(qlist< cinsn_t >::iterator)\n"
    "    qlist< cinsn_t >::insert(qlist_cinsn_t_iterator,cinsn_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qlist< cinsn_t > *arg1 = (qlist< cinsn_t > *) 0 ;
  qlist_cinsn_t_iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qlistT_cinsn_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qlist_cinsn_t_erase" "', argument " "1"" of type '" "qlist< cinsn_t > *""'"); 
  }
  arg1 = reinterpret_cast< qlist< cinsn_t > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qlist_cinsn_t_iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qlist_cinsn_t_erase" "', argument " "2"" of type '" "qlist_cinsn_t_iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qlist_cinsn_t_erase" "', argument " "2"" of type '" "qlist_cinsn_t_iterator""'");
    } else {
      qlist_cinsn_t_iterator * temp = reinterpret_cast< qlist_cinsn_t_iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      qlist_Sl_cinsn_t_Sg__erase__SWIG_2(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qlist_cinsn_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qlist_cinsn_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qlistT_cinsn_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qlist_cinsn_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qlist_cinsn_t_iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qlist_cinsn_t_erase__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qlistT_cinsn_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qlistT_cinsn_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qlistT_cinsn_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qlist_cinsn_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qlist_cinsn_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qlist< cinsn_t >::erase(qlist< cinsn_t >::iterator)\n"
    "    qlist< cinsn_t >::erase(qlist< cinsn_t >::iterator,qlist< cinsn_t >::iterator)\n"
    "    qlist< cinsn_t >::erase(qlist_cinsn_t_iterator)\n");
  return 0;
}


SWIGINTERN PyObject *qlist_cinsn_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qlistT_cinsn_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *qlist_cinsn_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_qvector_carg_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< carg_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< carg_t > *)new qvector< carg_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_carg_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qvector_carg_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< carg_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_carg_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_qvector_carg_t" "', argument " "1"" of type '" "qvector< carg_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_qvector_carg_t" "', argument " "1"" of type '" "qvector< carg_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = (qvector< carg_t > *)new qvector< carg_t >((qvector< carg_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_carg_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qvector_carg_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_qvector_carg_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_qvector_carg_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_carg_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_qvector_carg_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_qvector_carg_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< carg_t >::qvector()\n"
    "    qvector< carg_t >::qvector(qvector< carg_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_qvector_carg_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_qvector_carg_t" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_push_back" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_push_back" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t_push_back" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  carg_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_push_back" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = (carg_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_carg_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_carg_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_carg_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_carg_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_carg_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< carg_t >::push_back(carg_t const &)\n"
    "    qvector< carg_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_pop_back" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_size" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = ((qvector< carg_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_empty" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< carg_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  carg_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_at" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_carg_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (carg_t *) &((qvector< carg_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_qclear" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_clear" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  size_t arg2 ;
  carg_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_resize" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_carg_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_carg_t_resize" "', argument " "3"" of type '" "carg_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t_resize" "', argument " "3"" of type '" "carg_t const &""'"); 
  }
  arg3 = reinterpret_cast< carg_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(carg_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_resize" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_carg_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_carg_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_qvector_carg_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_carg_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qvector_carg_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_carg_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< carg_t >::resize(size_t,carg_t const &)\n"
    "    qvector< carg_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  carg_t const &arg2_defvalue = carg_t() ;
  carg_t *arg2 = (carg_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_grow" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_grow" "', argument " "2"" of type '" "carg_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t_grow" "', argument " "2"" of type '" "carg_t const &""'"); 
    }
    arg2 = reinterpret_cast< carg_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_capacity" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = ((qvector< carg_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_reserve" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_carg_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_truncate" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  qvector< carg_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_swap" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_carg_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_swap" "', argument " "2"" of type '" "qvector< carg_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t_swap" "', argument " "2"" of type '" "qvector< carg_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< carg_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  carg_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_extract" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = (carg_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  carg_t *arg2 = (carg_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_inject" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_inject" "', argument " "2"" of type '" "carg_t *""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "qvector_carg_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  qvector< carg_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t___eq__" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_carg_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t___eq__" "', argument " "2"" of type '" "qvector< carg_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t___eq__" "', argument " "2"" of type '" "qvector< carg_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< carg_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< carg_t > const *)arg1)->operator ==((qvector< carg_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  qvector< carg_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t___ne__" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_carg_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t___ne__" "', argument " "2"" of type '" "qvector< carg_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t___ne__" "', argument " "2"" of type '" "qvector< carg_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< carg_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< carg_t > const *)arg1)->operator !=((qvector< carg_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< carg_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_begin" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = (qvector< carg_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< carg_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_end" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = (qvector< carg_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< carg_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_begin" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = (qvector< carg_t >::const_iterator)((qvector< carg_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_carg_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_carg_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_carg_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_carg_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< carg_t >::begin()\n"
    "    qvector< carg_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< carg_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_end" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = (qvector< carg_t >::const_iterator)((qvector< carg_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_carg_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_carg_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_carg_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_carg_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< carg_t >::end()\n"
    "    qvector< carg_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  qvector< carg_t >::iterator arg2 = (qvector< carg_t >::iterator) 0 ;
  carg_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< carg_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_insert" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_insert" "', argument " "2"" of type '" "qvector< carg_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< carg_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_carg_t_insert" "', argument " "3"" of type '" "carg_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t_insert" "', argument " "3"" of type '" "carg_t const &""'"); 
  }
  arg3 = reinterpret_cast< carg_t * >(argp3);
  {
    try
    {
      result = (qvector< carg_t >::iterator)(arg1)->insert(arg2,(carg_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  qvector< carg_t >::iterator arg2 = (qvector< carg_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< carg_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_erase" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_erase" "', argument " "2"" of type '" "qvector< carg_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< carg_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< carg_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  qvector< carg_t >::iterator arg2 = (qvector< carg_t >::iterator) 0 ;
  qvector< carg_t >::iterator arg3 = (qvector< carg_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< carg_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_erase" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_erase" "', argument " "2"" of type '" "qvector< carg_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< carg_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_carg_t_erase" "', argument " "3"" of type '" "qvector< carg_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< carg_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< carg_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_carg_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_carg_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_carg_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_carg_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_carg_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qvector_carg_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_carg_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< carg_t >::erase(qvector< carg_t >::iterator)\n"
    "    qvector< carg_t >::erase(qvector< carg_t >::iterator,qvector< carg_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< carg_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_find" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_find" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t_find" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (qvector< carg_t >::iterator)(arg1)->find((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< carg_t >::const_iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_find" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_find" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t_find" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (qvector< carg_t >::const_iterator)((qvector< carg_t > const *)arg1)->find((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_carg_t_find", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_carg_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_carg_t_find__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_carg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_carg_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_carg_t_find__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_carg_t_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< carg_t >::find(carg_t const &)\n"
    "    qvector< carg_t >::find(carg_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t_has", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_has" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_has" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t_has" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (bool)((qvector< carg_t > const *)arg1)->has((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t_add_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t_add_unique", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t_add_unique" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t_add_unique" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t_add_unique" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->add_unique((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t__del(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t__del", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t__del" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_carg_t__del" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t__del" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->del((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t___len__" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_carg_t_Sg____len__((qvector< carg_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  carg_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t___getitem__" "', argument " "1"" of type '" "qvector< carg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_carg_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (carg_t *) &qvector_Sl_carg_t_Sg____getitem__((qvector< carg_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_carg_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< carg_t > *arg1 = (qvector< carg_t > *) 0 ;
  size_t arg2 ;
  carg_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_carg_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_carg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_carg_t___setitem__" "', argument " "1"" of type '" "qvector< carg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< carg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_carg_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_carg_t___setitem__" "', argument " "3"" of type '" "carg_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_carg_t___setitem__" "', argument " "3"" of type '" "carg_t const &""'"); 
  }
  arg3 = reinterpret_cast< carg_t * >(argp3);
  {
    try
    {
      qvector_Sl_carg_t_Sg____setitem__(arg1,arg2,(carg_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *qvector_carg_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_carg_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *qvector_carg_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_qvector_ccase_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< ccase_t > *)new qvector< ccase_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_ccase_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qvector_ccase_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< ccase_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_ccase_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_qvector_ccase_t" "', argument " "1"" of type '" "qvector< ccase_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_qvector_ccase_t" "', argument " "1"" of type '" "qvector< ccase_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = (qvector< ccase_t > *)new qvector< ccase_t >((qvector< ccase_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_ccase_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_qvector_ccase_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_qvector_ccase_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_qvector_ccase_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_ccase_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_qvector_ccase_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_qvector_ccase_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< ccase_t >::qvector()\n"
    "    qvector< ccase_t >::qvector(qvector< ccase_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_qvector_ccase_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_qvector_ccase_t" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_push_back" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_push_back" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t_push_back" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccase_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_push_back" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = (ccase_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_ccase_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_ccase_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ccase_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_ccase_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_ccase_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< ccase_t >::push_back(ccase_t const &)\n"
    "    qvector< ccase_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_pop_back" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_size" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = ((qvector< ccase_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_empty" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< ccase_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ccase_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_at" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_ccase_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (ccase_t *) &((qvector< ccase_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_qclear" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_clear" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  size_t arg2 ;
  ccase_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_resize" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_ccase_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_ccase_t_resize" "', argument " "3"" of type '" "ccase_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t_resize" "', argument " "3"" of type '" "ccase_t const &""'"); 
  }
  arg3 = reinterpret_cast< ccase_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(ccase_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_resize" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_ccase_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_ccase_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_qvector_ccase_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ccase_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qvector_ccase_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_ccase_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< ccase_t >::resize(size_t,ccase_t const &)\n"
    "    qvector< ccase_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  ccase_t const &arg2_defvalue = ccase_t() ;
  ccase_t *arg2 = (ccase_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_grow" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_grow" "', argument " "2"" of type '" "ccase_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t_grow" "', argument " "2"" of type '" "ccase_t const &""'"); 
    }
    arg2 = reinterpret_cast< ccase_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_capacity" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = ((qvector< ccase_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_reserve" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_ccase_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_truncate" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  qvector< ccase_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_swap" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_ccase_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_swap" "', argument " "2"" of type '" "qvector< ccase_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t_swap" "', argument " "2"" of type '" "qvector< ccase_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< ccase_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ccase_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_extract" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = (ccase_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  ccase_t *arg2 = (ccase_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_inject" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_inject" "', argument " "2"" of type '" "ccase_t *""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "qvector_ccase_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  qvector< ccase_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t___eq__" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_ccase_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t___eq__" "', argument " "2"" of type '" "qvector< ccase_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t___eq__" "', argument " "2"" of type '" "qvector< ccase_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< ccase_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< ccase_t > const *)arg1)->operator ==((qvector< ccase_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  qvector< ccase_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t___ne__" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_ccase_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t___ne__" "', argument " "2"" of type '" "qvector< ccase_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t___ne__" "', argument " "2"" of type '" "qvector< ccase_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< ccase_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< ccase_t > const *)arg1)->operator !=((qvector< ccase_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< ccase_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_begin" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = (qvector< ccase_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< ccase_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_end" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = (qvector< ccase_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< ccase_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_begin" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = (qvector< ccase_t >::const_iterator)((qvector< ccase_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_ccase_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_ccase_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_ccase_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_ccase_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< ccase_t >::begin()\n"
    "    qvector< ccase_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< ccase_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_end" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = (qvector< ccase_t >::const_iterator)((qvector< ccase_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_ccase_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_ccase_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_qvector_ccase_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_ccase_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< ccase_t >::end()\n"
    "    qvector< ccase_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  qvector< ccase_t >::iterator arg2 = (qvector< ccase_t >::iterator) 0 ;
  ccase_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< ccase_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_insert" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_insert" "', argument " "2"" of type '" "qvector< ccase_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< ccase_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_ccase_t_insert" "', argument " "3"" of type '" "ccase_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t_insert" "', argument " "3"" of type '" "ccase_t const &""'"); 
  }
  arg3 = reinterpret_cast< ccase_t * >(argp3);
  {
    try
    {
      result = (qvector< ccase_t >::iterator)(arg1)->insert(arg2,(ccase_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  qvector< ccase_t >::iterator arg2 = (qvector< ccase_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< ccase_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_erase" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_erase" "', argument " "2"" of type '" "qvector< ccase_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< ccase_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< ccase_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  qvector< ccase_t >::iterator arg2 = (qvector< ccase_t >::iterator) 0 ;
  qvector< ccase_t >::iterator arg3 = (qvector< ccase_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< ccase_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_erase" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_erase" "', argument " "2"" of type '" "qvector< ccase_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< ccase_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_ccase_t_erase" "', argument " "3"" of type '" "qvector< ccase_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< ccase_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< ccase_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_ccase_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ccase_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_ccase_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ccase_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ccase_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_qvector_ccase_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_ccase_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< ccase_t >::erase(qvector< ccase_t >::iterator)\n"
    "    qvector< ccase_t >::erase(qvector< ccase_t >::iterator,qvector< ccase_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< ccase_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_find" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_find" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t_find" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (qvector< ccase_t >::iterator)(arg1)->find((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< ccase_t >::const_iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_find" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_find" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t_find" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (qvector< ccase_t >::const_iterator)((qvector< ccase_t > const *)arg1)->find((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "qvector_ccase_t_find", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ccase_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_ccase_t_find__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_ccase_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ccase_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_qvector_ccase_t_find__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'qvector_ccase_t_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< ccase_t >::find(ccase_t const &)\n"
    "    qvector< ccase_t >::find(ccase_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t_has", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_has" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_has" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t_has" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (bool)((qvector< ccase_t > const *)arg1)->has((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t_add_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t_add_unique", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t_add_unique" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t_add_unique" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t_add_unique" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->add_unique((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t__del(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t__del", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t__del" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qvector_ccase_t__del" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t__del" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->del((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t___len__" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_ccase_t_Sg____len__((qvector< ccase_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ccase_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t___getitem__" "', argument " "1"" of type '" "qvector< ccase_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_ccase_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (ccase_t *) &qvector_Sl_ccase_t_Sg____getitem__((qvector< ccase_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qvector_ccase_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< ccase_t > *arg1 = (qvector< ccase_t > *) 0 ;
  size_t arg2 ;
  ccase_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qvector_ccase_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_ccase_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qvector_ccase_t___setitem__" "', argument " "1"" of type '" "qvector< ccase_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< ccase_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qvector_ccase_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "qvector_ccase_t___setitem__" "', argument " "3"" of type '" "ccase_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qvector_ccase_t___setitem__" "', argument " "3"" of type '" "ccase_t const &""'"); 
  }
  arg3 = reinterpret_cast< ccase_t * >(argp3);
  {
    try
    {
      qvector_Sl_ccase_t_Sg____setitem__(arg1,arg2,(ccase_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *qvector_ccase_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_ccase_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *qvector_ccase_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_lvar_saved_infos_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< lvar_saved_info_t > *)new qvector< lvar_saved_info_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lvar_saved_infos_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_saved_info_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_lvar_saved_infos_t" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_lvar_saved_infos_t" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_saved_info_t > *)new qvector< lvar_saved_info_t >((qvector< lvar_saved_info_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lvar_saved_infos_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_lvar_saved_infos_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_lvar_saved_infos_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_lvar_saved_infos_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_lvar_saved_infos_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_saved_info_t >::qvector()\n"
    "    qvector< lvar_saved_info_t >::qvector(qvector< lvar_saved_info_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_lvar_saved_infos_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lvar_saved_infos_t" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  lvar_saved_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_push_back" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_push_back" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t_push_back" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((lvar_saved_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lvar_saved_info_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_push_back" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = (lvar_saved_info_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_lvar_saved_infos_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lvar_saved_info_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_lvar_saved_infos_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lvar_saved_infos_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_saved_info_t >::push_back(lvar_saved_info_t const &)\n"
    "    qvector< lvar_saved_info_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_pop_back" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_size" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = ((qvector< lvar_saved_info_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_empty" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< lvar_saved_info_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  lvar_saved_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_at" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_saved_infos_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (lvar_saved_info_t *) &((qvector< lvar_saved_info_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_qclear" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_clear" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  size_t arg2 ;
  lvar_saved_info_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_resize" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_saved_infos_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lvar_saved_infos_t_resize" "', argument " "3"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t_resize" "', argument " "3"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg3 = reinterpret_cast< lvar_saved_info_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(lvar_saved_info_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_resize" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_saved_infos_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_lvar_saved_infos_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_lvar_saved_info_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_lvar_saved_infos_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lvar_saved_infos_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_saved_info_t >::resize(size_t,lvar_saved_info_t const &)\n"
    "    qvector< lvar_saved_info_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  lvar_saved_info_t const &arg2_defvalue = lvar_saved_info_t() ;
  lvar_saved_info_t *arg2 = (lvar_saved_info_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_grow" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_grow" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t_grow" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
    }
    arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((lvar_saved_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_capacity" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = ((qvector< lvar_saved_info_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_reserve" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_saved_infos_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_truncate" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  qvector< lvar_saved_info_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_swap" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_swap" "', argument " "2"" of type '" "qvector< lvar_saved_info_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t_swap" "', argument " "2"" of type '" "qvector< lvar_saved_info_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_saved_info_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_extract" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = (lvar_saved_info_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  lvar_saved_info_t *arg2 = (lvar_saved_info_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_inject" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_inject" "', argument " "2"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lvar_saved_infos_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  qvector< lvar_saved_info_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t___eq__" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t___eq__" "', argument " "2"" of type '" "qvector< lvar_saved_info_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t___eq__" "', argument " "2"" of type '" "qvector< lvar_saved_info_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< lvar_saved_info_t > const *)arg1)->operator ==((qvector< lvar_saved_info_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  qvector< lvar_saved_info_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t___ne__" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t___ne__" "', argument " "2"" of type '" "qvector< lvar_saved_info_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t___ne__" "', argument " "2"" of type '" "qvector< lvar_saved_info_t > const &""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp2);
  {
    try
    {
      result = (bool)((qvector< lvar_saved_info_t > const *)arg1)->operator !=((qvector< lvar_saved_info_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_saved_info_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_begin" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_saved_info_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_saved_info_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_end" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_saved_info_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_saved_info_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_begin" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_saved_info_t >::const_iterator)((qvector< lvar_saved_info_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_lvar_saved_infos_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_lvar_saved_infos_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lvar_saved_infos_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_saved_info_t >::begin()\n"
    "    qvector< lvar_saved_info_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< lvar_saved_info_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_end" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< lvar_saved_info_t >::const_iterator)((qvector< lvar_saved_info_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_lvar_saved_infos_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_lvar_saved_infos_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lvar_saved_infos_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_saved_info_t >::end()\n"
    "    qvector< lvar_saved_info_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  qvector< lvar_saved_info_t >::iterator arg2 = (qvector< lvar_saved_info_t >::iterator) 0 ;
  lvar_saved_info_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< lvar_saved_info_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_insert" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_insert" "', argument " "2"" of type '" "qvector< lvar_saved_info_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_saved_info_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lvar_saved_infos_t_insert" "', argument " "3"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t_insert" "', argument " "3"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg3 = reinterpret_cast< lvar_saved_info_t * >(argp3);
  {
    try
    {
      result = (qvector< lvar_saved_info_t >::iterator)(arg1)->insert(arg2,(lvar_saved_info_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  qvector< lvar_saved_info_t >::iterator arg2 = (qvector< lvar_saved_info_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< lvar_saved_info_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_erase" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_erase" "', argument " "2"" of type '" "qvector< lvar_saved_info_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_saved_info_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< lvar_saved_info_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  qvector< lvar_saved_info_t >::iterator arg2 = (qvector< lvar_saved_info_t >::iterator) 0 ;
  qvector< lvar_saved_info_t >::iterator arg3 = (qvector< lvar_saved_info_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< lvar_saved_info_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_erase" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_erase" "', argument " "2"" of type '" "qvector< lvar_saved_info_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< lvar_saved_info_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lvar_saved_infos_t_erase" "', argument " "3"" of type '" "qvector< lvar_saved_info_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< lvar_saved_info_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< lvar_saved_info_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lvar_saved_info_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_lvar_saved_infos_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_lvar_saved_info_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_lvar_saved_info_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_lvar_saved_infos_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lvar_saved_infos_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_saved_info_t >::erase(qvector< lvar_saved_info_t >::iterator)\n"
    "    qvector< lvar_saved_info_t >::erase(qvector< lvar_saved_info_t >::iterator,qvector< lvar_saved_info_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  lvar_saved_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< lvar_saved_info_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_find" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_find" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t_find" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  {
    try
    {
      result = (qvector< lvar_saved_info_t >::iterator)(arg1)->find((lvar_saved_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  lvar_saved_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< lvar_saved_info_t >::const_iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_find" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_find" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t_find" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  {
    try
    {
      result = (qvector< lvar_saved_info_t >::const_iterator)((qvector< lvar_saved_info_t > const *)arg1)->find((lvar_saved_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_find", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lvar_saved_info_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_lvar_saved_infos_t_find__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lvar_saved_info_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_lvar_saved_infos_t_find__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lvar_saved_infos_t_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< lvar_saved_info_t >::find(lvar_saved_info_t const &)\n"
    "    qvector< lvar_saved_info_t >::find(lvar_saved_info_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  lvar_saved_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_has", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_has" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_has" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t_has" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  {
    try
    {
      result = (bool)((qvector< lvar_saved_info_t > const *)arg1)->has((lvar_saved_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t_add_unique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  lvar_saved_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t_add_unique", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t_add_unique" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t_add_unique" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t_add_unique" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->add_unique((lvar_saved_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t__del(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  lvar_saved_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t__del", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t__del" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_infos_t__del" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t__del" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->del((lvar_saved_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t___len__" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_lvar_saved_info_t_Sg____len__((qvector< lvar_saved_info_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  lvar_saved_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t___getitem__" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_saved_infos_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (lvar_saved_info_t *) &qvector_Sl_lvar_saved_info_t_Sg____getitem__((qvector< lvar_saved_info_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_infos_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< lvar_saved_info_t > *arg1 = (qvector< lvar_saved_info_t > *) 0 ;
  size_t arg2 ;
  lvar_saved_info_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_infos_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_infos_t___setitem__" "', argument " "1"" of type '" "qvector< lvar_saved_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< lvar_saved_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_saved_infos_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lvar_saved_infos_t___setitem__" "', argument " "3"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_infos_t___setitem__" "', argument " "3"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg3 = reinterpret_cast< lvar_saved_info_t * >(argp3);
  {
    try
    {
      qvector_Sl_lvar_saved_info_t_Sg____setitem__(arg1,arg2,(lvar_saved_info_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lvar_saved_infos_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *lvar_saved_infos_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_qswap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qswap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cinsn_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qswap" "', argument " "1"" of type '" "cinsn_t &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qswap" "', argument " "1"" of type '" "cinsn_t &""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "qswap" "', argument " "2"" of type '" "cinsn_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "qswap" "', argument " "2"" of type '" "cinsn_t &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    try
    {
      qswap(*arg1,*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnum_array_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wrapped_array_t< uint16,6 > *arg1 = (wrapped_array_t< uint16,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short (*result)[6] = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_wrapped_array_tT_unsigned_short_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnum_array_data_get" "', argument " "1"" of type '" "wrapped_array_t< uint16,6 > *""'"); 
  }
  arg1 = reinterpret_cast< wrapped_array_t< uint16,6 > * >(argp1);
  result = (unsigned short (*)[6]) &(unsigned short (&)[6]) ((arg1)->data);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_6__unsigned_short, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fnum_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned short (*arg1)[6] = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  wrapped_array_t< uint16,6 > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_a_6__unsigned_short,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fnum_array" "', argument " "1"" of type '" "unsigned short (&)[6]""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fnum_array" "', argument " "1"" of type '" "unsigned short (&)[6]""'"); 
  }
  arg1 = reinterpret_cast< unsigned short (*)[6] >(argp1);
  {
    try
    {
      result = (wrapped_array_t< uint16,6 > *)new wrapped_array_t< uint16,6 >((unsigned short (&)[6])*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wrapped_array_tT_unsigned_short_6_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnum_array___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wrapped_array_t< uint16,6 > *arg1 = (wrapped_array_t< uint16,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_wrapped_array_tT_unsigned_short_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnum_array___len__" "', argument " "1"" of type '" "wrapped_array_t< uint16,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< wrapped_array_t< uint16,6 > * >(argp1);
  {
    try
    {
      result = wrapped_array_t_Sl_uint16_Sc_6_Sg____len__((wrapped_array_t< unsigned short,6 > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnum_array___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wrapped_array_t< uint16,6 > *arg1 = (wrapped_array_t< uint16,6 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  unsigned short *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "fnum_array___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_wrapped_array_tT_unsigned_short_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnum_array___getitem__" "', argument " "1"" of type '" "wrapped_array_t< uint16,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< wrapped_array_t< uint16,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fnum_array___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      try {
        result = (unsigned short *) &wrapped_array_t_Sl_uint16_Sc_6_Sg____getitem__((wrapped_array_t< unsigned short,6 > const *)arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN), "std::out_of_range", SWIGTYPE_p_std__out_of_range); SWIG_fail;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnum_array___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wrapped_array_t< uint16,6 > *arg1 = (wrapped_array_t< uint16,6 > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned short temp3 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "fnum_array___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_wrapped_array_tT_unsigned_short_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnum_array___setitem__" "', argument " "1"" of type '" "wrapped_array_t< uint16,6 > *""'"); 
  }
  arg1 = reinterpret_cast< wrapped_array_t< uint16,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fnum_array___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fnum_array___setitem__" "', argument " "3"" of type '" "unsigned short""'");
  } 
  temp3 = static_cast< unsigned short >(val3);
  arg3 = &temp3;
  {
    try
    {
      try {
        wrapped_array_t_Sl_uint16_Sc_6_Sg____setitem__(arg1,arg2,(unsigned short const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN), "std::out_of_range", SWIGTYPE_p_std__out_of_range); SWIG_fail;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fnum_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wrapped_array_t< uint16,6 > *arg1 = (wrapped_array_t< uint16,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_wrapped_array_tT_unsigned_short_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fnum_array" "', argument " "1"" of type '" "wrapped_array_t< uint16,6 > *""'"); 
  }
  arg1 = reinterpret_cast< wrapped_array_t< uint16,6 > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fnum_array_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wrapped_array_tT_unsigned_short_6_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *fnum_array_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_debug_hexrays_ctree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debug_hexrays_ctree" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      py_debug_hexrays_ctree((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_init_hexrays_plugin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "init_hexrays_plugin", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "init_hexrays_plugin" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    try
    {
      result = (bool)py_init_hexrays_plugin(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__decompile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  func_t *arg1 = (func_t *) 0 ;
  hexrays_failure_t *arg2 = (hexrays_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< qrefcnt_t< cfunc_t > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "_decompile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_func_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_decompile" "', argument " "1"" of type '" "func_t *""'"); 
  }
  arg1 = reinterpret_cast< func_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_decompile" "', argument " "2"" of type '" "hexrays_failure_t *""'"); 
  }
  arg2 = reinterpret_cast< hexrays_failure_t * >(argp2);
  {
    try
    {
      result = _decompile(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    
  }
  {
    // ret cfuncptr_t
    cfuncptr_t *ni = new cfuncptr_t(result);
    hexrays_register_python_clearable_instance(ni, hxclr_cfuncptr);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decompile_many(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "decompile_many", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decompile_many" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  arg2 = swig_obj[1];
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decompile_many" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (bool)py_decompile_many((char const *)arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_widget_vdui(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vdui_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_widget_vdui" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (vdui_t *)py_get_widget_vdui(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vdui_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_t *arg1 = (boundaries_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  boundaries_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "boundaries_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_find" "', argument " "1"" of type '" "boundaries_t const *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundaries_find" "', argument " "2"" of type '" "cinsn_t const *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    try
    {
      result = py_boundaries_find((std::map< cinsn_t *,rangeset_t > const *)arg1,(cinsn_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new boundaries_iterator_t(static_cast< const boundaries_iterator_t& >(result))), SWIGTYPE_p_boundaries_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_t *arg1 = (boundaries_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  rangeset_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  boundaries_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "boundaries_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_insert" "', argument " "1"" of type '" "boundaries_t *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundaries_insert" "', argument " "2"" of type '" "cinsn_t const *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_rangeset_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boundaries_insert" "', argument " "3"" of type '" "rangeset_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundaries_insert" "', argument " "3"" of type '" "rangeset_t const &""'"); 
  }
  arg3 = reinterpret_cast< rangeset_t * >(argp3);
  {
    try
    {
      result = py_boundaries_insert(arg1,(cinsn_t const *)arg2,(rangeset_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new boundaries_iterator_t(static_cast< const boundaries_iterator_t& >(result))), SWIGTYPE_p_boundaries_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_term_hexrays_plugin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "term_hexrays_plugin", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      py_term_hexrays_plugin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hexrays_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  Hexrays_Hooks *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (Hexrays_Hooks *)new SwigDirector_Hexrays_Hooks(arg1); 
      } else {
        result = (Hexrays_Hooks *)new Hexrays_Hooks(); 
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Hexrays_Hooks, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Hexrays_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Hexrays_Hooks" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_hook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_hook" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->hook();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_unhook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_unhook" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->unhook();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_flowchart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  qflow_chart_t *arg2 = (qflow_chart_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_flowchart", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_flowchart" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qflow_chart_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_flowchart" "', argument " "2"" of type '" "qflow_chart_t *""'"); 
  }
  arg2 = reinterpret_cast< qflow_chart_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::flowchart(arg2);
        } else {
          result = (int)(arg1)->flowchart(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_stkpnts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  stkpnts_t *arg3 = (stkpnts_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_stkpnts", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_stkpnts" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_stkpnts" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_stkpnts_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_stkpnts" "', argument " "3"" of type '" "stkpnts_t *""'"); 
  }
  arg3 = reinterpret_cast< stkpnts_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::stkpnts(arg2,arg3);
        } else {
          result = (int)(arg1)->stkpnts(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_prolog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  qflow_chart_t *arg3 = (qflow_chart_t *) 0 ;
  bitset_t *arg4 = (bitset_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_prolog", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_prolog" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_prolog" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_qflow_chart_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_prolog" "', argument " "3"" of type '" "qflow_chart_t *""'"); 
  }
  arg3 = reinterpret_cast< qflow_chart_t * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_bitset_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Hexrays_Hooks_prolog" "', argument " "4"" of type '" "bitset_t *""'"); 
  }
  arg4 = reinterpret_cast< bitset_t * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::prolog(arg2,arg3,arg4);
        } else {
          result = (int)(arg1)->prolog(arg2,arg3,arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_microcode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_microcode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_microcode" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_microcode" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::microcode(arg2);
        } else {
          result = (int)(arg1)->microcode(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_preoptimized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_preoptimized", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_preoptimized" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_preoptimized" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::preoptimized(arg2);
        } else {
          result = (int)(arg1)->preoptimized(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_locopt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_locopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_locopt" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_locopt" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::locopt(arg2);
        } else {
          result = (int)(arg1)->locopt(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_prealloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_prealloc", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_prealloc" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_prealloc" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::prealloc(arg2);
        } else {
          result = (int)(arg1)->prealloc(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_glbopt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_glbopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_glbopt" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_glbopt" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::glbopt(arg2);
        } else {
          result = (int)(arg1)->glbopt(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_structural(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  control_graph_t *arg2 = (control_graph_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_structural", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_structural" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_control_graph_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_structural" "', argument " "2"" of type '" "control_graph_t *""'"); 
  }
  arg2 = reinterpret_cast< control_graph_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::structural(arg2);
        } else {
          result = (int)(arg1)->structural(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_maturity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  cfunc_t *arg2 = (cfunc_t *) 0 ;
  ctree_maturity_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_maturity", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_maturity" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_maturity" "', argument " "2"" of type '" "cfunc_t *""'"); 
  }
  arg2 = reinterpret_cast< cfunc_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hexrays_Hooks_maturity" "', argument " "3"" of type '" "ctree_maturity_t""'");
  } 
  arg3 = static_cast< ctree_maturity_t >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::maturity(arg2,arg3);
        } else {
          result = (int)(arg1)->maturity(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_interr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_interr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_interr" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hexrays_Hooks_interr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::interr(arg2);
        } else {
          result = (int)(arg1)->interr(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_combine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  mblock_t *arg2 = (mblock_t *) 0 ;
  minsn_t *arg3 = (minsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_combine", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_combine" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mblock_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_combine" "', argument " "2"" of type '" "mblock_t *""'"); 
  }
  arg2 = reinterpret_cast< mblock_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_minsn_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_combine" "', argument " "3"" of type '" "minsn_t *""'"); 
  }
  arg3 = reinterpret_cast< minsn_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::combine(arg2,arg3);
        } else {
          result = (int)(arg1)->combine(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_print_func(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  cfunc_t *arg2 = (cfunc_t *) 0 ;
  vc_printer_t *arg3 = (vc_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_print_func", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_print_func" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_print_func" "', argument " "2"" of type '" "cfunc_t *""'"); 
  }
  arg2 = reinterpret_cast< cfunc_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_vc_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_print_func" "', argument " "3"" of type '" "vc_printer_t *""'"); 
  }
  arg3 = reinterpret_cast< vc_printer_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::print_func(arg2,arg3);
        } else {
          result = (int)(arg1)->print_func(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_func_printed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  cfunc_t *arg2 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_func_printed", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_func_printed" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_func_printed" "', argument " "2"" of type '" "cfunc_t *""'"); 
  }
  arg2 = reinterpret_cast< cfunc_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::func_printed(arg2);
        } else {
          result = (int)(arg1)->func_printed(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_resolve_stkaddrs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_resolve_stkaddrs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_resolve_stkaddrs" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_resolve_stkaddrs" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::resolve_stkaddrs(arg2);
        } else {
          result = (int)(arg1)->resolve_stkaddrs(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_open_pseudocode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_open_pseudocode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_open_pseudocode" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_open_pseudocode" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::open_pseudocode(arg2);
        } else {
          result = (int)(arg1)->open_pseudocode(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_switch_pseudocode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_switch_pseudocode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_switch_pseudocode" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_switch_pseudocode" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::switch_pseudocode(arg2);
        } else {
          result = (int)(arg1)->switch_pseudocode(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_refresh_pseudocode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_refresh_pseudocode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_refresh_pseudocode" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_refresh_pseudocode" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::refresh_pseudocode(arg2);
        } else {
          result = (int)(arg1)->refresh_pseudocode(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_close_pseudocode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_close_pseudocode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_close_pseudocode" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_close_pseudocode" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::close_pseudocode(arg2);
        } else {
          result = (int)(arg1)->close_pseudocode(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_keyboard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_keyboard", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_keyboard" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_keyboard" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hexrays_Hooks_keyboard" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Hexrays_Hooks_keyboard" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::keyboard(arg2,arg3,arg4);
        } else {
          result = (int)(arg1)->keyboard(arg2,arg3,arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_right_click(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_right_click", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_right_click" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_right_click" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::right_click(arg2);
        } else {
          result = (int)(arg1)->right_click(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_double_click(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_double_click", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_double_click" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_double_click" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hexrays_Hooks_double_click" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::double_click(arg2,arg3);
        } else {
          result = (int)(arg1)->double_click(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_curpos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_curpos", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_curpos" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_curpos" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::curpos(arg2);
        } else {
          result = (int)(arg1)->curpos(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_create_hint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_create_hint", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_create_hint" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_create_hint" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (PyObject *)(arg1)->Hexrays_Hooks::create_hint(arg2);
        } else {
          result = (PyObject *)(arg1)->create_hint(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = result;
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_text_ready(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_text_ready", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_text_ready" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_text_ready" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::text_ready(arg2);
        } else {
          result = (int)(arg1)->text_ready(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_populating_popup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  TPopupMenu *arg3 = (TPopupMenu *) 0 ;
  vdui_t *arg4 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_populating_popup", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_populating_popup" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_populating_popup" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_TPopupMenu, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_populating_popup" "', argument " "3"" of type '" "TPopupMenu *""'"); 
  }
  arg3 = reinterpret_cast< TPopupMenu * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Hexrays_Hooks_populating_popup" "', argument " "4"" of type '" "vdui_t *""'"); 
  }
  arg4 = reinterpret_cast< vdui_t * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::populating_popup(arg2,arg3,arg4);
        } else {
          result = (int)(arg1)->populating_popup(arg2,arg3,arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_lvar_name_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  lvar_t *arg3 = (lvar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_lvar_name_changed", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_lvar_name_changed" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_lvar_name_changed" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_lvar_name_changed" "', argument " "3"" of type '" "lvar_t *""'"); 
  }
  arg3 = reinterpret_cast< lvar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Hexrays_Hooks_lvar_name_changed" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Hexrays_Hooks_lvar_name_changed" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::lvar_name_changed(arg2,arg3,(char const *)arg4,arg5);
        } else {
          result = (int)(arg1)->lvar_name_changed(arg2,arg3,(char const *)arg4,arg5);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_lvar_type_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  lvar_t *arg3 = (lvar_t *) 0 ;
  tinfo_t *arg4 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_lvar_type_changed", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_lvar_type_changed" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_lvar_type_changed" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_lvar_type_changed" "', argument " "3"" of type '" "lvar_t *""'"); 
  }
  arg3 = reinterpret_cast< lvar_t * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Hexrays_Hooks_lvar_type_changed" "', argument " "4"" of type '" "tinfo_t const *""'"); 
  }
  arg4 = reinterpret_cast< tinfo_t * >(argp4);
  {
    if ( arg4 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hexrays_Hooks_lvar_type_changed" "', argument " "4"" of type '" "tinfo_t const *""'");
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::lvar_type_changed(arg2,arg3,(tinfo_t const *)arg4);
        } else {
          result = (int)(arg1)->lvar_type_changed(arg2,arg3,(tinfo_t const *)arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_lvar_cmt_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  lvar_t *arg3 = (lvar_t *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_lvar_cmt_changed", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_lvar_cmt_changed" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_lvar_cmt_changed" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_lvar_cmt_changed" "', argument " "3"" of type '" "lvar_t *""'"); 
  }
  arg3 = reinterpret_cast< lvar_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Hexrays_Hooks_lvar_cmt_changed" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::lvar_cmt_changed(arg2,arg3,(char const *)arg4);
        } else {
          result = (int)(arg1)->lvar_cmt_changed(arg2,arg3,(char const *)arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_lvar_mapping_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  vdui_t *arg2 = (vdui_t *) 0 ;
  lvar_t *arg3 = (lvar_t *) 0 ;
  lvar_t *arg4 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_lvar_mapping_changed", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_lvar_mapping_changed" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_lvar_mapping_changed" "', argument " "2"" of type '" "vdui_t *""'"); 
  }
  arg2 = reinterpret_cast< vdui_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_lvar_mapping_changed" "', argument " "3"" of type '" "lvar_t *""'"); 
  }
  arg3 = reinterpret_cast< lvar_t * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Hexrays_Hooks_lvar_mapping_changed" "', argument " "4"" of type '" "lvar_t *""'"); 
  }
  arg4 = reinterpret_cast< lvar_t * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::lvar_mapping_changed(arg2,arg3,arg4);
        } else {
          result = (int)(arg1)->lvar_mapping_changed(arg2,arg3,arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hexrays_Hooks_cmt_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  cfunc_t *arg2 = (cfunc_t *) 0 ;
  treeloc_t *arg3 = (treeloc_t *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Hexrays_Hooks_cmt_changed", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hexrays_Hooks_cmt_changed" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hexrays_Hooks_cmt_changed" "', argument " "2"" of type '" "cfunc_t *""'"); 
  }
  arg2 = reinterpret_cast< cfunc_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_treeloc_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hexrays_Hooks_cmt_changed" "', argument " "3"" of type '" "treeloc_t const *""'"); 
  }
  arg3 = reinterpret_cast< treeloc_t * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Hexrays_Hooks_cmt_changed" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->Hexrays_Hooks::cmt_changed(arg2,(treeloc_t const *)arg3,(char const *)arg4);
        } else {
          result = (int)(arg1)->cmt_changed(arg2,(treeloc_t const *)arg3,(char const *)arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_Hexrays_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hexrays_Hooks *arg1 = (Hexrays_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Hexrays_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_Hexrays_Hooks" "', argument " "1"" of type '" "Hexrays_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< Hexrays_Hooks * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Hexrays_Hooks_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Hexrays_Hooks, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Hexrays_Hooks_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_hexrays_alloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  size_t arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hexrays_alloc" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    try
    {
      result = (void *)hexrays_alloc(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexrays_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  void *arg1 = (void *) 0 ;
  int res1 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexrays_free" "', argument " "1"" of type '" "void *""'"); 
  }
  {
    try
    {
      hexrays_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_MAX_VALUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MAX_VALUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MAX_VALUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(MAX_VALUE));
  return pyobj;
}


SWIGINTERN int Swig_var_MAX_SVALUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MAX_SVALUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MAX_SVALUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(MAX_SVALUE));
  return pyobj;
}


SWIGINTERN int Swig_var_MIN_SVALUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MIN_SVALUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MIN_SVALUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(MIN_SVALUE));
  return pyobj;
}


SWIGINTERN int Swig_var_MUST_ACCESS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MUST_ACCESS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MUST_ACCESS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MUST_ACCESS));
  return pyobj;
}


SWIGINTERN int Swig_var_MAY_ACCESS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MAY_ACCESS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MAY_ACCESS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MAY_ACCESS));
  return pyobj;
}


SWIGINTERN int Swig_var_MAYMUST_ACCESS_MASK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MAYMUST_ACCESS_MASK is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MAYMUST_ACCESS_MASK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MAYMUST_ACCESS_MASK));
  return pyobj;
}


SWIGINTERN int Swig_var_ONE_ACCESS_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ONE_ACCESS_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ONE_ACCESS_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ONE_ACCESS_TYPE));
  return pyobj;
}


SWIGINTERN int Swig_var_INCLUDE_SPOILED_REGS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable INCLUDE_SPOILED_REGS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_INCLUDE_SPOILED_REGS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(INCLUDE_SPOILED_REGS));
  return pyobj;
}


SWIGINTERN int Swig_var_EXCLUDE_PASS_REGS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EXCLUDE_PASS_REGS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EXCLUDE_PASS_REGS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(EXCLUDE_PASS_REGS));
  return pyobj;
}


SWIGINTERN int Swig_var_FULL_XDSU_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FULL_XDSU is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FULL_XDSU_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FULL_XDSU));
  return pyobj;
}


SWIGINTERN int Swig_var_WITH_ASSERTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WITH_ASSERTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WITH_ASSERTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(WITH_ASSERTS));
  return pyobj;
}


SWIGINTERN int Swig_var_EXCLUDE_VOLATILE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EXCLUDE_VOLATILE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EXCLUDE_VOLATILE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(EXCLUDE_VOLATILE));
  return pyobj;
}


SWIGINTERN int Swig_var_INCLUDE_UNUSED_SRC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable INCLUDE_UNUSED_SRC is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_INCLUDE_UNUSED_SRC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(INCLUDE_UNUSED_SRC));
  return pyobj;
}


SWIGINTERN int Swig_var_INCLUDE_DEAD_RETREGS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable INCLUDE_DEAD_RETREGS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_INCLUDE_DEAD_RETREGS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(INCLUDE_DEAD_RETREGS));
  return pyobj;
}


SWIGINTERN int Swig_var_INCLUDE_RESTRICTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable INCLUDE_RESTRICTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_INCLUDE_RESTRICTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(INCLUDE_RESTRICTED));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_get_merror_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  merror_t arg2 ;
  mbl_array_t *arg3 = (mbl_array_t *) 0 ;
  qstring temp1 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[2] ;
  ea_t result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!SWIG_Python_UnpackTuple(args, "get_merror_desc", 2, 2, swig_obj)) SWIG_fail;
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_merror_desc" "', argument " "2"" of type '" "merror_t""'");
  } 
  arg2 = static_cast< merror_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_merror_desc" "', argument " "3"" of type '" "mbl_array_t *""'"); 
  }
  arg3 = reinterpret_cast< mbl_array_t * >(argp3);
  {
    try
    {
      result = (ea_t)get_merror_desc(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN int Swig_var_mr_none_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mr_none is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mr_none_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(mr_none));
  return pyobj;
}


SWIGINTERN int Swig_var_mr_cf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mr_cf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mr_cf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(mr_cf));
  return pyobj;
}


SWIGINTERN int Swig_var_mr_zf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mr_zf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mr_zf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(mr_zf));
  return pyobj;
}


SWIGINTERN int Swig_var_mr_sf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mr_sf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mr_sf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(mr_sf));
  return pyobj;
}


SWIGINTERN int Swig_var_mr_of_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mr_of is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mr_of_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(mr_of));
  return pyobj;
}


SWIGINTERN int Swig_var_mr_pf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mr_pf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mr_pf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(mr_pf));
  return pyobj;
}


SWIGINTERN int Swig_var_cc_count_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cc_count is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cc_count_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(cc_count));
  return pyobj;
}


SWIGINTERN int Swig_var_mr_cc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mr_cc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mr_cc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(mr_cc));
  return pyobj;
}


SWIGINTERN int Swig_var_mr_first_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mr_first is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mr_first_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(mr_first));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_operand_locator_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "operand_locator_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t_ea_set" "', argument " "1"" of type '" "operand_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "operand_locator_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->ea = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operand_locator_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t_ea_get" "', argument " "1"" of type '" "operand_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  result = (ea_t) ((arg1)->ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operand_locator_t_opnum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "operand_locator_t_opnum_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t_opnum_set" "', argument " "1"" of type '" "operand_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "operand_locator_t_opnum_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->opnum = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operand_locator_t_opnum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t_opnum_get" "', argument " "1"" of type '" "operand_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  result = (int) ((arg1)->opnum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_operand_locator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  operand_locator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_operand_locator_t", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_operand_locator_t" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_operand_locator_t" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (operand_locator_t *)new operand_locator_t(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operand_locator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operand_locator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "operand_locator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t___eq__" "', argument " "1"" of type '" "operand_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "operand_locator_t___eq__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "operand_locator_t___eq__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((operand_locator_t const *)arg1)->operator ==((operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_operand_locator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "operand_locator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t___ne__" "', argument " "1"" of type '" "operand_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "operand_locator_t___ne__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "operand_locator_t___ne__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((operand_locator_t const *)arg1)->operator !=((operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_operand_locator_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "operand_locator_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t___lt__" "', argument " "1"" of type '" "operand_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "operand_locator_t___lt__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "operand_locator_t___lt__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((operand_locator_t const *)arg1)->operator <((operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_operand_locator_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "operand_locator_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t___gt__" "', argument " "1"" of type '" "operand_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "operand_locator_t___gt__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "operand_locator_t___gt__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((operand_locator_t const *)arg1)->operator >((operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_operand_locator_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "operand_locator_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t___le__" "', argument " "1"" of type '" "operand_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "operand_locator_t___le__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "operand_locator_t___le__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((operand_locator_t const *)arg1)->operator <=((operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_operand_locator_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "operand_locator_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t___ge__" "', argument " "1"" of type '" "operand_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "operand_locator_t___ge__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "operand_locator_t___ge__" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((operand_locator_t const *)arg1)->operator >=((operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "operand_locator_t const &""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = (int)compare((operand_locator_t const &)*arg1,(operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operand_locator_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "operand_locator_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operand_locator_t_compare" "', argument " "1"" of type '" "operand_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "operand_locator_t_compare" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "operand_locator_t_compare" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = (int)((operand_locator_t const *)arg1)->compare((operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_operand_locator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operand_locator_t *arg1 = (operand_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operand_locator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_operand_locator_t" "', argument " "1"" of type '" "operand_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< operand_locator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *operand_locator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operand_locator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *operand_locator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_number_format_t_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  flags_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "number_format_t_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_flags_set" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "number_format_t_flags_set" "', argument " "2"" of type '" "flags_t""'");
  } 
  arg2 = static_cast< flags_t >(val2);
  if (arg1) (arg1)->flags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  flags_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_flags_get" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  result = (flags_t) ((arg1)->flags);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_opnum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "number_format_t_opnum_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_opnum_set" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "number_format_t_opnum_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->opnum = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_opnum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_opnum_get" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  result = (char) ((arg1)->opnum);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_props_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "number_format_t_props_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_props_set" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "number_format_t_props_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->props = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_props_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_props_get" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  result = (char) ((arg1)->props);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_serial_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  uchar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "number_format_t_serial_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_serial_set" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "number_format_t_serial_set" "', argument " "2"" of type '" "uchar""'");
  } 
  arg2 = static_cast< uchar >(val2);
  if (arg1) (arg1)->serial = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_serial_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uchar result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_serial_get" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  result = (uchar) ((arg1)->serial);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_org_nbytes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "number_format_t_org_nbytes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_org_nbytes_set" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "number_format_t_org_nbytes_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->org_nbytes = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_org_nbytes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_org_nbytes_get" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  result = (char) ((arg1)->org_nbytes);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_type_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "number_format_t_type_name_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_type_name_set" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "number_format_t_type_name_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->type_name = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_type_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_type_name_get" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  result = (qstring *)& ((arg1)->type_name);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_number_format_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  number_format_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_number_format_t", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_number_format_t" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    try
    {
      result = (number_format_t *)new number_format_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_number_format_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_get_radix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_get_radix" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (int)((number_format_t const *)arg1)->get_radix();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_is_fixed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_is_fixed" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (bool)((number_format_t const *)arg1)->is_fixed();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_is_hex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_is_hex" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (bool)((number_format_t const *)arg1)->is_hex();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_is_dec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_is_dec" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (bool)((number_format_t const *)arg1)->is_dec();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_is_oct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_is_oct" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (bool)((number_format_t const *)arg1)->is_oct();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_is_enum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_is_enum" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (bool)((number_format_t const *)arg1)->is_enum();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_is_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_is_char" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (bool)((number_format_t const *)arg1)->is_char();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_is_stroff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_is_stroff" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (bool)((number_format_t const *)arg1)->is_stroff();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_is_numop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_is_numop" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (bool)((number_format_t const *)arg1)->is_numop();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_number_format_t_needs_to_be_inverted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "number_format_t_needs_to_be_inverted" "', argument " "1"" of type '" "number_format_t const *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      result = (bool)((number_format_t const *)arg1)->needs_to_be_inverted();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_number_format_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  number_format_t *arg1 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_number_format_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_number_format_t" "', argument " "1"" of type '" "number_format_t *""'"); 
  }
  arg1 = reinterpret_cast< number_format_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *number_format_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_number_format_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *number_format_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vd_printer_t_hdrlines_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vd_printer_t *arg1 = (vd_printer_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vd_printer_t_hdrlines_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vd_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vd_printer_t_hdrlines_set" "', argument " "1"" of type '" "vd_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< vd_printer_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vd_printer_t_hdrlines_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->hdrlines = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vd_printer_t_hdrlines_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vd_printer_t *arg1 = (vd_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vd_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vd_printer_t_hdrlines_get" "', argument " "1"" of type '" "vd_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< vd_printer_t * >(argp1);
  result = (int) ((arg1)->hdrlines);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vd_printer_t__print__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  vd_printer_t *arg1 = (vd_printer_t *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "vd_printer_t__print", 3, 3, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vd_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vd_printer_t__print" "', argument " "1"" of type '" "vd_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< vd_printer_t * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vd_printer_t__print" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = "%s";                                /* Fix format string to %s */
    arg4 = (void *) IDAPyBytes_AsString(obj2);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg4 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "vd_printer_t__print" "', argument " "3"" of type '" "char const *""'");
  }
  {
    try
    {
      result = (int)(arg1)->print(arg2,(char const *)arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vd_printer_t__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,3);
  varargs = PyTuple_GetSlice(args,3,PyTuple_Size(args));
  resultobj = _wrap_vd_printer_t__print__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_new_vd_printer_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vd_printer_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_vd_printer_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (vd_printer_t *)new vd_printer_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vd_printer_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vd_printer_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vd_printer_t *arg1 = (vd_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vd_printer_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vd_printer_t" "', argument " "1"" of type '" "vd_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< vd_printer_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vd_printer_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vd_printer_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vd_printer_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vc_printer_t_func_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vc_printer_t *arg1 = (vc_printer_t *) 0 ;
  cfunc_t *arg2 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vc_printer_t_func_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vc_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vc_printer_t_func_set" "', argument " "1"" of type '" "vc_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< vc_printer_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfunc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vc_printer_t_func_set" "', argument " "2"" of type '" "cfunc_t const *""'"); 
  }
  arg2 = reinterpret_cast< cfunc_t * >(argp2);
  if (arg1) (arg1)->func = (cfunc_t const *)arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vc_printer_t_func_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vc_printer_t *arg1 = (vc_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cfunc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vc_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vc_printer_t_func_get" "', argument " "1"" of type '" "vc_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< vc_printer_t * >(argp1);
  result = (cfunc_t *) ((arg1)->func);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cfunc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vc_printer_t_lastchar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vc_printer_t *arg1 = (vc_printer_t *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vc_printer_t_lastchar_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vc_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vc_printer_t_lastchar_set" "', argument " "1"" of type '" "vc_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< vc_printer_t * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vc_printer_t_lastchar_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->lastchar = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vc_printer_t_lastchar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vc_printer_t *arg1 = (vc_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vc_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vc_printer_t_lastchar_get" "', argument " "1"" of type '" "vc_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< vc_printer_t * >(argp1);
  result = (char) ((arg1)->lastchar);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vc_printer_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vc_printer_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vc_printer_t" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (vc_printer_t *)new vc_printer_t((cfunc_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vc_printer_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vc_printer_t_oneliner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vc_printer_t *arg1 = (vc_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vc_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vc_printer_t_oneliner" "', argument " "1"" of type '" "vc_printer_t const *""'"); 
  }
  arg1 = reinterpret_cast< vc_printer_t * >(argp1);
  {
    try
    {
      result = (bool)((vc_printer_t const *)arg1)->oneliner();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vc_printer_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vc_printer_t *arg1 = (vc_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vc_printer_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vc_printer_t" "', argument " "1"" of type '" "vc_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< vc_printer_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vc_printer_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vc_printer_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vc_printer_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_qstring_printer_t_with_tags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstring_printer_t *arg1 = (qstring_printer_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qstring_printer_t_with_tags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstring_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qstring_printer_t_with_tags_set" "', argument " "1"" of type '" "qstring_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< qstring_printer_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qstring_printer_t_with_tags_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->with_tags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qstring_printer_t_with_tags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstring_printer_t *arg1 = (qstring_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstring_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qstring_printer_t_with_tags_get" "', argument " "1"" of type '" "qstring_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< qstring_printer_t * >(argp1);
  result = (bool) ((arg1)->with_tags);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qstring_printer_t_s_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstring_printer_t *arg1 = (qstring_printer_t *) 0 ;
  qstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "qstring_printer_t_s_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstring_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qstring_printer_t_s_set" "', argument " "1"" of type '" "qstring_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< qstring_printer_t * >(argp1);
  {
    // bytes_container qstring &, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "qstring_printer_t_s_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->s = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container qstring & typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring & typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_qstring_printer_t_s_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstring_printer_t *arg1 = (qstring_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstring_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qstring_printer_t_s_get" "', argument " "1"" of type '" "qstring_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< qstring_printer_t * >(argp1);
  result = (qstring *) &(qstring &) ((arg1)->s);
  {
    // bytes_container typemap(out) qstring &
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qstring_printer_t__print__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  qstring_printer_t *arg1 = (qstring_printer_t *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "qstring_printer_t__print", 3, 3, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_qstring_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qstring_printer_t__print" "', argument " "1"" of type '" "qstring_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< qstring_printer_t * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "qstring_printer_t__print" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = "%s";                                /* Fix format string to %s */
    arg4 = (void *) IDAPyBytes_AsString(obj2);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg4 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "qstring_printer_t__print" "', argument " "3"" of type '" "char const *""'");
  }
  {
    try
    {
      result = (int)(arg1)->print(arg2,(char const *)arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qstring_printer_t__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,3);
  varargs = PyTuple_GetSlice(args,3,PyTuple_Size(args));
  resultobj = _wrap_qstring_printer_t__print__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_new_qstring_printer_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  qstring_printer_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_qstring_printer_t", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_qstring_printer_t" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_qstring_printer_t" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (qstring_printer_t *)new_qstring_printer_t((cfunc_t const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qstring_printer_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_qstring_printer_t_get_s(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qstring_printer_t *arg1 = (qstring_printer_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< _qstring< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qstring_printer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "qstring_printer_t_get_s" "', argument " "1"" of type '" "qstring_printer_t *""'"); 
  }
  arg1 = reinterpret_cast< qstring_printer_t * >(argp1);
  {
    try
    {
      result = qstring_printer_t_get_s(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // bytes_container typemap(out) qstring
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) (&result)->c_str(), (&result)->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *qstring_printer_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qstring_printer_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *qstring_printer_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_is_type_correct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  type_t *arg1 = (type_t *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_type_correct" "', argument " "1"" of type '" "type_t const *""'");
  }
  arg1 = reinterpret_cast< type_t * >(buf1);
  {
    try
    {
      result = (bool)is_type_correct((unsigned char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_small_struni(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tinfo_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_small_struni" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_small_struni" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  arg1 = reinterpret_cast< tinfo_t * >(argp1);
  {
    try
    {
      result = (bool)is_small_struni((tinfo_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_nonbool_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tinfo_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_nonbool_type" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_nonbool_type" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  arg1 = reinterpret_cast< tinfo_t * >(argp1);
  {
    try
    {
      result = (bool)is_nonbool_type((tinfo_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_bool_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tinfo_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_bool_type" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_bool_type" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  arg1 = reinterpret_cast< tinfo_t * >(argp1);
  {
    try
    {
      result = (bool)is_bool_type((tinfo_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_ptr_or_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  type_t arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_ptr_or_array" "', argument " "1"" of type '" "type_t""'");
  } 
  arg1 = static_cast< type_t >(val1);
  {
    try
    {
      result = (bool)is_ptr_or_array(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_paf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  type_t arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_char(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_paf" "', argument " "1"" of type '" "type_t""'");
  } 
  arg1 = static_cast< type_t >(val1);
  {
    try
    {
      result = (bool)is_paf(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_inplace_def(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tinfo_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_inplace_def" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_inplace_def" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  arg1 = reinterpret_cast< tinfo_t * >(argp1);
  {
    try
    {
      result = (bool)is_inplace_def((tinfo_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_partial_type_num(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tinfo_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partial_type_num" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partial_type_num" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  arg1 = reinterpret_cast< tinfo_t * >(argp1);
  {
    try
    {
      result = (int)partial_type_num((tinfo_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_float_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  tinfo_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_float_type" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = get_float_type(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    
  }
  {
    // ret tinfo_t
    tinfo_t *ni = new tinfo_t(result);
    til_register_python_tinfo_t_instance(ni);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_int_type_by_width_and_sign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  type_sign_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  tinfo_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_int_type_by_width_and_sign", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_int_type_by_width_and_sign" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_int_type_by_width_and_sign" "', argument " "2"" of type '" "type_sign_t""'");
  } 
  arg2 = static_cast< type_sign_t >(val2);
  {
    try
    {
      result = get_int_type_by_width_and_sign(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    
  }
  {
    // ret tinfo_t
    tinfo_t *ni = new tinfo_t(result);
    til_register_python_tinfo_t_instance(ni);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_unk_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  tinfo_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_unk_type" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = get_unk_type(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    
  }
  {
    // ret tinfo_t
    tinfo_t *ni = new tinfo_t(result);
    til_register_python_tinfo_t_instance(ni);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dummy_ptrtype(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  tinfo_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "dummy_ptrtype", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dummy_ptrtype" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dummy_ptrtype" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = dummy_ptrtype(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    
  }
  {
    // ret tinfo_t
    tinfo_t *ni = new tinfo_t(result);
    til_register_python_tinfo_t_instance(ni);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_member_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  member_t *arg1 = (member_t *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_member_type", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_member_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_member_type" "', argument " "1"" of type '" "member_t const *""'"); 
  }
  arg1 = reinterpret_cast< member_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_member_type" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_member_type" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  {
    try
    {
      result = (bool)get_member_type((member_t const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_pointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tinfo_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tinfo_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_pointer" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "make_pointer" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  arg1 = reinterpret_cast< tinfo_t * >(argp1);
  {
    try
    {
      result = make_pointer((tinfo_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    
  }
  {
    // ret tinfo_t
    tinfo_t *ni = new tinfo_t(result);
    til_register_python_tinfo_t_instance(ni);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_typedef__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  tinfo_t result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_typedef" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = create_typedef((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    // ret tinfo_t
    tinfo_t *ni = new tinfo_t(result);
    til_register_python_tinfo_t_instance(ni);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_typedef__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  tinfo_t result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "create_typedef" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = create_typedef(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    
  }
  {
    // ret tinfo_t
    tinfo_t *ni = new tinfo_t(result);
    til_register_python_tinfo_t_instance(ni);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_typedef(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "create_typedef", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_create_typedef__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_create_typedef__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'create_typedef'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    create_typedef(char const *)\n"
    "    create_typedef(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_get_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  uval_t arg1 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  type_source_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_type", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_type" "', argument " "1"" of type '" "uval_t""'");
  } 
  arg1 = static_cast< uval_t >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_type" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_type" "', argument " "3"" of type '" "type_source_t""'");
  } 
  arg3 = static_cast< type_source_t >(val3);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_type" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  {
    try
    {
      result = (bool)get_type(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  uval_t arg1 ;
  tinfo_t *arg2 = 0 ;
  type_source_t arg3 ;
  bool arg4 = (bool) false ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_type", 3, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_type" "', argument " "1"" of type '" "uval_t""'");
  } 
  arg1 = static_cast< uval_t >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_type" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_type" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_type" "', argument " "3"" of type '" "type_source_t""'");
  } 
  arg3 = static_cast< type_source_t >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_type" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try
    {
      result = (bool)set_type(arg1,(tinfo_t const &)*arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdloc_t_reg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t_reg1" "', argument " "1"" of type '" "vdloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  {
    try
    {
      result = (int)((vdloc_t const *)arg1)->reg1();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdloc_t__set_reg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t__set_reg1", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t__set_reg1" "', argument " "1"" of type '" "vdloc_t *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdloc_t__set_reg1" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      (arg1)->_set_reg1(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdloc_t_set_reg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t_set_reg1", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t_set_reg1" "', argument " "1"" of type '" "vdloc_t *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdloc_t_set_reg1" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      (arg1)->set_reg1(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdloc_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t___eq__" "', argument " "1"" of type '" "vdloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdloc_t___eq__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdloc_t___eq__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  {
    try
    {
      result = (bool)((vdloc_t const *)arg1)->operator ==((vdloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_vdloc_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t___ne__" "', argument " "1"" of type '" "vdloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdloc_t___ne__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdloc_t___ne__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  {
    try
    {
      result = (bool)((vdloc_t const *)arg1)->operator !=((vdloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_vdloc_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t___lt__" "', argument " "1"" of type '" "vdloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdloc_t___lt__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdloc_t___lt__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  {
    try
    {
      result = (bool)((vdloc_t const *)arg1)->operator <((vdloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_vdloc_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t___gt__" "', argument " "1"" of type '" "vdloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdloc_t___gt__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdloc_t___gt__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  {
    try
    {
      result = (bool)((vdloc_t const *)arg1)->operator >((vdloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_vdloc_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t___le__" "', argument " "1"" of type '" "vdloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdloc_t___le__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdloc_t___le__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  {
    try
    {
      result = (bool)((vdloc_t const *)arg1)->operator <=((vdloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_vdloc_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t___ge__" "', argument " "1"" of type '" "vdloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdloc_t___ge__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdloc_t___ge__" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  {
    try
    {
      result = (bool)((vdloc_t const *)arg1)->operator >=((vdloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_10(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = 0 ;
  vdloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "vdloc_t const &""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  {
    try
    {
      result = (int)compare((vdloc_t const &)*arg1,(vdloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdloc_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t_compare" "', argument " "1"" of type '" "vdloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdloc_t_compare" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdloc_t_compare" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  {
    try
    {
      result = (int)((vdloc_t const *)arg1)->compare((vdloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdloc_t_is_aliasable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdloc_t_is_aliasable", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdloc_t_is_aliasable" "', argument " "1"" of type '" "vdloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdloc_t_is_aliasable" "', argument " "2"" of type '" "mbl_array_t const *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vdloc_t_is_aliasable" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (bool)((vdloc_t const *)arg1)->is_aliasable((mbl_array_t const *)arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vdloc_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_vdloc_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (vdloc_t *)new vdloc_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vdloc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vdloc_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = (vdloc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdloc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vdloc_t" "', argument " "1"" of type '" "vdloc_t *""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vdloc_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vdloc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vdloc_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_print_vdloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  vdloc_t *arg2 = 0 ;
  int arg3 ;
  qstring temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[2] ;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!SWIG_Python_UnpackTuple(args, "print_vdloc", 2, 2, swig_obj)) SWIG_fail;
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "print_vdloc" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print_vdloc" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "print_vdloc" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      print_vdloc(arg1,(vdloc_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container typemap(argout) (qstring *vout)
    Py_XDECREF(resultobj);
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_arglocs_overlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  vdloc_t *arg1 = 0 ;
  size_t arg2 ;
  vdloc_t *arg3 = 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "arglocs_overlap", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arglocs_overlap" "', argument " "1"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arglocs_overlap" "', argument " "1"" of type '" "vdloc_t const &""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arglocs_overlap" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arglocs_overlap" "', argument " "3"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arglocs_overlap" "', argument " "3"" of type '" "vdloc_t const &""'"); 
  }
  arg3 = reinterpret_cast< vdloc_t * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "arglocs_overlap" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try
    {
      result = (bool)arglocs_overlap((vdloc_t const &)*arg1,arg2,(vdloc_t const &)*arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_location_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  vdloc_t *arg2 = (vdloc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_locator_t_location_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_location_set" "', argument " "1"" of type '" "lvar_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_vdloc_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_locator_t_location_set" "', argument " "2"" of type '" "vdloc_t *""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  if (arg1) (arg1)->location = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_location_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vdloc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_location_get" "', argument " "1"" of type '" "lvar_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  result = (vdloc_t *)& ((arg1)->location);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vdloc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_defea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_locator_t_defea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_defea_set" "', argument " "1"" of type '" "lvar_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "lvar_locator_t_defea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->defea = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_defea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_defea_get" "', argument " "1"" of type '" "lvar_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  result = (ea_t) ((arg1)->defea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lvar_locator_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  lvar_locator_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (lvar_locator_t *)new lvar_locator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_locator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lvar_locator_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  vdloc_t *arg1 = 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lvar_locator_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_lvar_locator_t" "', argument " "1"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_lvar_locator_t" "', argument " "1"" of type '" "vdloc_t const &""'"); 
  }
  arg1 = reinterpret_cast< vdloc_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_lvar_locator_t" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      result = (lvar_locator_t *)new lvar_locator_t((vdloc_t const &)*arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_locator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lvar_locator_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_lvar_locator_t", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_lvar_locator_t__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vdloc_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_lvar_locator_t__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_lvar_locator_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lvar_locator_t::lvar_locator_t()\n"
    "    lvar_locator_t::lvar_locator_t(vdloc_t const &,ea_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_get_stkoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sval_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_get_stkoff" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (sval_t)((lvar_locator_t const *)arg1)->get_stkoff();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_is_reg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_is_reg1" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->is_reg1();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_is_reg2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_is_reg2" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->is_reg2();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_is_reg_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_is_reg_var" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->is_reg_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_is_stk_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_is_stk_var" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->is_stk_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_is_scattered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_is_scattered" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->is_scattered();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_get_reg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mreg_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_get_reg1" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (mreg_t)((lvar_locator_t const *)arg1)->get_reg1();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_get_reg2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mreg_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_get_reg2" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (mreg_t)((lvar_locator_t const *)arg1)->get_reg2();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_get_scattered__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  scattered_aloc_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_get_scattered" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (scattered_aloc_t *) &((lvar_locator_t const *)arg1)->get_scattered();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scattered_aloc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_get_scattered__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  scattered_aloc_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_get_scattered" "', argument " "1"" of type '" "lvar_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      result = (scattered_aloc_t *) &(arg1)->get_scattered();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scattered_aloc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_get_scattered(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "lvar_locator_t_get_scattered", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lvar_locator_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_lvar_locator_t_get_scattered__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lvar_locator_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_lvar_locator_t_get_scattered__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lvar_locator_t_get_scattered'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lvar_locator_t::get_scattered() const\n"
    "    lvar_locator_t::get_scattered()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_locator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t___eq__" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_locator_t___eq__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_locator_t___eq__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->operator ==((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_locator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t___ne__" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_locator_t___ne__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_locator_t___ne__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->operator !=((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_locator_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t___lt__" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_locator_t___lt__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_locator_t___lt__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->operator <((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_locator_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t___gt__" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_locator_t___gt__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_locator_t___gt__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->operator >((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_locator_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t___le__" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_locator_t___le__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_locator_t___le__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->operator <=((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_locator_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t___ge__" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_locator_t___ge__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_locator_t___ge__" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_locator_t const *)arg1)->operator >=((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_11(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "lvar_locator_t const &""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (int)compare((lvar_locator_t const &)*arg1,(lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_locator_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_locator_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_locator_t_compare" "', argument " "1"" of type '" "lvar_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_locator_t_compare" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_locator_t_compare" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (int)((lvar_locator_t const *)arg1)->compare((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lvar_locator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_locator_t *arg1 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_locator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lvar_locator_t" "', argument " "1"" of type '" "lvar_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_locator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lvar_locator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lvar_locator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *lvar_locator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_lvar_t_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_name_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_name_set" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "lvar_t_name_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->name = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_name_get" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  result = (qstring *)& ((arg1)->name);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_cmt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_cmt_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_cmt_set" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "lvar_t_cmt_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->cmt = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_cmt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_cmt_get" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  result = (qstring *)& ((arg1)->cmt);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_tif_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_tif_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_tif_set" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_t_tif_set" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_t_tif_set" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  if (arg1) (arg1)->tif = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_tif_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tinfo_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_tif_get" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  result = (tinfo_t *)& ((arg1)->tif);
  {
    
  }
  {
    // ret tinfo_t*
    tinfo_t *ni = new tinfo_t(*(result));
    til_register_python_tinfo_t_instance(ni);
    if ( strcmp("new_tinfo_t", "lvar_t_tif_get") == 0 )
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_NEW | 0);
      delete result;
    }
    else
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_width_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_width_set" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_t_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->width = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_width_get" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  result = (int) ((arg1)->width);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_defblk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_defblk_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_defblk_set" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_t_defblk_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->defblk = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_defblk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_defblk_get" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  result = (int) ((arg1)->defblk);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_divisor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  uint64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_divisor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_divisor_set" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    // %typemap(in) uint64
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg2 = arg2_temp;
  }
  if (arg1) (arg1)->divisor = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_divisor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_divisor_get" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  result = (uint64) ((arg1)->divisor);
  {
    // %typemap(out) uint64
    resultobj = PyLong_FromUnsignedLongLong((unsigned long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_used(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_used" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->used();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_typed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_typed" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->typed();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_mreg_done(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_mreg_done" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->mreg_done();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_has_nice_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_has_nice_name" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->has_nice_name();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_unknown_width(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_unknown_width" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_unknown_width();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_has_user_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_has_user_info" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->has_user_info();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_has_user_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_has_user_name" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->has_user_name();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_has_user_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_has_user_type" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->has_user_type();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_result_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_result_var" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_result_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_arg_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_arg_var" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_arg_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_fake_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_fake_var" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_fake_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_overlapped_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_overlapped_var" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_overlapped_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_floating_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_floating_var" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_floating_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_spoiled_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_spoiled_var" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_spoiled_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_noptr_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_noptr_var" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_noptr_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_mapdst_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_mapdst_var" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_mapdst_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_thisarg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_thisarg" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_thisarg();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_forced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_forced_var" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_forced_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_has_regname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_has_regname" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->has_regname();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_used(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_used" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_used();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clear_used(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clear_used" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clear_used();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_typed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_typed" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_typed();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_non_typed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_non_typed" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_non_typed();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_user_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_user_info" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_user_info();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_user_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_user_name" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_user_name();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_user_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_user_type" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_user_type();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_user_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_user_type" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_user_type();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_user_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_user_name" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_user_name();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_mreg_done(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_mreg_done" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_mreg_done();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_mreg_done(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_mreg_done" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_mreg_done();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_unknown_width(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_unknown_width" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_unknown_width();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_unknown_width(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_unknown_width" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_unknown_width();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_arg_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_arg_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_arg_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_arg_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_arg_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_arg_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_fake_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_fake_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_fake_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_fake_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_fake_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_fake_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_overlapped_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_overlapped_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_overlapped_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_overlapped_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_overlapped_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_overlapped_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_floating_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_floating_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_floating_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_floating_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_floating_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_floating_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_spoiled_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_spoiled_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_spoiled_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_spoiled_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_spoiled_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_spoiled_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_mapdst_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_mapdst_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_mapdst_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_mapdst_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_mapdst_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_mapdst_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_noptr_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_noptr_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_noptr_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_noptr_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_noptr_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_noptr_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_thisarg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_thisarg" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_thisarg();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_thisarg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_thisarg" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_thisarg();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_forced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_forced_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->set_forced_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_clr_forced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_clr_forced_var" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      (arg1)->clr_forced_var();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_has_common(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  lvar_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_has_common", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_has_common" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_t_has_common" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_t_has_common" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->has_common((lvar_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_has_common_bit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  asize_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_has_common_bit", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_has_common_bit" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_t_has_common_bit" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_t_has_common_bit" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lvar_t_has_common_bit" "', argument " "3"" of type '" "asize_t""'");
  } 
  arg3 = static_cast< asize_t >(val3);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->has_common_bit((vdloc_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_type__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tinfo_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_type" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (tinfo_t *) &((lvar_t const *)arg1)->type();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tinfo_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_type__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tinfo_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_type" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      result = (tinfo_t *) &(arg1)->type();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tinfo_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_type(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "lvar_t_type", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lvar_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_lvar_t_type__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lvar_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_lvar_t_type__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lvar_t_type'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lvar_t::type() const\n"
    "    lvar_t::type()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lvar_t_accepts_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  tinfo_t *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_accepts_type", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_accepts_type" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_t_accepts_type" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_t_accepts_type" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lvar_t_accepts_type" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try
    {
      result = (bool)(arg1)->accepts_type((tinfo_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_lvar_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  tinfo_t *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_set_lvar_type", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_lvar_type" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_t_set_lvar_type" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_t_set_lvar_type" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lvar_t_set_lvar_type" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try
    {
      result = (bool)(arg1)->set_lvar_type((tinfo_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_final_lvar_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  tinfo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_set_final_lvar_type", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_final_lvar_type" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_t_set_final_lvar_type" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_t_set_final_lvar_type" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    try
    {
      (arg1)->set_final_lvar_type((tinfo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_set_width(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  int arg2 ;
  int arg3 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_set_width", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_set_width" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_t_set_width" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lvar_t_set_width" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try
    {
      result = (bool)(arg1)->set_width(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_append_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  mlist_t *arg2 = (mlist_t *) 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_append_list", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_append_list" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mlist_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_t_append_list" "', argument " "2"" of type '" "mlist_t *""'"); 
  }
  arg2 = reinterpret_cast< mlist_t * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lvar_t_append_list" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try
    {
      ((lvar_t const *)arg1)->append_list(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_t_is_aliasable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_t_is_aliasable", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_t_is_aliasable" "', argument " "1"" of type '" "lvar_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_t_is_aliasable" "', argument " "2"" of type '" "mbl_array_t const *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_t const *)arg1)->is_aliasable((mbl_array_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lvar_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_t *arg1 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lvar_t" "', argument " "1"" of type '" "lvar_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lvar_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lvar_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_lvars_t_find_input_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvars_t *arg1 = (lvars_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvars_t_find_input_lvar", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvars_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvars_t_find_input_lvar" "', argument " "1"" of type '" "lvars_t *""'"); 
  }
  arg1 = reinterpret_cast< lvars_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvars_t_find_input_lvar" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvars_t_find_input_lvar" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lvars_t_find_input_lvar" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (int)(arg1)->find_input_lvar((vdloc_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvars_t_find_stkvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvars_t *arg1 = (lvars_t *) 0 ;
  int32 arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvars_t_find_stkvar", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvars_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvars_t_find_stkvar" "', argument " "1"" of type '" "lvars_t *""'"); 
  }
  arg1 = reinterpret_cast< lvars_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvars_t_find_stkvar" "', argument " "2"" of type '" "int32""'");
  } 
  arg2 = static_cast< int32 >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lvars_t_find_stkvar" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (int)(arg1)->find_stkvar(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvars_t_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvars_t *arg1 = (lvars_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  lvar_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvars_t_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvars_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvars_t_find" "', argument " "1"" of type '" "lvars_t *""'"); 
  }
  arg1 = reinterpret_cast< lvars_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvars_t_find" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvars_t_find" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (lvar_t *)(arg1)->find((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvars_t_find_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvars_t *arg1 = (lvars_t *) 0 ;
  vdloc_t *arg2 = 0 ;
  int arg3 ;
  int arg4 = (int) -1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvars_t_find_lvar", 3, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvars_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvars_t_find_lvar" "', argument " "1"" of type '" "lvars_t *""'"); 
  }
  arg1 = reinterpret_cast< lvars_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vdloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvars_t_find_lvar" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvars_t_find_lvar" "', argument " "2"" of type '" "vdloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< vdloc_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lvars_t_find_lvar" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lvars_t_find_lvar" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try
    {
      result = (int)(arg1)->find_lvar((vdloc_t const &)*arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lvars_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvars_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_lvars_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (lvars_t *)new lvars_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvars_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lvars_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvars_t *arg1 = (lvars_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvars_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lvars_t" "', argument " "1"" of type '" "lvars_t *""'"); 
  }
  arg1 = reinterpret_cast< lvars_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lvars_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lvars_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *lvars_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_lvar_saved_info_t_ll_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  lvar_locator_t *arg2 = (lvar_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_info_t_ll_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_ll_set" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_info_t_ll_set" "', argument " "2"" of type '" "lvar_locator_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  if (arg1) (arg1)->ll = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_ll_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_locator_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_ll_get" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  result = (lvar_locator_t *)& ((arg1)->ll);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_info_t_name_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_name_set" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "lvar_saved_info_t_name_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->name = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_name_get" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  result = (qstring *)& ((arg1)->name);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_info_t_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_type_set" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_info_t_type_set" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_info_t_type_set" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  if (arg1) (arg1)->type = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tinfo_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_type_get" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  result = (tinfo_t *)& ((arg1)->type);
  {
    
  }
  {
    // ret tinfo_t*
    tinfo_t *ni = new tinfo_t(*(result));
    til_register_python_tinfo_t_instance(ni);
    if ( strcmp("new_tinfo_t", "lvar_saved_info_t_type_get") == 0 )
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_NEW | 0);
      delete result;
    }
    else
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_cmt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_info_t_cmt_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_cmt_set" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "lvar_saved_info_t_cmt_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->cmt = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_cmt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_cmt_get" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  result = (qstring *)& ((arg1)->cmt);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  ssize_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_info_t_size_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_size_set" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_saved_info_t_size_set" "', argument " "2"" of type '" "ssize_t""'");
  } 
  arg2 = static_cast< ssize_t >(val2);
  if (arg1) (arg1)->size = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ssize_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_size_get" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  result =  ((arg1)->size);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_info_t_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_flags_set" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_saved_info_t_flags_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->flags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_flags_get" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  result = (int) ((arg1)->flags);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lvar_saved_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_lvar_saved_info_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (lvar_saved_info_t *)new lvar_saved_info_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_has_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_has_info" "', argument " "1"" of type '" "lvar_saved_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_saved_info_t const *)arg1)->has_info();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  lvar_saved_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_info_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t___eq__" "', argument " "1"" of type '" "lvar_saved_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_info_t___eq__" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_info_t___eq__" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_saved_info_t const *)arg1)->operator ==((lvar_saved_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  lvar_saved_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_saved_info_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t___ne__" "', argument " "1"" of type '" "lvar_saved_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_saved_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_saved_info_t___ne__" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_saved_info_t___ne__" "', argument " "2"" of type '" "lvar_saved_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_info_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_saved_info_t const *)arg1)->operator !=((lvar_saved_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_is_kept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_is_kept" "', argument " "1"" of type '" "lvar_saved_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_saved_info_t const *)arg1)->is_kept();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_clear_keep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_clear_keep" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      (arg1)->clear_keep();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_set_keep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_set_keep" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      (arg1)->set_keep();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_is_forced_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_is_forced_lvar" "', argument " "1"" of type '" "lvar_saved_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_saved_info_t const *)arg1)->is_forced_lvar();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_set_forced_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_set_forced_lvar" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      (arg1)->set_forced_lvar();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_clr_forced_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_clr_forced_lvar" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      (arg1)->clr_forced_lvar();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_is_noptr_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_is_noptr_lvar" "', argument " "1"" of type '" "lvar_saved_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      result = (bool)((lvar_saved_info_t const *)arg1)->is_noptr_lvar();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_set_noptr_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_set_noptr_lvar" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      (arg1)->set_noptr_lvar();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_saved_info_t_clr_noptr_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_saved_info_t_clr_noptr_lvar" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      (arg1)->clr_noptr_lvar();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lvar_saved_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_saved_info_t *arg1 = (lvar_saved_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_saved_info_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lvar_saved_info_t" "', argument " "1"" of type '" "lvar_saved_info_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_saved_info_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lvar_saved_info_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lvar_saved_info_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *lvar_saved_info_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_lvar_uservec_t_lvvec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  lvar_saved_infos_t *arg2 = (lvar_saved_infos_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_uservec_t_lvvec_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_lvvec_set" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_uservec_t_lvvec_set" "', argument " "2"" of type '" "lvar_saved_infos_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_saved_infos_t * >(argp2);
  if (arg1) (arg1)->lvvec = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_lvvec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_saved_infos_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_lvvec_get" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  result = (lvar_saved_infos_t *)& ((arg1)->lvvec);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_lvar_saved_info_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_lmaps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  lvar_mapping_t *arg2 = (lvar_mapping_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_uservec_t_lmaps_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_lmaps_set" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_uservec_t_lmaps_set" "', argument " "2"" of type '" "lvar_mapping_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_mapping_t * >(argp2);
  if (arg1) (arg1)->lmaps = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_lmaps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_mapping_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_lmaps_get" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  result = (lvar_mapping_t *)& ((arg1)->lmaps);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_stkoff_delta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  uval_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_uservec_t_stkoff_delta_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_stkoff_delta_set" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_uservec_t_stkoff_delta_set" "', argument " "2"" of type '" "uval_t""'");
  } 
  arg2 = static_cast< uval_t >(val2);
  if (arg1) (arg1)->stkoff_delta = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_stkoff_delta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uval_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_stkoff_delta_get" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  result = (uval_t) ((arg1)->stkoff_delta);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_ulv_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_uservec_t_ulv_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_ulv_flags_set" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_uservec_t_ulv_flags_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ulv_flags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_ulv_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_ulv_flags_get" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  result = (int) ((arg1)->ulv_flags);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lvar_uservec_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_lvar_uservec_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (lvar_uservec_t *)new lvar_uservec_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_uservec_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  lvar_uservec_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_uservec_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_swap" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_uservec_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_uservec_t_swap" "', argument " "2"" of type '" "lvar_uservec_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_uservec_t_swap" "', argument " "2"" of type '" "lvar_uservec_t &""'"); 
  }
  arg2 = reinterpret_cast< lvar_uservec_t * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_find_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  lvar_saved_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_uservec_t_find_info", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_find_info" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_uservec_t_find_info" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_uservec_t_find_info" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = (lvar_saved_info_t *)(arg1)->find_info((lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_saved_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_uservec_t_keep_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  lvar_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_uservec_t_keep_info", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_uservec_t_keep_info" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_uservec_t_keep_info" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_uservec_t_keep_info" "', argument " "2"" of type '" "lvar_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      (arg1)->keep_info((lvar_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lvar_uservec_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lvar_uservec_t" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lvar_uservec_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lvar_uservec_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *lvar_uservec_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_restore_user_lvar_settings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_uservec_t *arg1 = (lvar_uservec_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "restore_user_lvar_settings", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "restore_user_lvar_settings" "', argument " "1"" of type '" "lvar_uservec_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_uservec_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "restore_user_lvar_settings" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      result = (bool)restore_user_lvar_settings(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_user_lvar_settings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  lvar_uservec_t *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "save_user_lvar_settings", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "save_user_lvar_settings" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_uservec_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_user_lvar_settings" "', argument " "2"" of type '" "lvar_uservec_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "save_user_lvar_settings" "', argument " "2"" of type '" "lvar_uservec_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_uservec_t * >(argp2);
  {
    try
    {
      save_user_lvar_settings(arg1,(lvar_uservec_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_lvar_modifier_t_modify_lvars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_lvar_modifier_t *arg1 = (user_lvar_modifier_t *) 0 ;
  lvar_uservec_t *arg2 = (lvar_uservec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_lvar_modifier_t_modify_lvars", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_lvar_modifier_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_lvar_modifier_t_modify_lvars" "', argument " "1"" of type '" "user_lvar_modifier_t *""'"); 
  }
  arg1 = reinterpret_cast< user_lvar_modifier_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_uservec_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_lvar_modifier_t_modify_lvars" "', argument " "2"" of type '" "lvar_uservec_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_uservec_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("user_lvar_modifier_t::modify_lvars");
        } else {
          result = (bool)(arg1)->modify_lvars(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_user_lvar_modifier_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  user_lvar_modifier_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (user_lvar_modifier_t *)new SwigDirector_user_lvar_modifier_t(arg1); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_user_lvar_modifier_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_lvar_modifier_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_lvar_modifier_t *arg1 = (user_lvar_modifier_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_lvar_modifier_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_lvar_modifier_t" "', argument " "1"" of type '" "user_lvar_modifier_t *""'"); 
  }
  arg1 = reinterpret_cast< user_lvar_modifier_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_user_lvar_modifier_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_lvar_modifier_t *arg1 = (user_lvar_modifier_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_lvar_modifier_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_user_lvar_modifier_t" "', argument " "1"" of type '" "user_lvar_modifier_t *""'"); 
  }
  arg1 = reinterpret_cast< user_lvar_modifier_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_lvar_modifier_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_user_lvar_modifier_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_lvar_modifier_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_modify_user_lvars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  user_lvar_modifier_t *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "modify_user_lvars", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "modify_user_lvars" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_lvar_modifier_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "modify_user_lvars" "', argument " "2"" of type '" "user_lvar_modifier_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modify_user_lvars" "', argument " "2"" of type '" "user_lvar_modifier_t &""'"); 
  }
  arg2 = reinterpret_cast< user_lvar_modifier_t * >(argp2);
  {
    try
    {
      result = (bool)modify_user_lvars(arg1,*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_t_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_t *arg1 = (udcall_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "udcall_t_name_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_t_name_set" "', argument " "1"" of type '" "udcall_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "udcall_t_name_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->name = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_t_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_t *arg1 = (udcall_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_t_name_get" "', argument " "1"" of type '" "udcall_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_t * >(argp1);
  result = (qstring *)& ((arg1)->name);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_t_tif_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_t *arg1 = (udcall_t *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "udcall_t_tif_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_t_tif_set" "', argument " "1"" of type '" "udcall_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udcall_t_tif_set" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udcall_t_tif_set" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  if (arg1) (arg1)->tif = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_t_tif_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_t *arg1 = (udcall_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tinfo_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_t_tif_get" "', argument " "1"" of type '" "udcall_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_t * >(argp1);
  result = (tinfo_t *)& ((arg1)->tif);
  {
    
  }
  {
    // ret tinfo_t*
    tinfo_t *ni = new tinfo_t(*(result));
    til_register_python_tinfo_t_instance(ni);
    if ( strcmp("new_tinfo_t", "udcall_t_tif_get") == 0 )
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_NEW | 0);
      delete result;
    }
    else
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_udcall_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_udcall_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (udcall_t *)new udcall_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_udcall_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_udcall_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_t *arg1 = (udcall_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_udcall_t" "', argument " "1"" of type '" "udcall_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *udcall_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_udcall_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *udcall_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_restore_user_defined_calls(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *arg1 = (udcall_map_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "restore_user_defined_calls", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "restore_user_defined_calls" "', argument " "1"" of type '" "udcall_map_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "restore_user_defined_calls" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      result = (bool)restore_user_defined_calls(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_user_defined_calls(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  udcall_map_t *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "save_user_defined_calls", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "save_user_defined_calls" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_user_defined_calls" "', argument " "2"" of type '" "udcall_map_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "save_user_defined_calls" "', argument " "2"" of type '" "udcall_map_t const &""'"); 
  }
  arg2 = reinterpret_cast< udcall_map_t * >(argp2);
  {
    try
    {
      save_user_defined_calls(arg1,(std::map< unsigned int,udcall_t > const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_user_call(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_t *arg1 = (udcall_t *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "parse_user_call", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_user_call" "', argument " "1"" of type '" "udcall_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_user_call" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse_user_call" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = (bool)parse_user_call(arg1,(char const *)arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_convert_to_user_call(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_t *arg1 = 0 ;
  codegen_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  merror_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "convert_to_user_call", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_udcall_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "convert_to_user_call" "', argument " "1"" of type '" "udcall_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "convert_to_user_call" "', argument " "1"" of type '" "udcall_t const &""'"); 
  }
  arg1 = reinterpret_cast< udcall_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_codegen_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "convert_to_user_call" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "convert_to_user_call" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  arg2 = reinterpret_cast< codegen_t * >(argp2);
  {
    try
    {
      result = (merror_t)convert_to_user_call((udcall_t const &)*arg1,*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_microcode_filter_t_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  microcode_filter_t *arg1 = (microcode_filter_t *) 0 ;
  codegen_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "microcode_filter_t_match", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_microcode_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "microcode_filter_t_match" "', argument " "1"" of type '" "microcode_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< microcode_filter_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_codegen_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "microcode_filter_t_match" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "microcode_filter_t_match" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  arg2 = reinterpret_cast< codegen_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("microcode_filter_t::match");
        } else {
          result = (bool)(arg1)->match(*arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_microcode_filter_t_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  microcode_filter_t *arg1 = (microcode_filter_t *) 0 ;
  codegen_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  merror_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "microcode_filter_t_apply", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_microcode_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "microcode_filter_t_apply" "', argument " "1"" of type '" "microcode_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< microcode_filter_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_codegen_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "microcode_filter_t_apply" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "microcode_filter_t_apply" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  arg2 = reinterpret_cast< codegen_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("microcode_filter_t::apply");
        } else {
          result = (merror_t)(arg1)->apply(*arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_microcode_filter_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  microcode_filter_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (microcode_filter_t *)new SwigDirector_microcode_filter_t(arg1); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_microcode_filter_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_microcode_filter_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  microcode_filter_t *arg1 = (microcode_filter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_microcode_filter_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_microcode_filter_t" "', argument " "1"" of type '" "microcode_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< microcode_filter_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_microcode_filter_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  microcode_filter_t *arg1 = (microcode_filter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_microcode_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_microcode_filter_t" "', argument " "1"" of type '" "microcode_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< microcode_filter_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *microcode_filter_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_microcode_filter_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *microcode_filter_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_install_microcode_filter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  microcode_filter_t *arg1 = (microcode_filter_t *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "install_microcode_filter", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_microcode_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "install_microcode_filter" "', argument " "1"" of type '" "microcode_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< microcode_filter_t * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "install_microcode_filter" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try
    {
      install_microcode_filter(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udc_filter_t_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udc_filter_t *arg1 = (udc_filter_t *) 0 ;
  codegen_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "udc_filter_t_match", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udc_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udc_filter_t_match" "', argument " "1"" of type '" "udc_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< udc_filter_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_codegen_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udc_filter_t_match" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udc_filter_t_match" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  arg2 = reinterpret_cast< codegen_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("udc_filter_t::match");
        } else {
          result = (bool)(arg1)->match(*arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udc_filter_t_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udc_filter_t *arg1 = (udc_filter_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "udc_filter_t_init", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udc_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udc_filter_t_init" "', argument " "1"" of type '" "udc_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< udc_filter_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udc_filter_t_init" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)(arg1)->init((char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udc_filter_t_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udc_filter_t *arg1 = (udc_filter_t *) 0 ;
  codegen_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  merror_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "udc_filter_t_apply", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udc_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udc_filter_t_apply" "', argument " "1"" of type '" "udc_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< udc_filter_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_codegen_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udc_filter_t_apply" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udc_filter_t_apply" "', argument " "2"" of type '" "codegen_t &""'"); 
  }
  arg2 = reinterpret_cast< codegen_t * >(argp2);
  {
    try
    {
      result = (merror_t)(arg1)->apply(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_udc_filter_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  udc_filter_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (udc_filter_t *)new SwigDirector_udc_filter_t(arg1); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_udc_filter_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_udc_filter_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udc_filter_t *arg1 = (udc_filter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udc_filter_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_udc_filter_t" "', argument " "1"" of type '" "udc_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< udc_filter_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_udc_filter_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udc_filter_t *arg1 = (udc_filter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udc_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_udc_filter_t" "', argument " "1"" of type '" "udc_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< udc_filter_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *udc_filter_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_udc_filter_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *udc_filter_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_bitset_width_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable bitset_width is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_bitset_width_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(bitset_width));
  return pyobj;
}


SWIGINTERN int Swig_var_bitset_align_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable bitset_align is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_bitset_align_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(bitset_align));
  return pyobj;
}


SWIGINTERN int Swig_var_bitset_shift_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable bitset_shift is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_bitset_shift_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(bitset_shift));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_z_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_z is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_z_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_z));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_r_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_r is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_r_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_r));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_n_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_n is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_n_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_n));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_str_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_str is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_str_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_str));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_d_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_d is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_d_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_d));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_S_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_S is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_S_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_S));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_v_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_v is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_v_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_v));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_b_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_b is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_b_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_b));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_f_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_f is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_f_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_f));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_l_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_l is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_l_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_l));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_a_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_a is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_a_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_a));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_h_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_h is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_h_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_h));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_c_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_c is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_c_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_c));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_fn_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_fn is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_fn_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_fn));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_p_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_p is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_p));
  return pyobj;
}


SWIGINTERN int Swig_var_mop_sc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mop_sc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mop_sc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(mop_sc));
  return pyobj;
}


SWIGINTERN int Swig_var_NOSIZE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NOSIZE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NOSIZE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(NOSIZE));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_fnumber_t_fnum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  uint16 *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "fnumber_t_fnum_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t_fnum_set" "', argument " "1"" of type '" "fnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fnumber_t_fnum_set" "', argument " "2"" of type '" "uint16 [6]""'"); 
  } 
  arg2 = reinterpret_cast< uint16 * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) *(uint16 *)&arg1->fnum[ii] = *((uint16 *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""fnum""' of type '""uint16 [6]""'");
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnumber_t_fnum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t_fnum_get" "', argument " "1"" of type '" "fnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  result = (uint16 *)(uint16 *) ((arg1)->fnum);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnumber_t_nbytes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "fnumber_t_nbytes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t_nbytes_set" "', argument " "1"" of type '" "fnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fnumber_t_nbytes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nbytes = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnumber_t_nbytes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t_nbytes_get" "', argument " "1"" of type '" "fnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  result = (int) ((arg1)->nbytes);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnumber_t_dereference_uint16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t_dereference_uint16" "', argument " "1"" of type '" "fnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  {
    try
    {
      result = (uint16 *)(arg1)->operator uint16*();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnumber_t_dereference_const_uint16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint16 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t_dereference_const_uint16" "', argument " "1"" of type '" "fnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  {
    try
    {
      result = (uint16 *)((fnumber_t const *)arg1)->operator const uint16*();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnumber_t__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qstring temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp2)
    arg2 = &temp2;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t__print" "', argument " "1"" of type '" "fnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  {
    try
    {
      ((fnumber_t const *)arg1)->print(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container typemap(argout) (qstring *vout)
    Py_XDECREF(resultobj);
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg2->c_str(), arg2->length());
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnumber_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  fnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "fnumber_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t___eq__" "', argument " "1"" of type '" "fnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fnumber_t___eq__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fnumber_t___eq__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< fnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((fnumber_t const *)arg1)->operator ==((fnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_fnumber_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  fnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "fnumber_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t___ne__" "', argument " "1"" of type '" "fnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fnumber_t___ne__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fnumber_t___ne__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< fnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((fnumber_t const *)arg1)->operator !=((fnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_fnumber_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  fnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "fnumber_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t___lt__" "', argument " "1"" of type '" "fnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fnumber_t___lt__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fnumber_t___lt__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< fnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((fnumber_t const *)arg1)->operator <((fnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_fnumber_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  fnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "fnumber_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t___gt__" "', argument " "1"" of type '" "fnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fnumber_t___gt__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fnumber_t___gt__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< fnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((fnumber_t const *)arg1)->operator >((fnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_fnumber_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  fnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "fnumber_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t___le__" "', argument " "1"" of type '" "fnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fnumber_t___le__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fnumber_t___le__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< fnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((fnumber_t const *)arg1)->operator <=((fnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_fnumber_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  fnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "fnumber_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t___ge__" "', argument " "1"" of type '" "fnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fnumber_t___ge__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fnumber_t___ge__" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< fnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((fnumber_t const *)arg1)->operator >=((fnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_19(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = 0 ;
  fnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_fnumber_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "fnumber_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "fnumber_t const &""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< fnumber_t * >(argp2);
  {
    try
    {
      result = (int)compare((fnumber_t const &)*arg1,(fnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnumber_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  fnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "fnumber_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t_compare" "', argument " "1"" of type '" "fnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fnumber_t_compare" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fnumber_t_compare" "', argument " "2"" of type '" "fnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< fnumber_t * >(argp2);
  {
    try
    {
      result = (int)((fnumber_t const *)arg1)->compare((fnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fnumber_t___get_fnum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< wrapped_array_t< unsigned short,6 > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fnumber_t___get_fnum" "', argument " "1"" of type '" "fnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  {
    try
    {
      result = fnumber_t___get_fnum(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new wrapped_array_t< uint16,6 >(static_cast< const wrapped_array_t< uint16,6 >& >(result))), SWIGTYPE_p_wrapped_array_tT_unsigned_short_6_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fnumber_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_fnumber_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (fnumber_t *)new fnumber_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fnumber_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fnumber_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fnumber_t *arg1 = (fnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fnumber_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fnumber_t" "', argument " "1"" of type '" "fnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< fnumber_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fnumber_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fnumber_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *fnumber_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_MAX_OPSIZE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MAX_OPSIZE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MAX_OPSIZE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MAX_OPSIZE));
  return pyobj;
}


SWIGINTERN int Swig_var_DOUBLE_OPSIZE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DOUBLE_OPSIZE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DOUBLE_OPSIZE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(DOUBLE_OPSIZE));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_hexwarn_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t_ea_set" "', argument " "1"" of type '" "hexwarn_t *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "hexwarn_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->ea = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarn_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t_ea_get" "', argument " "1"" of type '" "hexwarn_t *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  result = (ea_t) ((arg1)->ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarn_t_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  warnid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t_id_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t_id_set" "', argument " "1"" of type '" "hexwarn_t *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexwarn_t_id_set" "', argument " "2"" of type '" "warnid_t""'");
  } 
  arg2 = static_cast< warnid_t >(val2);
  if (arg1) (arg1)->id = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarn_t_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  warnid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t_id_get" "', argument " "1"" of type '" "hexwarn_t *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  result = (warnid_t) ((arg1)->id);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarn_t_text_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t_text_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t_text_set" "', argument " "1"" of type '" "hexwarn_t *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "hexwarn_t_text_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->text = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarn_t_text_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t_text_get" "', argument " "1"" of type '" "hexwarn_t *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  result = (qstring *)& ((arg1)->text);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarn_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t___eq__" "', argument " "1"" of type '" "hexwarn_t const *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarn_t___eq__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarn_t___eq__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (bool)((hexwarn_t const *)arg1)->operator ==((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_hexwarn_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t___ne__" "', argument " "1"" of type '" "hexwarn_t const *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarn_t___ne__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarn_t___ne__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (bool)((hexwarn_t const *)arg1)->operator !=((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_hexwarn_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t___lt__" "', argument " "1"" of type '" "hexwarn_t const *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarn_t___lt__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarn_t___lt__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (bool)((hexwarn_t const *)arg1)->operator <((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_hexwarn_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t___gt__" "', argument " "1"" of type '" "hexwarn_t const *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarn_t___gt__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarn_t___gt__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (bool)((hexwarn_t const *)arg1)->operator >((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_hexwarn_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t___le__" "', argument " "1"" of type '" "hexwarn_t const *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarn_t___le__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarn_t___le__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (bool)((hexwarn_t const *)arg1)->operator <=((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_hexwarn_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t___ge__" "', argument " "1"" of type '" "hexwarn_t const *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarn_t___ge__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarn_t___ge__" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (bool)((hexwarn_t const *)arg1)->operator >=((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_23(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "hexwarn_t const &""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (int)compare((hexwarn_t const &)*arg1,(hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexwarn_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  hexwarn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "hexwarn_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexwarn_t_compare" "', argument " "1"" of type '" "hexwarn_t const *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hexwarn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexwarn_t_compare" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hexwarn_t_compare" "', argument " "2"" of type '" "hexwarn_t const &""'"); 
  }
  arg2 = reinterpret_cast< hexwarn_t * >(argp2);
  {
    try
    {
      result = (int)((hexwarn_t const *)arg1)->compare((hexwarn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hexwarn_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_hexwarn_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (hexwarn_t *)new hexwarn_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexwarn_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_hexwarn_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexwarn_t *arg1 = (hexwarn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexwarn_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexwarn_t" "', argument " "1"" of type '" "hexwarn_t *""'"); 
  }
  arg1 = reinterpret_cast< hexwarn_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *hexwarn_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hexwarn_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *hexwarn_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_codegen_t_mba_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "codegen_t_mba_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_mba_set" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "codegen_t_mba_set" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  if (arg1) (arg1)->mba = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_mba_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mbl_array_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_mba_get" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  result = (mbl_array_t *) ((arg1)->mba);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mbl_array_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_mb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  mblock_t *arg2 = (mblock_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "codegen_t_mb_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_mb_set" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mblock_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "codegen_t_mb_set" "', argument " "2"" of type '" "mblock_t *""'"); 
  }
  arg2 = reinterpret_cast< mblock_t * >(argp2);
  if (arg1) (arg1)->mb = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_mb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mblock_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_mb_get" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  result = (mblock_t *) ((arg1)->mb);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mblock_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_insn_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  insn_t *arg2 = (insn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "codegen_t_insn_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_insn_set" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_insn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "codegen_t_insn_set" "', argument " "2"" of type '" "insn_t *""'"); 
  }
  arg2 = reinterpret_cast< insn_t * >(argp2);
  if (arg1) (arg1)->insn = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_insn_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  insn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_insn_get" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  result = (insn_t *)& ((arg1)->insn);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_insn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_ignore_micro_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "codegen_t_ignore_micro_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_ignore_micro_set" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "codegen_t_ignore_micro_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->ignore_micro = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_ignore_micro_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_ignore_micro_get" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  result = (char) ((arg1)->ignore_micro);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_codegen_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  codegen_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_codegen_t", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_codegen_t" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (codegen_t *)new SwigDirector_codegen_t(arg1,arg2); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_codegen_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_codegen_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_codegen_t" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_analyze_prolog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  qflow_chart_t *arg2 = 0 ;
  bitset_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  merror_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "codegen_t_analyze_prolog", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_analyze_prolog" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qflow_chart_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "codegen_t_analyze_prolog" "', argument " "2"" of type '" "qflow_chart_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "codegen_t_analyze_prolog" "', argument " "2"" of type '" "qflow_chart_t const &""'"); 
  }
  arg2 = reinterpret_cast< qflow_chart_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_bitset_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "codegen_t_analyze_prolog" "', argument " "3"" of type '" "bitset_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "codegen_t_analyze_prolog" "', argument " "3"" of type '" "bitset_t const &""'"); 
  }
  arg3 = reinterpret_cast< bitset_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("codegen_t::analyze_prolog");
        } else {
          result = (merror_t)(arg1)->analyze_prolog((qflow_chart_t const &)*arg2,(bitset_t const &)*arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_gen_micro(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  merror_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_gen_micro" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("codegen_t::gen_micro");
        } else {
          result = (merror_t)(arg1)->gen_micro();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_load_operand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  mreg_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "codegen_t_load_operand", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_load_operand" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "codegen_t_load_operand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("codegen_t::load_operand");
        } else {
          result = (mreg_t)(arg1)->load_operand(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_emit_micro_mvm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  mcode_t arg2 ;
  op_dtype_t arg3 ;
  uval_t arg4 ;
  uval_t arg5 ;
  uval_t arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  Swig::Director *director = 0;
  bool upcall = false;
  minsn_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "codegen_t_emit_micro_mvm", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_emit_micro_mvm" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "codegen_t_emit_micro_mvm" "', argument " "2"" of type '" "mcode_t""'");
  } 
  arg2 = static_cast< mcode_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "codegen_t_emit_micro_mvm" "', argument " "3"" of type '" "op_dtype_t""'");
  } 
  arg3 = static_cast< op_dtype_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "codegen_t_emit_micro_mvm" "', argument " "4"" of type '" "uval_t""'");
  } 
  arg4 = static_cast< uval_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "codegen_t_emit_micro_mvm" "', argument " "5"" of type '" "uval_t""'");
  } 
  arg5 = static_cast< uval_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "codegen_t_emit_micro_mvm" "', argument " "6"" of type '" "uval_t""'");
  } 
  arg6 = static_cast< uval_t >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "codegen_t_emit_micro_mvm" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (minsn_t *)(arg1)->codegen_t::emit_micro_mvm(arg2,arg3,arg4,arg5,arg6,arg7);
        } else {
          result = (minsn_t *)(arg1)->emit_micro_mvm(arg2,arg3,arg4,arg5,arg6,arg7);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_minsn_t, SWIG_POINTER_OWN |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_emit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  mcode_t arg2 ;
  int arg3 ;
  uval_t arg4 ;
  uval_t arg5 ;
  uval_t arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  minsn_t *result = 0 ;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_emit" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "codegen_t_emit" "', argument " "2"" of type '" "mcode_t""'");
  } 
  arg2 = static_cast< mcode_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "codegen_t_emit" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "codegen_t_emit" "', argument " "4"" of type '" "uval_t""'");
  } 
  arg4 = static_cast< uval_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "codegen_t_emit" "', argument " "5"" of type '" "uval_t""'");
  } 
  arg5 = static_cast< uval_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "codegen_t_emit" "', argument " "6"" of type '" "uval_t""'");
  } 
  arg6 = static_cast< uval_t >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "codegen_t_emit" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try
    {
      result = (minsn_t *)(arg1)->emit(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_minsn_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_emit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  mcode_t arg2 ;
  mop_t *arg3 = (mop_t *) 0 ;
  mop_t *arg4 = (mop_t *) 0 ;
  mop_t *arg5 = (mop_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  minsn_t *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "codegen_t_emit" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "codegen_t_emit" "', argument " "2"" of type '" "mcode_t""'");
  } 
  arg2 = static_cast< mcode_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mop_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "codegen_t_emit" "', argument " "3"" of type '" "mop_t const *""'"); 
  }
  arg3 = reinterpret_cast< mop_t * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_mop_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "codegen_t_emit" "', argument " "4"" of type '" "mop_t const *""'"); 
  }
  arg4 = reinterpret_cast< mop_t * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_mop_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "codegen_t_emit" "', argument " "5"" of type '" "mop_t const *""'"); 
  }
  arg5 = reinterpret_cast< mop_t * >(argp5);
  {
    try
    {
      result = (minsn_t *)(arg1)->emit(arg2,(mop_t const *)arg3,(mop_t const *)arg4,(mop_t const *)arg5);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_minsn_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_codegen_t_emit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "codegen_t_emit", 0, 7, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_codegen_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mop_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mop_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_mop_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_codegen_t_emit__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_codegen_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_codegen_t_emit__SWIG_0(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'codegen_t_emit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    codegen_t::emit(mcode_t,int,uval_t,uval_t,uval_t,int)\n"
    "    codegen_t::emit(mcode_t,mop_t const *,mop_t const *,mop_t const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disown_codegen_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  codegen_t *arg1 = (codegen_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_codegen_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_codegen_t" "', argument " "1"" of type '" "codegen_t *""'"); 
  }
  arg1 = reinterpret_cast< codegen_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *codegen_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_codegen_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *codegen_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_get_hexrays_version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_hexrays_version", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (char *)get_hexrays_version();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_open_pseudocode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  vdui_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "open_pseudocode", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "open_pseudocode" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "open_pseudocode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (vdui_t *)open_pseudocode(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vdui_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_close_pseudocode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget *arg1 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "close_pseudocode" "', argument " "1"" of type '" "TWidget *""'"); 
  }
  arg1 = reinterpret_cast< TWidget * >(argp1);
  {
    try
    {
      result = (bool)close_pseudocode(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexrays_failure_t_code_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexrays_failure_t *arg1 = (hexrays_failure_t *) 0 ;
  merror_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexrays_failure_t_code_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexrays_failure_t_code_set" "', argument " "1"" of type '" "hexrays_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexrays_failure_t_code_set" "', argument " "2"" of type '" "merror_t""'");
  } 
  arg2 = static_cast< merror_t >(val2);
  if (arg1) (arg1)->code = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexrays_failure_t_code_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexrays_failure_t *arg1 = (hexrays_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  merror_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexrays_failure_t_code_get" "', argument " "1"" of type '" "hexrays_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  result = (merror_t) ((arg1)->code);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexrays_failure_t_errea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexrays_failure_t *arg1 = (hexrays_failure_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexrays_failure_t_errea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexrays_failure_t_errea_set" "', argument " "1"" of type '" "hexrays_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "hexrays_failure_t_errea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->errea = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexrays_failure_t_errea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexrays_failure_t *arg1 = (hexrays_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexrays_failure_t_errea_get" "', argument " "1"" of type '" "hexrays_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  result = (ea_t) ((arg1)->errea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexrays_failure_t_str_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexrays_failure_t *arg1 = (hexrays_failure_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "hexrays_failure_t_str_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexrays_failure_t_str_set" "', argument " "1"" of type '" "hexrays_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "hexrays_failure_t_str_set" "', argument " "2"" of type 'str'");
    }
  }
  if (arg1) (arg1)->str = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_hexrays_failure_t_str_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexrays_failure_t *arg1 = (hexrays_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexrays_failure_t_str_get" "', argument " "1"" of type '" "hexrays_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  result = (qstring *)& ((arg1)->str);
  {
    // bytes_container typemap(out) qstring *
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hexrays_failure_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hexrays_failure_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (hexrays_failure_t *)new hexrays_failure_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexrays_failure_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hexrays_failure_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  merror_t arg1 ;
  ea_t arg2 ;
  char *arg3 = (char *) NULL ;
  int val1 ;
  int ecode1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  hexrays_failure_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_hexrays_failure_t" "', argument " "1"" of type '" "merror_t""'");
  } 
  arg1 = static_cast< merror_t >(val1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_hexrays_failure_t" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (swig_obj[2]) {
    res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_hexrays_failure_t" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    try
    {
      result = (hexrays_failure_t *)new hexrays_failure_t(arg1,arg2,(char const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexrays_failure_t, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hexrays_failure_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  merror_t arg1 ;
  ea_t arg2 ;
  qstring *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  hexrays_failure_t *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_hexrays_failure_t" "', argument " "1"" of type '" "merror_t""'");
  } 
  arg1 = static_cast< merror_t >(val1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_hexrays_failure_t" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    // bytes_container qstring &, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[2]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[2], &buf, &length);
      arg3 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "new_hexrays_failure_t" "', argument " "3"" of type 'str'");
    }
  }
  {
    try
    {
      result = (hexrays_failure_t *)new hexrays_failure_t(arg1,arg2,(qstring const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexrays_failure_t, SWIG_POINTER_NEW |  0 );
  {
    // bytes_container qstring & typemap(freearg)
    delete arg3;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring & typemap(freearg)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hexrays_failure_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_hexrays_failure_t", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_hexrays_failure_t__SWIG_0(self, argc, argv);
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_hexrays_failure_t__SWIG_1(self, argc, argv);
        }
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_hexrays_failure_t__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p__qstringT_char_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_hexrays_failure_t__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_hexrays_failure_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hexrays_failure_t::hexrays_failure_t()\n"
    "    hexrays_failure_t::hexrays_failure_t(merror_t,ea_t,char const *)\n"
    "    hexrays_failure_t::hexrays_failure_t(merror_t,ea_t,qstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hexrays_failure_t_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexrays_failure_t *arg1 = (hexrays_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< _qstring< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexrays_failure_t_desc" "', argument " "1"" of type '" "hexrays_failure_t const *""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  {
    try
    {
      result = ((hexrays_failure_t const *)arg1)->desc();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // bytes_container typemap(out) qstring
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) (&result)->c_str(), (&result)->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_hexrays_failure_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hexrays_failure_t *arg1 = (hexrays_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hexrays_failure_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexrays_failure_t" "', argument " "1"" of type '" "hexrays_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *hexrays_failure_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hexrays_failure_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *hexrays_failure_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vd_failure_t_hf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vd_failure_t *arg1 = (vd_failure_t *) 0 ;
  hexrays_failure_t *arg2 = (hexrays_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vd_failure_t_hf_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vd_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vd_failure_t_hf_set" "', argument " "1"" of type '" "vd_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< vd_failure_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vd_failure_t_hf_set" "', argument " "2"" of type '" "hexrays_failure_t *""'"); 
  }
  arg2 = reinterpret_cast< hexrays_failure_t * >(argp2);
  if (arg1) (arg1)->hf = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vd_failure_t_hf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vd_failure_t *arg1 = (vd_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hexrays_failure_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vd_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vd_failure_t_hf_get" "', argument " "1"" of type '" "vd_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< vd_failure_t * >(argp1);
  result = (hexrays_failure_t *)& ((arg1)->hf);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vd_failure_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  vd_failure_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (vd_failure_t *)new vd_failure_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vd_failure_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vd_failure_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  merror_t arg1 ;
  ea_t arg2 ;
  char *arg3 = (char *) NULL ;
  int val1 ;
  int ecode1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  vd_failure_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vd_failure_t" "', argument " "1"" of type '" "merror_t""'");
  } 
  arg1 = static_cast< merror_t >(val1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_vd_failure_t" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (swig_obj[2]) {
    res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_vd_failure_t" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    try
    {
      result = (vd_failure_t *)new vd_failure_t(arg1,arg2,(char const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vd_failure_t, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vd_failure_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  merror_t arg1 ;
  ea_t arg2 ;
  qstring *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  vd_failure_t *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vd_failure_t" "', argument " "1"" of type '" "merror_t""'");
  } 
  arg1 = static_cast< merror_t >(val1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_vd_failure_t" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    // bytes_container qstring &, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[2]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[2], &buf, &length);
      arg3 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "new_vd_failure_t" "', argument " "3"" of type 'str'");
    }
  }
  {
    try
    {
      result = (vd_failure_t *)new vd_failure_t(arg1,arg2,(qstring const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vd_failure_t, SWIG_POINTER_NEW |  0 );
  {
    // bytes_container qstring & typemap(freearg)
    delete arg3;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring & typemap(freearg)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vd_failure_t__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hexrays_failure_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vd_failure_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hexrays_failure_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vd_failure_t" "', argument " "1"" of type '" "hexrays_failure_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vd_failure_t" "', argument " "1"" of type '" "hexrays_failure_t const &""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  {
    try
    {
      result = (vd_failure_t *)new vd_failure_t((hexrays_failure_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vd_failure_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vd_failure_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vd_failure_t", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vd_failure_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hexrays_failure_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vd_failure_t__SWIG_3(self, argc, argv);
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_vd_failure_t__SWIG_1(self, argc, argv);
        }
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_vd_failure_t__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p__qstringT_char_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_vd_failure_t__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vd_failure_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vd_failure_t::vd_failure_t()\n"
    "    vd_failure_t::vd_failure_t(merror_t,ea_t,char const *)\n"
    "    vd_failure_t::vd_failure_t(merror_t,ea_t,qstring const &)\n"
    "    vd_failure_t::vd_failure_t(hexrays_failure_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vd_failure_t_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vd_failure_t *arg1 = (vd_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< _qstring< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vd_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vd_failure_t_desc" "', argument " "1"" of type '" "vd_failure_t const *""'"); 
  }
  arg1 = reinterpret_cast< vd_failure_t * >(argp1);
  {
    try
    {
      result = ((vd_failure_t const *)arg1)->desc();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // bytes_container typemap(out) qstring
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) (&result)->c_str(), (&result)->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vd_failure_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vd_failure_t *arg1 = (vd_failure_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vd_failure_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vd_failure_t" "', argument " "1"" of type '" "vd_failure_t *""'"); 
  }
  arg1 = reinterpret_cast< vd_failure_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vd_failure_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vd_failure_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vd_failure_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_vd_interr_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  qstring *arg2 = 0 ;
  vd_interr_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_vd_interr_t" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    // bytes_container qstring &, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "new_vd_interr_t" "', argument " "2"" of type 'str'");
    }
  }
  {
    try
    {
      result = (vd_interr_t *)new vd_interr_t(arg1,(qstring const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vd_interr_t, SWIG_POINTER_NEW |  0 );
  {
    // bytes_container qstring & typemap(freearg)
    delete arg2;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring & typemap(freearg)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vd_interr_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  char *arg2 = (char *) 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  vd_interr_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_vd_interr_t" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vd_interr_t" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (vd_interr_t *)new vd_interr_t(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vd_interr_t, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vd_interr_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vd_interr_t", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p__qstringT_char_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vd_interr_t__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vd_interr_t__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vd_interr_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vd_interr_t::vd_interr_t(ea_t,qstring const &)\n"
    "    vd_interr_t::vd_interr_t(ea_t,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_vd_interr_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vd_interr_t *arg1 = (vd_interr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vd_interr_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vd_interr_t" "', argument " "1"" of type '" "vd_interr_t *""'"); 
  }
  arg1 = reinterpret_cast< vd_interr_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vd_interr_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vd_interr_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vd_interr_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_send_database(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  hexrays_failure_t *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "send_database", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hexrays_failure_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "send_database" "', argument " "1"" of type '" "hexrays_failure_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "send_database" "', argument " "1"" of type '" "hexrays_failure_t const &""'"); 
  }
  arg1 = reinterpret_cast< hexrays_failure_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "send_database" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      send_database((hexrays_failure_t const &)*arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_remitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remitem" "', argument " "1"" of type '" "citem_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    try
    {
      remitem((citem_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_FX_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FX_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FX_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FX_NONE));
  return pyobj;
}


SWIGINTERN int Swig_var_FX_INFIX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FX_INFIX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FX_INFIX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FX_INFIX));
  return pyobj;
}


SWIGINTERN int Swig_var_FX_PREFIX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FX_PREFIX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FX_PREFIX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FX_PREFIX));
  return pyobj;
}


SWIGINTERN int Swig_var_FX_POSTFIX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FX_POSTFIX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FX_POSTFIX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FX_POSTFIX));
  return pyobj;
}


SWIGINTERN int Swig_var_FX_TERNARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FX_TERNARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FX_TERNARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FX_TERNARY));
  return pyobj;
}


SWIGINTERN int Swig_var_COI_RL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COI_RL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COI_RL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(COI_RL));
  return pyobj;
}


SWIGINTERN int Swig_var_COI_LR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COI_LR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COI_LR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(COI_LR));
  return pyobj;
}


SWIGINTERN int Swig_var_COI_INT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COI_INT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COI_INT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(COI_INT));
  return pyobj;
}


SWIGINTERN int Swig_var_COI_FP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COI_FP is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COI_FP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(COI_FP));
  return pyobj;
}


SWIGINTERN int Swig_var_COI_SH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COI_SH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COI_SH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(COI_SH));
  return pyobj;
}


SWIGINTERN int Swig_var_COI_SGN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COI_SGN is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COI_SGN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(COI_SGN));
  return pyobj;
}


SWIGINTERN int Swig_var_COI_SBN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COI_SBN is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COI_SBN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(COI_SBN));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_operator_info_t_text_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "operator_info_t_text_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_text_set" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "operator_info_t_text_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->text = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->text = 0;
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_operator_info_t_text_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_text_get" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  result = (char *) ((arg1)->text);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operator_info_t_precedence_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  uchar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "operator_info_t_precedence_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_precedence_set" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "operator_info_t_precedence_set" "', argument " "2"" of type '" "uchar""'");
  } 
  arg2 = static_cast< uchar >(val2);
  if (arg1) (arg1)->precedence = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operator_info_t_precedence_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uchar result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_precedence_get" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  result = (uchar) ((arg1)->precedence);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operator_info_t_valency_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  uchar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "operator_info_t_valency_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_valency_set" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "operator_info_t_valency_set" "', argument " "2"" of type '" "uchar""'");
  } 
  arg2 = static_cast< uchar >(val2);
  if (arg1) (arg1)->valency = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operator_info_t_valency_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uchar result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_valency_get" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  result = (uchar) ((arg1)->valency);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operator_info_t_fixtype_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  uchar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "operator_info_t_fixtype_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_fixtype_set" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "operator_info_t_fixtype_set" "', argument " "2"" of type '" "uchar""'");
  } 
  arg2 = static_cast< uchar >(val2);
  if (arg1) (arg1)->fixtype = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operator_info_t_fixtype_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uchar result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_fixtype_get" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  result = (uchar) ((arg1)->fixtype);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operator_info_t_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  uchar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "operator_info_t_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_flags_set" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "operator_info_t_flags_set" "', argument " "2"" of type '" "uchar""'");
  } 
  arg2 = static_cast< uchar >(val2);
  if (arg1) (arg1)->flags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_operator_info_t_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uchar result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "operator_info_t_flags_get" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  result = (uchar) ((arg1)->flags);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_operator_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_operator_info_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (operator_info_t *)new operator_info_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operator_info_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_operator_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operator_info_t *arg1 = (operator_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_operator_info_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_operator_info_t" "', argument " "1"" of type '" "operator_info_t *""'"); 
  }
  arg1 = reinterpret_cast< operator_info_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *operator_info_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operator_info_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *operator_info_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_negated_relation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ctype_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "negated_relation" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (ctype_t)negated_relation(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_swapped_relation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ctype_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "swapped_relation" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (ctype_t)swapped_relation(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_op_signness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  type_sign_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_op_signness" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (type_sign_t)get_op_signness(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_asgop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ctype_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "asgop" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (ctype_t)asgop(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_asgop_revert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ctype_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "asgop_revert" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (ctype_t)asgop_revert(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_op_uses_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "op_uses_x" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)op_uses_x(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_op_uses_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "op_uses_y" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)op_uses_y(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_op_uses_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "op_uses_z" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)op_uses_z(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_binary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_binary" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_binary(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_unary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_unary" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_unary(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_relational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_relational" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_relational(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_assignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_assignment" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_assignment(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_accepts_udts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "accepts_udts" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)accepts_udts(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_prepost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_prepost" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_prepost(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_commutative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_commutative" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_commutative(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_additive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_additive" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_additive(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_multiplicative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_multiplicative" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_multiplicative(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_bitop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_bitop" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_bitop(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_logical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_logical" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_logical(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_loop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_loop" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_loop(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_break_consumer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_break_consumer" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_break_consumer(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_lvalue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_lvalue" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_lvalue(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_allowed_on_small_struni(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_allowed_on_small_struni" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (bool)is_allowed_on_small_struni(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cnumber_t__value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  uint64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t__value_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t__value_set" "', argument " "1"" of type '" "cnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  {
    // %typemap(in) uint64
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg2 = arg2_temp;
  }
  if (arg1) (arg1)->_value = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cnumber_t__value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t__value_get" "', argument " "1"" of type '" "cnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  result = (uint64) ((arg1)->_value);
  {
    // %typemap(out) uint64
    resultobj = PyLong_FromUnsignedLongLong((unsigned long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cnumber_t_nf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  number_format_t *arg2 = (number_format_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t_nf_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t_nf_set" "', argument " "1"" of type '" "cnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_number_format_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cnumber_t_nf_set" "', argument " "2"" of type '" "number_format_t *""'"); 
  }
  arg2 = reinterpret_cast< number_format_t * >(argp2);
  if (arg1) (arg1)->nf = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cnumber_t_nf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  number_format_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t_nf_get" "', argument " "1"" of type '" "cnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  result = (number_format_t *)& ((arg1)->nf);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_number_format_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cnumber_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  cnumber_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_cnumber_t", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_cnumber_t" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    try
    {
      result = (cnumber_t *)new cnumber_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cnumber_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cnumber_t__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  tinfo_t *arg3 = 0 ;
  citem_t *arg4 = (citem_t *) NULL ;
  bool *arg5 = (bool *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qstring temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[4] ;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp2)
    arg2 = &temp2;
  }
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t__print", 2, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t__print" "', argument " "1"" of type '" "cnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cnumber_t__print" "', argument " "3"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cnumber_t__print" "', argument " "3"" of type '" "tinfo_t const &""'"); 
  }
  arg3 = reinterpret_cast< tinfo_t * >(argp3);
  if (swig_obj[2]) {
    res4 = SWIG_ConvertPtr(swig_obj[2], &argp4,SWIGTYPE_p_citem_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cnumber_t__print" "', argument " "4"" of type '" "citem_t const *""'"); 
    }
    arg4 = reinterpret_cast< citem_t * >(argp4);
  }
  if (swig_obj[3]) {
    res5 = SWIG_ConvertPtr(swig_obj[3], &argp5,SWIGTYPE_p_bool, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cnumber_t__print" "', argument " "5"" of type '" "bool *""'"); 
    }
    arg5 = reinterpret_cast< bool * >(argp5);
  }
  {
    try
    {
      ((cnumber_t const *)arg1)->print(arg2,(tinfo_t const &)*arg3,(citem_t const *)arg4,arg5);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container typemap(argout) (qstring *vout)
    Py_XDECREF(resultobj);
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg2->c_str(), arg2->length());
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_cnumber_t_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  tinfo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  uint64 result;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t_value", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t_value" "', argument " "1"" of type '" "cnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cnumber_t_value" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cnumber_t_value" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    try
    {
      result = (uint64)((cnumber_t const *)arg1)->value((tinfo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // %typemap(out) uint64
    resultobj = PyLong_FromUnsignedLongLong((unsigned long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cnumber_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  uint64 arg2 ;
  int arg3 ;
  type_sign_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t_assign", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t_assign" "', argument " "1"" of type '" "cnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  {
    // %typemap(in) uint64
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg2 = arg2_temp;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cnumber_t_assign" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cnumber_t_assign" "', argument " "4"" of type '" "type_sign_t""'");
  } 
  arg4 = static_cast< type_sign_t >(val4);
  {
    try
    {
      (arg1)->assign(arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cnumber_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  cnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t___eq__" "', argument " "1"" of type '" "cnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cnumber_t___eq__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cnumber_t___eq__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((cnumber_t const *)arg1)->operator ==((cnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cnumber_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  cnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t___ne__" "', argument " "1"" of type '" "cnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cnumber_t___ne__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cnumber_t___ne__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((cnumber_t const *)arg1)->operator !=((cnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cnumber_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  cnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t___lt__" "', argument " "1"" of type '" "cnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cnumber_t___lt__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cnumber_t___lt__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((cnumber_t const *)arg1)->operator <((cnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cnumber_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  cnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t___gt__" "', argument " "1"" of type '" "cnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cnumber_t___gt__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cnumber_t___gt__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((cnumber_t const *)arg1)->operator >((cnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cnumber_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  cnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t___le__" "', argument " "1"" of type '" "cnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cnumber_t___le__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cnumber_t___le__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((cnumber_t const *)arg1)->operator <=((cnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cnumber_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  cnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t___ge__" "', argument " "1"" of type '" "cnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cnumber_t___ge__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cnumber_t___ge__" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  {
    try
    {
      result = (bool)((cnumber_t const *)arg1)->operator >=((cnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_24(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = 0 ;
  cnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cnumber_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cnumber_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cnumber_t const &""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  {
    try
    {
      result = (int)compare((cnumber_t const &)*arg1,(cnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cnumber_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  cnumber_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cnumber_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cnumber_t_compare" "', argument " "1"" of type '" "cnumber_t const *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cnumber_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cnumber_t_compare" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cnumber_t_compare" "', argument " "2"" of type '" "cnumber_t const &""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  {
    try
    {
      result = (int)((cnumber_t const *)arg1)->compare((cnumber_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cnumber_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cnumber_t *arg1 = (cnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cnumber_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cnumber_t" "', argument " "1"" of type '" "cnumber_t *""'"); 
  }
  arg1 = reinterpret_cast< cnumber_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cnumber_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cnumber_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cnumber_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_var_ref_t_mba_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "var_ref_t_mba_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t_mba_set" "', argument " "1"" of type '" "var_ref_t *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "var_ref_t_mba_set" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  if (arg1) (arg1)->mba = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_ref_t_mba_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mbl_array_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t_mba_get" "', argument " "1"" of type '" "var_ref_t *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  result = (mbl_array_t *) ((arg1)->mba);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mbl_array_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_ref_t_idx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "var_ref_t_idx_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t_idx_set" "', argument " "1"" of type '" "var_ref_t *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_ref_t_idx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->idx = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_ref_t_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t_idx_get" "', argument " "1"" of type '" "var_ref_t *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  result = (int) ((arg1)->idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_ref_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  var_ref_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "var_ref_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t___eq__" "', argument " "1"" of type '" "var_ref_t const *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_var_ref_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "var_ref_t___eq__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_ref_t___eq__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  arg2 = reinterpret_cast< var_ref_t * >(argp2);
  {
    try
    {
      result = (bool)((var_ref_t const *)arg1)->operator ==((var_ref_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_var_ref_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  var_ref_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "var_ref_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t___ne__" "', argument " "1"" of type '" "var_ref_t const *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_var_ref_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "var_ref_t___ne__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_ref_t___ne__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  arg2 = reinterpret_cast< var_ref_t * >(argp2);
  {
    try
    {
      result = (bool)((var_ref_t const *)arg1)->operator !=((var_ref_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_var_ref_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  var_ref_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "var_ref_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t___lt__" "', argument " "1"" of type '" "var_ref_t const *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_var_ref_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "var_ref_t___lt__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_ref_t___lt__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  arg2 = reinterpret_cast< var_ref_t * >(argp2);
  {
    try
    {
      result = (bool)((var_ref_t const *)arg1)->operator <((var_ref_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_var_ref_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  var_ref_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "var_ref_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t___gt__" "', argument " "1"" of type '" "var_ref_t const *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_var_ref_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "var_ref_t___gt__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_ref_t___gt__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  arg2 = reinterpret_cast< var_ref_t * >(argp2);
  {
    try
    {
      result = (bool)((var_ref_t const *)arg1)->operator >((var_ref_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_var_ref_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  var_ref_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "var_ref_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t___le__" "', argument " "1"" of type '" "var_ref_t const *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_var_ref_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "var_ref_t___le__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_ref_t___le__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  arg2 = reinterpret_cast< var_ref_t * >(argp2);
  {
    try
    {
      result = (bool)((var_ref_t const *)arg1)->operator <=((var_ref_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_var_ref_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  var_ref_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "var_ref_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t___ge__" "', argument " "1"" of type '" "var_ref_t const *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_var_ref_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "var_ref_t___ge__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_ref_t___ge__" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  arg2 = reinterpret_cast< var_ref_t * >(argp2);
  {
    try
    {
      result = (bool)((var_ref_t const *)arg1)->operator >=((var_ref_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_25(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = 0 ;
  var_ref_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_var_ref_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "var_ref_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "var_ref_t const &""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_var_ref_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  arg2 = reinterpret_cast< var_ref_t * >(argp2);
  {
    try
    {
      result = (int)compare((var_ref_t const &)*arg1,(var_ref_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_ref_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  var_ref_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "var_ref_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_ref_t_compare" "', argument " "1"" of type '" "var_ref_t const *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_var_ref_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "var_ref_t_compare" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_ref_t_compare" "', argument " "2"" of type '" "var_ref_t const &""'"); 
  }
  arg2 = reinterpret_cast< var_ref_t * >(argp2);
  {
    try
    {
      result = (int)((var_ref_t const *)arg1)->compare((var_ref_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_var_ref_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_var_ref_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (var_ref_t *)new var_ref_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_var_ref_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_var_ref_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  var_ref_t *arg1 = (var_ref_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_var_ref_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_var_ref_t" "', argument " "1"" of type '" "var_ref_t *""'"); 
  }
  arg1 = reinterpret_cast< var_ref_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *var_ref_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_var_ref_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *var_ref_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ctree_visitor_t_cv_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_visitor_t_cv_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_cv_flags_set" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctree_visitor_t_cv_flags_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->cv_flags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_cv_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_cv_flags_get" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  result = (int) ((arg1)->cv_flags);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_maintain_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_maintain_parents" "', argument " "1"" of type '" "ctree_visitor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_visitor_t const *)arg1)->maintain_parents();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_must_prune(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_must_prune" "', argument " "1"" of type '" "ctree_visitor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_visitor_t const *)arg1)->must_prune();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_must_restart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_must_restart" "', argument " "1"" of type '" "ctree_visitor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_visitor_t const *)arg1)->must_restart();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_is_postorder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_is_postorder" "', argument " "1"" of type '" "ctree_visitor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_visitor_t const *)arg1)->is_postorder();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_only_insns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_only_insns" "', argument " "1"" of type '" "ctree_visitor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_visitor_t const *)arg1)->only_insns();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_prune_now(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_prune_now" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      (arg1)->prune_now();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_clr_prune(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_clr_prune" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      (arg1)->clr_prune();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_set_restart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_set_restart" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      (arg1)->set_restart();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_clr_restart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_clr_restart" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      (arg1)->clr_restart();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_parents_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  parents_t *arg2 = (parents_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_visitor_t_parents_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_parents_set" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_visitor_t_parents_set" "', argument " "2"" of type '" "parents_t *""'"); 
  }
  arg2 = reinterpret_cast< parents_t * >(argp2);
  if (arg1) (arg1)->parents = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_parents_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  parents_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_parents_get" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  result = (parents_t *)& ((arg1)->parents);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ctree_visitor_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ctree_visitor_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ctree_visitor_t", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ctree_visitor_t" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (ctree_visitor_t *)new SwigDirector_ctree_visitor_t(arg1,arg2); 
      } else {
        result = (ctree_visitor_t *)new ctree_visitor_t(arg2); 
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ctree_visitor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_apply_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  citem_t *arg3 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_visitor_t_apply_to", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_apply_to" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_visitor_t_apply_to" "', argument " "2"" of type '" "citem_t *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ctree_visitor_t_apply_to" "', argument " "3"" of type '" "citem_t *""'"); 
  }
  arg3 = reinterpret_cast< citem_t * >(argp3);
  {
    try {
      result = (int)(arg1)->apply_to(arg2,arg3);
    } catch ( Swig::DirectorException & ) {
      // A DirectorException might be raised in deeper layers.
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_apply_to_exprs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  citem_t *arg3 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_visitor_t_apply_to_exprs", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_apply_to_exprs" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_visitor_t_apply_to_exprs" "', argument " "2"" of type '" "citem_t *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ctree_visitor_t_apply_to_exprs" "', argument " "3"" of type '" "citem_t *""'"); 
  }
  arg3 = reinterpret_cast< citem_t * >(argp3);
  {
    try {
      result = (int)(arg1)->apply_to_exprs(arg2,arg3);
    } catch ( Swig::DirectorException & ) {
      // A DirectorException might be raised in deeper layers.
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_parent_expr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_parent_expr" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)(arg1)->parent_expr();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_parent_insn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_parent_insn" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      result = (cinsn_t *)(arg1)->parent_insn();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_visit_insn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_visitor_t_visit_insn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_visit_insn" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_visitor_t_visit_insn" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->ctree_visitor_t::visit_insn(arg2);
        } else {
          result = (int)(arg1)->visit_insn(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_visit_expr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_visitor_t_visit_expr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_visit_expr" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_visitor_t_visit_expr" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->ctree_visitor_t::visit_expr(arg2);
        } else {
          result = (int)(arg1)->visit_expr(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_leave_insn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_visitor_t_leave_insn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_leave_insn" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_visitor_t_leave_insn" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->ctree_visitor_t::leave_insn(arg2);
        } else {
          result = (int)(arg1)->leave_insn(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_visitor_t_leave_expr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_visitor_t_leave_expr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_visitor_t_leave_expr" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_visitor_t_leave_expr" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->ctree_visitor_t::leave_expr(arg2);
        } else {
          result = (int)(arg1)->leave_expr(arg2);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ctree_visitor_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ctree_visitor_t" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ctree_visitor_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_visitor_t *arg1 = (ctree_visitor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_visitor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ctree_visitor_t" "', argument " "1"" of type '" "ctree_visitor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_visitor_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ctree_visitor_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ctree_visitor_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ctree_visitor_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ctree_parentee_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  bool arg2 = (bool) false ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ctree_parentee_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ctree_parentee_t", 1, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ctree_parentee_t" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (ctree_parentee_t *)new SwigDirector_ctree_parentee_t(arg1,arg2); 
      } else {
        result = (ctree_parentee_t *)new ctree_parentee_t(arg2); 
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ctree_parentee_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_parentee_t_recalc_parent_types(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_parentee_t *arg1 = (ctree_parentee_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_parentee_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_parentee_t_recalc_parent_types" "', argument " "1"" of type '" "ctree_parentee_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_parentee_t * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->recalc_parent_types();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ctree_parentee_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_parentee_t *arg1 = (ctree_parentee_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_parentee_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ctree_parentee_t" "', argument " "1"" of type '" "ctree_parentee_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_parentee_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ctree_parentee_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_parentee_t *arg1 = (ctree_parentee_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_parentee_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ctree_parentee_t" "', argument " "1"" of type '" "ctree_parentee_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_parentee_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ctree_parentee_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ctree_parentee_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ctree_parentee_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cfunc_parentee_t_func_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_parentee_t *arg1 = (cfunc_parentee_t *) 0 ;
  cfunc_t *arg2 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_parentee_t_func_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_parentee_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_parentee_t_func_set" "', argument " "1"" of type '" "cfunc_parentee_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_parentee_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfunc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_parentee_t_func_set" "', argument " "2"" of type '" "cfunc_t *""'"); 
  }
  arg2 = reinterpret_cast< cfunc_t * >(argp2);
  if (arg1) (arg1)->func = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_parentee_t_func_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_parentee_t *arg1 = (cfunc_parentee_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cfunc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_parentee_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_parentee_t_func_get" "', argument " "1"" of type '" "cfunc_parentee_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_parentee_t * >(argp1);
  result = (cfunc_t *) ((arg1)->func);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cfunc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cfunc_parentee_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  cfunc_t *arg2 = (cfunc_t *) 0 ;
  bool arg3 = (bool) false ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  cfunc_parentee_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_cfunc_parentee_t", 2, 3, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cfunc_parentee_t" "', argument " "2"" of type '" "cfunc_t *""'"); 
  }
  arg2 = reinterpret_cast< cfunc_t * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_cfunc_parentee_t" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (cfunc_parentee_t *)new SwigDirector_cfunc_parentee_t(arg1,arg2,arg3); 
      } else {
        result = (cfunc_parentee_t *)new cfunc_parentee_t(arg2,arg3); 
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cfunc_parentee_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_parentee_t_calc_rvalue_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_parentee_t *arg1 = (cfunc_parentee_t *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  cexpr_t *arg3 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_parentee_t_calc_rvalue_type", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_parentee_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_parentee_t_calc_rvalue_type" "', argument " "1"" of type '" "cfunc_parentee_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_parentee_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_parentee_t_calc_rvalue_type" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfunc_parentee_t_calc_rvalue_type" "', argument " "3"" of type '" "cexpr_t const *""'"); 
  }
  arg3 = reinterpret_cast< cexpr_t * >(argp3);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfunc_parentee_t_calc_rvalue_type" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  {
    try
    {
      result = (bool)(arg1)->calc_rvalue_type(arg2,(cexpr_t const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cfunc_parentee_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_parentee_t *arg1 = (cfunc_parentee_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_parentee_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cfunc_parentee_t" "', argument " "1"" of type '" "cfunc_parentee_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_parentee_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_cfunc_parentee_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_parentee_t *arg1 = (cfunc_parentee_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_parentee_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_cfunc_parentee_t" "', argument " "1"" of type '" "cfunc_parentee_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_parentee_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cfunc_parentee_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cfunc_parentee_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cfunc_parentee_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_treeloc_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  treeloc_t *arg1 = (treeloc_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "treeloc_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_treeloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "treeloc_t_ea_set" "', argument " "1"" of type '" "treeloc_t *""'"); 
  }
  arg1 = reinterpret_cast< treeloc_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "treeloc_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->ea = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_treeloc_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  treeloc_t *arg1 = (treeloc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_treeloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "treeloc_t_ea_get" "', argument " "1"" of type '" "treeloc_t *""'"); 
  }
  arg1 = reinterpret_cast< treeloc_t * >(argp1);
  result = (ea_t) ((arg1)->ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_treeloc_t_itp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  treeloc_t *arg1 = (treeloc_t *) 0 ;
  item_preciser_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "treeloc_t_itp_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_treeloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "treeloc_t_itp_set" "', argument " "1"" of type '" "treeloc_t *""'"); 
  }
  arg1 = reinterpret_cast< treeloc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "treeloc_t_itp_set" "', argument " "2"" of type '" "item_preciser_t""'");
  } 
  arg2 = static_cast< item_preciser_t >(val2);
  if (arg1) (arg1)->itp = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_treeloc_t_itp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  treeloc_t *arg1 = (treeloc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  item_preciser_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_treeloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "treeloc_t_itp_get" "', argument " "1"" of type '" "treeloc_t *""'"); 
  }
  arg1 = reinterpret_cast< treeloc_t * >(argp1);
  result = (item_preciser_t) ((arg1)->itp);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_treeloc_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  treeloc_t *arg1 = (treeloc_t *) 0 ;
  treeloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "treeloc_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_treeloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "treeloc_t___lt__" "', argument " "1"" of type '" "treeloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< treeloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "treeloc_t___lt__" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "treeloc_t___lt__" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  {
    try
    {
      result = (bool)((treeloc_t const *)arg1)->operator <((treeloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_treeloc_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  treeloc_t *arg1 = (treeloc_t *) 0 ;
  treeloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "treeloc_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_treeloc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "treeloc_t___eq__" "', argument " "1"" of type '" "treeloc_t const *""'"); 
  }
  arg1 = reinterpret_cast< treeloc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "treeloc_t___eq__" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "treeloc_t___eq__" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  {
    try
    {
      result = (bool)((treeloc_t const *)arg1)->operator ==((treeloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_treeloc_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  treeloc_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_treeloc_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (treeloc_t *)new treeloc_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_treeloc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_treeloc_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  treeloc_t *arg1 = (treeloc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_treeloc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_treeloc_t" "', argument " "1"" of type '" "treeloc_t *""'"); 
  }
  arg1 = reinterpret_cast< treeloc_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *treeloc_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_treeloc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *treeloc_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_citem_cmt_t_used_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_cmt_t *arg1 = (citem_cmt_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_cmt_t_used_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_cmt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_cmt_t_used_set" "', argument " "1"" of type '" "citem_cmt_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_cmt_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "citem_cmt_t_used_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->used = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_cmt_t_used_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_cmt_t *arg1 = (citem_cmt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_cmt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_cmt_t_used_get" "', argument " "1"" of type '" "citem_cmt_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_cmt_t * >(argp1);
  result = (bool) ((arg1)->used);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_citem_cmt_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  citem_cmt_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (citem_cmt_t *)new citem_cmt_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_cmt_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_citem_cmt_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  citem_cmt_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_citem_cmt_t" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (citem_cmt_t *)new citem_cmt_t((char const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_cmt_t, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_citem_cmt_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_citem_cmt_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_citem_cmt_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_citem_cmt_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_citem_cmt_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    citem_cmt_t::citem_cmt_t()\n"
    "    citem_cmt_t::citem_cmt_t(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_citem_cmt_t_c_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_cmt_t *arg1 = (citem_cmt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_cmt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_cmt_t_c_str" "', argument " "1"" of type '" "citem_cmt_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_cmt_t * >(argp1);
  {
    try
    {
      result = (char *)citem_cmt_t_c_str((citem_cmt_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_cmt_t___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_cmt_t *arg1 = (citem_cmt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_cmt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_cmt_t___str__" "', argument " "1"" of type '" "citem_cmt_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_cmt_t * >(argp1);
  {
    try
    {
      result = (char *)citem_cmt_t___str__((citem_cmt_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_citem_cmt_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_cmt_t *arg1 = (citem_cmt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_cmt_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_citem_cmt_t" "', argument " "1"" of type '" "citem_cmt_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_cmt_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *citem_cmt_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_citem_cmt_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *citem_cmt_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_citem_locator_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_locator_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t_ea_set" "', argument " "1"" of type '" "citem_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "citem_locator_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->ea = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_locator_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t_ea_get" "', argument " "1"" of type '" "citem_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  result = (ea_t) ((arg1)->ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_locator_t_op_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  ctype_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_locator_t_op_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t_op_set" "', argument " "1"" of type '" "citem_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "citem_locator_t_op_set" "', argument " "2"" of type '" "ctype_t""'");
  } 
  arg2 = static_cast< ctype_t >(val2);
  if (arg1) (arg1)->op = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_locator_t_op_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctype_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t_op_get" "', argument " "1"" of type '" "citem_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  result = (ctype_t) ((arg1)->op);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_citem_locator_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  ctype_t arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  citem_locator_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_citem_locator_t" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_citem_locator_t" "', argument " "2"" of type '" "ctype_t""'");
  } 
  arg2 = static_cast< ctype_t >(val2);
  {
    try
    {
      result = (citem_locator_t *)new citem_locator_t(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_locator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_citem_locator_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  citem_locator_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_citem_locator_t" "', argument " "1"" of type '" "citem_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    try
    {
      result = (citem_locator_t *)new citem_locator_t((citem_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_locator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_citem_locator_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_citem_locator_t", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_citem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_citem_locator_t__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_citem_locator_t__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_citem_locator_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    citem_locator_t::citem_locator_t(ea_t,ctype_t)\n"
    "    citem_locator_t::citem_locator_t(citem_t const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_citem_locator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_locator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t___eq__" "', argument " "1"" of type '" "citem_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_locator_t___eq__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "citem_locator_t___eq__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((citem_locator_t const *)arg1)->operator ==((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_citem_locator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_locator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t___ne__" "', argument " "1"" of type '" "citem_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_locator_t___ne__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "citem_locator_t___ne__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((citem_locator_t const *)arg1)->operator !=((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_citem_locator_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_locator_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t___lt__" "', argument " "1"" of type '" "citem_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_locator_t___lt__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "citem_locator_t___lt__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((citem_locator_t const *)arg1)->operator <((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_citem_locator_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_locator_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t___gt__" "', argument " "1"" of type '" "citem_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_locator_t___gt__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "citem_locator_t___gt__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((citem_locator_t const *)arg1)->operator >((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_citem_locator_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_locator_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t___le__" "', argument " "1"" of type '" "citem_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_locator_t___le__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "citem_locator_t___le__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((citem_locator_t const *)arg1)->operator <=((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_citem_locator_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_locator_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t___ge__" "', argument " "1"" of type '" "citem_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_locator_t___ge__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "citem_locator_t___ge__" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (bool)((citem_locator_t const *)arg1)->operator >=((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_26(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "citem_locator_t const &""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (int)compare((citem_locator_t const &)*arg1,(citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_locator_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_locator_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_locator_t_compare" "', argument " "1"" of type '" "citem_locator_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_locator_t_compare" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "citem_locator_t_compare" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (int)((citem_locator_t const *)arg1)->compare((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_citem_locator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_locator_t *arg1 = (citem_locator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_locator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_citem_locator_t" "', argument " "1"" of type '" "citem_locator_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_locator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *citem_locator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_citem_locator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *citem_locator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_bit_bound_t_nbits_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bit_bound_t *arg1 = (bit_bound_t *) 0 ;
  int16 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bit_bound_t_nbits_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bit_bound_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bit_bound_t_nbits_set" "', argument " "1"" of type '" "bit_bound_t *""'"); 
  }
  arg1 = reinterpret_cast< bit_bound_t * >(argp1);
  ecode2 = SWIG_AsVal_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bit_bound_t_nbits_set" "', argument " "2"" of type '" "int16""'");
  } 
  arg2 = static_cast< int16 >(val2);
  if (arg1) (arg1)->nbits = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bit_bound_t_nbits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bit_bound_t *arg1 = (bit_bound_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int16 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bit_bound_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bit_bound_t_nbits_get" "', argument " "1"" of type '" "bit_bound_t *""'"); 
  }
  arg1 = reinterpret_cast< bit_bound_t * >(argp1);
  result = (int16) ((arg1)->nbits);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bit_bound_t_sbits_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bit_bound_t *arg1 = (bit_bound_t *) 0 ;
  int16 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bit_bound_t_sbits_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bit_bound_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bit_bound_t_sbits_set" "', argument " "1"" of type '" "bit_bound_t *""'"); 
  }
  arg1 = reinterpret_cast< bit_bound_t * >(argp1);
  ecode2 = SWIG_AsVal_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bit_bound_t_sbits_set" "', argument " "2"" of type '" "int16""'");
  } 
  arg2 = static_cast< int16 >(val2);
  if (arg1) (arg1)->sbits = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bit_bound_t_sbits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bit_bound_t *arg1 = (bit_bound_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int16 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bit_bound_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bit_bound_t_sbits_get" "', argument " "1"" of type '" "bit_bound_t *""'"); 
  }
  arg1 = reinterpret_cast< bit_bound_t * >(argp1);
  result = (int16) ((arg1)->sbits);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bit_bound_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bit_bound_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_bit_bound_t", 0, 2, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_bit_bound_t" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_bit_bound_t" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try
    {
      result = (bit_bound_t *)new bit_bound_t(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bit_bound_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_bit_bound_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bit_bound_t *arg1 = (bit_bound_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bit_bound_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bit_bound_t" "', argument " "1"" of type '" "bit_bound_t *""'"); 
  }
  arg1 = reinterpret_cast< bit_bound_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bit_bound_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bit_bound_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *bit_bound_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_citem_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_ea_set" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "citem_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_ea_set" "', argument " "1"" of type '" "citem_t *""'");
  }
  if (arg1) (arg1)->ea = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_ea_get" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_ea_get" "', argument " "1"" of type '" "citem_t *""'");
  }
  result = (ea_t) ((arg1)->ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_label_num_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_t_label_num_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_label_num_set" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "citem_t_label_num_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_label_num_set" "', argument " "1"" of type '" "citem_t *""'");
  }
  if (arg1) (arg1)->label_num = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_label_num_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_label_num_get" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_label_num_get" "', argument " "1"" of type '" "citem_t *""'");
  }
  result = (int) ((arg1)->label_num);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_index_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_t_index_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_index_set" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "citem_t_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_index_set" "', argument " "1"" of type '" "citem_t *""'");
  }
  if (arg1) (arg1)->index = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_index_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_index_get" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_index_get" "', argument " "1"" of type '" "citem_t *""'");
  }
  result = (int) ((arg1)->index);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_citem_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  citem_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (citem_t *)new citem_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_citem_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  citem_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_citem_t" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (citem_t *)new citem_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_citem_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_citem_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_citem_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_citem_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_citem_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    citem_t::citem_t()\n"
    "    citem_t::citem_t(ctype_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_citem_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  citem_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_swap" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_t_swap" "', argument " "2"" of type '" "citem_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "citem_t_swap" "', argument " "2"" of type '" "citem_t &""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_swap" "', argument " "1"" of type '" "citem_t *""'");
  }
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_is_expr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_is_expr" "', argument " "1"" of type '" "citem_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_is_expr" "', argument " "1"" of type '" "citem_t const *""'");
  }
  {
    try
    {
      result = (bool)((citem_t const *)arg1)->is_expr();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_contains_expr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_t_contains_expr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_contains_expr" "', argument " "1"" of type '" "citem_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_t_contains_expr" "', argument " "2"" of type '" "cexpr_t const *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_contains_expr" "', argument " "1"" of type '" "citem_t const *""'");
  }
  {
    try
    {
      result = (bool)((citem_t const *)arg1)->contains_expr((cexpr_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_contains_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_contains_label" "', argument " "1"" of type '" "citem_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_contains_label" "', argument " "1"" of type '" "citem_t const *""'");
  }
  {
    try
    {
      result = (bool)((citem_t const *)arg1)->contains_label();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_find_parent_of__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  citem_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_find_parent_of" "', argument " "1"" of type '" "citem_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_t_find_parent_of" "', argument " "2"" of type '" "citem_t const *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_find_parent_of" "', argument " "1"" of type '" "citem_t const *""'");
  }
  {
    try
    {
      result = (citem_t *)((citem_t const *)arg1)->find_parent_of((citem_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_find_parent_of__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  citem_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_find_parent_of" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "citem_t_find_parent_of" "', argument " "2"" of type '" "citem_t const *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_find_parent_of" "', argument " "1"" of type '" "citem_t *""'");
  }
  {
    try
    {
      result = (citem_t *)(arg1)->find_parent_of((citem_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_find_parent_of(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "citem_t_find_parent_of", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_citem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_citem_t_find_parent_of__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_citem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_citem_t_find_parent_of__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'citem_t_find_parent_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    citem_t::find_parent_of(citem_t const *) const\n"
    "    citem_t::find_parent_of(citem_t const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_citem_t_find_closest_addr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  citem_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_t_find_closest_addr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_find_closest_addr" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "citem_t_find_closest_addr" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_find_closest_addr" "', argument " "1"" of type '" "citem_t *""'");
  }
  {
    try
    {
      result = (citem_t *)(arg1)->find_closest_addr(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_print1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  cfunc_t *arg3 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qstring temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[2] ;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp2)
    arg2 = &temp2;
  }
  if (!SWIG_Python_UnpackTuple(args, "citem_t_print1", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_print1" "', argument " "1"" of type '" "citem_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "citem_t_print1" "', argument " "3"" of type '" "cfunc_t const *""'"); 
  }
  arg3 = reinterpret_cast< cfunc_t * >(argp3);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_print1" "', argument " "1"" of type '" "citem_t const *""'");
  }
  {
    try
    {
      ((citem_t const *)arg1)->print1(arg2,(cfunc_t const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container typemap(argout) (qstring *vout)
    Py_XDECREF(resultobj);
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg2->c_str(), arg2->length());
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_citem_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_citem_t" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "delete_citem_t" "', argument " "1"" of type '" "citem_t *""'");
  }
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_cinsn_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_cinsn_get" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_cinsn_get" "', argument " "1"" of type '" "citem_t *""'");
  }
  {
    try
    {
      result = (cinsn_t *)citem_t_cinsn_get(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t_cexpr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t_cexpr_get" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t_cexpr_get" "', argument " "1"" of type '" "citem_t *""'");
  }
  {
    try
    {
      result = (cexpr_t *)citem_t_cexpr_get(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t__get_op(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctype_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t__get_op" "', argument " "1"" of type '" "citem_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t__get_op" "', argument " "1"" of type '" "citem_t const *""'");
  }
  {
    try
    {
      result = (ctype_t)citem_t__get_op((citem_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t__set_op(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  ctype_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "citem_t__set_op", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t__set_op" "', argument " "1"" of type '" "citem_t *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "citem_t__set_op" "', argument " "2"" of type '" "ctype_t""'");
  } 
  arg2 = static_cast< ctype_t >(val2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t__set_op" "', argument " "1"" of type '" "citem_t *""'");
  }
  {
    try
    {
      citem_t__set_op(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_citem_t__obj_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  citem_t *arg1 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "citem_t__obj_id" "', argument " "1"" of type '" "citem_t const *""'"); 
  }
  arg1 = reinterpret_cast< citem_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "citem_t__obj_id" "', argument " "1"" of type '" "citem_t const *""'");
  }
  {
    try
    {
      result = (PyObject *)citem_t__obj_id((citem_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *citem_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_citem_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *citem_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cexpr_t_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_type_set" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_type_set" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t_type_set" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  if (arg1) (arg1)->type = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tinfo_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_type_get" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  result = (tinfo_t *)& ((arg1)->type);
  {
    
  }
  {
    // ret tinfo_t*
    tinfo_t *ni = new tinfo_t(*(result));
    til_register_python_tinfo_t_instance(ni);
    if ( strcmp("new_tinfo_t", "cexpr_t_type_get") == 0 )
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_NEW | 0);
      delete result;
    }
    else
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_exflags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_exflags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_exflags_set" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t_exflags_set" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->exflags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_exflags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_exflags_get" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  result = (uint32) ((arg1)->exflags);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_cpadone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_cpadone" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->cpadone();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_odd_lvalue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_odd_lvalue" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_odd_lvalue();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_fpop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_fpop" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_fpop();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_cstr" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_cstr();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_undef_val(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_undef_val" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_undef_val();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_jumpout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_jumpout" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_jumpout();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_vftable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_vftable" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_vftable();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_set_cpadone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_set_cpadone" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      (arg1)->set_cpadone();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_set_vftable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_set_vftable" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      (arg1)->set_vftable();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cexpr_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (cexpr_t *)new cexpr_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, SWIG_POINTER_NEW |  0 );
  {
    hexrays_register_python_clearable_instance(result, hxclr_cexpr);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cexpr_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ctype_t arg1 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_cexpr_t" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cexpr_t" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (cexpr_t *)new cexpr_t(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, SWIG_POINTER_NEW |  0 );
  {
    hexrays_register_python_clearable_instance(result, hxclr_cexpr);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cexpr_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ctype_t arg1 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  cexpr_t *arg3 = (cexpr_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_cexpr_t" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cexpr_t" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_cexpr_t" "', argument " "3"" of type '" "cexpr_t *""'"); 
  }
  arg3 = reinterpret_cast< cexpr_t * >(argp3);
  {
    try
    {
      result = (cexpr_t *)new cexpr_t(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, SWIG_POINTER_NEW |  0 );
  {
    hexrays_register_python_clearable_instance(result, hxclr_cexpr);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cexpr_t__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ctype_t arg1 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  cexpr_t *arg3 = (cexpr_t *) 0 ;
  cexpr_t *arg4 = (cexpr_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_cexpr_t" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cexpr_t" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_cexpr_t" "', argument " "3"" of type '" "cexpr_t *""'"); 
  }
  arg3 = reinterpret_cast< cexpr_t * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_cexpr_t" "', argument " "4"" of type '" "cexpr_t *""'"); 
  }
  arg4 = reinterpret_cast< cexpr_t * >(argp4);
  {
    try
    {
      result = (cexpr_t *)new cexpr_t(arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, SWIG_POINTER_NEW |  0 );
  {
    hexrays_register_python_clearable_instance(result, hxclr_cexpr);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cexpr_t__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cexpr_t" "', argument " "1"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cexpr_t" "', argument " "1"" of type '" "cexpr_t const &""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)new cexpr_t((cexpr_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, SWIG_POINTER_NEW |  0 );
  {
    hexrays_register_python_clearable_instance(result, hxclr_cexpr);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cexpr_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_cexpr_t", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_cexpr_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cexpr_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_cexpr_t__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cexpr_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_cexpr_t__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cexpr_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cexpr_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_cexpr_t__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cexpr_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cexpr_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_cexpr_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_cexpr_t__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_cexpr_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cexpr_t::cexpr_t()\n"
    "    cexpr_t::cexpr_t(ctype_t,cexpr_t *)\n"
    "    cexpr_t::cexpr_t(ctype_t,cexpr_t *,cexpr_t *)\n"
    "    cexpr_t::cexpr_t(ctype_t,cexpr_t *,cexpr_t *,cexpr_t *)\n"
    "    cexpr_t::cexpr_t(cexpr_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cexpr_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_swap" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_swap" "', argument " "2"" of type '" "cexpr_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t_swap" "', argument " "2"" of type '" "cexpr_t &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cexpr_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_assign", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_assign" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_assign" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t_assign" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (cexpr_t *) &(arg1)->assign((cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t___eq__" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t___eq__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t___eq__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->operator ==((cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cexpr_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t___ne__" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t___ne__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t___ne__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->operator !=((cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cexpr_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t___lt__" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t___lt__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t___lt__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->operator <((cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cexpr_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t___gt__" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t___gt__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t___gt__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->operator >((cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cexpr_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t___le__" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t___le__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t___le__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->operator <=((cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cexpr_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t___ge__" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t___ge__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t___ge__" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->operator >=((cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_27(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cexpr_t const &""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (int)compare((cexpr_t const &)*arg1,(cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_compare" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_compare" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t_compare" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (int)((cexpr_t const *)arg1)->compare((cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cexpr_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cexpr_t" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      {
        hexrays_deregister_python_clearable_instance(arg1);
        delete arg1;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__replace_by(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__replace_by", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__replace_by" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__replace_by" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      (arg1)->replace_by(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_cleanup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_cleanup" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      (arg1)->cleanup();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_put_number(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cfunc_t *arg2 = (cfunc_t *) 0 ;
  uint64 arg3 ;
  int arg4 ;
  type_sign_t arg5 = (type_sign_t) no_sign ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_put_number", 4, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_put_number" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_put_number" "', argument " "2"" of type '" "cfunc_t *""'"); 
  }
  arg2 = reinterpret_cast< cfunc_t * >(argp2);
  {
    // %typemap(in) uint64
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg3 = arg3_temp;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cexpr_t_put_number" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cexpr_t_put_number" "', argument " "5"" of type '" "type_sign_t""'");
    } 
    arg5 = static_cast< type_sign_t >(val5);
  }
  {
    try
    {
      (arg1)->put_number(arg2,arg3,arg4,arg5);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_print1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  cfunc_t *arg3 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qstring temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[2] ;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp2)
    arg2 = &temp2;
  }
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_print1", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_print1" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cexpr_t_print1" "', argument " "3"" of type '" "cfunc_t const *""'"); 
  }
  arg3 = reinterpret_cast< cfunc_t * >(argp3);
  {
    try
    {
      ((cexpr_t const *)arg1)->print1(arg2,(cfunc_t const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container typemap(argout) (qstring *vout)
    Py_XDECREF(resultobj);
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg2->c_str(), arg2->length());
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_calc_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_calc_type", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_calc_type" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t_calc_type" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->calc_type(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_equal_effect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_equal_effect", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_equal_effect" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cexpr_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_equal_effect" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cexpr_t_equal_effect" "', argument " "2"" of type '" "cexpr_t const &""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->equal_effect((cexpr_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_child_of(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_is_child_of", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_child_of" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_is_child_of" "', argument " "2"" of type '" "citem_t const *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_child_of((citem_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_contains_operator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  ctype_t arg2 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_contains_operator", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_contains_operator" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t_contains_operator" "', argument " "2"" of type '" "ctype_t""'");
  } 
  arg2 = static_cast< ctype_t >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cexpr_t_contains_operator" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->contains_operator(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_contains_comma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  int arg2 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_contains_comma", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_contains_comma" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t_contains_comma" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->contains_comma(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_contains_insn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  int arg2 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_contains_insn", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_contains_insn" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t_contains_insn" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->contains_insn(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_contains_insn_or_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_contains_insn_or_label" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->contains_insn_or_label();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_contains_comma_or_insn_or_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  int arg2 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_contains_comma_or_insn_or_label", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_contains_comma_or_insn_or_label" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t_contains_comma_or_insn_or_label" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->contains_comma_or_insn_or_label(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_nice_expr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_nice_expr" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_nice_expr();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_nice_cond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_nice_cond" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_nice_cond();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_call_object_of(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_is_call_object_of", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_call_object_of" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_is_call_object_of" "', argument " "2"" of type '" "citem_t const *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_call_object_of((citem_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_call_arg_of(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_is_call_arg_of", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_call_arg_of" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_is_call_arg_of" "', argument " "2"" of type '" "citem_t const *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_call_arg_of((citem_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_get_type_sign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  type_sign_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_get_type_sign" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (type_sign_t)((cexpr_t const *)arg1)->get_type_sign();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_type_unsigned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_type_unsigned" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_type_unsigned();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_type_signed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_type_signed" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_type_signed();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_get_high_nbit_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bit_bound_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_get_high_nbit_bound" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = ((cexpr_t const *)arg1)->get_high_nbit_bound();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new bit_bound_t(static_cast< const bit_bound_t& >(result))), SWIGTYPE_p_bit_bound_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_get_low_nbit_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_get_low_nbit_bound" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (int)((cexpr_t const *)arg1)->get_low_nbit_bound();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_requires_lvalue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_requires_lvalue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_requires_lvalue" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_requires_lvalue" "', argument " "2"" of type '" "cexpr_t const *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->requires_lvalue((cexpr_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_has_side_effects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_has_side_effects" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->has_side_effects();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_numval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_numval" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (uint64)((cexpr_t const *)arg1)->numval();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // %typemap(out) uint64
    resultobj = PyLong_FromUnsignedLongLong((unsigned long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_const_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  uint64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_is_const_value", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_const_value" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    // %typemap(in) uint64
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg2 = arg2_temp;
  }
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_const_value(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_negative_const(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_negative_const" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_negative_const();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_non_negative_const(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_non_negative_const" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_non_negative_const();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_non_zero_const(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_non_zero_const" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_non_zero_const();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_is_zero_const(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_is_zero_const" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->is_zero_const();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_get_const_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  uint64 *arg2 = (uint64 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64 temp2 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    // %typemap(in,numinputs=0) uint64 *result
    arg2 = &temp2;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_get_const_value" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->get_const_value(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // %typemap(argout) uint64 *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = PyLong_FromUnsignedLongLong(*(uint64 *) arg2);
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_maybe_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_maybe_ptr" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (bool)((cexpr_t const *)arg1)->maybe_ptr();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_get_ptr_or_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_get_ptr_or_array" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)(arg1)->get_ptr_or_array();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_find_op__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  ctype_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_find_op" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t_find_op" "', argument " "2"" of type '" "ctype_t""'");
  } 
  arg2 = static_cast< ctype_t >(val2);
  {
    try
    {
      result = (cexpr_t *)((cexpr_t const *)arg1)->find_op(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_find_op__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  ctype_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_find_op" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t_find_op" "', argument " "2"" of type '" "ctype_t""'");
  } 
  arg2 = static_cast< ctype_t >(val2);
  {
    try
    {
      result = (cexpr_t *)(arg1)->find_op(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_find_op(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cexpr_t_find_op", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cexpr_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_cexpr_t_find_op__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cexpr_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_cexpr_t_find_op__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cexpr_t_find_op'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cexpr_t::find_op(ctype_t) const\n"
    "    cexpr_t::find_op(ctype_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cexpr_t_find_num_op__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_find_num_op" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)((cexpr_t const *)arg1)->find_num_op();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_find_num_op__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_find_num_op" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)(arg1)->find_num_op();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_find_num_op(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cexpr_t_find_num_op", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cexpr_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cexpr_t_find_num_op__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cexpr_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cexpr_t_find_num_op__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cexpr_t_find_num_op'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cexpr_t::find_num_op() const\n"
    "    cexpr_t::find_num_op()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cexpr_t_theother__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_theother" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_theother" "', argument " "2"" of type '" "cexpr_t const *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (cexpr_t *)((cexpr_t const *)arg1)->theother((cexpr_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_theother__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cexpr_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_theother" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_theother" "', argument " "2"" of type '" "cexpr_t const *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (cexpr_t *)(arg1)->theother((cexpr_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_theother(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cexpr_t_theother", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cexpr_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cexpr_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cexpr_t_theother__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cexpr_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cexpr_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cexpr_t_theother__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cexpr_t_theother'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cexpr_t::theother(cexpr_t const *) const\n"
    "    cexpr_t::theother(cexpr_t const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cexpr_t_get_1num_op(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t **arg2 = (cexpr_t **) 0 ;
  cexpr_t **arg3 = (cexpr_t **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_get_1num_op", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_get_1num_op" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_get_1num_op" "', argument " "2"" of type '" "cexpr_t **""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t ** >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cexpr_t_get_1num_op" "', argument " "3"" of type '" "cexpr_t **""'"); 
  }
  arg3 = reinterpret_cast< cexpr_t ** >(argp3);
  {
    try
    {
      result = (bool)(arg1)->get_1num_op(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__deregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__deregister" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      cexpr_t__deregister(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__register(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__register" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      cexpr_t__register(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cnumber_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_n" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cnumber_t *)cexpr_t__get_n((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cnumber_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cnumber_t *arg2 = (cnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_n", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_n" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__set_n" "', argument " "2"" of type '" "cnumber_t *""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  {
    try
    {
      cexpr_t__set_n(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_fpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fnumber_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_fpc" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (fnumber_t *)cexpr_t__get_fpc((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fnumber_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_fpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  fnumber_t *arg2 = (fnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_fpc", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_fpc" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_fnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__set_fpc" "', argument " "2"" of type '" "fnumber_t *""'"); 
  }
  arg2 = reinterpret_cast< fnumber_t * >(argp2);
  {
    try
    {
      cexpr_t__set_fpc(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_get_v(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  var_ref_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_get_v" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (var_ref_t *)cexpr_t_get_v(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_var_ref_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t_set_v(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  var_ref_t *arg2 = (var_ref_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t_set_v", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t_set_v" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_var_ref_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t_set_v" "', argument " "2"" of type '" "var_ref_t const *""'"); 
  }
  arg2 = reinterpret_cast< var_ref_t * >(argp2);
  {
    try
    {
      cexpr_t_set_v(arg1,(var_ref_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_obj_ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_obj_ea" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (ea_t)cexpr_t__get_obj_ea((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_obj_ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_obj_ea", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_obj_ea" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "cexpr_t__set_obj_ea" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      cexpr_t__set_obj_ea(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_refwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_refwidth" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (int)cexpr_t__get_refwidth((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_refwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_refwidth", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_refwidth" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t__set_refwidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      cexpr_t__set_refwidth(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_x" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)cexpr_t__get_x((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_x", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_x" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__set_x" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      cexpr_t__set_x(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_y" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)cexpr_t__get_y((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_y", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_y" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__set_y" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      cexpr_t__set_y(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_a(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  carglist_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_a" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (carglist_t *)cexpr_t__get_a((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carglist_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_a(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  carglist_t *arg2 = (carglist_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_a", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_a" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__set_a" "', argument " "2"" of type '" "carglist_t *""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    try
    {
      cexpr_t__set_a(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_m" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (int)cexpr_t__get_m((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_m", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_m" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t__set_m" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      cexpr_t__set_m(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_z" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)cexpr_t__get_z((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_z", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_z" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__set_z" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      cexpr_t__set_z(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_ptrsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_ptrsize" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (int)cexpr_t__get_ptrsize((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_ptrsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_ptrsize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_ptrsize" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cexpr_t__set_ptrsize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      cexpr_t__set_ptrsize(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_insn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_insn" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cinsn_t *)cexpr_t__get_insn((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_insn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_insn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_insn" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__set_insn" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    try
    {
      cexpr_t__set_insn(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_helper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_helper" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (char *)cexpr_t__get_helper((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_helper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_helper", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_helper" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__set_helper" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      cexpr_t__set_helper(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__get_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__get_string" "', argument " "1"" of type '" "cexpr_t const *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (char *)cexpr_t__get_string((cexpr_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cexpr_t__set_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cexpr_t__set_string", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cexpr_t__set_string" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cexpr_t__set_string" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      cexpr_t__set_string(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *cexpr_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cexpr_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cexpr_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ceinsn_t_expr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ceinsn_t *arg1 = (ceinsn_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ceinsn_t_expr_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ceinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ceinsn_t_expr_set" "', argument " "1"" of type '" "ceinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< ceinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ceinsn_t_expr_set" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  if (arg1) (arg1)->expr = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ceinsn_t_expr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ceinsn_t *arg1 = (ceinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ceinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ceinsn_t_expr_get" "', argument " "1"" of type '" "ceinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< ceinsn_t * >(argp1);
  result = (cexpr_t *)& ((arg1)->expr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ceinsn_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ceinsn_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ceinsn_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (ceinsn_t *)new ceinsn_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ceinsn_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ceinsn_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ceinsn_t *arg1 = (ceinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ceinsn_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ceinsn_t" "', argument " "1"" of type '" "ceinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< ceinsn_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ceinsn_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ceinsn_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ceinsn_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cif_t_ithen_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t_ithen_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t_ithen_set" "', argument " "1"" of type '" "cif_t *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t_ithen_set" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  if (arg1) (arg1)->ithen = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cif_t_ithen_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t_ithen_get" "', argument " "1"" of type '" "cif_t *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  result = (cinsn_t *) ((arg1)->ithen);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cif_t_ielse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t_ielse_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t_ielse_set" "', argument " "1"" of type '" "cif_t *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t_ielse_set" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  if (arg1) (arg1)->ielse = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cif_t_ielse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t_ielse_get" "', argument " "1"" of type '" "cif_t *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  result = (cinsn_t *) ((arg1)->ielse);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cif_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cif_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (cif_t *)new cif_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cif_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cif_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cif_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cif_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cif_t" "', argument " "1"" of type '" "cif_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cif_t" "', argument " "1"" of type '" "cif_t const &""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  {
    try
    {
      result = (cif_t *)new cif_t((cif_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cif_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cif_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_cif_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_cif_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cif_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_cif_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_cif_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cif_t::cif_t()\n"
    "    cif_t::cif_t(cif_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cif_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cif_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cif_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t_assign", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t_assign" "', argument " "1"" of type '" "cif_t *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t_assign" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cif_t_assign" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    try
    {
      result = (cif_t *) &(arg1)->assign((cif_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cif_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cif_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cif_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t___eq__" "', argument " "1"" of type '" "cif_t const *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t___eq__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cif_t___eq__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    try
    {
      result = (bool)((cif_t const *)arg1)->operator ==((cif_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cif_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cif_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t___ne__" "', argument " "1"" of type '" "cif_t const *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t___ne__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cif_t___ne__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    try
    {
      result = (bool)((cif_t const *)arg1)->operator !=((cif_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cif_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cif_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t___lt__" "', argument " "1"" of type '" "cif_t const *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t___lt__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cif_t___lt__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    try
    {
      result = (bool)((cif_t const *)arg1)->operator <((cif_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cif_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cif_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t___gt__" "', argument " "1"" of type '" "cif_t const *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t___gt__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cif_t___gt__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    try
    {
      result = (bool)((cif_t const *)arg1)->operator >((cif_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cif_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cif_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t___le__" "', argument " "1"" of type '" "cif_t const *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t___le__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cif_t___le__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    try
    {
      result = (bool)((cif_t const *)arg1)->operator <=((cif_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cif_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cif_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t___ge__" "', argument " "1"" of type '" "cif_t const *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t___ge__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cif_t___ge__" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    try
    {
      result = (bool)((cif_t const *)arg1)->operator >=((cif_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_28(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cif_t *arg1 = 0 ;
  cif_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cif_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cif_t const &""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    try
    {
      result = (int)compare((cif_t const &)*arg1,(cif_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cif_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  cif_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cif_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t_compare" "', argument " "1"" of type '" "cif_t const *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cif_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cif_t_compare" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cif_t_compare" "', argument " "2"" of type '" "cif_t const &""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    try
    {
      result = (int)((cif_t const *)arg1)->compare((cif_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cif_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cif_t" "', argument " "1"" of type '" "cif_t *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cif_t_cleanup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cif_t *arg1 = (cif_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cif_t_cleanup" "', argument " "1"" of type '" "cif_t *""'"); 
  }
  arg1 = reinterpret_cast< cif_t * >(argp1);
  {
    try
    {
      (arg1)->cleanup();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cif_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cif_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cif_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cloop_t_body_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cloop_t *arg1 = (cloop_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cloop_t_body_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cloop_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cloop_t_body_set" "', argument " "1"" of type '" "cloop_t *""'"); 
  }
  arg1 = reinterpret_cast< cloop_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cloop_t_body_set" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  if (arg1) (arg1)->body = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cloop_t_body_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cloop_t *arg1 = (cloop_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cloop_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cloop_t_body_get" "', argument " "1"" of type '" "cloop_t *""'"); 
  }
  arg1 = reinterpret_cast< cloop_t * >(argp1);
  result = (cinsn_t *) ((arg1)->body);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cloop_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cloop_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (cloop_t *)new cloop_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cloop_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cloop_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cloop_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cloop_t" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    try
    {
      result = (cloop_t *)new cloop_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cloop_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cloop_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cloop_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cloop_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cloop_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cloop_t" "', argument " "1"" of type '" "cloop_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cloop_t" "', argument " "1"" of type '" "cloop_t const &""'"); 
  }
  arg1 = reinterpret_cast< cloop_t * >(argp1);
  {
    try
    {
      result = (cloop_t *)new cloop_t((cloop_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cloop_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cloop_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_cloop_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_cloop_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cinsn_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_cloop_t__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cloop_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_cloop_t__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_cloop_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cloop_t::cloop_t()\n"
    "    cloop_t::cloop_t(cinsn_t *)\n"
    "    cloop_t::cloop_t(cloop_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cloop_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cloop_t *arg1 = (cloop_t *) 0 ;
  cloop_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cloop_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cloop_t_assign", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cloop_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cloop_t_assign" "', argument " "1"" of type '" "cloop_t *""'"); 
  }
  arg1 = reinterpret_cast< cloop_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cloop_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cloop_t_assign" "', argument " "2"" of type '" "cloop_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cloop_t_assign" "', argument " "2"" of type '" "cloop_t const &""'"); 
  }
  arg2 = reinterpret_cast< cloop_t * >(argp2);
  {
    try
    {
      result = (cloop_t *) &(arg1)->assign((cloop_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cloop_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cloop_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cloop_t *arg1 = (cloop_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cloop_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cloop_t" "', argument " "1"" of type '" "cloop_t *""'"); 
  }
  arg1 = reinterpret_cast< cloop_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cloop_t_cleanup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cloop_t *arg1 = (cloop_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cloop_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cloop_t_cleanup" "', argument " "1"" of type '" "cloop_t *""'"); 
  }
  arg1 = reinterpret_cast< cloop_t * >(argp1);
  {
    try
    {
      (arg1)->cleanup();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cloop_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cloop_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cloop_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cfor_t_init_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfor_t_init_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t_init_set" "', argument " "1"" of type '" "cfor_t *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfor_t_init_set" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  if (arg1) (arg1)->init = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfor_t_init_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t_init_get" "', argument " "1"" of type '" "cfor_t *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  result = (cexpr_t *)& ((arg1)->init);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfor_t_step_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfor_t_step_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t_step_set" "', argument " "1"" of type '" "cfor_t *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfor_t_step_set" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  if (arg1) (arg1)->step = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfor_t_step_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t_step_get" "', argument " "1"" of type '" "cfor_t *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  result = (cexpr_t *)& ((arg1)->step);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfor_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  cfor_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfor_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t___eq__" "', argument " "1"" of type '" "cfor_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cfor_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfor_t___eq__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfor_t___eq__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  arg2 = reinterpret_cast< cfor_t * >(argp2);
  {
    try
    {
      result = (bool)((cfor_t const *)arg1)->operator ==((cfor_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cfor_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  cfor_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfor_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t___ne__" "', argument " "1"" of type '" "cfor_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cfor_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfor_t___ne__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfor_t___ne__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  arg2 = reinterpret_cast< cfor_t * >(argp2);
  {
    try
    {
      result = (bool)((cfor_t const *)arg1)->operator !=((cfor_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cfor_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  cfor_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfor_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t___lt__" "', argument " "1"" of type '" "cfor_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cfor_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfor_t___lt__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfor_t___lt__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  arg2 = reinterpret_cast< cfor_t * >(argp2);
  {
    try
    {
      result = (bool)((cfor_t const *)arg1)->operator <((cfor_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cfor_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  cfor_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfor_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t___gt__" "', argument " "1"" of type '" "cfor_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cfor_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfor_t___gt__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfor_t___gt__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  arg2 = reinterpret_cast< cfor_t * >(argp2);
  {
    try
    {
      result = (bool)((cfor_t const *)arg1)->operator >((cfor_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cfor_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  cfor_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfor_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t___le__" "', argument " "1"" of type '" "cfor_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cfor_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfor_t___le__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfor_t___le__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  arg2 = reinterpret_cast< cfor_t * >(argp2);
  {
    try
    {
      result = (bool)((cfor_t const *)arg1)->operator <=((cfor_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cfor_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  cfor_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfor_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t___ge__" "', argument " "1"" of type '" "cfor_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cfor_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfor_t___ge__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfor_t___ge__" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  arg2 = reinterpret_cast< cfor_t * >(argp2);
  {
    try
    {
      result = (bool)((cfor_t const *)arg1)->operator >=((cfor_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_29(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = 0 ;
  cfor_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cfor_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cfor_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cfor_t const &""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cfor_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  arg2 = reinterpret_cast< cfor_t * >(argp2);
  {
    try
    {
      result = (int)compare((cfor_t const &)*arg1,(cfor_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfor_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  cfor_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfor_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfor_t_compare" "', argument " "1"" of type '" "cfor_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cfor_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfor_t_compare" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfor_t_compare" "', argument " "2"" of type '" "cfor_t const &""'"); 
  }
  arg2 = reinterpret_cast< cfor_t * >(argp2);
  {
    try
    {
      result = (int)((cfor_t const *)arg1)->compare((cfor_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cfor_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_cfor_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (cfor_t *)new cfor_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cfor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cfor_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfor_t *arg1 = (cfor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfor_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cfor_t" "', argument " "1"" of type '" "cfor_t *""'"); 
  }
  arg1 = reinterpret_cast< cfor_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cfor_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cfor_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cfor_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cwhile_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cwhile_t *arg1 = (cwhile_t *) 0 ;
  cwhile_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cwhile_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cwhile_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cwhile_t___eq__" "', argument " "1"" of type '" "cwhile_t const *""'"); 
  }
  arg1 = reinterpret_cast< cwhile_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cwhile_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cwhile_t___eq__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cwhile_t___eq__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  arg2 = reinterpret_cast< cwhile_t * >(argp2);
  {
    try
    {
      result = (bool)((cwhile_t const *)arg1)->operator ==((cwhile_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cwhile_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cwhile_t *arg1 = (cwhile_t *) 0 ;
  cwhile_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cwhile_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cwhile_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cwhile_t___ne__" "', argument " "1"" of type '" "cwhile_t const *""'"); 
  }
  arg1 = reinterpret_cast< cwhile_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cwhile_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cwhile_t___ne__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cwhile_t___ne__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  arg2 = reinterpret_cast< cwhile_t * >(argp2);
  {
    try
    {
      result = (bool)((cwhile_t const *)arg1)->operator !=((cwhile_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cwhile_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cwhile_t *arg1 = (cwhile_t *) 0 ;
  cwhile_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cwhile_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cwhile_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cwhile_t___lt__" "', argument " "1"" of type '" "cwhile_t const *""'"); 
  }
  arg1 = reinterpret_cast< cwhile_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cwhile_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cwhile_t___lt__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cwhile_t___lt__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  arg2 = reinterpret_cast< cwhile_t * >(argp2);
  {
    try
    {
      result = (bool)((cwhile_t const *)arg1)->operator <((cwhile_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cwhile_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cwhile_t *arg1 = (cwhile_t *) 0 ;
  cwhile_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cwhile_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cwhile_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cwhile_t___gt__" "', argument " "1"" of type '" "cwhile_t const *""'"); 
  }
  arg1 = reinterpret_cast< cwhile_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cwhile_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cwhile_t___gt__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cwhile_t___gt__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  arg2 = reinterpret_cast< cwhile_t * >(argp2);
  {
    try
    {
      result = (bool)((cwhile_t const *)arg1)->operator >((cwhile_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cwhile_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cwhile_t *arg1 = (cwhile_t *) 0 ;
  cwhile_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cwhile_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cwhile_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cwhile_t___le__" "', argument " "1"" of type '" "cwhile_t const *""'"); 
  }
  arg1 = reinterpret_cast< cwhile_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cwhile_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cwhile_t___le__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cwhile_t___le__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  arg2 = reinterpret_cast< cwhile_t * >(argp2);
  {
    try
    {
      result = (bool)((cwhile_t const *)arg1)->operator <=((cwhile_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cwhile_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cwhile_t *arg1 = (cwhile_t *) 0 ;
  cwhile_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cwhile_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cwhile_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cwhile_t___ge__" "', argument " "1"" of type '" "cwhile_t const *""'"); 
  }
  arg1 = reinterpret_cast< cwhile_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cwhile_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cwhile_t___ge__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cwhile_t___ge__" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  arg2 = reinterpret_cast< cwhile_t * >(argp2);
  {
    try
    {
      result = (bool)((cwhile_t const *)arg1)->operator >=((cwhile_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_30(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cwhile_t *arg1 = 0 ;
  cwhile_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cwhile_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cwhile_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cwhile_t const &""'"); 
  }
  arg1 = reinterpret_cast< cwhile_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cwhile_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  arg2 = reinterpret_cast< cwhile_t * >(argp2);
  {
    try
    {
      result = (int)compare((cwhile_t const &)*arg1,(cwhile_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cwhile_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cwhile_t *arg1 = (cwhile_t *) 0 ;
  cwhile_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cwhile_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cwhile_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cwhile_t_compare" "', argument " "1"" of type '" "cwhile_t const *""'"); 
  }
  arg1 = reinterpret_cast< cwhile_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cwhile_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cwhile_t_compare" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cwhile_t_compare" "', argument " "2"" of type '" "cwhile_t const &""'"); 
  }
  arg2 = reinterpret_cast< cwhile_t * >(argp2);
  {
    try
    {
      result = (int)((cwhile_t const *)arg1)->compare((cwhile_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cwhile_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cwhile_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_cwhile_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (cwhile_t *)new cwhile_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cwhile_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cwhile_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cwhile_t *arg1 = (cwhile_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cwhile_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cwhile_t" "', argument " "1"" of type '" "cwhile_t *""'"); 
  }
  arg1 = reinterpret_cast< cwhile_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cwhile_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cwhile_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cwhile_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cdo_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cdo_t *arg1 = (cdo_t *) 0 ;
  cdo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cdo_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cdo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdo_t___eq__" "', argument " "1"" of type '" "cdo_t const *""'"); 
  }
  arg1 = reinterpret_cast< cdo_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cdo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cdo_t___eq__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cdo_t___eq__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  arg2 = reinterpret_cast< cdo_t * >(argp2);
  {
    try
    {
      result = (bool)((cdo_t const *)arg1)->operator ==((cdo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cdo_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cdo_t *arg1 = (cdo_t *) 0 ;
  cdo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cdo_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cdo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdo_t___ne__" "', argument " "1"" of type '" "cdo_t const *""'"); 
  }
  arg1 = reinterpret_cast< cdo_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cdo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cdo_t___ne__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cdo_t___ne__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  arg2 = reinterpret_cast< cdo_t * >(argp2);
  {
    try
    {
      result = (bool)((cdo_t const *)arg1)->operator !=((cdo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cdo_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cdo_t *arg1 = (cdo_t *) 0 ;
  cdo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cdo_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cdo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdo_t___lt__" "', argument " "1"" of type '" "cdo_t const *""'"); 
  }
  arg1 = reinterpret_cast< cdo_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cdo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cdo_t___lt__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cdo_t___lt__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  arg2 = reinterpret_cast< cdo_t * >(argp2);
  {
    try
    {
      result = (bool)((cdo_t const *)arg1)->operator <((cdo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cdo_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cdo_t *arg1 = (cdo_t *) 0 ;
  cdo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cdo_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cdo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdo_t___gt__" "', argument " "1"" of type '" "cdo_t const *""'"); 
  }
  arg1 = reinterpret_cast< cdo_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cdo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cdo_t___gt__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cdo_t___gt__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  arg2 = reinterpret_cast< cdo_t * >(argp2);
  {
    try
    {
      result = (bool)((cdo_t const *)arg1)->operator >((cdo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cdo_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cdo_t *arg1 = (cdo_t *) 0 ;
  cdo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cdo_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cdo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdo_t___le__" "', argument " "1"" of type '" "cdo_t const *""'"); 
  }
  arg1 = reinterpret_cast< cdo_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cdo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cdo_t___le__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cdo_t___le__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  arg2 = reinterpret_cast< cdo_t * >(argp2);
  {
    try
    {
      result = (bool)((cdo_t const *)arg1)->operator <=((cdo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cdo_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cdo_t *arg1 = (cdo_t *) 0 ;
  cdo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cdo_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cdo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdo_t___ge__" "', argument " "1"" of type '" "cdo_t const *""'"); 
  }
  arg1 = reinterpret_cast< cdo_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cdo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cdo_t___ge__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cdo_t___ge__" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  arg2 = reinterpret_cast< cdo_t * >(argp2);
  {
    try
    {
      result = (bool)((cdo_t const *)arg1)->operator >=((cdo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_31(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cdo_t *arg1 = 0 ;
  cdo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cdo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cdo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cdo_t const &""'"); 
  }
  arg1 = reinterpret_cast< cdo_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cdo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  arg2 = reinterpret_cast< cdo_t * >(argp2);
  {
    try
    {
      result = (int)compare((cdo_t const &)*arg1,(cdo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cdo_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cdo_t *arg1 = (cdo_t *) 0 ;
  cdo_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cdo_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cdo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdo_t_compare" "', argument " "1"" of type '" "cdo_t const *""'"); 
  }
  arg1 = reinterpret_cast< cdo_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cdo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cdo_t_compare" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cdo_t_compare" "', argument " "2"" of type '" "cdo_t const &""'"); 
  }
  arg2 = reinterpret_cast< cdo_t * >(argp2);
  {
    try
    {
      result = (int)((cdo_t const *)arg1)->compare((cdo_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cdo_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cdo_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_cdo_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (cdo_t *)new cdo_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cdo_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cdo_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cdo_t *arg1 = (cdo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cdo_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cdo_t" "', argument " "1"" of type '" "cdo_t *""'"); 
  }
  arg1 = reinterpret_cast< cdo_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cdo_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cdo_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cdo_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_creturn_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  creturn_t *arg1 = (creturn_t *) 0 ;
  creturn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "creturn_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_creturn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "creturn_t___eq__" "', argument " "1"" of type '" "creturn_t const *""'"); 
  }
  arg1 = reinterpret_cast< creturn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_creturn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "creturn_t___eq__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "creturn_t___eq__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  arg2 = reinterpret_cast< creturn_t * >(argp2);
  {
    try
    {
      result = (bool)((creturn_t const *)arg1)->operator ==((creturn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_creturn_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  creturn_t *arg1 = (creturn_t *) 0 ;
  creturn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "creturn_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_creturn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "creturn_t___ne__" "', argument " "1"" of type '" "creturn_t const *""'"); 
  }
  arg1 = reinterpret_cast< creturn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_creturn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "creturn_t___ne__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "creturn_t___ne__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  arg2 = reinterpret_cast< creturn_t * >(argp2);
  {
    try
    {
      result = (bool)((creturn_t const *)arg1)->operator !=((creturn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_creturn_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  creturn_t *arg1 = (creturn_t *) 0 ;
  creturn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "creturn_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_creturn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "creturn_t___lt__" "', argument " "1"" of type '" "creturn_t const *""'"); 
  }
  arg1 = reinterpret_cast< creturn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_creturn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "creturn_t___lt__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "creturn_t___lt__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  arg2 = reinterpret_cast< creturn_t * >(argp2);
  {
    try
    {
      result = (bool)((creturn_t const *)arg1)->operator <((creturn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_creturn_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  creturn_t *arg1 = (creturn_t *) 0 ;
  creturn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "creturn_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_creturn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "creturn_t___gt__" "', argument " "1"" of type '" "creturn_t const *""'"); 
  }
  arg1 = reinterpret_cast< creturn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_creturn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "creturn_t___gt__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "creturn_t___gt__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  arg2 = reinterpret_cast< creturn_t * >(argp2);
  {
    try
    {
      result = (bool)((creturn_t const *)arg1)->operator >((creturn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_creturn_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  creturn_t *arg1 = (creturn_t *) 0 ;
  creturn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "creturn_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_creturn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "creturn_t___le__" "', argument " "1"" of type '" "creturn_t const *""'"); 
  }
  arg1 = reinterpret_cast< creturn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_creturn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "creturn_t___le__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "creturn_t___le__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  arg2 = reinterpret_cast< creturn_t * >(argp2);
  {
    try
    {
      result = (bool)((creturn_t const *)arg1)->operator <=((creturn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_creturn_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  creturn_t *arg1 = (creturn_t *) 0 ;
  creturn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "creturn_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_creturn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "creturn_t___ge__" "', argument " "1"" of type '" "creturn_t const *""'"); 
  }
  arg1 = reinterpret_cast< creturn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_creturn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "creturn_t___ge__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "creturn_t___ge__" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  arg2 = reinterpret_cast< creturn_t * >(argp2);
  {
    try
    {
      result = (bool)((creturn_t const *)arg1)->operator >=((creturn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_32(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  creturn_t *arg1 = 0 ;
  creturn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_creturn_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "creturn_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "creturn_t const &""'"); 
  }
  arg1 = reinterpret_cast< creturn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_creturn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  arg2 = reinterpret_cast< creturn_t * >(argp2);
  {
    try
    {
      result = (int)compare((creturn_t const &)*arg1,(creturn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_creturn_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  creturn_t *arg1 = (creturn_t *) 0 ;
  creturn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "creturn_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_creturn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "creturn_t_compare" "', argument " "1"" of type '" "creturn_t const *""'"); 
  }
  arg1 = reinterpret_cast< creturn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_creturn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "creturn_t_compare" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "creturn_t_compare" "', argument " "2"" of type '" "creturn_t const &""'"); 
  }
  arg2 = reinterpret_cast< creturn_t * >(argp2);
  {
    try
    {
      result = (int)((creturn_t const *)arg1)->compare((creturn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_creturn_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  creturn_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_creturn_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (creturn_t *)new creturn_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_creturn_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_creturn_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  creturn_t *arg1 = (creturn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_creturn_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_creturn_t" "', argument " "1"" of type '" "creturn_t *""'"); 
  }
  arg1 = reinterpret_cast< creturn_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *creturn_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_creturn_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *creturn_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cgoto_t_label_num_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cgoto_t_label_num_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cgoto_t_label_num_set" "', argument " "1"" of type '" "cgoto_t *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cgoto_t_label_num_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->label_num = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cgoto_t_label_num_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cgoto_t_label_num_get" "', argument " "1"" of type '" "cgoto_t *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  result = (int) ((arg1)->label_num);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cgoto_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  cgoto_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cgoto_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cgoto_t___eq__" "', argument " "1"" of type '" "cgoto_t const *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cgoto_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cgoto_t___eq__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cgoto_t___eq__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  arg2 = reinterpret_cast< cgoto_t * >(argp2);
  {
    try
    {
      result = (bool)((cgoto_t const *)arg1)->operator ==((cgoto_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cgoto_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  cgoto_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cgoto_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cgoto_t___ne__" "', argument " "1"" of type '" "cgoto_t const *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cgoto_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cgoto_t___ne__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cgoto_t___ne__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  arg2 = reinterpret_cast< cgoto_t * >(argp2);
  {
    try
    {
      result = (bool)((cgoto_t const *)arg1)->operator !=((cgoto_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cgoto_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  cgoto_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cgoto_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cgoto_t___lt__" "', argument " "1"" of type '" "cgoto_t const *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cgoto_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cgoto_t___lt__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cgoto_t___lt__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  arg2 = reinterpret_cast< cgoto_t * >(argp2);
  {
    try
    {
      result = (bool)((cgoto_t const *)arg1)->operator <((cgoto_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cgoto_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  cgoto_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cgoto_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cgoto_t___gt__" "', argument " "1"" of type '" "cgoto_t const *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cgoto_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cgoto_t___gt__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cgoto_t___gt__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  arg2 = reinterpret_cast< cgoto_t * >(argp2);
  {
    try
    {
      result = (bool)((cgoto_t const *)arg1)->operator >((cgoto_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cgoto_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  cgoto_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cgoto_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cgoto_t___le__" "', argument " "1"" of type '" "cgoto_t const *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cgoto_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cgoto_t___le__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cgoto_t___le__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  arg2 = reinterpret_cast< cgoto_t * >(argp2);
  {
    try
    {
      result = (bool)((cgoto_t const *)arg1)->operator <=((cgoto_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cgoto_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  cgoto_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cgoto_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cgoto_t___ge__" "', argument " "1"" of type '" "cgoto_t const *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cgoto_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cgoto_t___ge__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cgoto_t___ge__" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  arg2 = reinterpret_cast< cgoto_t * >(argp2);
  {
    try
    {
      result = (bool)((cgoto_t const *)arg1)->operator >=((cgoto_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_33(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = 0 ;
  cgoto_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cgoto_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cgoto_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cgoto_t const &""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cgoto_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  arg2 = reinterpret_cast< cgoto_t * >(argp2);
  {
    try
    {
      result = (int)compare((cgoto_t const &)*arg1,(cgoto_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cgoto_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  cgoto_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cgoto_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cgoto_t_compare" "', argument " "1"" of type '" "cgoto_t const *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cgoto_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cgoto_t_compare" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cgoto_t_compare" "', argument " "2"" of type '" "cgoto_t const &""'"); 
  }
  arg2 = reinterpret_cast< cgoto_t * >(argp2);
  {
    try
    {
      result = (int)((cgoto_t const *)arg1)->compare((cgoto_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cgoto_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_cgoto_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (cgoto_t *)new cgoto_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cgoto_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cgoto_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cgoto_t *arg1 = (cgoto_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cgoto_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cgoto_t" "', argument " "1"" of type '" "cgoto_t *""'"); 
  }
  arg1 = reinterpret_cast< cgoto_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cgoto_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cgoto_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cgoto_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_casm_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  casm_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_casm_t" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (casm_t *)new casm_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_casm_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_casm_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  casm_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casm_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_casm_t" "', argument " "1"" of type '" "casm_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_casm_t" "', argument " "1"" of type '" "casm_t const &""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  {
    try
    {
      result = (casm_t *)new casm_t((casm_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_casm_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_casm_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_casm_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_casm_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_casm_t__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_casm_t__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_casm_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    casm_t::casm_t(ea_t)\n"
    "    casm_t::casm_t(casm_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_casm_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  casm_t *arg1 = (casm_t *) 0 ;
  casm_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "casm_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_casm_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "casm_t___eq__" "', argument " "1"" of type '" "casm_t const *""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "casm_t___eq__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "casm_t___eq__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  arg2 = reinterpret_cast< casm_t * >(argp2);
  {
    try
    {
      result = (bool)((casm_t const *)arg1)->operator ==((casm_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_casm_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  casm_t *arg1 = (casm_t *) 0 ;
  casm_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "casm_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_casm_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "casm_t___ne__" "', argument " "1"" of type '" "casm_t const *""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "casm_t___ne__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "casm_t___ne__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  arg2 = reinterpret_cast< casm_t * >(argp2);
  {
    try
    {
      result = (bool)((casm_t const *)arg1)->operator !=((casm_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_casm_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  casm_t *arg1 = (casm_t *) 0 ;
  casm_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "casm_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_casm_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "casm_t___lt__" "', argument " "1"" of type '" "casm_t const *""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "casm_t___lt__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "casm_t___lt__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  arg2 = reinterpret_cast< casm_t * >(argp2);
  {
    try
    {
      result = (bool)((casm_t const *)arg1)->operator <((casm_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_casm_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  casm_t *arg1 = (casm_t *) 0 ;
  casm_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "casm_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_casm_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "casm_t___gt__" "', argument " "1"" of type '" "casm_t const *""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "casm_t___gt__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "casm_t___gt__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  arg2 = reinterpret_cast< casm_t * >(argp2);
  {
    try
    {
      result = (bool)((casm_t const *)arg1)->operator >((casm_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_casm_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  casm_t *arg1 = (casm_t *) 0 ;
  casm_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "casm_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_casm_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "casm_t___le__" "', argument " "1"" of type '" "casm_t const *""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "casm_t___le__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "casm_t___le__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  arg2 = reinterpret_cast< casm_t * >(argp2);
  {
    try
    {
      result = (bool)((casm_t const *)arg1)->operator <=((casm_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_casm_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  casm_t *arg1 = (casm_t *) 0 ;
  casm_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "casm_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_casm_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "casm_t___ge__" "', argument " "1"" of type '" "casm_t const *""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "casm_t___ge__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "casm_t___ge__" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  arg2 = reinterpret_cast< casm_t * >(argp2);
  {
    try
    {
      result = (bool)((casm_t const *)arg1)->operator >=((casm_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_34(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  casm_t *arg1 = 0 ;
  casm_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "casm_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "casm_t const &""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  arg2 = reinterpret_cast< casm_t * >(argp2);
  {
    try
    {
      result = (int)compare((casm_t const &)*arg1,(casm_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_casm_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  casm_t *arg1 = (casm_t *) 0 ;
  casm_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "casm_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_casm_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "casm_t_compare" "', argument " "1"" of type '" "casm_t const *""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_casm_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "casm_t_compare" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "casm_t_compare" "', argument " "2"" of type '" "casm_t const &""'"); 
  }
  arg2 = reinterpret_cast< casm_t * >(argp2);
  {
    try
    {
      result = (int)((casm_t const *)arg1)->compare((casm_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_casm_t_one_insn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  casm_t *arg1 = (casm_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_casm_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "casm_t_one_insn" "', argument " "1"" of type '" "casm_t const *""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  {
    try
    {
      result = (bool)((casm_t const *)arg1)->one_insn();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_casm_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  casm_t *arg1 = (casm_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_casm_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_casm_t" "', argument " "1"" of type '" "casm_t *""'"); 
  }
  arg1 = reinterpret_cast< casm_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *casm_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_casm_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *casm_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_cinsn_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  cinsn_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (cinsn_t *)new cinsn_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, SWIG_POINTER_NEW |  0 );
  {
    hexrays_register_python_clearable_instance(result, hxclr_cinsn);
    if ( result->op == cit_empty )
    result->cblock = NULL; // force clean instance
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cinsn_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cinsn_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cinsn_t" "', argument " "1"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cinsn_t" "', argument " "1"" of type '" "cinsn_t const &""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    try
    {
      result = (cinsn_t *)new cinsn_t((cinsn_t const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, SWIG_POINTER_NEW |  0 );
  {
    hexrays_register_python_clearable_instance(result, hxclr_cinsn);
    if ( result->op == cit_empty )
    result->cblock = NULL; // force clean instance
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cinsn_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_cinsn_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_cinsn_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cinsn_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_cinsn_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_cinsn_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cinsn_t::cinsn_t()\n"
    "    cinsn_t::cinsn_t(cinsn_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cinsn_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_swap" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t_swap" "', argument " "2"" of type '" "cinsn_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t_swap" "', argument " "2"" of type '" "cinsn_t &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_swap" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cinsn_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t_assign", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_assign" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t_assign" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t_assign" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_assign" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      result = (cinsn_t *) &(arg1)->assign((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t___eq__" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t___eq__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t___eq__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t___eq__" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->operator ==((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cinsn_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t___ne__" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t___ne__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t___ne__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t___ne__" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->operator !=((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cinsn_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t___lt__" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t___lt__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t___lt__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t___lt__" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->operator <((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cinsn_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t___gt__" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t___gt__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t___gt__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t___gt__" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->operator >((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cinsn_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t___le__" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t___le__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t___le__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t___le__" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->operator <=((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cinsn_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t___ge__" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t___ge__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t___ge__" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t___ge__" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->operator >=((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_35(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cinsn_t const &""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    try
    {
      result = (int)compare((cinsn_t const &)*arg1,(cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_compare" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cinsn_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t_compare" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t_compare" "', argument " "2"" of type '" "cinsn_t const &""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_compare" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (int)((cinsn_t const *)arg1)->compare((cinsn_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cinsn_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cinsn_t" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "delete_cinsn_t" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      {
        hexrays_deregister_python_clearable_instance(arg1);
        delete arg1;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__replace_by(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__replace_by", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__replace_by" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__replace_by" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__replace_by" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      (arg1)->replace_by(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_cleanup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_cleanup" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_cleanup" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      (arg1)->cleanup();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_zero" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_zero" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      (arg1)->zero();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_new_insn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  cinsn_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t_new_insn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_new_insn" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "cinsn_t_new_insn" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_new_insn" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      result = (cinsn_t *) &(arg1)->new_insn(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_create_if(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  cif_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t_create_if", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_create_if" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t_create_if" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_create_if" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      result = (cif_t *) &(arg1)->create_if(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cif_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  int arg2 ;
  vc_printer_t *arg3 = 0 ;
  use_curly_t arg4 = (use_curly_t) CALC_CURLY_BRACES ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__print", 3, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__print" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cinsn_t__print" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_vc_printer_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cinsn_t__print" "', argument " "3"" of type '" "vc_printer_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cinsn_t__print" "', argument " "3"" of type '" "vc_printer_t &""'"); 
  }
  arg3 = reinterpret_cast< vc_printer_t * >(argp3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cinsn_t__print" "', argument " "4"" of type '" "use_curly_t""'");
    } 
    arg4 = static_cast< use_curly_t >(val4);
  }
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__print" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      ((cinsn_t const *)arg1)->print(arg2,*arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_print1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  cfunc_t *arg3 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qstring temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[2] ;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp2)
    arg2 = &temp2;
  }
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t_print1", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_print1" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cinsn_t_print1" "', argument " "3"" of type '" "cfunc_t const *""'"); 
  }
  arg3 = reinterpret_cast< cfunc_t * >(argp3);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_print1" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      ((cinsn_t const *)arg1)->print1(arg2,(cfunc_t const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container typemap(argout) (qstring *vout)
    Py_XDECREF(resultobj);
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg2->c_str(), arg2->length());
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_is_ordinary_flow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_is_ordinary_flow" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_is_ordinary_flow" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->is_ordinary_flow();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_contains_insn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  ctype_t arg2 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t_contains_insn", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_contains_insn" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cinsn_t_contains_insn" "', argument " "2"" of type '" "ctype_t""'");
  } 
  arg2 = static_cast< ctype_t >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cinsn_t_contains_insn" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_contains_insn" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->contains_insn(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_collect_free_breaks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsnptrvec_t *arg2 = (cinsnptrvec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t_collect_free_breaks", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_collect_free_breaks" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t_collect_free_breaks" "', argument " "2"" of type '" "cinsnptrvec_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsnptrvec_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_collect_free_breaks" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      result = (bool)(arg1)->collect_free_breaks(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_collect_free_continues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cinsnptrvec_t *arg2 = (cinsnptrvec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t_collect_free_continues", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_collect_free_continues" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t_collect_free_continues" "', argument " "2"" of type '" "cinsnptrvec_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsnptrvec_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_collect_free_continues" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      result = (bool)(arg1)->collect_free_continues(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_contains_free_break(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_contains_free_break" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_contains_free_break" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->contains_free_break();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_contains_free_continue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_contains_free_continue" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t_contains_free_continue" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (bool)((cinsn_t const *)arg1)->contains_free_continue();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__deregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__deregister" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__deregister" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__deregister(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__register(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__register" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__register" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__register(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_cblock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cblock_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_cblock" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_cblock" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (cblock_t *)cinsn_t__get_cblock((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cblock_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_cblock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cblock_t *arg2 = (cblock_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_cblock", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_cblock" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cblock_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_cblock" "', argument " "2"" of type '" "cblock_t *""'"); 
  }
  arg2 = reinterpret_cast< cblock_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_cblock" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_cblock(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_cexpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_cexpr" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_cexpr" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (cexpr_t *)cinsn_t__get_cexpr((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_cexpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_cexpr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_cexpr" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_cexpr" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_cexpr" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_cexpr(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_cif(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cif_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_cif" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_cif" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (cif_t *)cinsn_t__get_cif((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cif_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_cif(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cif_t *arg2 = (cif_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_cif", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_cif" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cif_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_cif" "', argument " "2"" of type '" "cif_t *""'"); 
  }
  arg2 = reinterpret_cast< cif_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_cif" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_cif(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_cfor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cfor_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_cfor" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_cfor" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (cfor_t *)cinsn_t__get_cfor((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cfor_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_cfor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cfor_t *arg2 = (cfor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_cfor", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_cfor" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_cfor" "', argument " "2"" of type '" "cfor_t *""'"); 
  }
  arg2 = reinterpret_cast< cfor_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_cfor" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_cfor(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_cwhile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cwhile_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_cwhile" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_cwhile" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (cwhile_t *)cinsn_t__get_cwhile((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cwhile_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_cwhile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cwhile_t *arg2 = (cwhile_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_cwhile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_cwhile" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cwhile_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_cwhile" "', argument " "2"" of type '" "cwhile_t *""'"); 
  }
  arg2 = reinterpret_cast< cwhile_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_cwhile" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_cwhile(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_cdo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cdo_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_cdo" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_cdo" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (cdo_t *)cinsn_t__get_cdo((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cdo_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_cdo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cdo_t *arg2 = (cdo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_cdo", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_cdo" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cdo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_cdo" "', argument " "2"" of type '" "cdo_t *""'"); 
  }
  arg2 = reinterpret_cast< cdo_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_cdo" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_cdo(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_cswitch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cswitch_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_cswitch" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_cswitch" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (cswitch_t *)cinsn_t__get_cswitch((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cswitch_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_cswitch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cswitch_t *arg2 = (cswitch_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_cswitch", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_cswitch" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_cswitch" "', argument " "2"" of type '" "cswitch_t *""'"); 
  }
  arg2 = reinterpret_cast< cswitch_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_cswitch" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_cswitch(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_creturn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  creturn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_creturn" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_creturn" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (creturn_t *)cinsn_t__get_creturn((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_creturn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_creturn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  creturn_t *arg2 = (creturn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_creturn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_creturn" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_creturn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_creturn" "', argument " "2"" of type '" "creturn_t *""'"); 
  }
  arg2 = reinterpret_cast< creturn_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_creturn" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_creturn(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_cgoto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cgoto_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_cgoto" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_cgoto" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (cgoto_t *)cinsn_t__get_cgoto((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cgoto_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_cgoto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  cgoto_t *arg2 = (cgoto_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_cgoto", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_cgoto" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cgoto_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_cgoto" "', argument " "2"" of type '" "cgoto_t *""'"); 
  }
  arg2 = reinterpret_cast< cgoto_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_cgoto" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_cgoto(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__get_casm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  casm_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__get_casm" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__get_casm" "', argument " "1"" of type '" "cinsn_t const *""'");
  }
  {
    try
    {
      result = (casm_t *)cinsn_t__get_casm((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_casm_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t__set_casm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  casm_t *arg2 = (casm_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cinsn_t__set_casm", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t__set_casm" "', argument " "1"" of type '" "cinsn_t *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_casm_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cinsn_t__set_casm" "', argument " "2"" of type '" "casm_t *""'"); 
  }
  arg2 = reinterpret_cast< casm_t * >(argp2);
  {
    if ( arg1 == INS_EPILOG )
    SWIG_exception_fail(SWIG_ValueError, "invalid INS_EPILOG " "in method '" "cinsn_t__set_casm" "', argument " "1"" of type '" "cinsn_t *""'");
  }
  {
    try
    {
      cinsn_t__set_casm(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cinsn_t_insn_is_epilog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *arg1 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cinsn_t_insn_is_epilog" "', argument " "1"" of type '" "cinsn_t const *""'"); 
  }
  arg1 = reinterpret_cast< cinsn_t * >(argp1);
  {
    try
    {
      result = (bool)cinsn_t_insn_is_epilog((cinsn_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cinsn_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cinsn_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cinsn_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cblock_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = (cblock_t *) 0 ;
  cblock_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cblock_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cblock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cblock_t___eq__" "', argument " "1"" of type '" "cblock_t const *""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cblock_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cblock_t___eq__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cblock_t___eq__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  arg2 = reinterpret_cast< cblock_t * >(argp2);
  {
    try
    {
      result = (bool)((cblock_t const *)arg1)->operator ==((cblock_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cblock_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = (cblock_t *) 0 ;
  cblock_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cblock_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cblock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cblock_t___ne__" "', argument " "1"" of type '" "cblock_t const *""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cblock_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cblock_t___ne__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cblock_t___ne__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  arg2 = reinterpret_cast< cblock_t * >(argp2);
  {
    try
    {
      result = (bool)((cblock_t const *)arg1)->operator !=((cblock_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cblock_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = (cblock_t *) 0 ;
  cblock_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cblock_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cblock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cblock_t___lt__" "', argument " "1"" of type '" "cblock_t const *""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cblock_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cblock_t___lt__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cblock_t___lt__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  arg2 = reinterpret_cast< cblock_t * >(argp2);
  {
    try
    {
      result = (bool)((cblock_t const *)arg1)->operator <((cblock_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cblock_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = (cblock_t *) 0 ;
  cblock_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cblock_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cblock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cblock_t___gt__" "', argument " "1"" of type '" "cblock_t const *""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cblock_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cblock_t___gt__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cblock_t___gt__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  arg2 = reinterpret_cast< cblock_t * >(argp2);
  {
    try
    {
      result = (bool)((cblock_t const *)arg1)->operator >((cblock_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cblock_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = (cblock_t *) 0 ;
  cblock_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cblock_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cblock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cblock_t___le__" "', argument " "1"" of type '" "cblock_t const *""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cblock_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cblock_t___le__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cblock_t___le__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  arg2 = reinterpret_cast< cblock_t * >(argp2);
  {
    try
    {
      result = (bool)((cblock_t const *)arg1)->operator <=((cblock_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cblock_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = (cblock_t *) 0 ;
  cblock_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cblock_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cblock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cblock_t___ge__" "', argument " "1"" of type '" "cblock_t const *""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cblock_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cblock_t___ge__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cblock_t___ge__" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  arg2 = reinterpret_cast< cblock_t * >(argp2);
  {
    try
    {
      result = (bool)((cblock_t const *)arg1)->operator >=((cblock_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_36(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = 0 ;
  cblock_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cblock_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cblock_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cblock_t const &""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cblock_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  arg2 = reinterpret_cast< cblock_t * >(argp2);
  {
    try
    {
      result = (int)compare((cblock_t const &)*arg1,(cblock_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cblock_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = (cblock_t *) 0 ;
  cblock_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cblock_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cblock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cblock_t_compare" "', argument " "1"" of type '" "cblock_t const *""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cblock_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cblock_t_compare" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cblock_t_compare" "', argument " "2"" of type '" "cblock_t const &""'"); 
  }
  arg2 = reinterpret_cast< cblock_t * >(argp2);
  {
    try
    {
      result = (int)((cblock_t const *)arg1)->compare((cblock_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cblock_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_cblock_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (cblock_t *)new_cblock_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cblock_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cblock_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = (cblock_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cblock_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cblock_t" "', argument " "1"" of type '" "cblock_t *""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  {
    try
    {
      delete_cblock_t(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cblock_t__deregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cblock_t *arg1 = (cblock_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cblock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cblock_t__deregister" "', argument " "1"" of type '" "cblock_t *""'"); 
  }
  arg1 = reinterpret_cast< cblock_t * >(argp1);
  {
    try
    {
      cblock_t__deregister(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cblock_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cblock_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cblock_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_carg_t_is_vararg_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t_is_vararg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t_is_vararg_set" "', argument " "1"" of type '" "carg_t *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "carg_t_is_vararg_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->is_vararg = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carg_t_is_vararg_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t_is_vararg_get" "', argument " "1"" of type '" "carg_t *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  result = (bool) ((arg1)->is_vararg);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carg_t_formal_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t_formal_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t_formal_type_set" "', argument " "1"" of type '" "carg_t *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carg_t_formal_type_set" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carg_t_formal_type_set" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  if (arg1) (arg1)->formal_type = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carg_t_formal_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tinfo_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t_formal_type_get" "', argument " "1"" of type '" "carg_t *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  result = (tinfo_t *)& ((arg1)->formal_type);
  {
    
  }
  {
    // ret tinfo_t*
    tinfo_t *ni = new tinfo_t(*(result));
    til_register_python_tinfo_t_instance(ni);
    if ( strcmp("new_tinfo_t", "carg_t_formal_type_get") == 0 )
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_NEW | 0);
      delete result;
    }
    else
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carg_t_consume_cexpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t_consume_cexpr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t_consume_cexpr" "', argument " "1"" of type '" "carg_t *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carg_t_consume_cexpr" "', argument " "2"" of type '" "cexpr_t *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      (arg1)->consume_cexpr(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_carg_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_carg_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (carg_t *)new carg_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carg_t, SWIG_POINTER_NEW |  0 );
  {
    hexrays_register_python_clearable_instance(result, hxclr_cexpr);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carg_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t___eq__" "', argument " "1"" of type '" "carg_t const *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carg_t___eq__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carg_t___eq__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (bool)((carg_t const *)arg1)->operator ==((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carg_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t___ne__" "', argument " "1"" of type '" "carg_t const *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carg_t___ne__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carg_t___ne__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (bool)((carg_t const *)arg1)->operator !=((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carg_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t___lt__" "', argument " "1"" of type '" "carg_t const *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carg_t___lt__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carg_t___lt__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (bool)((carg_t const *)arg1)->operator <((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carg_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t___gt__" "', argument " "1"" of type '" "carg_t const *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carg_t___gt__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carg_t___gt__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (bool)((carg_t const *)arg1)->operator >((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carg_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t___le__" "', argument " "1"" of type '" "carg_t const *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carg_t___le__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carg_t___le__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (bool)((carg_t const *)arg1)->operator <=((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carg_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t___ge__" "', argument " "1"" of type '" "carg_t const *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carg_t___ge__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carg_t___ge__" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (bool)((carg_t const *)arg1)->operator >=((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_37(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  carg_t *arg1 = 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "carg_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "carg_t const &""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (int)compare((carg_t const &)*arg1,(carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carg_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  carg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "carg_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carg_t_compare" "', argument " "1"" of type '" "carg_t const *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carg_t_compare" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carg_t_compare" "', argument " "2"" of type '" "carg_t const &""'"); 
  }
  arg2 = reinterpret_cast< carg_t * >(argp2);
  {
    try
    {
      result = (int)((carg_t const *)arg1)->compare((carg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_carg_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carg_t *arg1 = (carg_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carg_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_carg_t" "', argument " "1"" of type '" "carg_t *""'"); 
  }
  arg1 = reinterpret_cast< carg_t * >(argp1);
  {
    try
    {
      {
        hexrays_deregister_python_clearable_instance(arg1);
        delete arg1;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *carg_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_carg_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *carg_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_carglist_t_functype_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "carglist_t_functype_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t_functype_set" "', argument " "1"" of type '" "carglist_t *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carglist_t_functype_set" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carglist_t_functype_set" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  if (arg1) (arg1)->functype = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carglist_t_functype_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tinfo_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t_functype_get" "', argument " "1"" of type '" "carglist_t *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  result = (tinfo_t *)& ((arg1)->functype);
  {
    
  }
  {
    // ret tinfo_t*
    tinfo_t *ni = new tinfo_t(*(result));
    til_register_python_tinfo_t_instance(ni);
    if ( strcmp("new_tinfo_t", "carglist_t_functype_get") == 0 )
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_NEW | 0);
      delete result;
    }
    else
    {
      resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(ni), SWIGTYPE_p_tinfo_t, SWIG_POINTER_OWN | 0);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carglist_t_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "carglist_t_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t_flags_set" "', argument " "1"" of type '" "carglist_t *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "carglist_t_flags_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->flags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carglist_t_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t_flags_get" "', argument " "1"" of type '" "carglist_t *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  result = (int) ((arg1)->flags);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_carglist_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  carglist_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (carglist_t *)new carglist_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carglist_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_carglist_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tinfo_t *arg1 = 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  carglist_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_carglist_t" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_carglist_t" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  arg1 = reinterpret_cast< tinfo_t * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_carglist_t" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try
    {
      result = (carglist_t *)new carglist_t((tinfo_t const &)*arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_carglist_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_carglist_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_carglist_t", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_carglist_t__SWIG_0(self, argc, argv);
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tinfo_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_carglist_t__SWIG_1(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_carglist_t__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_carglist_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    carglist_t::carglist_t()\n"
    "    carglist_t::carglist_t(tinfo_t const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_carglist_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  carglist_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carglist_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t___eq__" "', argument " "1"" of type '" "carglist_t const *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carglist_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carglist_t___eq__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carglist_t___eq__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    try
    {
      result = (bool)((carglist_t const *)arg1)->operator ==((carglist_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carglist_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  carglist_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carglist_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t___ne__" "', argument " "1"" of type '" "carglist_t const *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carglist_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carglist_t___ne__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carglist_t___ne__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    try
    {
      result = (bool)((carglist_t const *)arg1)->operator !=((carglist_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carglist_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  carglist_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carglist_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t___lt__" "', argument " "1"" of type '" "carglist_t const *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carglist_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carglist_t___lt__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carglist_t___lt__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    try
    {
      result = (bool)((carglist_t const *)arg1)->operator <((carglist_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carglist_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  carglist_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carglist_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t___gt__" "', argument " "1"" of type '" "carglist_t const *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carglist_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carglist_t___gt__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carglist_t___gt__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    try
    {
      result = (bool)((carglist_t const *)arg1)->operator >((carglist_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carglist_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  carglist_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carglist_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t___le__" "', argument " "1"" of type '" "carglist_t const *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carglist_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carglist_t___le__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carglist_t___le__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    try
    {
      result = (bool)((carglist_t const *)arg1)->operator <=((carglist_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_carglist_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  carglist_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "carglist_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t___ge__" "', argument " "1"" of type '" "carglist_t const *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carglist_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carglist_t___ge__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carglist_t___ge__" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    try
    {
      result = (bool)((carglist_t const *)arg1)->operator >=((carglist_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_38(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = 0 ;
  carglist_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_carglist_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "carglist_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "carglist_t const &""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carglist_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    try
    {
      result = (int)compare((carglist_t const &)*arg1,(carglist_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_carglist_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  carglist_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "carglist_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "carglist_t_compare" "', argument " "1"" of type '" "carglist_t const *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_carglist_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "carglist_t_compare" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "carglist_t_compare" "', argument " "2"" of type '" "carglist_t const &""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    try
    {
      result = (int)((carglist_t const *)arg1)->compare((carglist_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_carglist_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  carglist_t *arg1 = (carglist_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_carglist_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_carglist_t" "', argument " "1"" of type '" "carglist_t *""'"); 
  }
  arg1 = reinterpret_cast< carglist_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *carglist_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_carglist_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *carglist_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ccase_t_values_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  uint64vec_t *arg2 = (uint64vec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ccase_t_values_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t_values_set" "', argument " "1"" of type '" "ccase_t *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_unsigned_long_long_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccase_t_values_set" "', argument " "2"" of type '" "uint64vec_t *""'"); 
  }
  arg2 = reinterpret_cast< uint64vec_t * >(argp2);
  if (arg1) (arg1)->values = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ccase_t_values_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64vec_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t_values_get" "', argument " "1"" of type '" "ccase_t *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  result = (uint64vec_t *)& ((arg1)->values);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_unsigned_long_long_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ccase_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccase_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t___eq__" "', argument " "1"" of type '" "ccase_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccase_t___eq__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccase_t___eq__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (bool)((ccase_t const *)arg1)->operator ==((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccase_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccase_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t___ne__" "', argument " "1"" of type '" "ccase_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccase_t___ne__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccase_t___ne__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (bool)((ccase_t const *)arg1)->operator !=((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccase_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccase_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t___lt__" "', argument " "1"" of type '" "ccase_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccase_t___lt__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccase_t___lt__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (bool)((ccase_t const *)arg1)->operator <((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccase_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccase_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t___gt__" "', argument " "1"" of type '" "ccase_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccase_t___gt__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccase_t___gt__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (bool)((ccase_t const *)arg1)->operator >((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccase_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccase_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t___le__" "', argument " "1"" of type '" "ccase_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccase_t___le__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccase_t___le__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (bool)((ccase_t const *)arg1)->operator <=((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccase_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccase_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t___ge__" "', argument " "1"" of type '" "ccase_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccase_t___ge__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccase_t___ge__" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (bool)((ccase_t const *)arg1)->operator >=((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_39(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "ccase_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "ccase_t const &""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (int)compare((ccase_t const &)*arg1,(ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ccase_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  ccase_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccase_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t_compare" "', argument " "1"" of type '" "ccase_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccase_t_compare" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccase_t_compare" "', argument " "2"" of type '" "ccase_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccase_t * >(argp2);
  {
    try
    {
      result = (int)((ccase_t const *)arg1)->compare((ccase_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ccase_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t_size" "', argument " "1"" of type '" "ccase_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  {
    try
    {
      result = ((ccase_t const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ccase_t_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  uint64 *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ccase_t_value", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccase_t_value" "', argument " "1"" of type '" "ccase_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ccase_t_value" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (uint64 *) &((ccase_t const *)arg1)->value(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ccase_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ccase_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (ccase_t *)new ccase_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccase_t, SWIG_POINTER_NEW |  0 );
  {
    hexrays_register_python_clearable_instance(result, hxclr_cinsn);
    if ( result->op == cit_empty )
    result->cblock = NULL; // force clean instance
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ccase_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccase_t *arg1 = (ccase_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccase_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ccase_t" "', argument " "1"" of type '" "ccase_t *""'"); 
  }
  arg1 = reinterpret_cast< ccase_t * >(argp1);
  {
    try
    {
      {
        hexrays_deregister_python_clearable_instance(arg1);
        delete arg1;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ccase_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ccase_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ccase_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ccases_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccases_t *arg1 = (ccases_t *) 0 ;
  ccases_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccases_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccases_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccases_t___eq__" "', argument " "1"" of type '" "ccases_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccases_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccases_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccases_t___eq__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccases_t___eq__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccases_t * >(argp2);
  {
    try
    {
      result = (bool)((ccases_t const *)arg1)->operator ==((ccases_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccases_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccases_t *arg1 = (ccases_t *) 0 ;
  ccases_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccases_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccases_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccases_t___ne__" "', argument " "1"" of type '" "ccases_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccases_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccases_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccases_t___ne__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccases_t___ne__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccases_t * >(argp2);
  {
    try
    {
      result = (bool)((ccases_t const *)arg1)->operator !=((ccases_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccases_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccases_t *arg1 = (ccases_t *) 0 ;
  ccases_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccases_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccases_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccases_t___lt__" "', argument " "1"" of type '" "ccases_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccases_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccases_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccases_t___lt__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccases_t___lt__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccases_t * >(argp2);
  {
    try
    {
      result = (bool)((ccases_t const *)arg1)->operator <((ccases_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccases_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccases_t *arg1 = (ccases_t *) 0 ;
  ccases_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccases_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccases_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccases_t___gt__" "', argument " "1"" of type '" "ccases_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccases_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccases_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccases_t___gt__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccases_t___gt__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccases_t * >(argp2);
  {
    try
    {
      result = (bool)((ccases_t const *)arg1)->operator >((ccases_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccases_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccases_t *arg1 = (ccases_t *) 0 ;
  ccases_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccases_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccases_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccases_t___le__" "', argument " "1"" of type '" "ccases_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccases_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccases_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccases_t___le__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccases_t___le__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccases_t * >(argp2);
  {
    try
    {
      result = (bool)((ccases_t const *)arg1)->operator <=((ccases_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ccases_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccases_t *arg1 = (ccases_t *) 0 ;
  ccases_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccases_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccases_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccases_t___ge__" "', argument " "1"" of type '" "ccases_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccases_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccases_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccases_t___ge__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccases_t___ge__" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccases_t * >(argp2);
  {
    try
    {
      result = (bool)((ccases_t const *)arg1)->operator >=((ccases_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_40(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ccases_t *arg1 = 0 ;
  ccases_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ccases_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "ccases_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "ccases_t const &""'"); 
  }
  arg1 = reinterpret_cast< ccases_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccases_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccases_t * >(argp2);
  {
    try
    {
      result = (int)compare((ccases_t const &)*arg1,(ccases_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ccases_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccases_t *arg1 = (ccases_t *) 0 ;
  ccases_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ccases_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccases_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ccases_t_compare" "', argument " "1"" of type '" "ccases_t const *""'"); 
  }
  arg1 = reinterpret_cast< ccases_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ccases_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ccases_t_compare" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ccases_t_compare" "', argument " "2"" of type '" "ccases_t const &""'"); 
  }
  arg2 = reinterpret_cast< ccases_t * >(argp2);
  {
    try
    {
      result = (int)((ccases_t const *)arg1)->compare((ccases_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ccases_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccases_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ccases_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (ccases_t *)new ccases_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccases_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ccases_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ccases_t *arg1 = (ccases_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ccases_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ccases_t" "', argument " "1"" of type '" "ccases_t *""'"); 
  }
  arg1 = reinterpret_cast< ccases_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ccases_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ccases_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ccases_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cswitch_t_mvnf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  cnumber_t *arg2 = (cnumber_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cswitch_t_mvnf_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t_mvnf_set" "', argument " "1"" of type '" "cswitch_t *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cnumber_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cswitch_t_mvnf_set" "', argument " "2"" of type '" "cnumber_t *""'"); 
  }
  arg2 = reinterpret_cast< cnumber_t * >(argp2);
  if (arg1) (arg1)->mvnf = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cswitch_t_mvnf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cnumber_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t_mvnf_get" "', argument " "1"" of type '" "cswitch_t *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  result = (cnumber_t *)& ((arg1)->mvnf);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cnumber_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cswitch_t_cases_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  ccases_t *arg2 = (ccases_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cswitch_t_cases_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t_cases_set" "', argument " "1"" of type '" "cswitch_t *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ccases_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cswitch_t_cases_set" "', argument " "2"" of type '" "ccases_t *""'"); 
  }
  arg2 = reinterpret_cast< ccases_t * >(argp2);
  if (arg1) (arg1)->cases = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cswitch_t_cases_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ccases_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t_cases_get" "', argument " "1"" of type '" "cswitch_t *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  result = (ccases_t *)& ((arg1)->cases);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccases_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cswitch_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  cswitch_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cswitch_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t___eq__" "', argument " "1"" of type '" "cswitch_t const *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cswitch_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cswitch_t___eq__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cswitch_t___eq__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  arg2 = reinterpret_cast< cswitch_t * >(argp2);
  {
    try
    {
      result = (bool)((cswitch_t const *)arg1)->operator ==((cswitch_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cswitch_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  cswitch_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cswitch_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t___ne__" "', argument " "1"" of type '" "cswitch_t const *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cswitch_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cswitch_t___ne__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cswitch_t___ne__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  arg2 = reinterpret_cast< cswitch_t * >(argp2);
  {
    try
    {
      result = (bool)((cswitch_t const *)arg1)->operator !=((cswitch_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cswitch_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  cswitch_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cswitch_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t___lt__" "', argument " "1"" of type '" "cswitch_t const *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cswitch_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cswitch_t___lt__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cswitch_t___lt__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  arg2 = reinterpret_cast< cswitch_t * >(argp2);
  {
    try
    {
      result = (bool)((cswitch_t const *)arg1)->operator <((cswitch_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cswitch_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  cswitch_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cswitch_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t___gt__" "', argument " "1"" of type '" "cswitch_t const *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cswitch_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cswitch_t___gt__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cswitch_t___gt__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  arg2 = reinterpret_cast< cswitch_t * >(argp2);
  {
    try
    {
      result = (bool)((cswitch_t const *)arg1)->operator >((cswitch_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cswitch_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  cswitch_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cswitch_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t___le__" "', argument " "1"" of type '" "cswitch_t const *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cswitch_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cswitch_t___le__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cswitch_t___le__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  arg2 = reinterpret_cast< cswitch_t * >(argp2);
  {
    try
    {
      result = (bool)((cswitch_t const *)arg1)->operator <=((cswitch_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cswitch_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  cswitch_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cswitch_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t___ge__" "', argument " "1"" of type '" "cswitch_t const *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cswitch_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cswitch_t___ge__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cswitch_t___ge__" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  arg2 = reinterpret_cast< cswitch_t * >(argp2);
  {
    try
    {
      result = (bool)((cswitch_t const *)arg1)->operator >=((cswitch_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_41(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = 0 ;
  cswitch_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cswitch_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "cswitch_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "cswitch_t const &""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cswitch_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  arg2 = reinterpret_cast< cswitch_t * >(argp2);
  {
    try
    {
      result = (int)compare((cswitch_t const &)*arg1,(cswitch_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cswitch_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  cswitch_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "cswitch_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cswitch_t_compare" "', argument " "1"" of type '" "cswitch_t const *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cswitch_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cswitch_t_compare" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cswitch_t_compare" "', argument " "2"" of type '" "cswitch_t const &""'"); 
  }
  arg2 = reinterpret_cast< cswitch_t * >(argp2);
  {
    try
    {
      result = (int)((cswitch_t const *)arg1)->compare((cswitch_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cswitch_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_cswitch_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (cswitch_t *)new cswitch_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cswitch_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cswitch_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cswitch_t *arg1 = (cswitch_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cswitch_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cswitch_t" "', argument " "1"" of type '" "cswitch_t *""'"); 
  }
  arg1 = reinterpret_cast< cswitch_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cswitch_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cswitch_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *cswitch_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ctree_anchor_t_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  uval_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_anchor_t_value_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_anchor_t_value_set" "', argument " "1"" of type '" "ctree_anchor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctree_anchor_t_value_set" "', argument " "2"" of type '" "uval_t""'");
  } 
  arg2 = static_cast< uval_t >(val2);
  if (arg1) (arg1)->value = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_anchor_t_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uval_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_anchor_t_value_get" "', argument " "1"" of type '" "ctree_anchor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  result = (uval_t) ((arg1)->value);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ctree_anchor_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ctree_anchor_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (ctree_anchor_t *)new ctree_anchor_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ctree_anchor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_anchor_t_get_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_anchor_t_get_index" "', argument " "1"" of type '" "ctree_anchor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  {
    try
    {
      result = (int)((ctree_anchor_t const *)arg1)->get_index();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_anchor_t_get_itp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  item_preciser_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_anchor_t_get_itp" "', argument " "1"" of type '" "ctree_anchor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  {
    try
    {
      result = (item_preciser_t)((ctree_anchor_t const *)arg1)->get_itp();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_anchor_t_is_valid_anchor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_anchor_t_is_valid_anchor" "', argument " "1"" of type '" "ctree_anchor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_anchor_t const *)arg1)->is_valid_anchor();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_anchor_t_is_citem_anchor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_anchor_t_is_citem_anchor" "', argument " "1"" of type '" "ctree_anchor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_anchor_t const *)arg1)->is_citem_anchor();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_anchor_t_is_lvar_anchor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_anchor_t_is_lvar_anchor" "', argument " "1"" of type '" "ctree_anchor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_anchor_t const *)arg1)->is_lvar_anchor();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_anchor_t_is_itp_anchor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_anchor_t_is_itp_anchor" "', argument " "1"" of type '" "ctree_anchor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_anchor_t const *)arg1)->is_itp_anchor();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_anchor_t_is_blkcmt_anchor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_anchor_t_is_blkcmt_anchor" "', argument " "1"" of type '" "ctree_anchor_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_anchor_t const *)arg1)->is_blkcmt_anchor();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ctree_anchor_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_anchor_t *arg1 = (ctree_anchor_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_anchor_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ctree_anchor_t" "', argument " "1"" of type '" "ctree_anchor_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_anchor_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ctree_anchor_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ctree_anchor_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ctree_anchor_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ctree_item_t_citype_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  cursor_item_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_item_t_citype_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t_citype_set" "', argument " "1"" of type '" "ctree_item_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctree_item_t_citype_set" "', argument " "2"" of type '" "cursor_item_type_t""'");
  } 
  arg2 = static_cast< cursor_item_type_t >(val2);
  if (arg1) (arg1)->citype = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t_citype_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cursor_item_type_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t_citype_get" "', argument " "1"" of type '" "ctree_item_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  result = (cursor_item_type_t) ((arg1)->citype);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ctree_item_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ctree_item_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (ctree_item_t *)new ctree_item_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ctree_item_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t_get_memptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  struc_t **arg2 = (struc_t **) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  member_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_item_t_get_memptr", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t_get_memptr" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_struc_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctree_item_t_get_memptr" "', argument " "2"" of type '" "struc_t **""'"); 
    }
    arg2 = reinterpret_cast< struc_t ** >(argp2);
  }
  {
    try
    {
      result = (member_t *)((ctree_item_t const *)arg1)->get_memptr(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_member_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t_get_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t_get_lvar" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      result = (lvar_t *)((ctree_item_t const *)arg1)->get_lvar();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t_get_ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t_get_ea" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      result = (ea_t)((ctree_item_t const *)arg1)->get_ea();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t_get_label_num(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctree_item_t_get_label_num", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t_get_label_num" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctree_item_t_get_label_num" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (int)((ctree_item_t const *)arg1)->get_label_num(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t_is_citem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t_is_citem" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      result = (bool)((ctree_item_t const *)arg1)->is_citem();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t__get_it(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  citem_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t__get_it" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      result = (citem_t *)ctree_item_t__get_it((ctree_item_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t__get_e(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t__get_e" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)ctree_item_t__get_e((ctree_item_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t__get_i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t__get_i" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      result = (cinsn_t *)ctree_item_t__get_i((ctree_item_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t__get_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t__get_l" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      result = (lvar_t *)ctree_item_t__get_l((ctree_item_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t__get_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cfunc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t__get_f" "', argument " "1"" of type '" "ctree_item_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      result = (cfunc_t *)ctree_item_t__get_f((ctree_item_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cfunc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctree_item_t_loc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  treeloc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctree_item_t_loc_get" "', argument " "1"" of type '" "ctree_item_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      result = (treeloc_t *)ctree_item_t_loc_get(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_treeloc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ctree_item_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctree_item_t *arg1 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctree_item_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ctree_item_t" "', argument " "1"" of type '" "ctree_item_t *""'"); 
  }
  arg1 = reinterpret_cast< ctree_item_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ctree_item_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ctree_item_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ctree_item_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap__ll_lnot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_ll_lnot" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)lnot(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__ll_new_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cinsn_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "_ll_new_block", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (cinsn_t *)new_block();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__ll_create_helper__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  bool arg1 ;
  tinfo_t *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  cexpr_t *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "_ll_create_helper", 3, 3, &obj0, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "_ll_create_helper" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_ll_create_helper" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_ll_create_helper" "', argument " "2"" of type '" "tinfo_t const &""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    arg3 = "%s";                                /* Fix format string to %s */
    arg4 = (void *) IDAPyBytes_AsString(obj2);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg4 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "_ll_create_helper" "', argument " "3"" of type '" "char const *""'");
  }
  {
    try
    {
      result = (cexpr_t *)create_helper(arg1,(tinfo_t const &)*arg2,(char const *)arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__ll_create_helper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,3);
  varargs = PyTuple_GetSlice(args,3,PyTuple_Size(args));
  resultobj = _wrap__ll_create_helper__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap__ll_call_helper__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  tinfo_t *arg1 = 0 ;
  carglist_t *arg2 = (carglist_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  cexpr_t *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "_ll_call_helper", 3, 3, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_ll_call_helper" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_ll_call_helper" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  arg1 = reinterpret_cast< tinfo_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_carglist_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_ll_call_helper" "', argument " "2"" of type '" "carglist_t *""'"); 
  }
  arg2 = reinterpret_cast< carglist_t * >(argp2);
  {
    arg3 = "%s";                                /* Fix format string to %s */
    arg4 = (void *) IDAPyBytes_AsString(obj2);  /* Get string argument */
    /* Note: we cannot rely on 'nonnul_argument_prototype' for */
    /* these, since we fiddle with the arguments number */
    if ( arg4 == NULL )
    SWIG_exception_fail(
      SWIG_ValueError,
      "invalid null pointer " "in method '" "_ll_call_helper" "', argument " "3"" of type '" "char const *""'");
  }
  {
    try
    {
      result = (cexpr_t *)call_helper((tinfo_t const &)*arg1,arg2,(char const *)arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__ll_call_helper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,3);
  varargs = PyTuple_GetSlice(args,3,PyTuple_Size(args));
  resultobj = _wrap__ll_call_helper__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap__ll_make_num(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint64 arg1 ;
  cfunc_t *arg2 = (cfunc_t *) NULL ;
  ea_t arg3 = (ea_t) BADADDR ;
  int arg4 = (int) 0 ;
  type_sign_t arg5 = (type_sign_t) no_sign ;
  int arg6 = (int) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  cexpr_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "_ll_make_num", 1, 6, swig_obj)) SWIG_fail;
  {
    // %typemap(in) uint64
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg1 = arg1_temp;
  }
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cfunc_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_ll_make_num" "', argument " "2"" of type '" "cfunc_t *""'"); 
    }
    arg2 = reinterpret_cast< cfunc_t * >(argp2);
  }
  if (swig_obj[2]) {
    {
      // %typemap(in) ea_t
      uint64 arg3_temp;
      if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
      SWIG_exception_fail(
        SWIG_TypeError,
        "in method '" "_ll_make_num" "', argument " "3"" of type 'ea_t'");
      arg3 = ea_t(arg3_temp);
    }
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_ll_make_num" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "_ll_make_num" "', argument " "5"" of type '" "type_sign_t""'");
    } 
    arg5 = static_cast< type_sign_t >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "_ll_make_num" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  {
    try
    {
      result = (cexpr_t *)make_num(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__ll_make_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cexpr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_ll_make_ref" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  {
    try
    {
      result = (cexpr_t *)make_ref(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__ll_dereference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cexpr_t *arg1 = (cexpr_t *) 0 ;
  int arg2 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  cexpr_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "_ll_dereference", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_ll_dereference" "', argument " "1"" of type '" "cexpr_t *""'"); 
  }
  arg1 = reinterpret_cast< cexpr_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_ll_dereference" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_ll_dereference" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try
    {
      result = (cexpr_t *)dereference(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cexpr_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_user_labels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  user_labels_t *arg2 = (user_labels_t *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "save_user_labels", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "save_user_labels" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_user_labels" "', argument " "2"" of type '" "user_labels_t const *""'"); 
  }
  arg2 = reinterpret_cast< user_labels_t * >(argp2);
  {
    try
    {
      save_user_labels(arg1,(std::map< int,_qstring< char > > const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_user_cmts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  user_cmts_t *arg2 = (user_cmts_t *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "save_user_cmts", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "save_user_cmts" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_user_cmts" "', argument " "2"" of type '" "user_cmts_t const *""'"); 
  }
  arg2 = reinterpret_cast< user_cmts_t * >(argp2);
  {
    try
    {
      save_user_cmts(arg1,(std::map< treeloc_t,citem_cmt_t > const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_user_numforms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  user_numforms_t *arg2 = (user_numforms_t *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "save_user_numforms", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "save_user_numforms" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_user_numforms" "', argument " "2"" of type '" "user_numforms_t const *""'"); 
  }
  arg2 = reinterpret_cast< user_numforms_t * >(argp2);
  {
    try
    {
      save_user_numforms(arg1,(std::map< operand_locator_t,number_format_t > const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_user_iflags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  user_iflags_t *arg2 = (user_iflags_t *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "save_user_iflags", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "save_user_iflags" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_user_iflags" "', argument " "2"" of type '" "user_iflags_t const *""'"); 
  }
  arg2 = reinterpret_cast< user_iflags_t * >(argp2);
  {
    try
    {
      save_user_iflags(arg1,(std::map< citem_locator_t,int > const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_user_unions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  user_unions_t *arg2 = (user_unions_t *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "save_user_unions", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "save_user_unions" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_user_unions" "', argument " "2"" of type '" "user_unions_t const *""'"); 
  }
  arg2 = reinterpret_cast< user_unions_t * >(argp2);
  {
    try
    {
      save_user_unions(arg1,(std::map< unsigned int,qvector< int > > const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_restore_user_labels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  user_labels_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "restore_user_labels" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (user_labels_t *)restore_user_labels(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_restore_user_cmts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  user_cmts_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "restore_user_cmts" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (user_cmts_t *)restore_user_cmts(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_restore_user_numforms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  user_numforms_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "restore_user_numforms" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (user_numforms_t *)restore_user_numforms(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_restore_user_iflags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  user_iflags_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "restore_user_iflags" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (user_iflags_t *)restore_user_iflags(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_restore_user_unions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  user_unions_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "restore_user_unions" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (user_unions_t *)restore_user_unions(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_entry_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_entry_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_entry_ea_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "cfunc_t_entry_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->entry_ea = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_entry_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_entry_ea_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (ea_t) ((arg1)->entry_ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_mba_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_mba_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_mba_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_mba_set" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  if (arg1) (arg1)->mba = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_mba_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mbl_array_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_mba_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (mbl_array_t *) ((arg1)->mba);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mbl_array_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_body_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  cinsn_t *arg2 = (cinsn_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_body_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_body_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cinsn_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_body_set" "', argument " "2"" of type '" "cinsn_t *""'"); 
  }
  arg2 = reinterpret_cast< cinsn_t * >(argp2);
  if (arg1) (arg1)->body = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_body_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_body_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (cinsn_t *)& ((arg1)->body);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_argidx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  intvec_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_argidx_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (intvec_t *) &(intvec_t &) ((arg1)->argidx);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_maturity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  ctree_maturity_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_maturity_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_maturity_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfunc_t_maturity_set" "', argument " "2"" of type '" "ctree_maturity_t""'");
  } 
  arg2 = static_cast< ctree_maturity_t >(val2);
  if (arg1) (arg1)->maturity = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_maturity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctree_maturity_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_maturity_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (ctree_maturity_t) ((arg1)->maturity);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_user_labels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  user_labels_t *arg2 = (user_labels_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_user_labels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_user_labels_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_user_labels_set" "', argument " "2"" of type '" "user_labels_t *""'"); 
  }
  arg2 = reinterpret_cast< user_labels_t * >(argp2);
  if (arg1) (arg1)->user_labels = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_user_labels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_labels_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_user_labels_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (user_labels_t *) ((arg1)->user_labels);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_user_cmts_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  user_cmts_t *arg2 = (user_cmts_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_user_cmts_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_user_cmts_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_user_cmts_set" "', argument " "2"" of type '" "user_cmts_t *""'"); 
  }
  arg2 = reinterpret_cast< user_cmts_t * >(argp2);
  if (arg1) (arg1)->user_cmts = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_user_cmts_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_cmts_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_user_cmts_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (user_cmts_t *) ((arg1)->user_cmts);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_numforms_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  user_numforms_t *arg2 = (user_numforms_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_numforms_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_numforms_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_numforms_set" "', argument " "2"" of type '" "user_numforms_t *""'"); 
  }
  arg2 = reinterpret_cast< user_numforms_t * >(argp2);
  if (arg1) (arg1)->numforms = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_numforms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_numforms_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_numforms_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (user_numforms_t *) ((arg1)->numforms);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_user_iflags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  user_iflags_t *arg2 = (user_iflags_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_user_iflags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_user_iflags_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_user_iflags_set" "', argument " "2"" of type '" "user_iflags_t *""'"); 
  }
  arg2 = reinterpret_cast< user_iflags_t * >(argp2);
  if (arg1) (arg1)->user_iflags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_user_iflags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_iflags_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_user_iflags_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (user_iflags_t *) ((arg1)->user_iflags);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_user_unions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  user_unions_t *arg2 = (user_unions_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_user_unions_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_user_unions_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_user_unions_set" "', argument " "2"" of type '" "user_unions_t *""'"); 
  }
  arg2 = reinterpret_cast< user_unions_t * >(argp2);
  if (arg1) (arg1)->user_unions = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_user_unions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_unions_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_user_unions_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (user_unions_t *) ((arg1)->user_unions);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_refcnt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_refcnt_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_refcnt_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfunc_t_refcnt_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->refcnt = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_refcnt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_refcnt_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (int) ((arg1)->refcnt);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_statebits_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_statebits_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_statebits_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfunc_t_statebits_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->statebits = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_statebits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_statebits_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (int) ((arg1)->statebits);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_hdrlines_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_hdrlines_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_hdrlines_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfunc_t_hdrlines_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->hdrlines = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_hdrlines_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_hdrlines_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (int) ((arg1)->hdrlines);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_treeitems_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  ctree_items_t *arg2 = (ctree_items_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_treeitems_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_treeitems_set" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_treeitems_set" "', argument " "2"" of type '" "ctree_items_t *""'"); 
  }
  arg2 = reinterpret_cast< ctree_items_t * >(argp2);
  if (arg1) (arg1)->treeitems = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_treeitems_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctree_items_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_treeitems_get" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  result = (ctree_items_t *)& ((arg1)->treeitems);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_citem_t_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cfunc_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cfunc_t" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_release(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_release" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      (arg1)->release();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_build_c_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_build_c_tree" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      (arg1)->build_c_tree();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_verify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  allow_unused_labels_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_verify", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_verify" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfunc_t_verify" "', argument " "2"" of type '" "allow_unused_labels_t""'");
  } 
  arg2 = static_cast< allow_unused_labels_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cfunc_t_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      ((cfunc_t const *)arg1)->verify(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_print_dcl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qstring temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp2)
    arg2 = &temp2;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_print_dcl" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      ((cfunc_t const *)arg1)->print_dcl(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  {
    // bytes_container typemap(argout) (qstring *vout)
    Py_XDECREF(resultobj);
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg2->c_str(), arg2->length());
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_print_func(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  vc_printer_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_print_func", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_print_func" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vc_printer_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_print_func" "', argument " "2"" of type '" "vc_printer_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfunc_t_print_func" "', argument " "2"" of type '" "vc_printer_t &""'"); 
  }
  arg2 = reinterpret_cast< vc_printer_t * >(argp2);
  {
    try
    {
      ((cfunc_t const *)arg1)->print_func(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_func_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  tinfo_t *arg2 = (tinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_get_func_type", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_func_type" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_get_func_type" "', argument " "2"" of type '" "tinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< tinfo_t * >(argp2);
  {
    if ( arg2 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfunc_t_get_func_type" "', argument " "2"" of type '" "tinfo_t *""'");
  }
  {
    try
    {
      result = (bool)((cfunc_t const *)arg1)->get_func_type(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_lvars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvars_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_lvars" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (lvars_t *)(arg1)->get_lvars();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvars_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_stkoff_delta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sval_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_stkoff_delta" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (sval_t)(arg1)->get_stkoff_delta();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_find_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  citem_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_find_label", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_find_label" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cfunc_t_find_label" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (citem_t *)(arg1)->find_label(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_remove_unused_labels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_remove_unused_labels" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      (arg1)->remove_unused_labels();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_user_cmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  treeloc_t *arg2 = 0 ;
  cmt_retrieval_type_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_get_user_cmt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_user_cmt" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_get_user_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfunc_t_get_user_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cfunc_t_get_user_cmt" "', argument " "3"" of type '" "cmt_retrieval_type_t""'");
  } 
  arg3 = static_cast< cmt_retrieval_type_t >(val3);
  {
    try
    {
      result = (char *)((cfunc_t const *)arg1)->get_user_cmt((treeloc_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_set_user_cmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  treeloc_t *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_set_user_cmt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_set_user_cmt" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_set_user_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfunc_t_set_user_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfunc_t_set_user_cmt" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      (arg1)->set_user_cmt((treeloc_t const &)*arg2,(char const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_user_iflags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int32 result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_get_user_iflags", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_user_iflags" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_get_user_iflags" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfunc_t_get_user_iflags" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = (int32)((cfunc_t const *)arg1)->get_user_iflags((citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_set_user_iflags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  int32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_set_user_iflags", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_set_user_iflags" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_set_user_iflags" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfunc_t_set_user_iflags" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cfunc_t_set_user_iflags" "', argument " "3"" of type '" "int32""'");
  } 
  arg3 = static_cast< int32 >(val3);
  {
    try
    {
      (arg1)->set_user_iflags((citem_locator_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_has_orphan_cmts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_has_orphan_cmts" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (bool)((cfunc_t const *)arg1)->has_orphan_cmts();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_del_orphan_cmts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_del_orphan_cmts" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (int)(arg1)->del_orphan_cmts();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_user_union_selection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  ea_t arg2 ;
  intvec_t *arg3 = (intvec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_get_user_union_selection", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_user_union_selection" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "cfunc_t_get_user_union_selection" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_qvectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfunc_t_get_user_union_selection" "', argument " "3"" of type '" "intvec_t *""'"); 
  }
  arg3 = reinterpret_cast< intvec_t * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->get_user_union_selection(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_set_user_union_selection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  ea_t arg2 ;
  intvec_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_set_user_union_selection", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_set_user_union_selection" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "cfunc_t_set_user_union_selection" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_qvectorT_int_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfunc_t_set_user_union_selection" "', argument " "3"" of type '" "intvec_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfunc_t_set_user_union_selection" "', argument " "3"" of type '" "intvec_t const &""'"); 
  }
  arg3 = reinterpret_cast< intvec_t * >(argp3);
  {
    try
    {
      (arg1)->set_user_union_selection(arg2,(intvec_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_save_user_labels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_save_user_labels" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      ((cfunc_t const *)arg1)->save_user_labels();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_save_user_cmts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_save_user_cmts" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      ((cfunc_t const *)arg1)->save_user_cmts();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_save_user_numforms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_save_user_numforms" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      ((cfunc_t const *)arg1)->save_user_numforms();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_save_user_iflags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_save_user_iflags" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      ((cfunc_t const *)arg1)->save_user_iflags();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_save_user_unions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_save_user_unions" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      ((cfunc_t const *)arg1)->save_user_unions();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_line_item(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  ctree_item_t *arg5 = (ctree_item_t *) 0 ;
  ctree_item_t *arg6 = (ctree_item_t *) 0 ;
  ctree_item_t *arg7 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject *swig_obj[7] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_get_line_item", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_line_item" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_get_line_item" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cfunc_t_get_line_item" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cfunc_t_get_line_item" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cfunc_t_get_line_item" "', argument " "5"" of type '" "ctree_item_t *""'"); 
  }
  arg5 = reinterpret_cast< ctree_item_t * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cfunc_t_get_line_item" "', argument " "6"" of type '" "ctree_item_t *""'"); 
  }
  arg6 = reinterpret_cast< ctree_item_t * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "cfunc_t_get_line_item" "', argument " "7"" of type '" "ctree_item_t *""'"); 
  }
  arg7 = reinterpret_cast< ctree_item_t * >(argp7);
  {
    try
    {
      result = (bool)(arg1)->get_line_item((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_warnings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hexwarns_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_warnings" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (hexwarns_t *) &(arg1)->get_warnings();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_hexwarn_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_eamap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eamap_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_eamap" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (eamap_t *) &(arg1)->get_eamap();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_boundaries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  boundaries_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_boundaries" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (boundaries_t *) &(arg1)->get_boundaries();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_get_pseudocode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  strvec_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_get_pseudocode" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = (strvec_t *) &(arg1)->get_pseudocode();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_simpleline_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_gather_derefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  ctree_item_t *arg2 = 0 ;
  udt_type_data_t *arg3 = (udt_type_data_t *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "cfunc_t_gather_derefs", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_gather_derefs" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctree_item_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_gather_derefs" "', argument " "2"" of type '" "ctree_item_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cfunc_t_gather_derefs" "', argument " "2"" of type '" "ctree_item_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctree_item_t * >(argp2);
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_udt_type_data_t, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfunc_t_gather_derefs" "', argument " "3"" of type '" "udt_type_data_t *""'"); 
    }
    arg3 = reinterpret_cast< udt_type_data_t * >(argp3);
  }
  {
    try
    {
      result = (bool)((cfunc_t const *)arg1)->gather_derefs((ctree_item_t const &)*arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_find_item_coords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_find_item_coords" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_find_item_coords" "', argument " "2"" of type '" "citem_t const *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cfunc_t_find_item_coords" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cfunc_t_find_item_coords" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try
    {
      result = (bool)(arg1)->find_item_coords((citem_t const *)arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_find_item_coords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  citem_t *arg2 = (citem_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t_find_item_coords" "', argument " "1"" of type '" "cfunc_t *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_citem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cfunc_t_find_item_coords" "', argument " "2"" of type '" "citem_t const *""'"); 
  }
  arg2 = reinterpret_cast< citem_t * >(argp2);
  {
    try
    {
      result = (PyObject *)cfunc_t_find_item_coords__SWIG_1(arg1,(citem_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cfunc_t_find_item_coords(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cfunc_t_find_item_coords", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cfunc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cfunc_t_find_item_coords__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cfunc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_citem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_int, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_cfunc_t_find_item_coords__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cfunc_t_find_item_coords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cfunc_t::find_item_coords(citem_t const *,int *,int *)\n"
    "    cfunc_t::find_item_coords(citem_t const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cfunc_t___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cfunc_t *arg1 = (cfunc_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< _qstring< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cfunc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cfunc_t___str__" "', argument " "1"" of type '" "cfunc_t const *""'"); 
  }
  arg1 = reinterpret_cast< cfunc_t * >(argp1);
  {
    try
    {
      result = cfunc_t___str__((cfunc_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // bytes_container typemap(out) qstring
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) (&result)->c_str(), (&result)->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cfunc_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_cfunc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_decompile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  func_t *arg1 = (func_t *) 0 ;
  hexrays_failure_t *arg2 = (hexrays_failure_t *) 0 ;
  int arg3 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< qrefcnt_t< cfunc_t > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "decompile", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_func_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decompile" "', argument " "1"" of type '" "func_t *""'"); 
  }
  arg1 = reinterpret_cast< func_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hexrays_failure_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decompile" "', argument " "2"" of type '" "hexrays_failure_t *""'"); 
  }
  arg2 = reinterpret_cast< hexrays_failure_t * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decompile" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try
    {
      result = decompile_func(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    
  }
  {
    // ret cfuncptr_t
    cfuncptr_t *ni = new cfuncptr_t(result);
    hexrays_register_python_clearable_instance(ni, hxclr_cfuncptr);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mark_cfunc_dirty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  bool arg2 = (bool) false ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "mark_cfunc_dirty", 1, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "mark_cfunc_dirty" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mark_cfunc_dirty" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try
    {
      result = (bool)mark_cfunc_dirty(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clear_cached_cfuncs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "clear_cached_cfuncs", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      clear_cached_cfuncs();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_has_cached_cfunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "has_cached_cfunc" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      result = (bool)has_cached_cfunc(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_ctype_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ctype_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_ctype_name" "', argument " "1"" of type '" "ctype_t""'");
  } 
  arg1 = static_cast< ctype_t >(val1);
  {
    try
    {
      result = (char *)get_ctype_name(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_field_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tinfo_t *arg1 = 0 ;
  uval_t arg2 = (uval_t) BADADDR ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< _qstring< char > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "create_field_name", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_field_name" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_field_name" "', argument " "1"" of type '" "tinfo_t const &""'"); 
  }
  arg1 = reinterpret_cast< tinfo_t * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "create_field_name" "', argument " "2"" of type '" "uval_t""'");
    } 
    arg2 = static_cast< uval_t >(val2);
  }
  {
    try
    {
      result = create_field_name((tinfo_t const &)*arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // bytes_container typemap(out) qstring
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) (&result)->c_str(), (&result)->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_HEXRAYS_API_MAGIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HEXRAYS_API_MAGIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HEXRAYS_API_MAGIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(HEXRAYS_API_MAGIC));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ctext_position_t_lnnum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t_lnnum_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t_lnnum_set" "', argument " "1"" of type '" "ctext_position_t *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctext_position_t_lnnum_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->lnnum = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctext_position_t_lnnum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t_lnnum_get" "', argument " "1"" of type '" "ctext_position_t *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  result = (int) ((arg1)->lnnum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctext_position_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t_x_set" "', argument " "1"" of type '" "ctext_position_t *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctext_position_t_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctext_position_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t_x_get" "', argument " "1"" of type '" "ctext_position_t *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctext_position_t_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t_y_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t_y_set" "', argument " "1"" of type '" "ctext_position_t *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctext_position_t_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctext_position_t_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t_y_get" "', argument " "1"" of type '" "ctext_position_t *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctext_position_t_in_ctree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t_in_ctree", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t_in_ctree" "', argument " "1"" of type '" "ctext_position_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctext_position_t_in_ctree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (bool)((ctext_position_t const *)arg1)->in_ctree(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctext_position_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  ctext_position_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t___eq__" "', argument " "1"" of type '" "ctext_position_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctext_position_t___eq__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctext_position_t___eq__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  {
    try
    {
      result = (bool)((ctext_position_t const *)arg1)->operator ==((ctext_position_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ctext_position_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  ctext_position_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t___ne__" "', argument " "1"" of type '" "ctext_position_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctext_position_t___ne__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctext_position_t___ne__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  {
    try
    {
      result = (bool)((ctext_position_t const *)arg1)->operator !=((ctext_position_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ctext_position_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  ctext_position_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t___lt__" "', argument " "1"" of type '" "ctext_position_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctext_position_t___lt__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctext_position_t___lt__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  {
    try
    {
      result = (bool)((ctext_position_t const *)arg1)->operator <((ctext_position_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ctext_position_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  ctext_position_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t___gt__" "', argument " "1"" of type '" "ctext_position_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctext_position_t___gt__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctext_position_t___gt__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  {
    try
    {
      result = (bool)((ctext_position_t const *)arg1)->operator >((ctext_position_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ctext_position_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  ctext_position_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t___le__" "', argument " "1"" of type '" "ctext_position_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctext_position_t___le__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctext_position_t___le__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  {
    try
    {
      result = (bool)((ctext_position_t const *)arg1)->operator <=((ctext_position_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ctext_position_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  ctext_position_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t___ge__" "', argument " "1"" of type '" "ctext_position_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctext_position_t___ge__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctext_position_t___ge__" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  {
    try
    {
      result = (bool)((ctext_position_t const *)arg1)->operator >=((ctext_position_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_compare__SWIG_42(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = 0 ;
  ctext_position_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compare" "', argument " "1"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "1"" of type '" "ctext_position_t const &""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compare" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compare" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  {
    try
    {
      result = (int)compare((ctext_position_t const &)*arg1,(ctext_position_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_compare(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "compare", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_operand_locator_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_operand_locator_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_9(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vdloc_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vdloc_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_10(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lvar_locator_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lvar_locator_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_11(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fnumber_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fnumber_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_19(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hexwarn_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hexwarn_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_23(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cnumber_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cnumber_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_24(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_var_ref_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_var_ref_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_25(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_citem_locator_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_citem_locator_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_26(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_carg_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_carg_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_37(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cif_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cif_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_28(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cfor_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cfor_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_29(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cwhile_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cwhile_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_30(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cdo_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cdo_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_31(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_creturn_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_creturn_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_32(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cgoto_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cgoto_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_33(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_casm_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_casm_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_34(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ccase_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ccase_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_39(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cblock_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cblock_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_36(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cexpr_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cexpr_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_27(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_carglist_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_carglist_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_38(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cinsn_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cinsn_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_35(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ccases_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ccases_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_40(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cswitch_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cswitch_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_41(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ctext_position_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ctext_position_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_compare__SWIG_42(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'compare'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    compare(reg_info_t const &,reg_info_t const &)\n"
    "    compare(argloc_t const &,argloc_t const &)\n"
    "    compare(tinfo_t const &,tinfo_t const &)\n"
    "    compare(bitfield_type_data_t const &,bitfield_type_data_t const &)\n"
    "    compare(valrng_t const &,valrng_t const &)\n"
    "    compare(operand_locator_t const &,operand_locator_t const &)\n"
    "    compare(vdloc_t const &,vdloc_t const &)\n"
    "    compare(lvar_locator_t const &,lvar_locator_t const &)\n"
    "    compare(bitset_t const &,bitset_t const &)\n"
    "    compare(ivl_t const &,ivl_t const &)\n"
    "    compare(ivlset_t const &,ivlset_t const &)\n"
    "    compare(mlist_t const &,mlist_t const &)\n"
    "    compare(lvar_ref_t const &,lvar_ref_t const &)\n"
    "    compare(stkvar_ref_t const &,stkvar_ref_t const &)\n"
    "    compare(mnumber_t const &,mnumber_t const &)\n"
    "    compare(fnumber_t const &,fnumber_t const &)\n"
    "    compare(mcases_t const &,mcases_t const &)\n"
    "    compare(voff_t const &,voff_t const &)\n"
    "    compare(vivl_t const &,vivl_t const &)\n"
    "    compare(hexwarn_t const &,hexwarn_t const &)\n"
    "    compare(cnumber_t const &,cnumber_t const &)\n"
    "    compare(var_ref_t const &,var_ref_t const &)\n"
    "    compare(citem_locator_t const &,citem_locator_t const &)\n"
    "    compare(cexpr_t const &,cexpr_t const &)\n"
    "    compare(cif_t const &,cif_t const &)\n"
    "    compare(cfor_t const &,cfor_t const &)\n"
    "    compare(cwhile_t const &,cwhile_t const &)\n"
    "    compare(cdo_t const &,cdo_t const &)\n"
    "    compare(creturn_t const &,creturn_t const &)\n"
    "    compare(cgoto_t const &,cgoto_t const &)\n"
    "    compare(casm_t const &,casm_t const &)\n"
    "    compare(cinsn_t const &,cinsn_t const &)\n"
    "    compare(cblock_t const &,cblock_t const &)\n"
    "    compare(carg_t const &,carg_t const &)\n"
    "    compare(carglist_t const &,carglist_t const &)\n"
    "    compare(ccase_t const &,ccase_t const &)\n"
    "    compare(ccases_t const &,ccases_t const &)\n"
    "    compare(cswitch_t const &,cswitch_t const &)\n"
    "    compare(ctext_position_t const &,ctext_position_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctext_position_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  ctext_position_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ctext_position_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctext_position_t_compare" "', argument " "1"" of type '" "ctext_position_t const *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctext_position_t_compare" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctext_position_t_compare" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  {
    try
    {
      result = (int)((ctext_position_t const *)arg1)->compare((ctext_position_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ctext_position_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) -1 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ctext_position_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ctext_position_t", 0, 3, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ctext_position_t" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ctext_position_t" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ctext_position_t" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try
    {
      result = (ctext_position_t *)new ctext_position_t(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ctext_position_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ctext_position_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ctext_position_t *arg1 = (ctext_position_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ctext_position_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ctext_position_t" "', argument " "1"" of type '" "ctext_position_t *""'"); 
  }
  arg1 = reinterpret_cast< ctext_position_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ctext_position_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ctext_position_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ctext_position_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_history_item_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  history_item_t *arg1 = (history_item_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "history_item_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_history_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "history_item_t_ea_set" "', argument " "1"" of type '" "history_item_t *""'"); 
  }
  arg1 = reinterpret_cast< history_item_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "history_item_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->ea = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_history_item_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  history_item_t *arg1 = (history_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_history_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "history_item_t_ea_get" "', argument " "1"" of type '" "history_item_t *""'"); 
  }
  arg1 = reinterpret_cast< history_item_t * >(argp1);
  result = (ea_t) ((arg1)->ea);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_history_item_t_end_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  history_item_t *arg1 = (history_item_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "history_item_t_end_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_history_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "history_item_t_end_set" "', argument " "1"" of type '" "history_item_t *""'"); 
  }
  arg1 = reinterpret_cast< history_item_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "history_item_t_end_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (arg1) (arg1)->end = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_history_item_t_end_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  history_item_t *arg1 = (history_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_history_item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "history_item_t_end_get" "', argument " "1"" of type '" "history_item_t *""'"); 
  }
  arg1 = reinterpret_cast< history_item_t * >(argp1);
  result = (ea_t) ((arg1)->end);
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_history_item_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 = (ea_t) BADADDR ;
  int arg2 = (int) -1 ;
  int arg3 = (int) 0 ;
  int arg4 = (int) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  history_item_t *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 4)) SWIG_fail;
  if (swig_obj[0]) {
    {
      // %typemap(in) ea_t
      uint64 arg1_temp;
      if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
      SWIG_exception_fail(
        SWIG_TypeError,
        "in method '" "new_history_item_t" "', argument " "1"" of type 'ea_t'");
      arg1 = ea_t(arg1_temp);
    }
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_history_item_t" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_history_item_t" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_history_item_t" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try
    {
      result = (history_item_t *)new history_item_t(arg1,arg2,arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_history_item_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  ctext_position_t *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  history_item_t *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_history_item_t" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ctext_position_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_history_item_t" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_history_item_t" "', argument " "2"" of type '" "ctext_position_t const &""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  {
    try
    {
      result = (history_item_t *)new history_item_t(arg1,(ctext_position_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_history_item_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_history_item_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_history_item_t", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 0) && (argc <= 4)) {
    int _v;
    if (argc <= 0) {
      return _wrap_new_history_item_t__SWIG_0(self, argc, argv);
    }
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_history_item_t__SWIG_0(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_history_item_t__SWIG_0(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_history_item_t__SWIG_0(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_history_item_t__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ctext_position_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_history_item_t__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_history_item_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    history_item_t::history_item_t(ea_t,int,int,int)\n"
    "    history_item_t::history_item_t(ea_t,ctext_position_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_history_item_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  history_item_t *arg1 = (history_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_history_item_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_history_item_t" "', argument " "1"" of type '" "history_item_t *""'"); 
  }
  arg1 = reinterpret_cast< history_item_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *history_item_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_history_item_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *history_item_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_CMT_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CMT_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CMT_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(CMT_NONE));
  return pyobj;
}


SWIGINTERN int Swig_var_CMT_TAIL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CMT_TAIL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CMT_TAIL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(CMT_TAIL));
  return pyobj;
}


SWIGINTERN int Swig_var_CMT_BLOCK1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CMT_BLOCK1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CMT_BLOCK1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(CMT_BLOCK1));
  return pyobj;
}


SWIGINTERN int Swig_var_CMT_BLOCK2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CMT_BLOCK2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CMT_BLOCK2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(CMT_BLOCK2));
  return pyobj;
}


SWIGINTERN int Swig_var_CMT_LVAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CMT_LVAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CMT_LVAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(CMT_LVAR));
  return pyobj;
}


SWIGINTERN int Swig_var_CMT_FUNC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CMT_FUNC is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CMT_FUNC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(CMT_FUNC));
  return pyobj;
}


SWIGINTERN int Swig_var_CMT_ALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CMT_ALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CMT_ALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(CMT_ALL));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_vdui_t_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_flags_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_flags_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->flags = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_flags_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (int) ((arg1)->flags);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_visible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_visible" "', argument " "1"" of type '" "vdui_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)((vdui_t const *)arg1)->visible();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_valid" "', argument " "1"" of type '" "vdui_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)((vdui_t const *)arg1)->valid();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_locked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_locked" "', argument " "1"" of type '" "vdui_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)((vdui_t const *)arg1)->locked();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_visible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_set_visible", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_visible" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_set_visible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->set_visible(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_set_valid", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_valid" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_set_valid" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->set_valid(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_locked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_set_locked", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_locked" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_set_locked" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)(arg1)->set_locked(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_view_idx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_view_idx_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_view_idx_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_view_idx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->view_idx = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_view_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_view_idx_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (int) ((arg1)->view_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_ct_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_ct_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_ct_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_ct_set" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  if (arg1) (arg1)->ct = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_ct_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_ct_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (TWidget *) ((arg1)->ct);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_toplevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_toplevel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_toplevel_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_toplevel_set" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  if (arg1) (arg1)->toplevel = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_toplevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  TWidget *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_toplevel_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (TWidget *) ((arg1)->toplevel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TWidget, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_mba_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  mbl_array_t *arg2 = (mbl_array_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_mba_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_mba_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mbl_array_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_mba_set" "', argument " "2"" of type '" "mbl_array_t *""'"); 
  }
  arg2 = reinterpret_cast< mbl_array_t * >(argp2);
  if (arg1) (arg1)->mba = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_mba_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mbl_array_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_mba_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (mbl_array_t *) ((arg1)->mba);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mbl_array_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_cfunc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  cfuncptr_t *arg2 = (cfuncptr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_cfunc_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_cfunc_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_cfunc_set" "', argument " "2"" of type '" "cfuncptr_t *""'"); 
  }
  arg2 = reinterpret_cast< cfuncptr_t * >(argp2);
  if (arg1) (arg1)->cfunc = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_cfunc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cfuncptr_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_cfunc_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (cfuncptr_t *)& ((arg1)->cfunc);
  {
    
  }
  {
    // ret cfuncptr_t*
    cfuncptr_t *ni = new cfuncptr_t(*(result));
    hexrays_register_python_clearable_instance(ni, hxclr_cfuncptr);
    resultobj = SWIG_NewPointerObj(ni, SWIGTYPE_p_qrefcnt_tT_cfunc_t_t, SWIG_POINTER_OWN | 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_last_code_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  merror_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_last_code_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_last_code_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_last_code_set" "', argument " "2"" of type '" "merror_t""'");
  } 
  arg2 = static_cast< merror_t >(val2);
  if (arg1) (arg1)->last_code = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_last_code_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  merror_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_last_code_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (merror_t) ((arg1)->last_code);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_cpos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  ctext_position_t *arg2 = (ctext_position_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_cpos_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_cpos_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ctext_position_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_cpos_set" "', argument " "2"" of type '" "ctext_position_t *""'"); 
  }
  arg2 = reinterpret_cast< ctext_position_t * >(argp2);
  if (arg1) (arg1)->cpos = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_cpos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctext_position_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_cpos_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (ctext_position_t *)& ((arg1)->cpos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ctext_position_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_head_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  ctree_item_t *arg2 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_head_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_head_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_head_set" "', argument " "2"" of type '" "ctree_item_t *""'"); 
  }
  arg2 = reinterpret_cast< ctree_item_t * >(argp2);
  if (arg1) (arg1)->head = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_head_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctree_item_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_head_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (ctree_item_t *)& ((arg1)->head);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ctree_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_item_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  ctree_item_t *arg2 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_item_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_item_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_item_set" "', argument " "2"" of type '" "ctree_item_t *""'"); 
  }
  arg2 = reinterpret_cast< ctree_item_t * >(argp2);
  if (arg1) (arg1)->item = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_item_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctree_item_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_item_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (ctree_item_t *)& ((arg1)->item);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ctree_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_tail_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  ctree_item_t *arg2 = (ctree_item_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_tail_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_tail_set" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ctree_item_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_tail_set" "', argument " "2"" of type '" "ctree_item_t *""'"); 
  }
  arg2 = reinterpret_cast< ctree_item_t * >(argp2);
  if (arg1) (arg1)->tail = *arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_tail_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ctree_item_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_tail_get" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  result = (ctree_item_t *)& ((arg1)->tail);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ctree_item_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_refresh_view(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_refresh_view", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_refresh_view" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_refresh_view" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->refresh_view(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_refresh_ctext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_refresh_ctext", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_refresh_ctext" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_refresh_ctext" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try
    {
      (arg1)->refresh_ctext(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_switch_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  SwigValueWrapper< qrefcnt_t< cfunc_t > > arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_switch_to", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_switch_to" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qrefcnt_tT_cfunc_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_switch_to" "', argument " "2"" of type '" "cfuncptr_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdui_t_switch_to" "', argument " "2"" of type '" "cfuncptr_t""'");
    } else {
      cfuncptr_t * temp = reinterpret_cast< cfuncptr_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vdui_t_switch_to" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      (arg1)->switch_to(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_in_ctree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_in_ctree" "', argument " "1"" of type '" "vdui_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)((vdui_t const *)arg1)->in_ctree();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_get_number(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cnumber_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_get_number" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (cnumber_t *)(arg1)->get_number();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cnumber_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_get_current_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_get_current_label" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (int)(arg1)->get_current_label();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_clear" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_refresh_cpos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  input_device_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_refresh_cpos", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_refresh_cpos" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_refresh_cpos" "', argument " "2"" of type '" "input_device_t""'");
  } 
  arg2 = static_cast< input_device_t >(val2);
  {
    try
    {
      result = (bool)(arg1)->refresh_cpos(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_get_current_item(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  input_device_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_get_current_item", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_get_current_item" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_get_current_item" "', argument " "2"" of type '" "input_device_t""'");
  } 
  arg2 = static_cast< input_device_t >(val2);
  {
    try
    {
      result = (bool)(arg1)->get_current_item(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_ui_rename_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_ui_rename_lvar", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_ui_rename_lvar" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_ui_rename_lvar" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->ui_rename_lvar(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_rename_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_rename_lvar", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_rename_lvar" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_rename_lvar" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vdui_t_rename_lvar" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vdui_t_rename_lvar" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      result = (bool)(arg1)->rename_lvar(arg2,(char const *)arg3,arg4);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_ui_set_call_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  cexpr_t *arg2 = (cexpr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_ui_set_call_type", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_ui_set_call_type" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cexpr_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_ui_set_call_type" "', argument " "2"" of type '" "cexpr_t const *""'"); 
  }
  arg2 = reinterpret_cast< cexpr_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->ui_set_call_type((cexpr_t const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_ui_set_lvar_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_ui_set_lvar_type", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_ui_set_lvar_type" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_ui_set_lvar_type" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->ui_set_lvar_type(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_lvar_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  tinfo_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_set_lvar_type", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_lvar_type" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_set_lvar_type" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tinfo_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vdui_t_set_lvar_type" "', argument " "3"" of type '" "tinfo_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdui_t_set_lvar_type" "', argument " "3"" of type '" "tinfo_t const &""'"); 
  }
  arg3 = reinterpret_cast< tinfo_t * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->set_lvar_type(arg2,(tinfo_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_noptr_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_set_noptr_lvar", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_noptr_lvar" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_set_noptr_lvar" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->set_noptr_lvar(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_ui_edit_lvar_cmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_ui_edit_lvar_cmt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_ui_edit_lvar_cmt" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_ui_edit_lvar_cmt" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->ui_edit_lvar_cmt(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_lvar_cmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_set_lvar_cmt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_lvar_cmt" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_set_lvar_cmt" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vdui_t_set_lvar_cmt" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->set_lvar_cmt(arg2,(char const *)arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_ui_map_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_ui_map_lvar", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_ui_map_lvar" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_ui_map_lvar" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->ui_map_lvar(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_ui_unmap_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_ui_unmap_lvar", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_ui_unmap_lvar" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_ui_unmap_lvar" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->ui_unmap_lvar(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_map_lvar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  lvar_t *arg2 = (lvar_t *) 0 ;
  lvar_t *arg3 = (lvar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_map_lvar", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_map_lvar" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_map_lvar" "', argument " "2"" of type '" "lvar_t *""'"); 
  }
  arg2 = reinterpret_cast< lvar_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_lvar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vdui_t_map_lvar" "', argument " "3"" of type '" "lvar_t *""'"); 
  }
  arg3 = reinterpret_cast< lvar_t * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->map_lvar(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_strmem_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  struc_t *arg2 = (struc_t *) 0 ;
  member_t *arg3 = (member_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_set_strmem_type", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_strmem_type" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_struc_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_set_strmem_type" "', argument " "2"" of type '" "struc_t *""'"); 
  }
  arg2 = reinterpret_cast< struc_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_member_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vdui_t_set_strmem_type" "', argument " "3"" of type '" "member_t *""'"); 
  }
  arg3 = reinterpret_cast< member_t * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->set_strmem_type(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_rename_strmem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  struc_t *arg2 = (struc_t *) 0 ;
  member_t *arg3 = (member_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_rename_strmem", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_rename_strmem" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_struc_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_rename_strmem" "', argument " "2"" of type '" "struc_t *""'"); 
  }
  arg2 = reinterpret_cast< struc_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_member_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vdui_t_rename_strmem" "', argument " "3"" of type '" "member_t *""'"); 
  }
  arg3 = reinterpret_cast< member_t * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->rename_strmem(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_global_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_set_global_type", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_global_type" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "vdui_t_set_global_type" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      result = (bool)(arg1)->set_global_type(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_rename_global(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_rename_global", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_rename_global" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "vdui_t_rename_global" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      result = (bool)(arg1)->rename_global(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_rename_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_rename_label", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_rename_label" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_rename_label" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (bool)(arg1)->rename_label(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_jump_enter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  input_device_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_jump_enter", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_jump_enter" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_jump_enter" "', argument " "2"" of type '" "input_device_t""'");
  } 
  arg2 = static_cast< input_device_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vdui_t_jump_enter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (bool)(arg1)->jump_enter(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_ctree_to_disasm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_ctree_to_disasm" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->ctree_to_disasm();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_calc_cmt_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  size_t arg2 ;
  cmt_type_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  cmt_type_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_calc_cmt_type", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_calc_cmt_type" "', argument " "1"" of type '" "vdui_t const *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_calc_cmt_type" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vdui_t_calc_cmt_type" "', argument " "3"" of type '" "cmt_type_t""'");
  } 
  arg3 = static_cast< cmt_type_t >(val3);
  {
    try
    {
      result = (cmt_type_t)((vdui_t const *)arg1)->calc_cmt_type(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_edit_cmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  treeloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_edit_cmt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_edit_cmt" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vdui_t_edit_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vdui_t_edit_cmt" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->edit_cmt((treeloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_edit_func_cmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_edit_func_cmt" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->edit_func_cmt();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_del_orphan_cmts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_del_orphan_cmts" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->del_orphan_cmts();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_num_radix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_set_num_radix", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_num_radix" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_set_num_radix" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (bool)(arg1)->set_num_radix(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_num_enum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_num_enum" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->set_num_enum();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_set_num_stroff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_set_num_stroff" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->set_num_stroff();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_invert_sign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_invert_sign" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->invert_sign();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_invert_bits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_invert_bits" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->invert_bits();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_collapse_item(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_collapse_item", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_collapse_item" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_collapse_item" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)(arg1)->collapse_item(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_collapse_lvars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_collapse_lvars", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_collapse_lvars" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_collapse_lvars" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)(arg1)->collapse_lvars(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vdui_t_split_item(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vdui_t_split_item", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vdui_t_split_item" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vdui_t_split_item" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)(arg1)->split_item(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vdui_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vdui_t *arg1 = (vdui_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_vdui_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vdui_t" "', argument " "1"" of type '" "vdui_t *""'"); 
  }
  arg1 = reinterpret_cast< vdui_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vdui_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vdui_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_hexdsp_set(PyObject *_val) {
  {
    int res = SWIG_ConvertFunctionPtr(_val, (void**)(&hexdsp), SWIGTYPE_p_f_int_v_______p_void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""hexdsp""' of type '""hexdsp_t *""'"); 
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_hexdsp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewFunctionPtrObj((void *)(hexdsp), SWIGTYPE_p_f_int_v_______p_void);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_user_numforms_iterator_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_numforms_iterator_t *arg1 = (user_numforms_iterator_t *) 0 ;
  iterator_word arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_numforms_iterator_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_numforms_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_iterator_t_x_set" "', argument " "1"" of type '" "user_numforms_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_iterator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_numforms_iterator_t_x_set" "', argument " "2"" of type '" "iterator_word""'");
  } 
  arg2 = static_cast< iterator_word >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_iterator_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_numforms_iterator_t *arg1 = (user_numforms_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  iterator_word result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_numforms_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_iterator_t_x_get" "', argument " "1"" of type '" "user_numforms_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_iterator_t * >(argp1);
  result = (iterator_word) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_iterator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_numforms_iterator_t *arg1 = (user_numforms_iterator_t *) 0 ;
  user_numforms_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_numforms_iterator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_numforms_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_iterator_t___eq__" "', argument " "1"" of type '" "user_numforms_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_numforms_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_numforms_iterator_t___eq__" "', argument " "2"" of type '" "user_numforms_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_iterator_t___eq__" "', argument " "2"" of type '" "user_numforms_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_numforms_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_numforms_iterator_t const *)arg1)->operator ==((user_numforms_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_user_numforms_iterator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_numforms_iterator_t *arg1 = (user_numforms_iterator_t *) 0 ;
  user_numforms_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_numforms_iterator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_numforms_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_iterator_t___ne__" "', argument " "1"" of type '" "user_numforms_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_numforms_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_numforms_iterator_t___ne__" "', argument " "2"" of type '" "user_numforms_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_iterator_t___ne__" "', argument " "2"" of type '" "user_numforms_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_numforms_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_numforms_iterator_t const *)arg1)->operator !=((user_numforms_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_user_numforms_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_numforms_iterator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_numforms_iterator_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_numforms_iterator_t *)new user_numforms_iterator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_user_numforms_iterator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_numforms_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_numforms_iterator_t *arg1 = (user_numforms_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_numforms_iterator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_numforms_iterator_t" "', argument " "1"" of type '" "user_numforms_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_iterator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_numforms_iterator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_user_numforms_iterator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_numforms_iterator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_numforms_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_t *arg1 = (user_numforms_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_numforms_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_begin" "', argument " "1"" of type '" "user_numforms_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_t * >(argp1);
  {
    try
    {
      result = user_numforms_begin((std::map< operand_locator_t,number_format_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_numforms_iterator_t(static_cast< const user_numforms_iterator_t& >(result))), SWIGTYPE_p_user_numforms_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_t *arg1 = (user_numforms_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_numforms_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_end" "', argument " "1"" of type '" "user_numforms_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_t * >(argp1);
  {
    try
    {
      result = user_numforms_end((std::map< operand_locator_t,number_format_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_numforms_iterator_t(static_cast< const user_numforms_iterator_t& >(result))), SWIGTYPE_p_user_numforms_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_numforms_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_numforms_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_next" "', argument " "1"" of type '" "user_numforms_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_next" "', argument " "1"" of type '" "user_numforms_iterator_t""'");
    } else {
      user_numforms_iterator_t * temp = reinterpret_cast< user_numforms_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_numforms_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_numforms_iterator_t(static_cast< const user_numforms_iterator_t& >(result))), SWIGTYPE_p_user_numforms_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_numforms_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_numforms_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_prev" "', argument " "1"" of type '" "user_numforms_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_prev" "', argument " "1"" of type '" "user_numforms_iterator_t""'");
    } else {
      user_numforms_iterator_t * temp = reinterpret_cast< user_numforms_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_numforms_prev(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_numforms_iterator_t(static_cast< const user_numforms_iterator_t& >(result))), SWIGTYPE_p_user_numforms_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  operand_locator_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_numforms_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_first" "', argument " "1"" of type '" "user_numforms_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_first" "', argument " "1"" of type '" "user_numforms_iterator_t""'");
    } else {
      user_numforms_iterator_t * temp = reinterpret_cast< user_numforms_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (operand_locator_t *) &user_numforms_first(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operand_locator_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  number_format_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_numforms_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_second" "', argument " "1"" of type '" "user_numforms_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_second" "', argument " "1"" of type '" "user_numforms_iterator_t""'");
    } else {
      user_numforms_iterator_t * temp = reinterpret_cast< user_numforms_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (number_format_t *) &user_numforms_second(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_number_format_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_t *arg1 = (user_numforms_t *) 0 ;
  operand_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  user_numforms_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_numforms_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_find" "', argument " "1"" of type '" "user_numforms_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_numforms_find" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_find" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  {
    try
    {
      result = user_numforms_find((std::map< operand_locator_t,number_format_t > const *)arg1,(operand_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_numforms_iterator_t(static_cast< const user_numforms_iterator_t& >(result))), SWIGTYPE_p_user_numforms_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_t *arg1 = (user_numforms_t *) 0 ;
  operand_locator_t *arg2 = 0 ;
  number_format_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  user_numforms_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_numforms_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_insert" "', argument " "1"" of type '" "user_numforms_t *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_operand_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_numforms_insert" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_insert" "', argument " "2"" of type '" "operand_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< operand_locator_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_number_format_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "user_numforms_insert" "', argument " "3"" of type '" "number_format_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_insert" "', argument " "3"" of type '" "number_format_t const &""'"); 
  }
  arg3 = reinterpret_cast< number_format_t * >(argp3);
  {
    try
    {
      result = user_numforms_insert(arg1,(operand_locator_t const &)*arg2,(number_format_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_numforms_iterator_t(static_cast< const user_numforms_iterator_t& >(result))), SWIGTYPE_p_user_numforms_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_t *arg1 = (user_numforms_t *) 0 ;
  user_numforms_iterator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_numforms_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_erase" "', argument " "1"" of type '" "user_numforms_t *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_numforms_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_numforms_erase" "', argument " "2"" of type '" "user_numforms_iterator_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_numforms_erase" "', argument " "2"" of type '" "user_numforms_iterator_t""'");
    } else {
      user_numforms_iterator_t * temp = reinterpret_cast< user_numforms_iterator_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      user_numforms_erase(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_t *arg1 = (user_numforms_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_clear" "', argument " "1"" of type '" "user_numforms_t *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_t * >(argp1);
  {
    try
    {
      user_numforms_clear(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_t *arg1 = (user_numforms_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_size" "', argument " "1"" of type '" "user_numforms_t *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_t * >(argp1);
  {
    try
    {
      result = user_numforms_size(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_t *arg1 = (user_numforms_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_numforms_free" "', argument " "1"" of type '" "user_numforms_t *""'"); 
  }
  arg1 = reinterpret_cast< user_numforms_t * >(argp1);
  {
    try
    {
      user_numforms_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_numforms_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_numforms_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_numforms_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_numforms_t *)user_numforms_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_operand_locator_t_number_format_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_iterator_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_mapping_iterator_t *arg1 = (lvar_mapping_iterator_t *) 0 ;
  iterator_word arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_mapping_iterator_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_mapping_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_iterator_t_x_set" "', argument " "1"" of type '" "lvar_mapping_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_iterator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lvar_mapping_iterator_t_x_set" "', argument " "2"" of type '" "iterator_word""'");
  } 
  arg2 = static_cast< iterator_word >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_iterator_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_mapping_iterator_t *arg1 = (lvar_mapping_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  iterator_word result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_mapping_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_iterator_t_x_get" "', argument " "1"" of type '" "lvar_mapping_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_iterator_t * >(argp1);
  result = (iterator_word) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_iterator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_mapping_iterator_t *arg1 = (lvar_mapping_iterator_t *) 0 ;
  lvar_mapping_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_mapping_iterator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_mapping_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_iterator_t___eq__" "', argument " "1"" of type '" "lvar_mapping_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_mapping_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_mapping_iterator_t___eq__" "', argument " "2"" of type '" "lvar_mapping_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_iterator_t___eq__" "', argument " "2"" of type '" "lvar_mapping_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_mapping_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_mapping_iterator_t const *)arg1)->operator ==((lvar_mapping_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_iterator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_mapping_iterator_t *arg1 = (lvar_mapping_iterator_t *) 0 ;
  lvar_mapping_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_mapping_iterator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_mapping_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_iterator_t___ne__" "', argument " "1"" of type '" "lvar_mapping_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_mapping_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_mapping_iterator_t___ne__" "', argument " "2"" of type '" "lvar_mapping_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_iterator_t___ne__" "', argument " "2"" of type '" "lvar_mapping_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_mapping_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((lvar_mapping_iterator_t const *)arg1)->operator !=((lvar_mapping_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_lvar_mapping_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_mapping_iterator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_lvar_mapping_iterator_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (lvar_mapping_iterator_t *)new lvar_mapping_iterator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_mapping_iterator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lvar_mapping_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lvar_mapping_iterator_t *arg1 = (lvar_mapping_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_lvar_mapping_iterator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lvar_mapping_iterator_t" "', argument " "1"" of type '" "lvar_mapping_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_iterator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lvar_mapping_iterator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lvar_mapping_iterator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *lvar_mapping_iterator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_lvar_mapping_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_t *arg1 = (lvar_mapping_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_mapping_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_begin" "', argument " "1"" of type '" "lvar_mapping_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_t * >(argp1);
  {
    try
    {
      result = lvar_mapping_begin((std::map< lvar_locator_t,lvar_locator_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new lvar_mapping_iterator_t(static_cast< const lvar_mapping_iterator_t& >(result))), SWIGTYPE_p_lvar_mapping_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_t *arg1 = (lvar_mapping_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_mapping_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_end" "', argument " "1"" of type '" "lvar_mapping_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_t * >(argp1);
  {
    try
    {
      result = lvar_mapping_end((std::map< lvar_locator_t,lvar_locator_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new lvar_mapping_iterator_t(static_cast< const lvar_mapping_iterator_t& >(result))), SWIGTYPE_p_lvar_mapping_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_mapping_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_lvar_mapping_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_next" "', argument " "1"" of type '" "lvar_mapping_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_next" "', argument " "1"" of type '" "lvar_mapping_iterator_t""'");
    } else {
      lvar_mapping_iterator_t * temp = reinterpret_cast< lvar_mapping_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = lvar_mapping_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new lvar_mapping_iterator_t(static_cast< const lvar_mapping_iterator_t& >(result))), SWIGTYPE_p_lvar_mapping_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_mapping_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_lvar_mapping_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_prev" "', argument " "1"" of type '" "lvar_mapping_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_prev" "', argument " "1"" of type '" "lvar_mapping_iterator_t""'");
    } else {
      lvar_mapping_iterator_t * temp = reinterpret_cast< lvar_mapping_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = lvar_mapping_prev(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new lvar_mapping_iterator_t(static_cast< const lvar_mapping_iterator_t& >(result))), SWIGTYPE_p_lvar_mapping_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_locator_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_lvar_mapping_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_first" "', argument " "1"" of type '" "lvar_mapping_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_first" "', argument " "1"" of type '" "lvar_mapping_iterator_t""'");
    } else {
      lvar_mapping_iterator_t * temp = reinterpret_cast< lvar_mapping_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (lvar_locator_t *) &lvar_mapping_first(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  lvar_locator_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_lvar_mapping_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_second" "', argument " "1"" of type '" "lvar_mapping_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_second" "', argument " "1"" of type '" "lvar_mapping_iterator_t""'");
    } else {
      lvar_mapping_iterator_t * temp = reinterpret_cast< lvar_mapping_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (lvar_locator_t *) &lvar_mapping_second(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lvar_locator_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_t *arg1 = (lvar_mapping_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  lvar_mapping_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_mapping_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_find" "', argument " "1"" of type '" "lvar_mapping_t const *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_mapping_find" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_find" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  {
    try
    {
      result = lvar_mapping_find((std::map< lvar_locator_t,lvar_locator_t > const *)arg1,(lvar_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new lvar_mapping_iterator_t(static_cast< const lvar_mapping_iterator_t& >(result))), SWIGTYPE_p_lvar_mapping_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_t *arg1 = (lvar_mapping_t *) 0 ;
  lvar_locator_t *arg2 = 0 ;
  lvar_locator_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  lvar_mapping_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_mapping_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_insert" "', argument " "1"" of type '" "lvar_mapping_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_mapping_insert" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_insert" "', argument " "2"" of type '" "lvar_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< lvar_locator_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_lvar_locator_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lvar_mapping_insert" "', argument " "3"" of type '" "lvar_locator_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_insert" "', argument " "3"" of type '" "lvar_locator_t const &""'"); 
  }
  arg3 = reinterpret_cast< lvar_locator_t * >(argp3);
  {
    try
    {
      result = lvar_mapping_insert(arg1,(lvar_locator_t const &)*arg2,(lvar_locator_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new lvar_mapping_iterator_t(static_cast< const lvar_mapping_iterator_t& >(result))), SWIGTYPE_p_lvar_mapping_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_t *arg1 = (lvar_mapping_t *) 0 ;
  lvar_mapping_iterator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_mapping_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_erase" "', argument " "1"" of type '" "lvar_mapping_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_lvar_mapping_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lvar_mapping_erase" "', argument " "2"" of type '" "lvar_mapping_iterator_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lvar_mapping_erase" "', argument " "2"" of type '" "lvar_mapping_iterator_t""'");
    } else {
      lvar_mapping_iterator_t * temp = reinterpret_cast< lvar_mapping_iterator_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      lvar_mapping_erase(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_t *arg1 = (lvar_mapping_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_clear" "', argument " "1"" of type '" "lvar_mapping_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_t * >(argp1);
  {
    try
    {
      lvar_mapping_clear(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_t *arg1 = (lvar_mapping_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_size" "', argument " "1"" of type '" "lvar_mapping_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_t * >(argp1);
  {
    try
    {
      result = lvar_mapping_size(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_t *arg1 = (lvar_mapping_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lvar_mapping_free" "', argument " "1"" of type '" "lvar_mapping_t *""'"); 
  }
  arg1 = reinterpret_cast< lvar_mapping_t * >(argp1);
  {
    try
    {
      lvar_mapping_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lvar_mapping_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  lvar_mapping_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "lvar_mapping_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (lvar_mapping_t *)lvar_mapping_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_iterator_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_map_iterator_t *arg1 = (udcall_map_iterator_t *) 0 ;
  iterator_word arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "udcall_map_iterator_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_map_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_iterator_t_x_set" "', argument " "1"" of type '" "udcall_map_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_iterator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udcall_map_iterator_t_x_set" "', argument " "2"" of type '" "iterator_word""'");
  } 
  arg2 = static_cast< iterator_word >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_iterator_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_map_iterator_t *arg1 = (udcall_map_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  iterator_word result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_map_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_iterator_t_x_get" "', argument " "1"" of type '" "udcall_map_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_iterator_t * >(argp1);
  result = (iterator_word) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_iterator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_map_iterator_t *arg1 = (udcall_map_iterator_t *) 0 ;
  udcall_map_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "udcall_map_iterator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_map_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_iterator_t___eq__" "', argument " "1"" of type '" "udcall_map_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_udcall_map_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udcall_map_iterator_t___eq__" "', argument " "2"" of type '" "udcall_map_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udcall_map_iterator_t___eq__" "', argument " "2"" of type '" "udcall_map_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< udcall_map_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((udcall_map_iterator_t const *)arg1)->operator ==((udcall_map_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_udcall_map_iterator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_map_iterator_t *arg1 = (udcall_map_iterator_t *) 0 ;
  udcall_map_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "udcall_map_iterator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_map_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_iterator_t___ne__" "', argument " "1"" of type '" "udcall_map_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_udcall_map_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udcall_map_iterator_t___ne__" "', argument " "2"" of type '" "udcall_map_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udcall_map_iterator_t___ne__" "', argument " "2"" of type '" "udcall_map_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< udcall_map_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((udcall_map_iterator_t const *)arg1)->operator !=((udcall_map_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_udcall_map_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_map_iterator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_udcall_map_iterator_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (udcall_map_iterator_t *)new udcall_map_iterator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_udcall_map_iterator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_udcall_map_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  udcall_map_iterator_t *arg1 = (udcall_map_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_udcall_map_iterator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_udcall_map_iterator_t" "', argument " "1"" of type '" "udcall_map_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_iterator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *udcall_map_iterator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_udcall_map_iterator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *udcall_map_iterator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_udcall_map_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *arg1 = (udcall_map_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  udcall_map_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_begin" "', argument " "1"" of type '" "udcall_map_t const *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_t * >(argp1);
  {
    try
    {
      result = udcall_map_begin((std::map< unsigned int,udcall_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new udcall_map_iterator_t(static_cast< const udcall_map_iterator_t& >(result))), SWIGTYPE_p_udcall_map_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *arg1 = (udcall_map_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  udcall_map_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_end" "', argument " "1"" of type '" "udcall_map_t const *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_t * >(argp1);
  {
    try
    {
      result = udcall_map_end((std::map< unsigned int,udcall_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new udcall_map_iterator_t(static_cast< const udcall_map_iterator_t& >(result))), SWIGTYPE_p_udcall_map_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  udcall_map_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_udcall_map_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_next" "', argument " "1"" of type '" "udcall_map_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udcall_map_next" "', argument " "1"" of type '" "udcall_map_iterator_t""'");
    } else {
      udcall_map_iterator_t * temp = reinterpret_cast< udcall_map_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = udcall_map_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new udcall_map_iterator_t(static_cast< const udcall_map_iterator_t& >(result))), SWIGTYPE_p_udcall_map_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  udcall_map_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_udcall_map_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_prev" "', argument " "1"" of type '" "udcall_map_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udcall_map_prev" "', argument " "1"" of type '" "udcall_map_iterator_t""'");
    } else {
      udcall_map_iterator_t * temp = reinterpret_cast< udcall_map_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = udcall_map_prev(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new udcall_map_iterator_t(static_cast< const udcall_map_iterator_t& >(result))), SWIGTYPE_p_udcall_map_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_udcall_map_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_first" "', argument " "1"" of type '" "udcall_map_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udcall_map_first" "', argument " "1"" of type '" "udcall_map_iterator_t""'");
    } else {
      udcall_map_iterator_t * temp = reinterpret_cast< udcall_map_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (ea_t *) &udcall_map_first(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  udcall_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_udcall_map_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_second" "', argument " "1"" of type '" "udcall_map_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udcall_map_second" "', argument " "1"" of type '" "udcall_map_iterator_t""'");
    } else {
      udcall_map_iterator_t * temp = reinterpret_cast< udcall_map_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (udcall_t *) &udcall_map_second(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_udcall_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *arg1 = (udcall_map_t *) 0 ;
  ea_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ea_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  udcall_map_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "udcall_map_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_find" "', argument " "1"" of type '" "udcall_map_t const *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udcall_map_find" "', argument " "2"" of type '" "ea_t""'");
  } 
  temp2 = static_cast< ea_t >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = udcall_map_find((std::map< unsigned int,udcall_t > const *)arg1,(unsigned int const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new udcall_map_iterator_t(static_cast< const udcall_map_iterator_t& >(result))), SWIGTYPE_p_udcall_map_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *arg1 = (udcall_map_t *) 0 ;
  ea_t *arg2 = 0 ;
  udcall_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ea_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  udcall_map_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "udcall_map_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_insert" "', argument " "1"" of type '" "udcall_map_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udcall_map_insert" "', argument " "2"" of type '" "ea_t""'");
  } 
  temp2 = static_cast< ea_t >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_udcall_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "udcall_map_insert" "', argument " "3"" of type '" "udcall_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udcall_map_insert" "', argument " "3"" of type '" "udcall_t const &""'"); 
  }
  arg3 = reinterpret_cast< udcall_t * >(argp3);
  {
    try
    {
      result = udcall_map_insert(arg1,(unsigned int const &)*arg2,(udcall_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new udcall_map_iterator_t(static_cast< const udcall_map_iterator_t& >(result))), SWIGTYPE_p_udcall_map_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *arg1 = (udcall_map_t *) 0 ;
  udcall_map_iterator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "udcall_map_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_erase" "', argument " "1"" of type '" "udcall_map_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_udcall_map_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udcall_map_erase" "', argument " "2"" of type '" "udcall_map_iterator_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udcall_map_erase" "', argument " "2"" of type '" "udcall_map_iterator_t""'");
    } else {
      udcall_map_iterator_t * temp = reinterpret_cast< udcall_map_iterator_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      udcall_map_erase(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *arg1 = (udcall_map_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_clear" "', argument " "1"" of type '" "udcall_map_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_t * >(argp1);
  {
    try
    {
      udcall_map_clear(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *arg1 = (udcall_map_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_size" "', argument " "1"" of type '" "udcall_map_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_t * >(argp1);
  {
    try
    {
      result = udcall_map_size(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *arg1 = (udcall_map_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udcall_map_free" "', argument " "1"" of type '" "udcall_map_t *""'"); 
  }
  arg1 = reinterpret_cast< udcall_map_t * >(argp1);
  {
    try
    {
      udcall_map_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udcall_map_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  udcall_map_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "udcall_map_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (udcall_map_t *)udcall_map_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_udcall_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_iterator_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_cmts_iterator_t *arg1 = (user_cmts_iterator_t *) 0 ;
  iterator_word arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_cmts_iterator_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_cmts_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_iterator_t_x_set" "', argument " "1"" of type '" "user_cmts_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_iterator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_cmts_iterator_t_x_set" "', argument " "2"" of type '" "iterator_word""'");
  } 
  arg2 = static_cast< iterator_word >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_iterator_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_cmts_iterator_t *arg1 = (user_cmts_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  iterator_word result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_cmts_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_iterator_t_x_get" "', argument " "1"" of type '" "user_cmts_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_iterator_t * >(argp1);
  result = (iterator_word) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_iterator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_cmts_iterator_t *arg1 = (user_cmts_iterator_t *) 0 ;
  user_cmts_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_cmts_iterator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_cmts_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_iterator_t___eq__" "', argument " "1"" of type '" "user_cmts_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_cmts_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_cmts_iterator_t___eq__" "', argument " "2"" of type '" "user_cmts_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_iterator_t___eq__" "', argument " "2"" of type '" "user_cmts_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_cmts_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_cmts_iterator_t const *)arg1)->operator ==((user_cmts_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_user_cmts_iterator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_cmts_iterator_t *arg1 = (user_cmts_iterator_t *) 0 ;
  user_cmts_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_cmts_iterator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_cmts_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_iterator_t___ne__" "', argument " "1"" of type '" "user_cmts_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_cmts_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_cmts_iterator_t___ne__" "', argument " "2"" of type '" "user_cmts_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_iterator_t___ne__" "', argument " "2"" of type '" "user_cmts_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_cmts_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_cmts_iterator_t const *)arg1)->operator !=((user_cmts_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_user_cmts_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_cmts_iterator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_cmts_iterator_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_cmts_iterator_t *)new user_cmts_iterator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_user_cmts_iterator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_cmts_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_cmts_iterator_t *arg1 = (user_cmts_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_cmts_iterator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_cmts_iterator_t" "', argument " "1"" of type '" "user_cmts_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_iterator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_cmts_iterator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_user_cmts_iterator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_cmts_iterator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_cmts_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_t *arg1 = (user_cmts_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_cmts_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_begin" "', argument " "1"" of type '" "user_cmts_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_t * >(argp1);
  {
    try
    {
      result = user_cmts_begin((std::map< treeloc_t,citem_cmt_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_cmts_iterator_t(static_cast< const user_cmts_iterator_t& >(result))), SWIGTYPE_p_user_cmts_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_t *arg1 = (user_cmts_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_cmts_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_end" "', argument " "1"" of type '" "user_cmts_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_t * >(argp1);
  {
    try
    {
      result = user_cmts_end((std::map< treeloc_t,citem_cmt_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_cmts_iterator_t(static_cast< const user_cmts_iterator_t& >(result))), SWIGTYPE_p_user_cmts_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_cmts_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_cmts_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_next" "', argument " "1"" of type '" "user_cmts_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_next" "', argument " "1"" of type '" "user_cmts_iterator_t""'");
    } else {
      user_cmts_iterator_t * temp = reinterpret_cast< user_cmts_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_cmts_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_cmts_iterator_t(static_cast< const user_cmts_iterator_t& >(result))), SWIGTYPE_p_user_cmts_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_cmts_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_cmts_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_prev" "', argument " "1"" of type '" "user_cmts_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_prev" "', argument " "1"" of type '" "user_cmts_iterator_t""'");
    } else {
      user_cmts_iterator_t * temp = reinterpret_cast< user_cmts_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_cmts_prev(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_cmts_iterator_t(static_cast< const user_cmts_iterator_t& >(result))), SWIGTYPE_p_user_cmts_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  treeloc_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_cmts_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_first" "', argument " "1"" of type '" "user_cmts_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_first" "', argument " "1"" of type '" "user_cmts_iterator_t""'");
    } else {
      user_cmts_iterator_t * temp = reinterpret_cast< user_cmts_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (treeloc_t *) &user_cmts_first(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_treeloc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  citem_cmt_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_cmts_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_second" "', argument " "1"" of type '" "user_cmts_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_second" "', argument " "1"" of type '" "user_cmts_iterator_t""'");
    } else {
      user_cmts_iterator_t * temp = reinterpret_cast< user_cmts_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (citem_cmt_t *) &user_cmts_second(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_cmt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_t *arg1 = (user_cmts_t *) 0 ;
  treeloc_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  user_cmts_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_cmts_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_find" "', argument " "1"" of type '" "user_cmts_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_cmts_find" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_find" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  {
    try
    {
      result = user_cmts_find((std::map< treeloc_t,citem_cmt_t > const *)arg1,(treeloc_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_cmts_iterator_t(static_cast< const user_cmts_iterator_t& >(result))), SWIGTYPE_p_user_cmts_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_t *arg1 = (user_cmts_t *) 0 ;
  treeloc_t *arg2 = 0 ;
  citem_cmt_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  user_cmts_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_cmts_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_insert" "', argument " "1"" of type '" "user_cmts_t *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_treeloc_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_cmts_insert" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_insert" "', argument " "2"" of type '" "treeloc_t const &""'"); 
  }
  arg2 = reinterpret_cast< treeloc_t * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_citem_cmt_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "user_cmts_insert" "', argument " "3"" of type '" "citem_cmt_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_insert" "', argument " "3"" of type '" "citem_cmt_t const &""'"); 
  }
  arg3 = reinterpret_cast< citem_cmt_t * >(argp3);
  {
    try
    {
      result = user_cmts_insert(arg1,(treeloc_t const &)*arg2,(citem_cmt_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_cmts_iterator_t(static_cast< const user_cmts_iterator_t& >(result))), SWIGTYPE_p_user_cmts_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_t *arg1 = (user_cmts_t *) 0 ;
  user_cmts_iterator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_cmts_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_erase" "', argument " "1"" of type '" "user_cmts_t *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_cmts_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_cmts_erase" "', argument " "2"" of type '" "user_cmts_iterator_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_cmts_erase" "', argument " "2"" of type '" "user_cmts_iterator_t""'");
    } else {
      user_cmts_iterator_t * temp = reinterpret_cast< user_cmts_iterator_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      user_cmts_erase(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_t *arg1 = (user_cmts_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_clear" "', argument " "1"" of type '" "user_cmts_t *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_t * >(argp1);
  {
    try
    {
      user_cmts_clear(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_t *arg1 = (user_cmts_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_size" "', argument " "1"" of type '" "user_cmts_t *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_t * >(argp1);
  {
    try
    {
      result = user_cmts_size(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_t *arg1 = (user_cmts_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_cmts_free" "', argument " "1"" of type '" "user_cmts_t *""'"); 
  }
  arg1 = reinterpret_cast< user_cmts_t * >(argp1);
  {
    try
    {
      user_cmts_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_cmts_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_cmts_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_cmts_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_cmts_t *)user_cmts_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_treeloc_t_citem_cmt_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_iterator_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_iflags_iterator_t *arg1 = (user_iflags_iterator_t *) 0 ;
  iterator_word arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_iflags_iterator_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_iflags_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_iterator_t_x_set" "', argument " "1"" of type '" "user_iflags_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_iterator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_iflags_iterator_t_x_set" "', argument " "2"" of type '" "iterator_word""'");
  } 
  arg2 = static_cast< iterator_word >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_iterator_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_iflags_iterator_t *arg1 = (user_iflags_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  iterator_word result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_iflags_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_iterator_t_x_get" "', argument " "1"" of type '" "user_iflags_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_iterator_t * >(argp1);
  result = (iterator_word) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_iterator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_iflags_iterator_t *arg1 = (user_iflags_iterator_t *) 0 ;
  user_iflags_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_iflags_iterator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_iflags_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_iterator_t___eq__" "', argument " "1"" of type '" "user_iflags_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_iflags_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_iflags_iterator_t___eq__" "', argument " "2"" of type '" "user_iflags_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_iterator_t___eq__" "', argument " "2"" of type '" "user_iflags_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_iflags_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_iflags_iterator_t const *)arg1)->operator ==((user_iflags_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_user_iflags_iterator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_iflags_iterator_t *arg1 = (user_iflags_iterator_t *) 0 ;
  user_iflags_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_iflags_iterator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_iflags_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_iterator_t___ne__" "', argument " "1"" of type '" "user_iflags_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_iflags_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_iflags_iterator_t___ne__" "', argument " "2"" of type '" "user_iflags_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_iterator_t___ne__" "', argument " "2"" of type '" "user_iflags_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_iflags_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_iflags_iterator_t const *)arg1)->operator !=((user_iflags_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_user_iflags_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_iflags_iterator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_iflags_iterator_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_iflags_iterator_t *)new user_iflags_iterator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_user_iflags_iterator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_iflags_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_iflags_iterator_t *arg1 = (user_iflags_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_iflags_iterator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_iflags_iterator_t" "', argument " "1"" of type '" "user_iflags_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_iterator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_iflags_iterator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_user_iflags_iterator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_iflags_iterator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_iflags_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_t *arg1 = (user_iflags_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_iflags_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_begin" "', argument " "1"" of type '" "user_iflags_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_t * >(argp1);
  {
    try
    {
      result = user_iflags_begin((std::map< citem_locator_t,int > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_iflags_iterator_t(static_cast< const user_iflags_iterator_t& >(result))), SWIGTYPE_p_user_iflags_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_t *arg1 = (user_iflags_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_iflags_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_end" "', argument " "1"" of type '" "user_iflags_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_t * >(argp1);
  {
    try
    {
      result = user_iflags_end((std::map< citem_locator_t,int > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_iflags_iterator_t(static_cast< const user_iflags_iterator_t& >(result))), SWIGTYPE_p_user_iflags_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_iflags_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_iflags_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_next" "', argument " "1"" of type '" "user_iflags_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_next" "', argument " "1"" of type '" "user_iflags_iterator_t""'");
    } else {
      user_iflags_iterator_t * temp = reinterpret_cast< user_iflags_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_iflags_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_iflags_iterator_t(static_cast< const user_iflags_iterator_t& >(result))), SWIGTYPE_p_user_iflags_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_iflags_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_iflags_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_prev" "', argument " "1"" of type '" "user_iflags_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_prev" "', argument " "1"" of type '" "user_iflags_iterator_t""'");
    } else {
      user_iflags_iterator_t * temp = reinterpret_cast< user_iflags_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_iflags_prev(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_iflags_iterator_t(static_cast< const user_iflags_iterator_t& >(result))), SWIGTYPE_p_user_iflags_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  citem_locator_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_iflags_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_first" "', argument " "1"" of type '" "user_iflags_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_first" "', argument " "1"" of type '" "user_iflags_iterator_t""'");
    } else {
      user_iflags_iterator_t * temp = reinterpret_cast< user_iflags_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (citem_locator_t *) &user_iflags_first(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_citem_locator_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_t *arg1 = (user_iflags_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  user_iflags_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_iflags_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_find" "', argument " "1"" of type '" "user_iflags_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_iflags_find" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_find" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  {
    try
    {
      result = user_iflags_find((std::map< citem_locator_t,int > const *)arg1,(citem_locator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_iflags_iterator_t(static_cast< const user_iflags_iterator_t& >(result))), SWIGTYPE_p_user_iflags_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_t *arg1 = (user_iflags_t *) 0 ;
  citem_locator_t *arg2 = 0 ;
  int32 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int32 temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  user_iflags_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_iflags_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_insert" "', argument " "1"" of type '" "user_iflags_t *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_citem_locator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_iflags_insert" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_insert" "', argument " "2"" of type '" "citem_locator_t const &""'"); 
  }
  arg2 = reinterpret_cast< citem_locator_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "user_iflags_insert" "', argument " "3"" of type '" "int32""'");
  } 
  temp3 = static_cast< int32 >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = user_iflags_insert(arg1,(citem_locator_t const &)*arg2,(int const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_iflags_iterator_t(static_cast< const user_iflags_iterator_t& >(result))), SWIGTYPE_p_user_iflags_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_t *arg1 = (user_iflags_t *) 0 ;
  user_iflags_iterator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_iflags_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_erase" "', argument " "1"" of type '" "user_iflags_t *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_iflags_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_iflags_erase" "', argument " "2"" of type '" "user_iflags_iterator_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_iflags_erase" "', argument " "2"" of type '" "user_iflags_iterator_t""'");
    } else {
      user_iflags_iterator_t * temp = reinterpret_cast< user_iflags_iterator_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      user_iflags_erase(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_t *arg1 = (user_iflags_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_clear" "', argument " "1"" of type '" "user_iflags_t *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_t * >(argp1);
  {
    try
    {
      user_iflags_clear(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_t *arg1 = (user_iflags_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_size" "', argument " "1"" of type '" "user_iflags_t *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_t * >(argp1);
  {
    try
    {
      result = user_iflags_size(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_t *arg1 = (user_iflags_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_iflags_free" "', argument " "1"" of type '" "user_iflags_t *""'"); 
  }
  arg1 = reinterpret_cast< user_iflags_t * >(argp1);
  {
    try
    {
      user_iflags_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_iflags_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_iflags_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_iflags_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_iflags_t *)user_iflags_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_citem_locator_t_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_iterator_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_unions_iterator_t *arg1 = (user_unions_iterator_t *) 0 ;
  iterator_word arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_unions_iterator_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_unions_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_iterator_t_x_set" "', argument " "1"" of type '" "user_unions_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_iterator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_unions_iterator_t_x_set" "', argument " "2"" of type '" "iterator_word""'");
  } 
  arg2 = static_cast< iterator_word >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_iterator_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_unions_iterator_t *arg1 = (user_unions_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  iterator_word result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_unions_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_iterator_t_x_get" "', argument " "1"" of type '" "user_unions_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_iterator_t * >(argp1);
  result = (iterator_word) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_iterator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_unions_iterator_t *arg1 = (user_unions_iterator_t *) 0 ;
  user_unions_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_unions_iterator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_unions_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_iterator_t___eq__" "', argument " "1"" of type '" "user_unions_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_unions_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_unions_iterator_t___eq__" "', argument " "2"" of type '" "user_unions_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_unions_iterator_t___eq__" "', argument " "2"" of type '" "user_unions_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_unions_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_unions_iterator_t const *)arg1)->operator ==((user_unions_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_user_unions_iterator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_unions_iterator_t *arg1 = (user_unions_iterator_t *) 0 ;
  user_unions_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_unions_iterator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_unions_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_iterator_t___ne__" "', argument " "1"" of type '" "user_unions_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_unions_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_unions_iterator_t___ne__" "', argument " "2"" of type '" "user_unions_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_unions_iterator_t___ne__" "', argument " "2"" of type '" "user_unions_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_unions_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_unions_iterator_t const *)arg1)->operator !=((user_unions_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_user_unions_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_unions_iterator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_unions_iterator_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_unions_iterator_t *)new user_unions_iterator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_user_unions_iterator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_unions_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_unions_iterator_t *arg1 = (user_unions_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_unions_iterator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_unions_iterator_t" "', argument " "1"" of type '" "user_unions_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_iterator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_unions_iterator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_user_unions_iterator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_unions_iterator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_unions_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_t *arg1 = (user_unions_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_unions_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_begin" "', argument " "1"" of type '" "user_unions_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_t * >(argp1);
  {
    try
    {
      result = user_unions_begin((std::map< unsigned int,qvector< int > > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_unions_iterator_t(static_cast< const user_unions_iterator_t& >(result))), SWIGTYPE_p_user_unions_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_t *arg1 = (user_unions_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_unions_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_end" "', argument " "1"" of type '" "user_unions_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_t * >(argp1);
  {
    try
    {
      result = user_unions_end((std::map< unsigned int,qvector< int > > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_unions_iterator_t(static_cast< const user_unions_iterator_t& >(result))), SWIGTYPE_p_user_unions_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_unions_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_unions_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_next" "', argument " "1"" of type '" "user_unions_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_unions_next" "', argument " "1"" of type '" "user_unions_iterator_t""'");
    } else {
      user_unions_iterator_t * temp = reinterpret_cast< user_unions_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_unions_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_unions_iterator_t(static_cast< const user_unions_iterator_t& >(result))), SWIGTYPE_p_user_unions_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_unions_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_unions_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_prev" "', argument " "1"" of type '" "user_unions_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_unions_prev" "', argument " "1"" of type '" "user_unions_iterator_t""'");
    } else {
      user_unions_iterator_t * temp = reinterpret_cast< user_unions_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_unions_prev(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_unions_iterator_t(static_cast< const user_unions_iterator_t& >(result))), SWIGTYPE_p_user_unions_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_unions_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_first" "', argument " "1"" of type '" "user_unions_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_unions_first" "', argument " "1"" of type '" "user_unions_iterator_t""'");
    } else {
      user_unions_iterator_t * temp = reinterpret_cast< user_unions_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (ea_t *) &user_unions_first(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  intvec_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_unions_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_second" "', argument " "1"" of type '" "user_unions_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_unions_second" "', argument " "1"" of type '" "user_unions_iterator_t""'");
    } else {
      user_unions_iterator_t * temp = reinterpret_cast< user_unions_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (intvec_t *) &user_unions_second(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_t *arg1 = (user_unions_t *) 0 ;
  ea_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ea_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  user_unions_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_unions_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_find" "', argument " "1"" of type '" "user_unions_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_unions_find" "', argument " "2"" of type '" "ea_t""'");
  } 
  temp2 = static_cast< ea_t >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = user_unions_find((std::map< unsigned int,qvector< int > > const *)arg1,(unsigned int const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_unions_iterator_t(static_cast< const user_unions_iterator_t& >(result))), SWIGTYPE_p_user_unions_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_t *arg1 = (user_unions_t *) 0 ;
  ea_t *arg2 = 0 ;
  intvec_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ea_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  user_unions_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_unions_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_insert" "', argument " "1"" of type '" "user_unions_t *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_unions_insert" "', argument " "2"" of type '" "ea_t""'");
  } 
  temp2 = static_cast< ea_t >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_qvectorT_int_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "user_unions_insert" "', argument " "3"" of type '" "intvec_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_unions_insert" "', argument " "3"" of type '" "intvec_t const &""'"); 
  }
  arg3 = reinterpret_cast< intvec_t * >(argp3);
  {
    try
    {
      result = user_unions_insert(arg1,(unsigned int const &)*arg2,(qvector< int > const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_unions_iterator_t(static_cast< const user_unions_iterator_t& >(result))), SWIGTYPE_p_user_unions_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_t *arg1 = (user_unions_t *) 0 ;
  user_unions_iterator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_unions_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_erase" "', argument " "1"" of type '" "user_unions_t *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_unions_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_unions_erase" "', argument " "2"" of type '" "user_unions_iterator_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_unions_erase" "', argument " "2"" of type '" "user_unions_iterator_t""'");
    } else {
      user_unions_iterator_t * temp = reinterpret_cast< user_unions_iterator_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      user_unions_erase(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_t *arg1 = (user_unions_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_clear" "', argument " "1"" of type '" "user_unions_t *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_t * >(argp1);
  {
    try
    {
      user_unions_clear(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_t *arg1 = (user_unions_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_size" "', argument " "1"" of type '" "user_unions_t *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_t * >(argp1);
  {
    try
    {
      result = user_unions_size(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_t *arg1 = (user_unions_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_unions_free" "', argument " "1"" of type '" "user_unions_t *""'"); 
  }
  arg1 = reinterpret_cast< user_unions_t * >(argp1);
  {
    try
    {
      user_unions_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_unions_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_unions_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_unions_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_unions_t *)user_unions_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_qvectorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_iterator_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_labels_iterator_t *arg1 = (user_labels_iterator_t *) 0 ;
  iterator_word arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_labels_iterator_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_labels_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_iterator_t_x_set" "', argument " "1"" of type '" "user_labels_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_iterator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_labels_iterator_t_x_set" "', argument " "2"" of type '" "iterator_word""'");
  } 
  arg2 = static_cast< iterator_word >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_iterator_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_labels_iterator_t *arg1 = (user_labels_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  iterator_word result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_labels_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_iterator_t_x_get" "', argument " "1"" of type '" "user_labels_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_iterator_t * >(argp1);
  result = (iterator_word) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_iterator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_labels_iterator_t *arg1 = (user_labels_iterator_t *) 0 ;
  user_labels_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_labels_iterator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_labels_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_iterator_t___eq__" "', argument " "1"" of type '" "user_labels_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_labels_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_labels_iterator_t___eq__" "', argument " "2"" of type '" "user_labels_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_labels_iterator_t___eq__" "', argument " "2"" of type '" "user_labels_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_labels_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_labels_iterator_t const *)arg1)->operator ==((user_labels_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_user_labels_iterator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_labels_iterator_t *arg1 = (user_labels_iterator_t *) 0 ;
  user_labels_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_labels_iterator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_labels_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_iterator_t___ne__" "', argument " "1"" of type '" "user_labels_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_labels_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_labels_iterator_t___ne__" "', argument " "2"" of type '" "user_labels_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_labels_iterator_t___ne__" "', argument " "2"" of type '" "user_labels_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< user_labels_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((user_labels_iterator_t const *)arg1)->operator !=((user_labels_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_user_labels_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_labels_iterator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_user_labels_iterator_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_labels_iterator_t *)new user_labels_iterator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_user_labels_iterator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_user_labels_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_labels_iterator_t *arg1 = (user_labels_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_user_labels_iterator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_user_labels_iterator_t" "', argument " "1"" of type '" "user_labels_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_iterator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *user_labels_iterator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_user_labels_iterator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *user_labels_iterator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_user_labels_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_t *arg1 = (user_labels_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_labels_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_begin" "', argument " "1"" of type '" "user_labels_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_t * >(argp1);
  {
    try
    {
      result = user_labels_begin((std::map< int,_qstring< char > > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_labels_iterator_t(static_cast< const user_labels_iterator_t& >(result))), SWIGTYPE_p_user_labels_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_t *arg1 = (user_labels_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_labels_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_end" "', argument " "1"" of type '" "user_labels_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_t * >(argp1);
  {
    try
    {
      result = user_labels_end((std::map< int,_qstring< char > > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_labels_iterator_t(static_cast< const user_labels_iterator_t& >(result))), SWIGTYPE_p_user_labels_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_labels_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_labels_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_next" "', argument " "1"" of type '" "user_labels_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_labels_next" "', argument " "1"" of type '" "user_labels_iterator_t""'");
    } else {
      user_labels_iterator_t * temp = reinterpret_cast< user_labels_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_labels_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_labels_iterator_t(static_cast< const user_labels_iterator_t& >(result))), SWIGTYPE_p_user_labels_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  user_labels_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_labels_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_prev" "', argument " "1"" of type '" "user_labels_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_labels_prev" "', argument " "1"" of type '" "user_labels_iterator_t""'");
    } else {
      user_labels_iterator_t * temp = reinterpret_cast< user_labels_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = user_labels_prev(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_labels_iterator_t(static_cast< const user_labels_iterator_t& >(result))), SWIGTYPE_p_user_labels_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_labels_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_first" "', argument " "1"" of type '" "user_labels_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_labels_first" "', argument " "1"" of type '" "user_labels_iterator_t""'");
    } else {
      user_labels_iterator_t * temp = reinterpret_cast< user_labels_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (int *) &user_labels_first(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  qstring *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_user_labels_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_second" "', argument " "1"" of type '" "user_labels_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_labels_second" "', argument " "1"" of type '" "user_labels_iterator_t""'");
    } else {
      user_labels_iterator_t * temp = reinterpret_cast< user_labels_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (qstring *) &user_labels_second(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    // bytes_container typemap(out) qstring &
    resultobj = IDAPyStr_FromUTF8AndSize((const char *) result->c_str(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_t *arg1 = (user_labels_t *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  user_labels_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_labels_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_find" "', argument " "1"" of type '" "user_labels_t const *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_labels_find" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = user_labels_find((std::map< int,_qstring< char > > const *)arg1,(int const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_labels_iterator_t(static_cast< const user_labels_iterator_t& >(result))), SWIGTYPE_p_user_labels_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_t *arg1 = (user_labels_t *) 0 ;
  int *arg2 = 0 ;
  qstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[3] ;
  user_labels_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "user_labels_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_insert" "', argument " "1"" of type '" "user_labels_t *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "user_labels_insert" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    // bytes_container qstring &, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[2]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[2], &buf, &length);
      arg3 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "user_labels_insert" "', argument " "3"" of type 'str'");
    }
  }
  {
    try
    {
      result = user_labels_insert(arg1,(int const &)*arg2,(_qstring< char > const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new user_labels_iterator_t(static_cast< const user_labels_iterator_t& >(result))), SWIGTYPE_p_user_labels_iterator_t, SWIG_POINTER_OWN |  0 );
  {
    // bytes_container qstring & typemap(freearg)
    delete arg3;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring & typemap(freearg)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_t *arg1 = (user_labels_t *) 0 ;
  user_labels_iterator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_labels_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_erase" "', argument " "1"" of type '" "user_labels_t *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_user_labels_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "user_labels_erase" "', argument " "2"" of type '" "user_labels_iterator_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_labels_erase" "', argument " "2"" of type '" "user_labels_iterator_t""'");
    } else {
      user_labels_iterator_t * temp = reinterpret_cast< user_labels_iterator_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      user_labels_erase(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_t *arg1 = (user_labels_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_clear" "', argument " "1"" of type '" "user_labels_t *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_t * >(argp1);
  {
    try
    {
      user_labels_clear(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_t *arg1 = (user_labels_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_size" "', argument " "1"" of type '" "user_labels_t *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_t * >(argp1);
  {
    try
    {
      result = user_labels_size(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_t *arg1 = (user_labels_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "user_labels_free" "', argument " "1"" of type '" "user_labels_t *""'"); 
  }
  arg1 = reinterpret_cast< user_labels_t * >(argp1);
  {
    try
    {
      user_labels_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_labels_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  user_labels_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "user_labels_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (user_labels_t *)user_labels_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int__qstringT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_iterator_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eamap_iterator_t *arg1 = (eamap_iterator_t *) 0 ;
  iterator_word arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "eamap_iterator_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eamap_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_iterator_t_x_set" "', argument " "1"" of type '" "eamap_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< eamap_iterator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "eamap_iterator_t_x_set" "', argument " "2"" of type '" "iterator_word""'");
  } 
  arg2 = static_cast< iterator_word >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_iterator_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eamap_iterator_t *arg1 = (eamap_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  iterator_word result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eamap_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_iterator_t_x_get" "', argument " "1"" of type '" "eamap_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< eamap_iterator_t * >(argp1);
  result = (iterator_word) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_iterator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eamap_iterator_t *arg1 = (eamap_iterator_t *) 0 ;
  eamap_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "eamap_iterator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eamap_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_iterator_t___eq__" "', argument " "1"" of type '" "eamap_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< eamap_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eamap_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "eamap_iterator_t___eq__" "', argument " "2"" of type '" "eamap_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eamap_iterator_t___eq__" "', argument " "2"" of type '" "eamap_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< eamap_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((eamap_iterator_t const *)arg1)->operator ==((eamap_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_eamap_iterator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eamap_iterator_t *arg1 = (eamap_iterator_t *) 0 ;
  eamap_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "eamap_iterator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eamap_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_iterator_t___ne__" "', argument " "1"" of type '" "eamap_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< eamap_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eamap_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "eamap_iterator_t___ne__" "', argument " "2"" of type '" "eamap_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eamap_iterator_t___ne__" "', argument " "2"" of type '" "eamap_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< eamap_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((eamap_iterator_t const *)arg1)->operator !=((eamap_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_eamap_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eamap_iterator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_eamap_iterator_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (eamap_iterator_t *)new eamap_iterator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eamap_iterator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_eamap_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eamap_iterator_t *arg1 = (eamap_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eamap_iterator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_eamap_iterator_t" "', argument " "1"" of type '" "eamap_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< eamap_iterator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *eamap_iterator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_eamap_iterator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *eamap_iterator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_eamap_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_t *arg1 = (eamap_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eamap_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_begin" "', argument " "1"" of type '" "eamap_t const *""'"); 
  }
  arg1 = reinterpret_cast< eamap_t * >(argp1);
  {
    try
    {
      result = eamap_begin((std::map< unsigned int,cinsnptrvec_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new eamap_iterator_t(static_cast< const eamap_iterator_t& >(result))), SWIGTYPE_p_eamap_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_t *arg1 = (eamap_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eamap_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_end" "', argument " "1"" of type '" "eamap_t const *""'"); 
  }
  arg1 = reinterpret_cast< eamap_t * >(argp1);
  {
    try
    {
      result = eamap_end((std::map< unsigned int,cinsnptrvec_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new eamap_iterator_t(static_cast< const eamap_iterator_t& >(result))), SWIGTYPE_p_eamap_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eamap_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eamap_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_next" "', argument " "1"" of type '" "eamap_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eamap_next" "', argument " "1"" of type '" "eamap_iterator_t""'");
    } else {
      eamap_iterator_t * temp = reinterpret_cast< eamap_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = eamap_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new eamap_iterator_t(static_cast< const eamap_iterator_t& >(result))), SWIGTYPE_p_eamap_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eamap_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eamap_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_prev" "', argument " "1"" of type '" "eamap_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eamap_prev" "', argument " "1"" of type '" "eamap_iterator_t""'");
    } else {
      eamap_iterator_t * temp = reinterpret_cast< eamap_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = eamap_prev(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new eamap_iterator_t(static_cast< const eamap_iterator_t& >(result))), SWIGTYPE_p_eamap_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eamap_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_first" "', argument " "1"" of type '" "eamap_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eamap_first" "', argument " "1"" of type '" "eamap_iterator_t""'");
    } else {
      eamap_iterator_t * temp = reinterpret_cast< eamap_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (ea_t *) &eamap_first(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsnptrvec_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eamap_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_second" "', argument " "1"" of type '" "eamap_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eamap_second" "', argument " "1"" of type '" "eamap_iterator_t""'");
    } else {
      eamap_iterator_t * temp = reinterpret_cast< eamap_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (cinsnptrvec_t *) &eamap_second(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_cinsn_t_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_t *arg1 = (eamap_t *) 0 ;
  ea_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ea_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eamap_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "eamap_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_find" "', argument " "1"" of type '" "eamap_t const *""'"); 
  }
  arg1 = reinterpret_cast< eamap_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "eamap_find" "', argument " "2"" of type '" "ea_t""'");
  } 
  temp2 = static_cast< ea_t >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = eamap_find((std::map< unsigned int,cinsnptrvec_t > const *)arg1,(unsigned int const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new eamap_iterator_t(static_cast< const eamap_iterator_t& >(result))), SWIGTYPE_p_eamap_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_t *arg1 = (eamap_t *) 0 ;
  ea_t *arg2 = 0 ;
  cinsnptrvec_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ea_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  eamap_iterator_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "eamap_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_insert" "', argument " "1"" of type '" "eamap_t *""'"); 
  }
  arg1 = reinterpret_cast< eamap_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "eamap_insert" "', argument " "2"" of type '" "ea_t""'");
  } 
  temp2 = static_cast< ea_t >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_qvectorT_cinsn_t_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "eamap_insert" "', argument " "3"" of type '" "cinsnptrvec_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eamap_insert" "', argument " "3"" of type '" "cinsnptrvec_t const &""'"); 
  }
  arg3 = reinterpret_cast< cinsnptrvec_t * >(argp3);
  {
    try
    {
      result = eamap_insert(arg1,(unsigned int const &)*arg2,(qvector< cinsn_t * > const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new eamap_iterator_t(static_cast< const eamap_iterator_t& >(result))), SWIGTYPE_p_eamap_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_t *arg1 = (eamap_t *) 0 ;
  eamap_iterator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "eamap_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_erase" "', argument " "1"" of type '" "eamap_t *""'"); 
  }
  arg1 = reinterpret_cast< eamap_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eamap_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "eamap_erase" "', argument " "2"" of type '" "eamap_iterator_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eamap_erase" "', argument " "2"" of type '" "eamap_iterator_t""'");
    } else {
      eamap_iterator_t * temp = reinterpret_cast< eamap_iterator_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      eamap_erase(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_t *arg1 = (eamap_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_clear" "', argument " "1"" of type '" "eamap_t *""'"); 
  }
  arg1 = reinterpret_cast< eamap_t * >(argp1);
  {
    try
    {
      eamap_clear(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_t *arg1 = (eamap_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_size" "', argument " "1"" of type '" "eamap_t *""'"); 
  }
  arg1 = reinterpret_cast< eamap_t * >(argp1);
  {
    try
    {
      result = eamap_size(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_t *arg1 = (eamap_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eamap_free" "', argument " "1"" of type '" "eamap_t *""'"); 
  }
  arg1 = reinterpret_cast< eamap_t * >(argp1);
  {
    try
    {
      eamap_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eamap_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  eamap_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "eamap_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (eamap_t *)eamap_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_iterator_t_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boundaries_iterator_t *arg1 = (boundaries_iterator_t *) 0 ;
  iterator_word arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "boundaries_iterator_t_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_boundaries_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_iterator_t_x_set" "', argument " "1"" of type '" "boundaries_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_iterator_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boundaries_iterator_t_x_set" "', argument " "2"" of type '" "iterator_word""'");
  } 
  arg2 = static_cast< iterator_word >(val2);
  if (arg1) (arg1)->x = arg2;
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_iterator_t_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boundaries_iterator_t *arg1 = (boundaries_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  iterator_word result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_boundaries_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_iterator_t_x_get" "', argument " "1"" of type '" "boundaries_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_iterator_t * >(argp1);
  result = (iterator_word) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_iterator_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boundaries_iterator_t *arg1 = (boundaries_iterator_t *) 0 ;
  boundaries_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "boundaries_iterator_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_boundaries_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_iterator_t___eq__" "', argument " "1"" of type '" "boundaries_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_boundaries_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundaries_iterator_t___eq__" "', argument " "2"" of type '" "boundaries_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundaries_iterator_t___eq__" "', argument " "2"" of type '" "boundaries_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< boundaries_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((boundaries_iterator_t const *)arg1)->operator ==((boundaries_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_boundaries_iterator_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boundaries_iterator_t *arg1 = (boundaries_iterator_t *) 0 ;
  boundaries_iterator_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "boundaries_iterator_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_boundaries_iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_iterator_t___ne__" "', argument " "1"" of type '" "boundaries_iterator_t const *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_iterator_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_boundaries_iterator_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundaries_iterator_t___ne__" "', argument " "2"" of type '" "boundaries_iterator_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundaries_iterator_t___ne__" "', argument " "2"" of type '" "boundaries_iterator_t const &""'"); 
  }
  arg2 = reinterpret_cast< boundaries_iterator_t * >(argp2);
  {
    try
    {
      result = (bool)((boundaries_iterator_t const *)arg1)->operator !=((boundaries_iterator_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_boundaries_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boundaries_iterator_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_boundaries_iterator_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (boundaries_iterator_t *)new boundaries_iterator_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boundaries_iterator_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_boundaries_iterator_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boundaries_iterator_t *arg1 = (boundaries_iterator_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_boundaries_iterator_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_boundaries_iterator_t" "', argument " "1"" of type '" "boundaries_iterator_t *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_iterator_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *boundaries_iterator_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boundaries_iterator_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *boundaries_iterator_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_boundaries_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_t *arg1 = (boundaries_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  boundaries_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_begin" "', argument " "1"" of type '" "boundaries_t const *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_t * >(argp1);
  {
    try
    {
      result = boundaries_begin((std::map< cinsn_t *,rangeset_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new boundaries_iterator_t(static_cast< const boundaries_iterator_t& >(result))), SWIGTYPE_p_boundaries_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_t *arg1 = (boundaries_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  boundaries_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_end" "', argument " "1"" of type '" "boundaries_t const *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_t * >(argp1);
  {
    try
    {
      result = boundaries_end((std::map< cinsn_t *,rangeset_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new boundaries_iterator_t(static_cast< const boundaries_iterator_t& >(result))), SWIGTYPE_p_boundaries_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  boundaries_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_boundaries_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_next" "', argument " "1"" of type '" "boundaries_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundaries_next" "', argument " "1"" of type '" "boundaries_iterator_t""'");
    } else {
      boundaries_iterator_t * temp = reinterpret_cast< boundaries_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = boundaries_next(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new boundaries_iterator_t(static_cast< const boundaries_iterator_t& >(result))), SWIGTYPE_p_boundaries_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  boundaries_iterator_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_boundaries_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_prev" "', argument " "1"" of type '" "boundaries_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundaries_prev" "', argument " "1"" of type '" "boundaries_iterator_t""'");
    } else {
      boundaries_iterator_t * temp = reinterpret_cast< boundaries_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = boundaries_prev(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new boundaries_iterator_t(static_cast< const boundaries_iterator_t& >(result))), SWIGTYPE_p_boundaries_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cinsn_t **result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_boundaries_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_first" "', argument " "1"" of type '" "boundaries_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundaries_first" "', argument " "1"" of type '" "boundaries_iterator_t""'");
    } else {
      boundaries_iterator_t * temp = reinterpret_cast< boundaries_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (cinsn_t **) &boundaries_first(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_cinsn_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_iterator_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  rangeset_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_boundaries_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_second" "', argument " "1"" of type '" "boundaries_iterator_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundaries_second" "', argument " "1"" of type '" "boundaries_iterator_t""'");
    } else {
      boundaries_iterator_t * temp = reinterpret_cast< boundaries_iterator_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (rangeset_t *) &boundaries_second(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_rangeset_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_t *arg1 = (boundaries_t *) 0 ;
  boundaries_iterator_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "boundaries_erase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_erase" "', argument " "1"" of type '" "boundaries_t *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_boundaries_iterator_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundaries_erase" "', argument " "2"" of type '" "boundaries_iterator_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundaries_erase" "', argument " "2"" of type '" "boundaries_iterator_t""'");
    } else {
      boundaries_iterator_t * temp = reinterpret_cast< boundaries_iterator_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      boundaries_erase(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_t *arg1 = (boundaries_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_clear" "', argument " "1"" of type '" "boundaries_t *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_t * >(argp1);
  {
    try
    {
      boundaries_clear(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_t *arg1 = (boundaries_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_size" "', argument " "1"" of type '" "boundaries_t *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_t * >(argp1);
  {
    try
    {
      result = boundaries_size(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_t *arg1 = (boundaries_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundaries_free" "', argument " "1"" of type '" "boundaries_t *""'"); 
  }
  arg1 = reinterpret_cast< boundaries_t * >(argp1);
  {
    try
    {
      boundaries_free(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  {
    Py_INCREF(Py_None);
    resultobj = Py_None;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundaries_new(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  boundaries_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "boundaries_new", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (boundaries_t *)boundaries_new();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_cinsn_t_p_rangeset_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "_kludge_use_TPopupMenu", _wrap__kludge_use_TPopupMenu, METH_O, "_kludge_use_TPopupMenu(m)"},
	 { "user_numforms_t_at", _wrap_user_numforms_t_at, METH_VARARGS, "user_numforms_t_at(self, _Keyval) -> number_format_t"},
	 { "user_numforms_t_size", _wrap_user_numforms_t_size, METH_O, "user_numforms_t_size(self) -> size_t"},
	 { "new_user_numforms_t", _wrap_new_user_numforms_t, METH_NOARGS, "new_user_numforms_t() -> user_numforms_t"},
	 { "delete_user_numforms_t", _wrap_delete_user_numforms_t, METH_O, "delete_user_numforms_t(self)"},
	 { "user_numforms_t_swigregister", user_numforms_t_swigregister, METH_O, NULL},
	 { "user_numforms_t_swiginit", user_numforms_t_swiginit, METH_VARARGS, NULL},
	 { "lvar_mapping_t_at", _wrap_lvar_mapping_t_at, METH_VARARGS, "lvar_mapping_t_at(self, _Keyval) -> lvar_locator_t"},
	 { "lvar_mapping_t_size", _wrap_lvar_mapping_t_size, METH_O, "lvar_mapping_t_size(self) -> size_t"},
	 { "new_lvar_mapping_t", _wrap_new_lvar_mapping_t, METH_NOARGS, "new_lvar_mapping_t() -> lvar_mapping_t"},
	 { "delete_lvar_mapping_t", _wrap_delete_lvar_mapping_t, METH_O, "delete_lvar_mapping_t(self)"},
	 { "lvar_mapping_t_swigregister", lvar_mapping_t_swigregister, METH_O, NULL},
	 { "lvar_mapping_t_swiginit", lvar_mapping_t_swiginit, METH_VARARGS, NULL},
	 { "new_hexwarns_t", _wrap_new_hexwarns_t, METH_VARARGS, "\n"
		"hexwarns_t()\n"
		"new_hexwarns_t(x) -> hexwarns_t\n"
		""},
	 { "delete_hexwarns_t", _wrap_delete_hexwarns_t, METH_O, "delete_hexwarns_t(self)"},
	 { "hexwarns_t_push_back", _wrap_hexwarns_t_push_back, METH_VARARGS, "\n"
		"hexwarns_t_push_back(self, x)\n"
		"hexwarns_t_push_back(self) -> hexwarn_t\n"
		""},
	 { "hexwarns_t_pop_back", _wrap_hexwarns_t_pop_back, METH_O, "hexwarns_t_pop_back(self)"},
	 { "hexwarns_t_size", _wrap_hexwarns_t_size, METH_O, "hexwarns_t_size(self) -> size_t"},
	 { "hexwarns_t_empty", _wrap_hexwarns_t_empty, METH_O, "hexwarns_t_empty(self) -> bool"},
	 { "hexwarns_t_at", _wrap_hexwarns_t_at, METH_VARARGS, "hexwarns_t_at(self, _idx) -> hexwarn_t"},
	 { "hexwarns_t_qclear", _wrap_hexwarns_t_qclear, METH_O, "hexwarns_t_qclear(self)"},
	 { "hexwarns_t_clear", _wrap_hexwarns_t_clear, METH_O, "hexwarns_t_clear(self)"},
	 { "hexwarns_t_resize", _wrap_hexwarns_t_resize, METH_VARARGS, "\n"
		"hexwarns_t_resize(self, _newsize, x)\n"
		"hexwarns_t_resize(self, _newsize)\n"
		""},
	 { "hexwarns_t_grow", _wrap_hexwarns_t_grow, METH_VARARGS, "hexwarns_t_grow(self, x=hexwarn_t())"},
	 { "hexwarns_t_capacity", _wrap_hexwarns_t_capacity, METH_O, "hexwarns_t_capacity(self) -> size_t"},
	 { "hexwarns_t_reserve", _wrap_hexwarns_t_reserve, METH_VARARGS, "hexwarns_t_reserve(self, cnt)"},
	 { "hexwarns_t_truncate", _wrap_hexwarns_t_truncate, METH_O, "hexwarns_t_truncate(self)"},
	 { "hexwarns_t_swap", _wrap_hexwarns_t_swap, METH_VARARGS, "hexwarns_t_swap(self, r)"},
	 { "hexwarns_t_extract", _wrap_hexwarns_t_extract, METH_O, "hexwarns_t_extract(self) -> hexwarn_t"},
	 { "hexwarns_t_inject", _wrap_hexwarns_t_inject, METH_VARARGS, "hexwarns_t_inject(self, s, len)"},
	 { "hexwarns_t___eq__", _wrap_hexwarns_t___eq__, METH_VARARGS, "hexwarns_t___eq__(self, r) -> bool"},
	 { "hexwarns_t___ne__", _wrap_hexwarns_t___ne__, METH_VARARGS, "hexwarns_t___ne__(self, r) -> bool"},
	 { "hexwarns_t_begin", _wrap_hexwarns_t_begin, METH_VARARGS, "\n"
		"hexwarns_t_begin(self) -> hexwarn_t\n"
		"hexwarns_t_begin(self) -> hexwarn_t\n"
		""},
	 { "hexwarns_t_end", _wrap_hexwarns_t_end, METH_VARARGS, "\n"
		"hexwarns_t_end(self) -> hexwarn_t\n"
		"hexwarns_t_end(self) -> hexwarn_t\n"
		""},
	 { "hexwarns_t_insert", _wrap_hexwarns_t_insert, METH_VARARGS, "hexwarns_t_insert(self, it, x) -> hexwarn_t"},
	 { "hexwarns_t_erase", _wrap_hexwarns_t_erase, METH_VARARGS, "\n"
		"hexwarns_t_erase(self, it) -> hexwarn_t\n"
		"hexwarns_t_erase(self, first, last) -> hexwarn_t\n"
		""},
	 { "hexwarns_t_find", _wrap_hexwarns_t_find, METH_VARARGS, "\n"
		"hexwarns_t_find(self, x) -> hexwarn_t\n"
		"hexwarns_t_find(self, x) -> hexwarn_t\n"
		""},
	 { "hexwarns_t_has", _wrap_hexwarns_t_has, METH_VARARGS, "hexwarns_t_has(self, x) -> bool"},
	 { "hexwarns_t_add_unique", _wrap_hexwarns_t_add_unique, METH_VARARGS, "hexwarns_t_add_unique(self, x) -> bool"},
	 { "hexwarns_t__del", _wrap_hexwarns_t__del, METH_VARARGS, "hexwarns_t__del(self, x) -> bool"},
	 { "hexwarns_t___len__", _wrap_hexwarns_t___len__, METH_O, "hexwarns_t___len__(self) -> size_t"},
	 { "hexwarns_t___getitem__", _wrap_hexwarns_t___getitem__, METH_VARARGS, "hexwarns_t___getitem__(self, i) -> hexwarn_t"},
	 { "hexwarns_t___setitem__", _wrap_hexwarns_t___setitem__, METH_VARARGS, "hexwarns_t___setitem__(self, i, v)"},
	 { "hexwarns_t_swigregister", hexwarns_t_swigregister, METH_O, NULL},
	 { "hexwarns_t_swiginit", hexwarns_t_swiginit, METH_VARARGS, NULL},
	 { "new_ctree_items_t", _wrap_new_ctree_items_t, METH_VARARGS, "\n"
		"ctree_items_t()\n"
		"new_ctree_items_t(x) -> ctree_items_t\n"
		""},
	 { "delete_ctree_items_t", _wrap_delete_ctree_items_t, METH_O, "delete_ctree_items_t(self)"},
	 { "ctree_items_t_push_back", _wrap_ctree_items_t_push_back, METH_VARARGS, "\n"
		"ctree_items_t_push_back(self, x)\n"
		"ctree_items_t_push_back(self) -> citem_t *&\n"
		""},
	 { "ctree_items_t_pop_back", _wrap_ctree_items_t_pop_back, METH_O, "ctree_items_t_pop_back(self)"},
	 { "ctree_items_t_size", _wrap_ctree_items_t_size, METH_O, "ctree_items_t_size(self) -> size_t"},
	 { "ctree_items_t_empty", _wrap_ctree_items_t_empty, METH_O, "ctree_items_t_empty(self) -> bool"},
	 { "ctree_items_t_qclear", _wrap_ctree_items_t_qclear, METH_O, "ctree_items_t_qclear(self)"},
	 { "ctree_items_t_clear", _wrap_ctree_items_t_clear, METH_O, "ctree_items_t_clear(self)"},
	 { "ctree_items_t_resize", _wrap_ctree_items_t_resize, METH_VARARGS, "\n"
		"ctree_items_t_resize(self, _newsize, x)\n"
		"ctree_items_t_resize(self, _newsize)\n"
		""},
	 { "ctree_items_t_capacity", _wrap_ctree_items_t_capacity, METH_O, "ctree_items_t_capacity(self) -> size_t"},
	 { "ctree_items_t_reserve", _wrap_ctree_items_t_reserve, METH_VARARGS, "ctree_items_t_reserve(self, cnt)"},
	 { "ctree_items_t_truncate", _wrap_ctree_items_t_truncate, METH_O, "ctree_items_t_truncate(self)"},
	 { "ctree_items_t_swap", _wrap_ctree_items_t_swap, METH_VARARGS, "ctree_items_t_swap(self, r)"},
	 { "ctree_items_t_extract", _wrap_ctree_items_t_extract, METH_O, "ctree_items_t_extract(self) -> citem_t **"},
	 { "ctree_items_t_inject", _wrap_ctree_items_t_inject, METH_VARARGS, "ctree_items_t_inject(self, s, len)"},
	 { "ctree_items_t___eq__", _wrap_ctree_items_t___eq__, METH_VARARGS, "ctree_items_t___eq__(self, r) -> bool"},
	 { "ctree_items_t___ne__", _wrap_ctree_items_t___ne__, METH_VARARGS, "ctree_items_t___ne__(self, r) -> bool"},
	 { "ctree_items_t_begin", _wrap_ctree_items_t_begin, METH_VARARGS, "\n"
		"ctree_items_t_begin(self) -> qvector< citem_t * >::iterator\n"
		"ctree_items_t_begin(self) -> qvector< citem_t * >::const_iterator\n"
		""},
	 { "ctree_items_t_end", _wrap_ctree_items_t_end, METH_VARARGS, "\n"
		"ctree_items_t_end(self) -> qvector< citem_t * >::iterator\n"
		"ctree_items_t_end(self) -> qvector< citem_t * >::const_iterator\n"
		""},
	 { "ctree_items_t_insert", _wrap_ctree_items_t_insert, METH_VARARGS, "ctree_items_t_insert(self, it, x) -> qvector< citem_t * >::iterator"},
	 { "ctree_items_t_erase", _wrap_ctree_items_t_erase, METH_VARARGS, "\n"
		"ctree_items_t_erase(self, it) -> qvector< citem_t * >::iterator\n"
		"ctree_items_t_erase(self, first, last) -> qvector< citem_t * >::iterator\n"
		""},
	 { "ctree_items_t_find", _wrap_ctree_items_t_find, METH_VARARGS, "\n"
		"ctree_items_t_find(self, x) -> qvector< citem_t * >::iterator\n"
		"ctree_items_t_find(self, x) -> qvector< citem_t * >::const_iterator\n"
		""},
	 { "ctree_items_t_has", _wrap_ctree_items_t_has, METH_VARARGS, "ctree_items_t_has(self, x) -> bool"},
	 { "ctree_items_t_add_unique", _wrap_ctree_items_t_add_unique, METH_VARARGS, "ctree_items_t_add_unique(self, x) -> bool"},
	 { "ctree_items_t__del", _wrap_ctree_items_t__del, METH_VARARGS, "ctree_items_t__del(self, x) -> bool"},
	 { "ctree_items_t___len__", _wrap_ctree_items_t___len__, METH_O, "ctree_items_t___len__(self) -> size_t"},
	 { "ctree_items_t___getitem__", _wrap_ctree_items_t___getitem__, METH_VARARGS, "ctree_items_t___getitem__(self, i) -> citem_t"},
	 { "ctree_items_t___setitem__", _wrap_ctree_items_t___setitem__, METH_VARARGS, "ctree_items_t___setitem__(self, i, v)"},
	 { "ctree_items_t_swigregister", ctree_items_t_swigregister, METH_O, NULL},
	 { "ctree_items_t_swiginit", ctree_items_t_swiginit, METH_VARARGS, NULL},
	 { "user_labels_t_at", _wrap_user_labels_t_at, METH_VARARGS, "user_labels_t_at(self, _Keyval) -> _qstring< char > &"},
	 { "user_labels_t_size", _wrap_user_labels_t_size, METH_O, "user_labels_t_size(self) -> size_t"},
	 { "new_user_labels_t", _wrap_new_user_labels_t, METH_NOARGS, "new_user_labels_t() -> user_labels_t"},
	 { "delete_user_labels_t", _wrap_delete_user_labels_t, METH_O, "delete_user_labels_t(self)"},
	 { "user_labels_t_swigregister", user_labels_t_swigregister, METH_O, NULL},
	 { "user_labels_t_swiginit", user_labels_t_swiginit, METH_VARARGS, NULL},
	 { "user_cmts_t_at", _wrap_user_cmts_t_at, METH_VARARGS, "user_cmts_t_at(self, _Keyval) -> citem_cmt_t"},
	 { "user_cmts_t_size", _wrap_user_cmts_t_size, METH_O, "user_cmts_t_size(self) -> size_t"},
	 { "new_user_cmts_t", _wrap_new_user_cmts_t, METH_NOARGS, "new_user_cmts_t() -> user_cmts_t"},
	 { "delete_user_cmts_t", _wrap_delete_user_cmts_t, METH_O, "delete_user_cmts_t(self)"},
	 { "user_cmts_t_swigregister", user_cmts_t_swigregister, METH_O, NULL},
	 { "user_cmts_t_swiginit", user_cmts_t_swiginit, METH_VARARGS, NULL},
	 { "user_iflags_t_at", _wrap_user_iflags_t_at, METH_VARARGS, "user_iflags_t_at(self, _Keyval) -> int &"},
	 { "user_iflags_t_size", _wrap_user_iflags_t_size, METH_O, "user_iflags_t_size(self) -> size_t"},
	 { "new_user_iflags_t", _wrap_new_user_iflags_t, METH_NOARGS, "new_user_iflags_t() -> user_iflags_t"},
	 { "delete_user_iflags_t", _wrap_delete_user_iflags_t, METH_O, "delete_user_iflags_t(self)"},
	 { "user_iflags_t_swigregister", user_iflags_t_swigregister, METH_O, NULL},
	 { "user_iflags_t_swiginit", user_iflags_t_swiginit, METH_VARARGS, NULL},
	 { "user_unions_t_at", _wrap_user_unions_t_at, METH_VARARGS, "user_unions_t_at(self, _Keyval) -> qvector< int > &"},
	 { "user_unions_t_size", _wrap_user_unions_t_size, METH_O, "user_unions_t_size(self) -> size_t"},
	 { "new_user_unions_t", _wrap_new_user_unions_t, METH_NOARGS, "new_user_unions_t() -> user_unions_t"},
	 { "delete_user_unions_t", _wrap_delete_user_unions_t, METH_O, "delete_user_unions_t(self)"},
	 { "user_unions_t_swigregister", user_unions_t_swigregister, METH_O, NULL},
	 { "user_unions_t_swiginit", user_unions_t_swiginit, METH_VARARGS, NULL},
	 { "new_cinsnptrvec_t", _wrap_new_cinsnptrvec_t, METH_VARARGS, "\n"
		"cinsnptrvec_t()\n"
		"new_cinsnptrvec_t(x) -> cinsnptrvec_t\n"
		""},
	 { "delete_cinsnptrvec_t", _wrap_delete_cinsnptrvec_t, METH_O, "delete_cinsnptrvec_t(self)"},
	 { "cinsnptrvec_t_push_back", _wrap_cinsnptrvec_t_push_back, METH_VARARGS, "\n"
		"cinsnptrvec_t_push_back(self, x)\n"
		"cinsnptrvec_t_push_back(self) -> cinsn_t *&\n"
		""},
	 { "cinsnptrvec_t_pop_back", _wrap_cinsnptrvec_t_pop_back, METH_O, "cinsnptrvec_t_pop_back(self)"},
	 { "cinsnptrvec_t_size", _wrap_cinsnptrvec_t_size, METH_O, "cinsnptrvec_t_size(self) -> size_t"},
	 { "cinsnptrvec_t_empty", _wrap_cinsnptrvec_t_empty, METH_O, "cinsnptrvec_t_empty(self) -> bool"},
	 { "cinsnptrvec_t_qclear", _wrap_cinsnptrvec_t_qclear, METH_O, "cinsnptrvec_t_qclear(self)"},
	 { "cinsnptrvec_t_clear", _wrap_cinsnptrvec_t_clear, METH_O, "cinsnptrvec_t_clear(self)"},
	 { "cinsnptrvec_t_resize", _wrap_cinsnptrvec_t_resize, METH_VARARGS, "\n"
		"cinsnptrvec_t_resize(self, _newsize, x)\n"
		"cinsnptrvec_t_resize(self, _newsize)\n"
		""},
	 { "cinsnptrvec_t_capacity", _wrap_cinsnptrvec_t_capacity, METH_O, "cinsnptrvec_t_capacity(self) -> size_t"},
	 { "cinsnptrvec_t_reserve", _wrap_cinsnptrvec_t_reserve, METH_VARARGS, "cinsnptrvec_t_reserve(self, cnt)"},
	 { "cinsnptrvec_t_truncate", _wrap_cinsnptrvec_t_truncate, METH_O, "cinsnptrvec_t_truncate(self)"},
	 { "cinsnptrvec_t_swap", _wrap_cinsnptrvec_t_swap, METH_VARARGS, "cinsnptrvec_t_swap(self, r)"},
	 { "cinsnptrvec_t_extract", _wrap_cinsnptrvec_t_extract, METH_O, "cinsnptrvec_t_extract(self) -> cinsn_t **"},
	 { "cinsnptrvec_t_inject", _wrap_cinsnptrvec_t_inject, METH_VARARGS, "cinsnptrvec_t_inject(self, s, len)"},
	 { "cinsnptrvec_t___eq__", _wrap_cinsnptrvec_t___eq__, METH_VARARGS, "cinsnptrvec_t___eq__(self, r) -> bool"},
	 { "cinsnptrvec_t___ne__", _wrap_cinsnptrvec_t___ne__, METH_VARARGS, "cinsnptrvec_t___ne__(self, r) -> bool"},
	 { "cinsnptrvec_t_begin", _wrap_cinsnptrvec_t_begin, METH_VARARGS, "\n"
		"cinsnptrvec_t_begin(self) -> qvector< cinsn_t * >::iterator\n"
		"cinsnptrvec_t_begin(self) -> qvector< cinsn_t * >::const_iterator\n"
		""},
	 { "cinsnptrvec_t_end", _wrap_cinsnptrvec_t_end, METH_VARARGS, "\n"
		"cinsnptrvec_t_end(self) -> qvector< cinsn_t * >::iterator\n"
		"cinsnptrvec_t_end(self) -> qvector< cinsn_t * >::const_iterator\n"
		""},
	 { "cinsnptrvec_t_insert", _wrap_cinsnptrvec_t_insert, METH_VARARGS, "cinsnptrvec_t_insert(self, it, x) -> qvector< cinsn_t * >::iterator"},
	 { "cinsnptrvec_t_erase", _wrap_cinsnptrvec_t_erase, METH_VARARGS, "\n"
		"cinsnptrvec_t_erase(self, it) -> qvector< cinsn_t * >::iterator\n"
		"cinsnptrvec_t_erase(self, first, last) -> qvector< cinsn_t * >::iterator\n"
		""},
	 { "cinsnptrvec_t_find", _wrap_cinsnptrvec_t_find, METH_VARARGS, "\n"
		"cinsnptrvec_t_find(self, x) -> qvector< cinsn_t * >::iterator\n"
		"cinsnptrvec_t_find(self, x) -> qvector< cinsn_t * >::const_iterator\n"
		""},
	 { "cinsnptrvec_t_has", _wrap_cinsnptrvec_t_has, METH_VARARGS, "cinsnptrvec_t_has(self, x) -> bool"},
	 { "cinsnptrvec_t_add_unique", _wrap_cinsnptrvec_t_add_unique, METH_VARARGS, "cinsnptrvec_t_add_unique(self, x) -> bool"},
	 { "cinsnptrvec_t__del", _wrap_cinsnptrvec_t__del, METH_VARARGS, "cinsnptrvec_t__del(self, x) -> bool"},
	 { "cinsnptrvec_t___len__", _wrap_cinsnptrvec_t___len__, METH_O, "cinsnptrvec_t___len__(self) -> size_t"},
	 { "cinsnptrvec_t___getitem__", _wrap_cinsnptrvec_t___getitem__, METH_VARARGS, "cinsnptrvec_t___getitem__(self, i) -> cinsn_t"},
	 { "cinsnptrvec_t___setitem__", _wrap_cinsnptrvec_t___setitem__, METH_VARARGS, "cinsnptrvec_t___setitem__(self, i, v)"},
	 { "cinsnptrvec_t_swigregister", cinsnptrvec_t_swigregister, METH_O, NULL},
	 { "cinsnptrvec_t_swiginit", cinsnptrvec_t_swiginit, METH_VARARGS, NULL},
	 { "eamap_t_at", _wrap_eamap_t_at, METH_VARARGS, "eamap_t_at(self, _Keyval) -> cinsnptrvec_t"},
	 { "eamap_t_size", _wrap_eamap_t_size, METH_O, "eamap_t_size(self) -> size_t"},
	 { "new_eamap_t", _wrap_new_eamap_t, METH_NOARGS, "new_eamap_t() -> eamap_t"},
	 { "delete_eamap_t", _wrap_delete_eamap_t, METH_O, "delete_eamap_t(self)"},
	 { "eamap_t_swigregister", eamap_t_swigregister, METH_O, NULL},
	 { "eamap_t_swiginit", eamap_t_swiginit, METH_VARARGS, NULL},
	 { "boundaries_t_at", _wrap_boundaries_t_at, METH_VARARGS, "boundaries_t_at(self, _Keyval) -> rangeset_t"},
	 { "boundaries_t_size", _wrap_boundaries_t_size, METH_O, "boundaries_t_size(self) -> size_t"},
	 { "new_boundaries_t", _wrap_new_boundaries_t, METH_NOARGS, "new_boundaries_t() -> boundaries_t"},
	 { "delete_boundaries_t", _wrap_delete_boundaries_t, METH_O, "delete_boundaries_t(self)"},
	 { "boundaries_t_swigregister", boundaries_t_swigregister, METH_O, NULL},
	 { "boundaries_t_swiginit", boundaries_t_swiginit, METH_VARARGS, NULL},
	 { "user_iflags_second", _wrap_user_iflags_second, METH_O, "user_iflags_second(p) -> int32 const &"},
	 { "new_cfuncptr_t", _wrap_new_cfuncptr_t, METH_VARARGS, "\n"
		"cfuncptr_t(p)\n"
		"new_cfuncptr_t(r) -> cfuncptr_t\n"
		""},
	 { "cfuncptr_t_reset", _wrap_cfuncptr_t_reset, METH_O, "cfuncptr_t_reset(self)"},
	 { "cfuncptr_t___deref__", _wrap_cfuncptr_t___deref__, METH_O, "cfuncptr_t___deref__(self) -> cfunc_t"},
	 { "cfuncptr_t___ref__", _wrap_cfuncptr_t___ref__, METH_O, "cfuncptr_t___ref__(self) -> cfunc_t"},
	 { "delete_cfuncptr_t", _wrap_delete_cfuncptr_t, METH_O, "delete_cfuncptr_t(self)"},
	 { "cfuncptr_t_entry_ea_set", _wrap_cfuncptr_t_entry_ea_set, METH_VARARGS, "cfuncptr_t_entry_ea_set(self, entry_ea)"},
	 { "cfuncptr_t_entry_ea_get", _wrap_cfuncptr_t_entry_ea_get, METH_O, "cfuncptr_t_entry_ea_get(self) -> ea_t"},
	 { "cfuncptr_t_mba_set", _wrap_cfuncptr_t_mba_set, METH_VARARGS, "cfuncptr_t_mba_set(self, mba)"},
	 { "cfuncptr_t_mba_get", _wrap_cfuncptr_t_mba_get, METH_O, "cfuncptr_t_mba_get(self) -> mbl_array_t *"},
	 { "cfuncptr_t_body_set", _wrap_cfuncptr_t_body_set, METH_VARARGS, "cfuncptr_t_body_set(self, body)"},
	 { "cfuncptr_t_body_get", _wrap_cfuncptr_t_body_get, METH_O, "cfuncptr_t_body_get(self) -> cinsn_t"},
	 { "cfuncptr_t_argidx_get", _wrap_cfuncptr_t_argidx_get, METH_O, "cfuncptr_t_argidx_get(self) -> intvec_t &"},
	 { "cfuncptr_t_maturity_set", _wrap_cfuncptr_t_maturity_set, METH_VARARGS, "cfuncptr_t_maturity_set(self, maturity)"},
	 { "cfuncptr_t_maturity_get", _wrap_cfuncptr_t_maturity_get, METH_O, "cfuncptr_t_maturity_get(self) -> ctree_maturity_t"},
	 { "cfuncptr_t_user_labels_set", _wrap_cfuncptr_t_user_labels_set, METH_VARARGS, "cfuncptr_t_user_labels_set(self, user_labels)"},
	 { "cfuncptr_t_user_labels_get", _wrap_cfuncptr_t_user_labels_get, METH_O, "cfuncptr_t_user_labels_get(self) -> user_labels_t"},
	 { "cfuncptr_t_user_cmts_set", _wrap_cfuncptr_t_user_cmts_set, METH_VARARGS, "cfuncptr_t_user_cmts_set(self, user_cmts)"},
	 { "cfuncptr_t_user_cmts_get", _wrap_cfuncptr_t_user_cmts_get, METH_O, "cfuncptr_t_user_cmts_get(self) -> user_cmts_t"},
	 { "cfuncptr_t_numforms_set", _wrap_cfuncptr_t_numforms_set, METH_VARARGS, "cfuncptr_t_numforms_set(self, numforms)"},
	 { "cfuncptr_t_numforms_get", _wrap_cfuncptr_t_numforms_get, METH_O, "cfuncptr_t_numforms_get(self) -> user_numforms_t"},
	 { "cfuncptr_t_user_iflags_set", _wrap_cfuncptr_t_user_iflags_set, METH_VARARGS, "cfuncptr_t_user_iflags_set(self, user_iflags)"},
	 { "cfuncptr_t_user_iflags_get", _wrap_cfuncptr_t_user_iflags_get, METH_O, "cfuncptr_t_user_iflags_get(self) -> user_iflags_t"},
	 { "cfuncptr_t_user_unions_set", _wrap_cfuncptr_t_user_unions_set, METH_VARARGS, "cfuncptr_t_user_unions_set(self, user_unions)"},
	 { "cfuncptr_t_user_unions_get", _wrap_cfuncptr_t_user_unions_get, METH_O, "cfuncptr_t_user_unions_get(self) -> user_unions_t"},
	 { "cfuncptr_t_refcnt_set", _wrap_cfuncptr_t_refcnt_set, METH_VARARGS, "cfuncptr_t_refcnt_set(self, refcnt)"},
	 { "cfuncptr_t_refcnt_get", _wrap_cfuncptr_t_refcnt_get, METH_O, "cfuncptr_t_refcnt_get(self) -> int"},
	 { "cfuncptr_t_statebits_set", _wrap_cfuncptr_t_statebits_set, METH_VARARGS, "cfuncptr_t_statebits_set(self, statebits)"},
	 { "cfuncptr_t_statebits_get", _wrap_cfuncptr_t_statebits_get, METH_O, "cfuncptr_t_statebits_get(self) -> int"},
	 { "cfuncptr_t_hdrlines_set", _wrap_cfuncptr_t_hdrlines_set, METH_VARARGS, "cfuncptr_t_hdrlines_set(self, hdrlines)"},
	 { "cfuncptr_t_hdrlines_get", _wrap_cfuncptr_t_hdrlines_get, METH_O, "cfuncptr_t_hdrlines_get(self) -> int"},
	 { "cfuncptr_t_treeitems_set", _wrap_cfuncptr_t_treeitems_set, METH_VARARGS, "cfuncptr_t_treeitems_set(self, treeitems)"},
	 { "cfuncptr_t_treeitems_get", _wrap_cfuncptr_t_treeitems_get, METH_O, "cfuncptr_t_treeitems_get(self) -> ctree_items_t"},
	 { "cfuncptr_t_release", _wrap_cfuncptr_t_release, METH_O, "cfuncptr_t_release(self)"},
	 { "cfuncptr_t_build_c_tree", _wrap_cfuncptr_t_build_c_tree, METH_O, "cfuncptr_t_build_c_tree(self)"},
	 { "cfuncptr_t_verify", _wrap_cfuncptr_t_verify, METH_VARARGS, "cfuncptr_t_verify(self, aul, even_without_debugger)"},
	 { "cfuncptr_t_print_dcl", _wrap_cfuncptr_t_print_dcl, METH_O, "cfuncptr_t_print_dcl(self)"},
	 { "cfuncptr_t_print_func", _wrap_cfuncptr_t_print_func, METH_VARARGS, "cfuncptr_t_print_func(self, vp)"},
	 { "cfuncptr_t_get_func_type", _wrap_cfuncptr_t_get_func_type, METH_VARARGS, "cfuncptr_t_get_func_type(self, type) -> bool"},
	 { "cfuncptr_t_get_lvars", _wrap_cfuncptr_t_get_lvars, METH_O, "cfuncptr_t_get_lvars(self) -> lvars_t"},
	 { "cfuncptr_t_get_stkoff_delta", _wrap_cfuncptr_t_get_stkoff_delta, METH_O, "cfuncptr_t_get_stkoff_delta(self) -> sval_t"},
	 { "cfuncptr_t_find_label", _wrap_cfuncptr_t_find_label, METH_VARARGS, "cfuncptr_t_find_label(self, label) -> citem_t"},
	 { "cfuncptr_t_remove_unused_labels", _wrap_cfuncptr_t_remove_unused_labels, METH_O, "cfuncptr_t_remove_unused_labels(self)"},
	 { "cfuncptr_t_get_user_cmt", _wrap_cfuncptr_t_get_user_cmt, METH_VARARGS, "cfuncptr_t_get_user_cmt(self, loc, rt) -> char const *"},
	 { "cfuncptr_t_set_user_cmt", _wrap_cfuncptr_t_set_user_cmt, METH_VARARGS, "cfuncptr_t_set_user_cmt(self, loc, cmt)"},
	 { "cfuncptr_t_get_user_iflags", _wrap_cfuncptr_t_get_user_iflags, METH_VARARGS, "cfuncptr_t_get_user_iflags(self, loc) -> int32"},
	 { "cfuncptr_t_set_user_iflags", _wrap_cfuncptr_t_set_user_iflags, METH_VARARGS, "cfuncptr_t_set_user_iflags(self, loc, iflags)"},
	 { "cfuncptr_t_has_orphan_cmts", _wrap_cfuncptr_t_has_orphan_cmts, METH_O, "cfuncptr_t_has_orphan_cmts(self) -> bool"},
	 { "cfuncptr_t_del_orphan_cmts", _wrap_cfuncptr_t_del_orphan_cmts, METH_O, "cfuncptr_t_del_orphan_cmts(self) -> int"},
	 { "cfuncptr_t_get_user_union_selection", _wrap_cfuncptr_t_get_user_union_selection, METH_VARARGS, "cfuncptr_t_get_user_union_selection(self, ea, path) -> bool"},
	 { "cfuncptr_t_set_user_union_selection", _wrap_cfuncptr_t_set_user_union_selection, METH_VARARGS, "cfuncptr_t_set_user_union_selection(self, ea, path)"},
	 { "cfuncptr_t_save_user_labels", _wrap_cfuncptr_t_save_user_labels, METH_O, "cfuncptr_t_save_user_labels(self)"},
	 { "cfuncptr_t_save_user_cmts", _wrap_cfuncptr_t_save_user_cmts, METH_O, "cfuncptr_t_save_user_cmts(self)"},
	 { "cfuncptr_t_save_user_numforms", _wrap_cfuncptr_t_save_user_numforms, METH_O, "cfuncptr_t_save_user_numforms(self)"},
	 { "cfuncptr_t_save_user_iflags", _wrap_cfuncptr_t_save_user_iflags, METH_O, "cfuncptr_t_save_user_iflags(self)"},
	 { "cfuncptr_t_save_user_unions", _wrap_cfuncptr_t_save_user_unions, METH_O, "cfuncptr_t_save_user_unions(self)"},
	 { "cfuncptr_t_get_line_item", _wrap_cfuncptr_t_get_line_item, METH_VARARGS, "cfuncptr_t_get_line_item(self, line, x, is_ctree_line, phead, pitem, ptail) -> bool"},
	 { "cfuncptr_t_get_warnings", _wrap_cfuncptr_t_get_warnings, METH_O, "cfuncptr_t_get_warnings(self) -> hexwarns_t"},
	 { "cfuncptr_t_get_eamap", _wrap_cfuncptr_t_get_eamap, METH_O, "cfuncptr_t_get_eamap(self) -> eamap_t"},
	 { "cfuncptr_t_get_boundaries", _wrap_cfuncptr_t_get_boundaries, METH_O, "cfuncptr_t_get_boundaries(self) -> boundaries_t"},
	 { "cfuncptr_t_get_pseudocode", _wrap_cfuncptr_t_get_pseudocode, METH_O, "cfuncptr_t_get_pseudocode(self) -> strvec_t const &"},
	 { "cfuncptr_t_gather_derefs", _wrap_cfuncptr_t_gather_derefs, METH_VARARGS, "cfuncptr_t_gather_derefs(self, ci, udm=None) -> bool"},
	 { "cfuncptr_t_find_item_coords", _wrap_cfuncptr_t_find_item_coords, METH_VARARGS, "\n"
		"cfuncptr_t_find_item_coords(self, item, px, py) -> bool\n"
		"cfuncptr_t_find_item_coords(self, item) -> PyObject *\n"
		""},
	 { "cfuncptr_t___str__", _wrap_cfuncptr_t___str__, METH_O, "cfuncptr_t___str__(self) -> qstring"},
	 { "cfuncptr_t_swigregister", cfuncptr_t_swigregister, METH_O, NULL},
	 { "cfuncptr_t_swiginit", cfuncptr_t_swiginit, METH_VARARGS, NULL},
	 { "new_qvector_history_t", _wrap_new_qvector_history_t, METH_VARARGS, "\n"
		"qvector_history_t()\n"
		"new_qvector_history_t(x) -> qvector_history_t\n"
		""},
	 { "delete_qvector_history_t", _wrap_delete_qvector_history_t, METH_O, "delete_qvector_history_t(self)"},
	 { "qvector_history_t_push_back", _wrap_qvector_history_t_push_back, METH_VARARGS, "\n"
		"qvector_history_t_push_back(self, x)\n"
		"qvector_history_t_push_back(self) -> history_item_t\n"
		""},
	 { "qvector_history_t_pop_back", _wrap_qvector_history_t_pop_back, METH_O, "qvector_history_t_pop_back(self)"},
	 { "qvector_history_t_size", _wrap_qvector_history_t_size, METH_O, "qvector_history_t_size(self) -> size_t"},
	 { "qvector_history_t_empty", _wrap_qvector_history_t_empty, METH_O, "qvector_history_t_empty(self) -> bool"},
	 { "qvector_history_t_at", _wrap_qvector_history_t_at, METH_VARARGS, "qvector_history_t_at(self, _idx) -> history_item_t"},
	 { "qvector_history_t_qclear", _wrap_qvector_history_t_qclear, METH_O, "qvector_history_t_qclear(self)"},
	 { "qvector_history_t_clear", _wrap_qvector_history_t_clear, METH_O, "qvector_history_t_clear(self)"},
	 { "qvector_history_t_resize", _wrap_qvector_history_t_resize, METH_VARARGS, "\n"
		"qvector_history_t_resize(self, _newsize, x)\n"
		"qvector_history_t_resize(self, _newsize)\n"
		""},
	 { "qvector_history_t_grow", _wrap_qvector_history_t_grow, METH_VARARGS, "qvector_history_t_grow(self, x=history_item_t())"},
	 { "qvector_history_t_capacity", _wrap_qvector_history_t_capacity, METH_O, "qvector_history_t_capacity(self) -> size_t"},
	 { "qvector_history_t_reserve", _wrap_qvector_history_t_reserve, METH_VARARGS, "qvector_history_t_reserve(self, cnt)"},
	 { "qvector_history_t_truncate", _wrap_qvector_history_t_truncate, METH_O, "qvector_history_t_truncate(self)"},
	 { "qvector_history_t_swap", _wrap_qvector_history_t_swap, METH_VARARGS, "qvector_history_t_swap(self, r)"},
	 { "qvector_history_t_extract", _wrap_qvector_history_t_extract, METH_O, "qvector_history_t_extract(self) -> history_item_t"},
	 { "qvector_history_t_inject", _wrap_qvector_history_t_inject, METH_VARARGS, "qvector_history_t_inject(self, s, len)"},
	 { "qvector_history_t___eq__", _wrap_qvector_history_t___eq__, METH_VARARGS, "qvector_history_t___eq__(self, r) -> bool"},
	 { "qvector_history_t___ne__", _wrap_qvector_history_t___ne__, METH_VARARGS, "qvector_history_t___ne__(self, r) -> bool"},
	 { "qvector_history_t_begin", _wrap_qvector_history_t_begin, METH_VARARGS, "\n"
		"qvector_history_t_begin(self) -> history_item_t\n"
		"qvector_history_t_begin(self) -> history_item_t\n"
		""},
	 { "qvector_history_t_end", _wrap_qvector_history_t_end, METH_VARARGS, "\n"
		"qvector_history_t_end(self) -> history_item_t\n"
		"qvector_history_t_end(self) -> history_item_t\n"
		""},
	 { "qvector_history_t_insert", _wrap_qvector_history_t_insert, METH_VARARGS, "qvector_history_t_insert(self, it, x) -> history_item_t"},
	 { "qvector_history_t_erase", _wrap_qvector_history_t_erase, METH_VARARGS, "\n"
		"qvector_history_t_erase(self, it) -> history_item_t\n"
		"qvector_history_t_erase(self, first, last) -> history_item_t\n"
		""},
	 { "qvector_history_t_find", _wrap_qvector_history_t_find, METH_VARARGS, "\n"
		"qvector_history_t_find(self, x) -> history_item_t\n"
		"qvector_history_t_find(self, x) -> history_item_t\n"
		""},
	 { "qvector_history_t_has", _wrap_qvector_history_t_has, METH_VARARGS, "qvector_history_t_has(self, x) -> bool"},
	 { "qvector_history_t_add_unique", _wrap_qvector_history_t_add_unique, METH_VARARGS, "qvector_history_t_add_unique(self, x) -> bool"},
	 { "qvector_history_t__del", _wrap_qvector_history_t__del, METH_VARARGS, "qvector_history_t__del(self, x) -> bool"},
	 { "qvector_history_t___len__", _wrap_qvector_history_t___len__, METH_O, "qvector_history_t___len__(self) -> size_t"},
	 { "qvector_history_t___getitem__", _wrap_qvector_history_t___getitem__, METH_VARARGS, "qvector_history_t___getitem__(self, i) -> history_item_t"},
	 { "qvector_history_t___setitem__", _wrap_qvector_history_t___setitem__, METH_VARARGS, "qvector_history_t___setitem__(self, i, v)"},
	 { "qvector_history_t_swigregister", qvector_history_t_swigregister, METH_O, NULL},
	 { "qvector_history_t_swiginit", qvector_history_t_swiginit, METH_VARARGS, NULL},
	 { "history_t_pop", _wrap_history_t_pop, METH_O, "history_t_pop(self) -> history_item_t"},
	 { "history_t_top", _wrap_history_t_top, METH_VARARGS, "\n"
		"history_t_top(self) -> history_item_t\n"
		"history_t_top(self) -> history_item_t\n"
		""},
	 { "history_t_push", _wrap_history_t_push, METH_VARARGS, "history_t_push(self, v)"},
	 { "new_history_t", _wrap_new_history_t, METH_NOARGS, "new_history_t() -> history_t"},
	 { "delete_history_t", _wrap_delete_history_t, METH_O, "delete_history_t(self)"},
	 { "history_t_swigregister", history_t_swigregister, METH_O, NULL},
	 { "history_t_swiginit", history_t_swiginit, METH_VARARGS, NULL},
	 { "qlist_cinsn_t_iterator_cur_get", _wrap_qlist_cinsn_t_iterator_cur_get, METH_O, "qlist_cinsn_t_iterator_cur_get(self) -> cinsn_t"},
	 { "qlist_cinsn_t_iterator_next", _wrap_qlist_cinsn_t_iterator_next, METH_O, "qlist_cinsn_t_iterator_next(self)"},
	 { "qlist_cinsn_t_iterator___eq__", _wrap_qlist_cinsn_t_iterator___eq__, METH_VARARGS, "qlist_cinsn_t_iterator___eq__(self, x) -> bool"},
	 { "qlist_cinsn_t_iterator___ne__", _wrap_qlist_cinsn_t_iterator___ne__, METH_VARARGS, "qlist_cinsn_t_iterator___ne__(self, x) -> bool"},
	 { "new_qlist_cinsn_t_iterator", _wrap_new_qlist_cinsn_t_iterator, METH_NOARGS, "new_qlist_cinsn_t_iterator() -> qlist_cinsn_t_iterator"},
	 { "delete_qlist_cinsn_t_iterator", _wrap_delete_qlist_cinsn_t_iterator, METH_O, "delete_qlist_cinsn_t_iterator(self)"},
	 { "qlist_cinsn_t_iterator_swigregister", qlist_cinsn_t_iterator_swigregister, METH_O, NULL},
	 { "qlist_cinsn_t_iterator_swiginit", qlist_cinsn_t_iterator_swiginit, METH_VARARGS, NULL},
	 { "new_qvector_lvar_t", _wrap_new_qvector_lvar_t, METH_VARARGS, "\n"
		"qvector_lvar_t()\n"
		"new_qvector_lvar_t(x) -> qvector_lvar_t\n"
		""},
	 { "delete_qvector_lvar_t", _wrap_delete_qvector_lvar_t, METH_O, "delete_qvector_lvar_t(self)"},
	 { "qvector_lvar_t_push_back", _wrap_qvector_lvar_t_push_back, METH_VARARGS, "\n"
		"qvector_lvar_t_push_back(self, x)\n"
		"qvector_lvar_t_push_back(self) -> lvar_t\n"
		""},
	 { "qvector_lvar_t_pop_back", _wrap_qvector_lvar_t_pop_back, METH_O, "qvector_lvar_t_pop_back(self)"},
	 { "qvector_lvar_t_size", _wrap_qvector_lvar_t_size, METH_O, "qvector_lvar_t_size(self) -> size_t"},
	 { "qvector_lvar_t_empty", _wrap_qvector_lvar_t_empty, METH_O, "qvector_lvar_t_empty(self) -> bool"},
	 { "qvector_lvar_t_at", _wrap_qvector_lvar_t_at, METH_VARARGS, "qvector_lvar_t_at(self, _idx) -> lvar_t"},
	 { "qvector_lvar_t_qclear", _wrap_qvector_lvar_t_qclear, METH_O, "qvector_lvar_t_qclear(self)"},
	 { "qvector_lvar_t_clear", _wrap_qvector_lvar_t_clear, METH_O, "qvector_lvar_t_clear(self)"},
	 { "qvector_lvar_t_resize", _wrap_qvector_lvar_t_resize, METH_VARARGS, "\n"
		"qvector_lvar_t_resize(self, _newsize, x)\n"
		"qvector_lvar_t_resize(self, _newsize)\n"
		""},
	 { "qvector_lvar_t_grow", _wrap_qvector_lvar_t_grow, METH_VARARGS, "qvector_lvar_t_grow(self, x=lvar_t())"},
	 { "qvector_lvar_t_capacity", _wrap_qvector_lvar_t_capacity, METH_O, "qvector_lvar_t_capacity(self) -> size_t"},
	 { "qvector_lvar_t_reserve", _wrap_qvector_lvar_t_reserve, METH_VARARGS, "qvector_lvar_t_reserve(self, cnt)"},
	 { "qvector_lvar_t_truncate", _wrap_qvector_lvar_t_truncate, METH_O, "qvector_lvar_t_truncate(self)"},
	 { "qvector_lvar_t_swap", _wrap_qvector_lvar_t_swap, METH_VARARGS, "qvector_lvar_t_swap(self, r)"},
	 { "qvector_lvar_t_extract", _wrap_qvector_lvar_t_extract, METH_O, "qvector_lvar_t_extract(self) -> lvar_t"},
	 { "qvector_lvar_t_inject", _wrap_qvector_lvar_t_inject, METH_VARARGS, "qvector_lvar_t_inject(self, s, len)"},
	 { "qvector_lvar_t___eq__", _wrap_qvector_lvar_t___eq__, METH_VARARGS, "qvector_lvar_t___eq__(self, r) -> bool"},
	 { "qvector_lvar_t___ne__", _wrap_qvector_lvar_t___ne__, METH_VARARGS, "qvector_lvar_t___ne__(self, r) -> bool"},
	 { "qvector_lvar_t_begin", _wrap_qvector_lvar_t_begin, METH_VARARGS, "\n"
		"qvector_lvar_t_begin(self) -> lvar_t\n"
		"qvector_lvar_t_begin(self) -> lvar_t\n"
		""},
	 { "qvector_lvar_t_end", _wrap_qvector_lvar_t_end, METH_VARARGS, "\n"
		"qvector_lvar_t_end(self) -> lvar_t\n"
		"qvector_lvar_t_end(self) -> lvar_t\n"
		""},
	 { "qvector_lvar_t_insert", _wrap_qvector_lvar_t_insert, METH_VARARGS, "qvector_lvar_t_insert(self, it, x) -> lvar_t"},
	 { "qvector_lvar_t_erase", _wrap_qvector_lvar_t_erase, METH_VARARGS, "\n"
		"qvector_lvar_t_erase(self, it) -> lvar_t\n"
		"qvector_lvar_t_erase(self, first, last) -> lvar_t\n"
		""},
	 { "qvector_lvar_t_find", _wrap_qvector_lvar_t_find, METH_VARARGS, "\n"
		"qvector_lvar_t_find(self, x) -> lvar_t\n"
		"qvector_lvar_t_find(self, x) -> lvar_t\n"
		""},
	 { "qvector_lvar_t_has", _wrap_qvector_lvar_t_has, METH_VARARGS, "qvector_lvar_t_has(self, x) -> bool"},
	 { "qvector_lvar_t_add_unique", _wrap_qvector_lvar_t_add_unique, METH_VARARGS, "qvector_lvar_t_add_unique(self, x) -> bool"},
	 { "qvector_lvar_t__del", _wrap_qvector_lvar_t__del, METH_VARARGS, "qvector_lvar_t__del(self, x) -> bool"},
	 { "qvector_lvar_t___len__", _wrap_qvector_lvar_t___len__, METH_O, "qvector_lvar_t___len__(self) -> size_t"},
	 { "qvector_lvar_t___getitem__", _wrap_qvector_lvar_t___getitem__, METH_VARARGS, "qvector_lvar_t___getitem__(self, i) -> lvar_t"},
	 { "qvector_lvar_t___setitem__", _wrap_qvector_lvar_t___setitem__, METH_VARARGS, "qvector_lvar_t___setitem__(self, i, v)"},
	 { "qvector_lvar_t_swigregister", qvector_lvar_t_swigregister, METH_O, NULL},
	 { "qvector_lvar_t_swiginit", qvector_lvar_t_swiginit, METH_VARARGS, NULL},
	 { "new_qlist_cinsn_t", _wrap_new_qlist_cinsn_t, METH_VARARGS, "\n"
		"qlist_cinsn_t()\n"
		"new_qlist_cinsn_t(x) -> qlist_cinsn_t\n"
		""},
	 { "delete_qlist_cinsn_t", _wrap_delete_qlist_cinsn_t, METH_O, "delete_qlist_cinsn_t(self)"},
	 { "qlist_cinsn_t_swap", _wrap_qlist_cinsn_t_swap, METH_VARARGS, "qlist_cinsn_t_swap(self, x)"},
	 { "qlist_cinsn_t_empty", _wrap_qlist_cinsn_t_empty, METH_O, "qlist_cinsn_t_empty(self) -> bool"},
	 { "qlist_cinsn_t_size", _wrap_qlist_cinsn_t_size, METH_O, "qlist_cinsn_t_size(self) -> size_t"},
	 { "qlist_cinsn_t_front", _wrap_qlist_cinsn_t_front, METH_VARARGS, "\n"
		"qlist_cinsn_t_front(self) -> cinsn_t\n"
		"qlist_cinsn_t_front(self) -> cinsn_t\n"
		""},
	 { "qlist_cinsn_t_back", _wrap_qlist_cinsn_t_back, METH_VARARGS, "\n"
		"qlist_cinsn_t_back(self) -> cinsn_t\n"
		"qlist_cinsn_t_back(self) -> cinsn_t\n"
		""},
	 { "qlist_cinsn_t_rbegin", _wrap_qlist_cinsn_t_rbegin, METH_VARARGS, "\n"
		"qlist_cinsn_t_rbegin(self) -> qlist< cinsn_t >::reverse_iterator\n"
		"qlist_cinsn_t_rbegin(self) -> qlist< cinsn_t >::const_reverse_iterator\n"
		""},
	 { "qlist_cinsn_t_rend", _wrap_qlist_cinsn_t_rend, METH_VARARGS, "\n"
		"qlist_cinsn_t_rend(self) -> qlist< cinsn_t >::reverse_iterator\n"
		"qlist_cinsn_t_rend(self) -> qlist< cinsn_t >::const_reverse_iterator\n"
		""},
	 { "qlist_cinsn_t_push_front", _wrap_qlist_cinsn_t_push_front, METH_VARARGS, "qlist_cinsn_t_push_front(self, x)"},
	 { "qlist_cinsn_t_push_back", _wrap_qlist_cinsn_t_push_back, METH_VARARGS, "\n"
		"qlist_cinsn_t_push_back(self, x)\n"
		"qlist_cinsn_t_push_back(self) -> cinsn_t\n"
		""},
	 { "qlist_cinsn_t_clear", _wrap_qlist_cinsn_t_clear, METH_O, "qlist_cinsn_t_clear(self)"},
	 { "qlist_cinsn_t_pop_front", _wrap_qlist_cinsn_t_pop_front, METH_O, "qlist_cinsn_t_pop_front(self)"},
	 { "qlist_cinsn_t_pop_back", _wrap_qlist_cinsn_t_pop_back, METH_O, "qlist_cinsn_t_pop_back(self)"},
	 { "qlist_cinsn_t___eq__", _wrap_qlist_cinsn_t___eq__, METH_VARARGS, "qlist_cinsn_t___eq__(self, x) -> bool"},
	 { "qlist_cinsn_t___ne__", _wrap_qlist_cinsn_t___ne__, METH_VARARGS, "qlist_cinsn_t___ne__(self, x) -> bool"},
	 { "qlist_cinsn_t_begin", _wrap_qlist_cinsn_t_begin, METH_O, "qlist_cinsn_t_begin(self) -> qlist_cinsn_t_iterator"},
	 { "qlist_cinsn_t_end", _wrap_qlist_cinsn_t_end, METH_O, "qlist_cinsn_t_end(self) -> qlist_cinsn_t_iterator"},
	 { "qlist_cinsn_t_insert", _wrap_qlist_cinsn_t_insert, METH_VARARGS, "\n"
		"qlist_cinsn_t_insert(self, p, x) -> qlist< cinsn_t >::iterator\n"
		"qlist_cinsn_t_insert(self, p) -> cinsn_t\n"
		"qlist_cinsn_t_insert(self, p, x) -> qlist_cinsn_t_iterator\n"
		""},
	 { "qlist_cinsn_t_erase", _wrap_qlist_cinsn_t_erase, METH_VARARGS, "\n"
		"qlist_cinsn_t_erase(self, p) -> qlist< cinsn_t >::iterator\n"
		"qlist_cinsn_t_erase(self, p1, p2)\n"
		"qlist_cinsn_t_erase(self, p)\n"
		""},
	 { "qlist_cinsn_t_swigregister", qlist_cinsn_t_swigregister, METH_O, NULL},
	 { "qlist_cinsn_t_swiginit", qlist_cinsn_t_swiginit, METH_VARARGS, NULL},
	 { "new_qvector_carg_t", _wrap_new_qvector_carg_t, METH_VARARGS, "\n"
		"qvector_carg_t()\n"
		"new_qvector_carg_t(x) -> qvector_carg_t\n"
		""},
	 { "delete_qvector_carg_t", _wrap_delete_qvector_carg_t, METH_O, "delete_qvector_carg_t(self)"},
	 { "qvector_carg_t_push_back", _wrap_qvector_carg_t_push_back, METH_VARARGS, "\n"
		"qvector_carg_t_push_back(self, x)\n"
		"qvector_carg_t_push_back(self) -> carg_t\n"
		""},
	 { "qvector_carg_t_pop_back", _wrap_qvector_carg_t_pop_back, METH_O, "qvector_carg_t_pop_back(self)"},
	 { "qvector_carg_t_size", _wrap_qvector_carg_t_size, METH_O, "qvector_carg_t_size(self) -> size_t"},
	 { "qvector_carg_t_empty", _wrap_qvector_carg_t_empty, METH_O, "qvector_carg_t_empty(self) -> bool"},
	 { "qvector_carg_t_at", _wrap_qvector_carg_t_at, METH_VARARGS, "qvector_carg_t_at(self, _idx) -> carg_t"},
	 { "qvector_carg_t_qclear", _wrap_qvector_carg_t_qclear, METH_O, "qvector_carg_t_qclear(self)"},
	 { "qvector_carg_t_clear", _wrap_qvector_carg_t_clear, METH_O, "qvector_carg_t_clear(self)"},
	 { "qvector_carg_t_resize", _wrap_qvector_carg_t_resize, METH_VARARGS, "\n"
		"qvector_carg_t_resize(self, _newsize, x)\n"
		"qvector_carg_t_resize(self, _newsize)\n"
		""},
	 { "qvector_carg_t_grow", _wrap_qvector_carg_t_grow, METH_VARARGS, "qvector_carg_t_grow(self, x=carg_t())"},
	 { "qvector_carg_t_capacity", _wrap_qvector_carg_t_capacity, METH_O, "qvector_carg_t_capacity(self) -> size_t"},
	 { "qvector_carg_t_reserve", _wrap_qvector_carg_t_reserve, METH_VARARGS, "qvector_carg_t_reserve(self, cnt)"},
	 { "qvector_carg_t_truncate", _wrap_qvector_carg_t_truncate, METH_O, "qvector_carg_t_truncate(self)"},
	 { "qvector_carg_t_swap", _wrap_qvector_carg_t_swap, METH_VARARGS, "qvector_carg_t_swap(self, r)"},
	 { "qvector_carg_t_extract", _wrap_qvector_carg_t_extract, METH_O, "qvector_carg_t_extract(self) -> carg_t"},
	 { "qvector_carg_t_inject", _wrap_qvector_carg_t_inject, METH_VARARGS, "qvector_carg_t_inject(self, s, len)"},
	 { "qvector_carg_t___eq__", _wrap_qvector_carg_t___eq__, METH_VARARGS, "qvector_carg_t___eq__(self, r) -> bool"},
	 { "qvector_carg_t___ne__", _wrap_qvector_carg_t___ne__, METH_VARARGS, "qvector_carg_t___ne__(self, r) -> bool"},
	 { "qvector_carg_t_begin", _wrap_qvector_carg_t_begin, METH_VARARGS, "\n"
		"qvector_carg_t_begin(self) -> carg_t\n"
		"qvector_carg_t_begin(self) -> carg_t\n"
		""},
	 { "qvector_carg_t_end", _wrap_qvector_carg_t_end, METH_VARARGS, "\n"
		"qvector_carg_t_end(self) -> carg_t\n"
		"qvector_carg_t_end(self) -> carg_t\n"
		""},
	 { "qvector_carg_t_insert", _wrap_qvector_carg_t_insert, METH_VARARGS, "qvector_carg_t_insert(self, it, x) -> carg_t"},
	 { "qvector_carg_t_erase", _wrap_qvector_carg_t_erase, METH_VARARGS, "\n"
		"qvector_carg_t_erase(self, it) -> carg_t\n"
		"qvector_carg_t_erase(self, first, last) -> carg_t\n"
		""},
	 { "qvector_carg_t_find", _wrap_qvector_carg_t_find, METH_VARARGS, "\n"
		"qvector_carg_t_find(self, x) -> carg_t\n"
		"qvector_carg_t_find(self, x) -> carg_t\n"
		""},
	 { "qvector_carg_t_has", _wrap_qvector_carg_t_has, METH_VARARGS, "qvector_carg_t_has(self, x) -> bool"},
	 { "qvector_carg_t_add_unique", _wrap_qvector_carg_t_add_unique, METH_VARARGS, "qvector_carg_t_add_unique(self, x) -> bool"},
	 { "qvector_carg_t__del", _wrap_qvector_carg_t__del, METH_VARARGS, "qvector_carg_t__del(self, x) -> bool"},
	 { "qvector_carg_t___len__", _wrap_qvector_carg_t___len__, METH_O, "qvector_carg_t___len__(self) -> size_t"},
	 { "qvector_carg_t___getitem__", _wrap_qvector_carg_t___getitem__, METH_VARARGS, "qvector_carg_t___getitem__(self, i) -> carg_t"},
	 { "qvector_carg_t___setitem__", _wrap_qvector_carg_t___setitem__, METH_VARARGS, "qvector_carg_t___setitem__(self, i, v)"},
	 { "qvector_carg_t_swigregister", qvector_carg_t_swigregister, METH_O, NULL},
	 { "qvector_carg_t_swiginit", qvector_carg_t_swiginit, METH_VARARGS, NULL},
	 { "new_qvector_ccase_t", _wrap_new_qvector_ccase_t, METH_VARARGS, "\n"
		"qvector_ccase_t()\n"
		"new_qvector_ccase_t(x) -> qvector_ccase_t\n"
		""},
	 { "delete_qvector_ccase_t", _wrap_delete_qvector_ccase_t, METH_O, "delete_qvector_ccase_t(self)"},
	 { "qvector_ccase_t_push_back", _wrap_qvector_ccase_t_push_back, METH_VARARGS, "\n"
		"qvector_ccase_t_push_back(self, x)\n"
		"qvector_ccase_t_push_back(self) -> ccase_t\n"
		""},
	 { "qvector_ccase_t_pop_back", _wrap_qvector_ccase_t_pop_back, METH_O, "qvector_ccase_t_pop_back(self)"},
	 { "qvector_ccase_t_size", _wrap_qvector_ccase_t_size, METH_O, "qvector_ccase_t_size(self) -> size_t"},
	 { "qvector_ccase_t_empty", _wrap_qvector_ccase_t_empty, METH_O, "qvector_ccase_t_empty(self) -> bool"},
	 { "qvector_ccase_t_at", _wrap_qvector_ccase_t_at, METH_VARARGS, "qvector_ccase_t_at(self, _idx) -> ccase_t"},
	 { "qvector_ccase_t_qclear", _wrap_qvector_ccase_t_qclear, METH_O, "qvector_ccase_t_qclear(self)"},
	 { "qvector_ccase_t_clear", _wrap_qvector_ccase_t_clear, METH_O, "qvector_ccase_t_clear(self)"},
	 { "qvector_ccase_t_resize", _wrap_qvector_ccase_t_resize, METH_VARARGS, "\n"
		"qvector_ccase_t_resize(self, _newsize, x)\n"
		"qvector_ccase_t_resize(self, _newsize)\n"
		""},
	 { "qvector_ccase_t_grow", _wrap_qvector_ccase_t_grow, METH_VARARGS, "qvector_ccase_t_grow(self, x=ccase_t())"},
	 { "qvector_ccase_t_capacity", _wrap_qvector_ccase_t_capacity, METH_O, "qvector_ccase_t_capacity(self) -> size_t"},
	 { "qvector_ccase_t_reserve", _wrap_qvector_ccase_t_reserve, METH_VARARGS, "qvector_ccase_t_reserve(self, cnt)"},
	 { "qvector_ccase_t_truncate", _wrap_qvector_ccase_t_truncate, METH_O, "qvector_ccase_t_truncate(self)"},
	 { "qvector_ccase_t_swap", _wrap_qvector_ccase_t_swap, METH_VARARGS, "qvector_ccase_t_swap(self, r)"},
	 { "qvector_ccase_t_extract", _wrap_qvector_ccase_t_extract, METH_O, "qvector_ccase_t_extract(self) -> ccase_t"},
	 { "qvector_ccase_t_inject", _wrap_qvector_ccase_t_inject, METH_VARARGS, "qvector_ccase_t_inject(self, s, len)"},
	 { "qvector_ccase_t___eq__", _wrap_qvector_ccase_t___eq__, METH_VARARGS, "qvector_ccase_t___eq__(self, r) -> bool"},
	 { "qvector_ccase_t___ne__", _wrap_qvector_ccase_t___ne__, METH_VARARGS, "qvector_ccase_t___ne__(self, r) -> bool"},
	 { "qvector_ccase_t_begin", _wrap_qvector_ccase_t_begin, METH_VARARGS, "\n"
		"qvector_ccase_t_begin(self) -> ccase_t\n"
		"qvector_ccase_t_begin(self) -> ccase_t\n"
		""},
	 { "qvector_ccase_t_end", _wrap_qvector_ccase_t_end, METH_VARARGS, "\n"
		"qvector_ccase_t_end(self) -> ccase_t\n"
		"qvector_ccase_t_end(self) -> ccase_t\n"
		""},
	 { "qvector_ccase_t_insert", _wrap_qvector_ccase_t_insert, METH_VARARGS, "qvector_ccase_t_insert(self, it, x) -> ccase_t"},
	 { "qvector_ccase_t_erase", _wrap_qvector_ccase_t_erase, METH_VARARGS, "\n"
		"qvector_ccase_t_erase(self, it) -> ccase_t\n"
		"qvector_ccase_t_erase(self, first, last) -> ccase_t\n"
		""},
	 { "qvector_ccase_t_find", _wrap_qvector_ccase_t_find, METH_VARARGS, "\n"
		"qvector_ccase_t_find(self, x) -> ccase_t\n"
		"qvector_ccase_t_find(self, x) -> ccase_t\n"
		""},
	 { "qvector_ccase_t_has", _wrap_qvector_ccase_t_has, METH_VARARGS, "qvector_ccase_t_has(self, x) -> bool"},
	 { "qvector_ccase_t_add_unique", _wrap_qvector_ccase_t_add_unique, METH_VARARGS, "qvector_ccase_t_add_unique(self, x) -> bool"},
	 { "qvector_ccase_t__del", _wrap_qvector_ccase_t__del, METH_VARARGS, "qvector_ccase_t__del(self, x) -> bool"},
	 { "qvector_ccase_t___len__", _wrap_qvector_ccase_t___len__, METH_O, "qvector_ccase_t___len__(self) -> size_t"},
	 { "qvector_ccase_t___getitem__", _wrap_qvector_ccase_t___getitem__, METH_VARARGS, "qvector_ccase_t___getitem__(self, i) -> ccase_t"},
	 { "qvector_ccase_t___setitem__", _wrap_qvector_ccase_t___setitem__, METH_VARARGS, "qvector_ccase_t___setitem__(self, i, v)"},
	 { "qvector_ccase_t_swigregister", qvector_ccase_t_swigregister, METH_O, NULL},
	 { "qvector_ccase_t_swiginit", qvector_ccase_t_swiginit, METH_VARARGS, NULL},
	 { "new_lvar_saved_infos_t", _wrap_new_lvar_saved_infos_t, METH_VARARGS, "\n"
		"lvar_saved_infos_t()\n"
		"new_lvar_saved_infos_t(x) -> lvar_saved_infos_t\n"
		""},
	 { "delete_lvar_saved_infos_t", _wrap_delete_lvar_saved_infos_t, METH_O, "delete_lvar_saved_infos_t(self)"},
	 { "lvar_saved_infos_t_push_back", _wrap_lvar_saved_infos_t_push_back, METH_VARARGS, "\n"
		"lvar_saved_infos_t_push_back(self, x)\n"
		"lvar_saved_infos_t_push_back(self) -> lvar_saved_info_t\n"
		""},
	 { "lvar_saved_infos_t_pop_back", _wrap_lvar_saved_infos_t_pop_back, METH_O, "lvar_saved_infos_t_pop_back(self)"},
	 { "lvar_saved_infos_t_size", _wrap_lvar_saved_infos_t_size, METH_O, "lvar_saved_infos_t_size(self) -> size_t"},
	 { "lvar_saved_infos_t_empty", _wrap_lvar_saved_infos_t_empty, METH_O, "lvar_saved_infos_t_empty(self) -> bool"},
	 { "lvar_saved_infos_t_at", _wrap_lvar_saved_infos_t_at, METH_VARARGS, "lvar_saved_infos_t_at(self, _idx) -> lvar_saved_info_t"},
	 { "lvar_saved_infos_t_qclear", _wrap_lvar_saved_infos_t_qclear, METH_O, "lvar_saved_infos_t_qclear(self)"},
	 { "lvar_saved_infos_t_clear", _wrap_lvar_saved_infos_t_clear, METH_O, "lvar_saved_infos_t_clear(self)"},
	 { "lvar_saved_infos_t_resize", _wrap_lvar_saved_infos_t_resize, METH_VARARGS, "\n"
		"lvar_saved_infos_t_resize(self, _newsize, x)\n"
		"lvar_saved_infos_t_resize(self, _newsize)\n"
		""},
	 { "lvar_saved_infos_t_grow", _wrap_lvar_saved_infos_t_grow, METH_VARARGS, "lvar_saved_infos_t_grow(self, x=lvar_saved_info_t())"},
	 { "lvar_saved_infos_t_capacity", _wrap_lvar_saved_infos_t_capacity, METH_O, "lvar_saved_infos_t_capacity(self) -> size_t"},
	 { "lvar_saved_infos_t_reserve", _wrap_lvar_saved_infos_t_reserve, METH_VARARGS, "lvar_saved_infos_t_reserve(self, cnt)"},
	 { "lvar_saved_infos_t_truncate", _wrap_lvar_saved_infos_t_truncate, METH_O, "lvar_saved_infos_t_truncate(self)"},
	 { "lvar_saved_infos_t_swap", _wrap_lvar_saved_infos_t_swap, METH_VARARGS, "lvar_saved_infos_t_swap(self, r)"},
	 { "lvar_saved_infos_t_extract", _wrap_lvar_saved_infos_t_extract, METH_O, "lvar_saved_infos_t_extract(self) -> lvar_saved_info_t"},
	 { "lvar_saved_infos_t_inject", _wrap_lvar_saved_infos_t_inject, METH_VARARGS, "lvar_saved_infos_t_inject(self, s, len)"},
	 { "lvar_saved_infos_t___eq__", _wrap_lvar_saved_infos_t___eq__, METH_VARARGS, "lvar_saved_infos_t___eq__(self, r) -> bool"},
	 { "lvar_saved_infos_t___ne__", _wrap_lvar_saved_infos_t___ne__, METH_VARARGS, "lvar_saved_infos_t___ne__(self, r) -> bool"},
	 { "lvar_saved_infos_t_begin", _wrap_lvar_saved_infos_t_begin, METH_VARARGS, "\n"
		"lvar_saved_infos_t_begin(self) -> lvar_saved_info_t\n"
		"lvar_saved_infos_t_begin(self) -> lvar_saved_info_t\n"
		""},
	 { "lvar_saved_infos_t_end", _wrap_lvar_saved_infos_t_end, METH_VARARGS, "\n"
		"lvar_saved_infos_t_end(self) -> lvar_saved_info_t\n"
		"lvar_saved_infos_t_end(self) -> lvar_saved_info_t\n"
		""},
	 { "lvar_saved_infos_t_insert", _wrap_lvar_saved_infos_t_insert, METH_VARARGS, "lvar_saved_infos_t_insert(self, it, x) -> lvar_saved_info_t"},
	 { "lvar_saved_infos_t_erase", _wrap_lvar_saved_infos_t_erase, METH_VARARGS, "\n"
		"lvar_saved_infos_t_erase(self, it) -> lvar_saved_info_t\n"
		"lvar_saved_infos_t_erase(self, first, last) -> lvar_saved_info_t\n"
		""},
	 { "lvar_saved_infos_t_find", _wrap_lvar_saved_infos_t_find, METH_VARARGS, "\n"
		"lvar_saved_infos_t_find(self, x) -> lvar_saved_info_t\n"
		"lvar_saved_infos_t_find(self, x) -> lvar_saved_info_t\n"
		""},
	 { "lvar_saved_infos_t_has", _wrap_lvar_saved_infos_t_has, METH_VARARGS, "lvar_saved_infos_t_has(self, x) -> bool"},
	 { "lvar_saved_infos_t_add_unique", _wrap_lvar_saved_infos_t_add_unique, METH_VARARGS, "lvar_saved_infos_t_add_unique(self, x) -> bool"},
	 { "lvar_saved_infos_t__del", _wrap_lvar_saved_infos_t__del, METH_VARARGS, "lvar_saved_infos_t__del(self, x) -> bool"},
	 { "lvar_saved_infos_t___len__", _wrap_lvar_saved_infos_t___len__, METH_O, "lvar_saved_infos_t___len__(self) -> size_t"},
	 { "lvar_saved_infos_t___getitem__", _wrap_lvar_saved_infos_t___getitem__, METH_VARARGS, "lvar_saved_infos_t___getitem__(self, i) -> lvar_saved_info_t"},
	 { "lvar_saved_infos_t___setitem__", _wrap_lvar_saved_infos_t___setitem__, METH_VARARGS, "lvar_saved_infos_t___setitem__(self, i, v)"},
	 { "lvar_saved_infos_t_swigregister", lvar_saved_infos_t_swigregister, METH_O, NULL},
	 { "lvar_saved_infos_t_swiginit", lvar_saved_infos_t_swiginit, METH_VARARGS, NULL},
	 { "qswap", _wrap_qswap, METH_VARARGS, "qswap(a, b)"},
	 { "fnum_array_data_get", _wrap_fnum_array_data_get, METH_O, "fnum_array_data_get(self) -> unsigned short (&)[6]"},
	 { "new_fnum_array", _wrap_new_fnum_array, METH_O, "new_fnum_array(data) -> fnum_array"},
	 { "fnum_array___len__", _wrap_fnum_array___len__, METH_O, "fnum_array___len__(self) -> size_t"},
	 { "fnum_array___getitem__", _wrap_fnum_array___getitem__, METH_VARARGS, "fnum_array___getitem__(self, i) -> unsigned short const &"},
	 { "fnum_array___setitem__", _wrap_fnum_array___setitem__, METH_VARARGS, "fnum_array___setitem__(self, i, v)"},
	 { "delete_fnum_array", _wrap_delete_fnum_array, METH_O, "delete_fnum_array(self)"},
	 { "fnum_array_swigregister", fnum_array_swigregister, METH_O, NULL},
	 { "fnum_array_swiginit", fnum_array_swiginit, METH_VARARGS, NULL},
	 { "debug_hexrays_ctree", _wrap_debug_hexrays_ctree, METH_O, "debug_hexrays_ctree(msg)"},
	 { "init_hexrays_plugin", _wrap_init_hexrays_plugin, METH_VARARGS, "init_hexrays_plugin(flags=0) -> bool"},
	 { "_decompile", _wrap__decompile, METH_VARARGS, "_decompile(pfn, hf) -> cfuncptr_t"},
	 { "decompile_many", _wrap_decompile_many, METH_VARARGS, "decompile_many(outfile, funcaddrs, flags) -> bool"},
	 { "get_widget_vdui", _wrap_get_widget_vdui, METH_O, "get_widget_vdui(f) -> vdui_t"},
	 { "boundaries_find", _wrap_boundaries_find, METH_VARARGS, "boundaries_find(map, key) -> boundaries_iterator_t"},
	 { "boundaries_insert", _wrap_boundaries_insert, METH_VARARGS, "boundaries_insert(map, key, val) -> boundaries_iterator_t"},
	 { "term_hexrays_plugin", _wrap_term_hexrays_plugin, METH_NOARGS, "term_hexrays_plugin()"},
	 { "new_Hexrays_Hooks", _wrap_new_Hexrays_Hooks, METH_O, "new_Hexrays_Hooks(_self) -> Hexrays_Hooks"},
	 { "delete_Hexrays_Hooks", _wrap_delete_Hexrays_Hooks, METH_O, "delete_Hexrays_Hooks(self)"},
	 { "Hexrays_Hooks_hook", _wrap_Hexrays_Hooks_hook, METH_O, "Hexrays_Hooks_hook(self) -> bool"},
	 { "Hexrays_Hooks_unhook", _wrap_Hexrays_Hooks_unhook, METH_O, "Hexrays_Hooks_unhook(self) -> bool"},
	 { "Hexrays_Hooks_flowchart", _wrap_Hexrays_Hooks_flowchart, METH_VARARGS, "Hexrays_Hooks_flowchart(self, fc) -> int"},
	 { "Hexrays_Hooks_stkpnts", _wrap_Hexrays_Hooks_stkpnts, METH_VARARGS, "Hexrays_Hooks_stkpnts(self, mba, stkpnts) -> int"},
	 { "Hexrays_Hooks_prolog", _wrap_Hexrays_Hooks_prolog, METH_VARARGS, "Hexrays_Hooks_prolog(self, mba, fc, reachable_blocks) -> int"},
	 { "Hexrays_Hooks_microcode", _wrap_Hexrays_Hooks_microcode, METH_VARARGS, "Hexrays_Hooks_microcode(self, mba) -> int"},
	 { "Hexrays_Hooks_preoptimized", _wrap_Hexrays_Hooks_preoptimized, METH_VARARGS, "Hexrays_Hooks_preoptimized(self, mba) -> int"},
	 { "Hexrays_Hooks_locopt", _wrap_Hexrays_Hooks_locopt, METH_VARARGS, "Hexrays_Hooks_locopt(self, mba) -> int"},
	 { "Hexrays_Hooks_prealloc", _wrap_Hexrays_Hooks_prealloc, METH_VARARGS, "Hexrays_Hooks_prealloc(self, mba) -> int"},
	 { "Hexrays_Hooks_glbopt", _wrap_Hexrays_Hooks_glbopt, METH_VARARGS, "Hexrays_Hooks_glbopt(self, mba) -> int"},
	 { "Hexrays_Hooks_structural", _wrap_Hexrays_Hooks_structural, METH_VARARGS, "Hexrays_Hooks_structural(self, ct) -> int"},
	 { "Hexrays_Hooks_maturity", _wrap_Hexrays_Hooks_maturity, METH_VARARGS, "Hexrays_Hooks_maturity(self, cfunc, new_maturity) -> int"},
	 { "Hexrays_Hooks_interr", _wrap_Hexrays_Hooks_interr, METH_VARARGS, "Hexrays_Hooks_interr(self, errcode) -> int"},
	 { "Hexrays_Hooks_combine", _wrap_Hexrays_Hooks_combine, METH_VARARGS, "Hexrays_Hooks_combine(self, blk, insn) -> int"},
	 { "Hexrays_Hooks_print_func", _wrap_Hexrays_Hooks_print_func, METH_VARARGS, "Hexrays_Hooks_print_func(self, cfunc, vp) -> int"},
	 { "Hexrays_Hooks_func_printed", _wrap_Hexrays_Hooks_func_printed, METH_VARARGS, "Hexrays_Hooks_func_printed(self, cfunc) -> int"},
	 { "Hexrays_Hooks_resolve_stkaddrs", _wrap_Hexrays_Hooks_resolve_stkaddrs, METH_VARARGS, "Hexrays_Hooks_resolve_stkaddrs(self, mba) -> int"},
	 { "Hexrays_Hooks_open_pseudocode", _wrap_Hexrays_Hooks_open_pseudocode, METH_VARARGS, "Hexrays_Hooks_open_pseudocode(self, vu) -> int"},
	 { "Hexrays_Hooks_switch_pseudocode", _wrap_Hexrays_Hooks_switch_pseudocode, METH_VARARGS, "Hexrays_Hooks_switch_pseudocode(self, vu) -> int"},
	 { "Hexrays_Hooks_refresh_pseudocode", _wrap_Hexrays_Hooks_refresh_pseudocode, METH_VARARGS, "Hexrays_Hooks_refresh_pseudocode(self, vu) -> int"},
	 { "Hexrays_Hooks_close_pseudocode", _wrap_Hexrays_Hooks_close_pseudocode, METH_VARARGS, "Hexrays_Hooks_close_pseudocode(self, vu) -> int"},
	 { "Hexrays_Hooks_keyboard", _wrap_Hexrays_Hooks_keyboard, METH_VARARGS, "Hexrays_Hooks_keyboard(self, vu, key_code, shift_state) -> int"},
	 { "Hexrays_Hooks_right_click", _wrap_Hexrays_Hooks_right_click, METH_VARARGS, "Hexrays_Hooks_right_click(self, vu) -> int"},
	 { "Hexrays_Hooks_double_click", _wrap_Hexrays_Hooks_double_click, METH_VARARGS, "Hexrays_Hooks_double_click(self, vu, shift_state) -> int"},
	 { "Hexrays_Hooks_curpos", _wrap_Hexrays_Hooks_curpos, METH_VARARGS, "Hexrays_Hooks_curpos(self, vu) -> int"},
	 { "Hexrays_Hooks_create_hint", _wrap_Hexrays_Hooks_create_hint, METH_VARARGS, "Hexrays_Hooks_create_hint(self, vu) -> PyObject *"},
	 { "Hexrays_Hooks_text_ready", _wrap_Hexrays_Hooks_text_ready, METH_VARARGS, "Hexrays_Hooks_text_ready(self, vu) -> int"},
	 { "Hexrays_Hooks_populating_popup", _wrap_Hexrays_Hooks_populating_popup, METH_VARARGS, "Hexrays_Hooks_populating_popup(self, widget, popup_handle, vu) -> int"},
	 { "Hexrays_Hooks_lvar_name_changed", _wrap_Hexrays_Hooks_lvar_name_changed, METH_VARARGS, "Hexrays_Hooks_lvar_name_changed(self, vu, v, name, is_user_name) -> int"},
	 { "Hexrays_Hooks_lvar_type_changed", _wrap_Hexrays_Hooks_lvar_type_changed, METH_VARARGS, "Hexrays_Hooks_lvar_type_changed(self, vu, v, tinfo) -> int"},
	 { "Hexrays_Hooks_lvar_cmt_changed", _wrap_Hexrays_Hooks_lvar_cmt_changed, METH_VARARGS, "Hexrays_Hooks_lvar_cmt_changed(self, vu, v, cmt) -> int"},
	 { "Hexrays_Hooks_lvar_mapping_changed", _wrap_Hexrays_Hooks_lvar_mapping_changed, METH_VARARGS, "Hexrays_Hooks_lvar_mapping_changed(self, vu, _from, to) -> int"},
	 { "Hexrays_Hooks_cmt_changed", _wrap_Hexrays_Hooks_cmt_changed, METH_VARARGS, "Hexrays_Hooks_cmt_changed(self, cfunc, loc, cmt) -> int"},
	 { "disown_Hexrays_Hooks", _wrap_disown_Hexrays_Hooks, METH_O, NULL},
	 { "Hexrays_Hooks_swigregister", Hexrays_Hooks_swigregister, METH_O, NULL},
	 { "Hexrays_Hooks_swiginit", Hexrays_Hooks_swiginit, METH_VARARGS, NULL},
	 { "hexrays_alloc", _wrap_hexrays_alloc, METH_O, "hexrays_alloc(size) -> void *"},
	 { "hexrays_free", _wrap_hexrays_free, METH_O, "hexrays_free(ptr)"},
	 { "get_merror_desc", _wrap_get_merror_desc, METH_VARARGS, "get_merror_desc(code, mba) -> ea_t"},
	 { "operand_locator_t_ea_set", _wrap_operand_locator_t_ea_set, METH_VARARGS, "operand_locator_t_ea_set(self, ea)"},
	 { "operand_locator_t_ea_get", _wrap_operand_locator_t_ea_get, METH_O, "operand_locator_t_ea_get(self) -> ea_t"},
	 { "operand_locator_t_opnum_set", _wrap_operand_locator_t_opnum_set, METH_VARARGS, "operand_locator_t_opnum_set(self, opnum)"},
	 { "operand_locator_t_opnum_get", _wrap_operand_locator_t_opnum_get, METH_O, "operand_locator_t_opnum_get(self) -> int"},
	 { "new_operand_locator_t", _wrap_new_operand_locator_t, METH_VARARGS, "new_operand_locator_t(_ea, _opnum) -> operand_locator_t"},
	 { "operand_locator_t___eq__", _wrap_operand_locator_t___eq__, METH_VARARGS, "operand_locator_t___eq__(self, r) -> bool"},
	 { "operand_locator_t___ne__", _wrap_operand_locator_t___ne__, METH_VARARGS, "operand_locator_t___ne__(self, r) -> bool"},
	 { "operand_locator_t___lt__", _wrap_operand_locator_t___lt__, METH_VARARGS, "operand_locator_t___lt__(self, r) -> bool"},
	 { "operand_locator_t___gt__", _wrap_operand_locator_t___gt__, METH_VARARGS, "operand_locator_t___gt__(self, r) -> bool"},
	 { "operand_locator_t___le__", _wrap_operand_locator_t___le__, METH_VARARGS, "operand_locator_t___le__(self, r) -> bool"},
	 { "operand_locator_t___ge__", _wrap_operand_locator_t___ge__, METH_VARARGS, "operand_locator_t___ge__(self, r) -> bool"},
	 { "operand_locator_t_compare", _wrap_operand_locator_t_compare, METH_VARARGS, "operand_locator_t_compare(self, r) -> int"},
	 { "delete_operand_locator_t", _wrap_delete_operand_locator_t, METH_O, "delete_operand_locator_t(self)"},
	 { "operand_locator_t_swigregister", operand_locator_t_swigregister, METH_O, NULL},
	 { "operand_locator_t_swiginit", operand_locator_t_swiginit, METH_VARARGS, NULL},
	 { "number_format_t_flags_set", _wrap_number_format_t_flags_set, METH_VARARGS, "number_format_t_flags_set(self, flags)"},
	 { "number_format_t_flags_get", _wrap_number_format_t_flags_get, METH_O, "number_format_t_flags_get(self) -> flags_t"},
	 { "number_format_t_opnum_set", _wrap_number_format_t_opnum_set, METH_VARARGS, "number_format_t_opnum_set(self, opnum)"},
	 { "number_format_t_opnum_get", _wrap_number_format_t_opnum_get, METH_O, "number_format_t_opnum_get(self) -> char"},
	 { "number_format_t_props_set", _wrap_number_format_t_props_set, METH_VARARGS, "number_format_t_props_set(self, props)"},
	 { "number_format_t_props_get", _wrap_number_format_t_props_get, METH_O, "number_format_t_props_get(self) -> char"},
	 { "number_format_t_serial_set", _wrap_number_format_t_serial_set, METH_VARARGS, "number_format_t_serial_set(self, serial)"},
	 { "number_format_t_serial_get", _wrap_number_format_t_serial_get, METH_O, "number_format_t_serial_get(self) -> uchar"},
	 { "number_format_t_org_nbytes_set", _wrap_number_format_t_org_nbytes_set, METH_VARARGS, "number_format_t_org_nbytes_set(self, org_nbytes)"},
	 { "number_format_t_org_nbytes_get", _wrap_number_format_t_org_nbytes_get, METH_O, "number_format_t_org_nbytes_get(self) -> char"},
	 { "number_format_t_type_name_set", _wrap_number_format_t_type_name_set, METH_VARARGS, "number_format_t_type_name_set(self, type_name)"},
	 { "number_format_t_type_name_get", _wrap_number_format_t_type_name_get, METH_O, "number_format_t_type_name_get(self) -> qstring *"},
	 { "new_number_format_t", _wrap_new_number_format_t, METH_VARARGS, "new_number_format_t(_opnum=0) -> number_format_t"},
	 { "number_format_t_get_radix", _wrap_number_format_t_get_radix, METH_O, "number_format_t_get_radix(self) -> int"},
	 { "number_format_t_is_fixed", _wrap_number_format_t_is_fixed, METH_O, "number_format_t_is_fixed(self) -> bool"},
	 { "number_format_t_is_hex", _wrap_number_format_t_is_hex, METH_O, "number_format_t_is_hex(self) -> bool"},
	 { "number_format_t_is_dec", _wrap_number_format_t_is_dec, METH_O, "number_format_t_is_dec(self) -> bool"},
	 { "number_format_t_is_oct", _wrap_number_format_t_is_oct, METH_O, "number_format_t_is_oct(self) -> bool"},
	 { "number_format_t_is_enum", _wrap_number_format_t_is_enum, METH_O, "number_format_t_is_enum(self) -> bool"},
	 { "number_format_t_is_char", _wrap_number_format_t_is_char, METH_O, "number_format_t_is_char(self) -> bool"},
	 { "number_format_t_is_stroff", _wrap_number_format_t_is_stroff, METH_O, "number_format_t_is_stroff(self) -> bool"},
	 { "number_format_t_is_numop", _wrap_number_format_t_is_numop, METH_O, "number_format_t_is_numop(self) -> bool"},
	 { "number_format_t_needs_to_be_inverted", _wrap_number_format_t_needs_to_be_inverted, METH_O, "number_format_t_needs_to_be_inverted(self) -> bool"},
	 { "delete_number_format_t", _wrap_delete_number_format_t, METH_O, "delete_number_format_t(self)"},
	 { "number_format_t_swigregister", number_format_t_swigregister, METH_O, NULL},
	 { "number_format_t_swiginit", number_format_t_swiginit, METH_VARARGS, NULL},
	 { "vd_printer_t_hdrlines_set", _wrap_vd_printer_t_hdrlines_set, METH_VARARGS, "vd_printer_t_hdrlines_set(self, hdrlines)"},
	 { "vd_printer_t_hdrlines_get", _wrap_vd_printer_t_hdrlines_get, METH_O, "vd_printer_t_hdrlines_get(self) -> int"},
	 { "vd_printer_t__print", _wrap_vd_printer_t__print, METH_VARARGS, "vd_printer_t__print(self, indent, format) -> int"},
	 { "new_vd_printer_t", _wrap_new_vd_printer_t, METH_NOARGS, "new_vd_printer_t() -> vd_printer_t"},
	 { "delete_vd_printer_t", _wrap_delete_vd_printer_t, METH_O, "delete_vd_printer_t(self)"},
	 { "vd_printer_t_swigregister", vd_printer_t_swigregister, METH_O, NULL},
	 { "vd_printer_t_swiginit", vd_printer_t_swiginit, METH_VARARGS, NULL},
	 { "vc_printer_t_func_set", _wrap_vc_printer_t_func_set, METH_VARARGS, "vc_printer_t_func_set(self, func)"},
	 { "vc_printer_t_func_get", _wrap_vc_printer_t_func_get, METH_O, "vc_printer_t_func_get(self) -> cfunc_t"},
	 { "vc_printer_t_lastchar_set", _wrap_vc_printer_t_lastchar_set, METH_VARARGS, "vc_printer_t_lastchar_set(self, lastchar)"},
	 { "vc_printer_t_lastchar_get", _wrap_vc_printer_t_lastchar_get, METH_O, "vc_printer_t_lastchar_get(self) -> char"},
	 { "new_vc_printer_t", _wrap_new_vc_printer_t, METH_O, "new_vc_printer_t(f) -> vc_printer_t"},
	 { "vc_printer_t_oneliner", _wrap_vc_printer_t_oneliner, METH_O, "vc_printer_t_oneliner(self) -> bool"},
	 { "delete_vc_printer_t", _wrap_delete_vc_printer_t, METH_O, "delete_vc_printer_t(self)"},
	 { "vc_printer_t_swigregister", vc_printer_t_swigregister, METH_O, NULL},
	 { "vc_printer_t_swiginit", vc_printer_t_swiginit, METH_VARARGS, NULL},
	 { "qstring_printer_t_with_tags_set", _wrap_qstring_printer_t_with_tags_set, METH_VARARGS, "qstring_printer_t_with_tags_set(self, with_tags)"},
	 { "qstring_printer_t_with_tags_get", _wrap_qstring_printer_t_with_tags_get, METH_O, "qstring_printer_t_with_tags_get(self) -> bool"},
	 { "qstring_printer_t_s_set", _wrap_qstring_printer_t_s_set, METH_VARARGS, "qstring_printer_t_s_set(self, s)"},
	 { "qstring_printer_t_s_get", _wrap_qstring_printer_t_s_get, METH_O, "qstring_printer_t_s_get(self) -> qstring &"},
	 { "qstring_printer_t__print", _wrap_qstring_printer_t__print, METH_VARARGS, "qstring_printer_t__print(self, indent, format) -> int"},
	 { "new_qstring_printer_t", _wrap_new_qstring_printer_t, METH_VARARGS, "new_qstring_printer_t(f, tags) -> qstring_printer_t"},
	 { "qstring_printer_t_get_s", _wrap_qstring_printer_t_get_s, METH_O, "qstring_printer_t_get_s(self) -> qstring"},
	 { "qstring_printer_t_swigregister", qstring_printer_t_swigregister, METH_O, NULL},
	 { "qstring_printer_t_swiginit", qstring_printer_t_swiginit, METH_VARARGS, NULL},
	 { "is_type_correct", _wrap_is_type_correct, METH_O, "is_type_correct(ptr) -> bool"},
	 { "is_small_struni", _wrap_is_small_struni, METH_O, "is_small_struni(tif) -> bool"},
	 { "is_nonbool_type", _wrap_is_nonbool_type, METH_O, "is_nonbool_type(type) -> bool"},
	 { "is_bool_type", _wrap_is_bool_type, METH_O, "is_bool_type(type) -> bool"},
	 { "is_ptr_or_array", _wrap_is_ptr_or_array, METH_O, "is_ptr_or_array(t) -> bool"},
	 { "is_paf", _wrap_is_paf, METH_O, "is_paf(t) -> bool"},
	 { "is_inplace_def", _wrap_is_inplace_def, METH_O, "is_inplace_def(type) -> bool"},
	 { "partial_type_num", _wrap_partial_type_num, METH_O, "partial_type_num(type) -> int"},
	 { "get_float_type", _wrap_get_float_type, METH_O, "get_float_type(width) -> tinfo_t"},
	 { "get_int_type_by_width_and_sign", _wrap_get_int_type_by_width_and_sign, METH_VARARGS, "get_int_type_by_width_and_sign(srcwidth, sign) -> tinfo_t"},
	 { "get_unk_type", _wrap_get_unk_type, METH_O, "get_unk_type(size) -> tinfo_t"},
	 { "dummy_ptrtype", _wrap_dummy_ptrtype, METH_VARARGS, "dummy_ptrtype(ptrsize, isfp) -> tinfo_t"},
	 { "get_member_type", _wrap_get_member_type, METH_VARARGS, "get_member_type(mptr, type) -> bool"},
	 { "make_pointer", _wrap_make_pointer, METH_O, "make_pointer(type) -> tinfo_t"},
	 { "create_typedef", _wrap_create_typedef, METH_VARARGS, "\n"
		"create_typedef(name) -> tinfo_t\n"
		"create_typedef(n) -> tinfo_t\n"
		""},
	 { "get_type", _wrap_get_type, METH_VARARGS, "get_type(id, tif, guess) -> bool"},
	 { "set_type", _wrap_set_type, METH_VARARGS, "set_type(id, tif, source, force=False) -> bool"},
	 { "vdloc_t_reg1", _wrap_vdloc_t_reg1, METH_O, "vdloc_t_reg1(self) -> int"},
	 { "vdloc_t__set_reg1", _wrap_vdloc_t__set_reg1, METH_VARARGS, "vdloc_t__set_reg1(self, r1)"},
	 { "vdloc_t_set_reg1", _wrap_vdloc_t_set_reg1, METH_VARARGS, "vdloc_t_set_reg1(self, r1)"},
	 { "vdloc_t___eq__", _wrap_vdloc_t___eq__, METH_VARARGS, "vdloc_t___eq__(self, r) -> bool"},
	 { "vdloc_t___ne__", _wrap_vdloc_t___ne__, METH_VARARGS, "vdloc_t___ne__(self, r) -> bool"},
	 { "vdloc_t___lt__", _wrap_vdloc_t___lt__, METH_VARARGS, "vdloc_t___lt__(self, r) -> bool"},
	 { "vdloc_t___gt__", _wrap_vdloc_t___gt__, METH_VARARGS, "vdloc_t___gt__(self, r) -> bool"},
	 { "vdloc_t___le__", _wrap_vdloc_t___le__, METH_VARARGS, "vdloc_t___le__(self, r) -> bool"},
	 { "vdloc_t___ge__", _wrap_vdloc_t___ge__, METH_VARARGS, "vdloc_t___ge__(self, r) -> bool"},
	 { "vdloc_t_compare", _wrap_vdloc_t_compare, METH_VARARGS, "vdloc_t_compare(self, r) -> int"},
	 { "vdloc_t_is_aliasable", _wrap_vdloc_t_is_aliasable, METH_VARARGS, "vdloc_t_is_aliasable(self, mb, size) -> bool"},
	 { "new_vdloc_t", _wrap_new_vdloc_t, METH_NOARGS, "new_vdloc_t() -> vdloc_t"},
	 { "delete_vdloc_t", _wrap_delete_vdloc_t, METH_O, "delete_vdloc_t(self)"},
	 { "vdloc_t_swigregister", vdloc_t_swigregister, METH_O, NULL},
	 { "vdloc_t_swiginit", vdloc_t_swiginit, METH_VARARGS, NULL},
	 { "print_vdloc", _wrap_print_vdloc, METH_VARARGS, "print_vdloc(loc, nbytes)"},
	 { "arglocs_overlap", _wrap_arglocs_overlap, METH_VARARGS, "arglocs_overlap(loc1, w1, loc2, w2) -> bool"},
	 { "lvar_locator_t_location_set", _wrap_lvar_locator_t_location_set, METH_VARARGS, "lvar_locator_t_location_set(self, location)"},
	 { "lvar_locator_t_location_get", _wrap_lvar_locator_t_location_get, METH_O, "lvar_locator_t_location_get(self) -> vdloc_t"},
	 { "lvar_locator_t_defea_set", _wrap_lvar_locator_t_defea_set, METH_VARARGS, "lvar_locator_t_defea_set(self, defea)"},
	 { "lvar_locator_t_defea_get", _wrap_lvar_locator_t_defea_get, METH_O, "lvar_locator_t_defea_get(self) -> ea_t"},
	 { "new_lvar_locator_t", _wrap_new_lvar_locator_t, METH_VARARGS, "\n"
		"lvar_locator_t()\n"
		"new_lvar_locator_t(loc, ea) -> lvar_locator_t\n"
		""},
	 { "lvar_locator_t_get_stkoff", _wrap_lvar_locator_t_get_stkoff, METH_O, "lvar_locator_t_get_stkoff(self) -> sval_t"},
	 { "lvar_locator_t_is_reg1", _wrap_lvar_locator_t_is_reg1, METH_O, "lvar_locator_t_is_reg1(self) -> bool"},
	 { "lvar_locator_t_is_reg2", _wrap_lvar_locator_t_is_reg2, METH_O, "lvar_locator_t_is_reg2(self) -> bool"},
	 { "lvar_locator_t_is_reg_var", _wrap_lvar_locator_t_is_reg_var, METH_O, "lvar_locator_t_is_reg_var(self) -> bool"},
	 { "lvar_locator_t_is_stk_var", _wrap_lvar_locator_t_is_stk_var, METH_O, "lvar_locator_t_is_stk_var(self) -> bool"},
	 { "lvar_locator_t_is_scattered", _wrap_lvar_locator_t_is_scattered, METH_O, "lvar_locator_t_is_scattered(self) -> bool"},
	 { "lvar_locator_t_get_reg1", _wrap_lvar_locator_t_get_reg1, METH_O, "lvar_locator_t_get_reg1(self) -> mreg_t"},
	 { "lvar_locator_t_get_reg2", _wrap_lvar_locator_t_get_reg2, METH_O, "lvar_locator_t_get_reg2(self) -> mreg_t"},
	 { "lvar_locator_t_get_scattered", _wrap_lvar_locator_t_get_scattered, METH_VARARGS, "\n"
		"lvar_locator_t_get_scattered(self) -> scattered_aloc_t\n"
		"lvar_locator_t_get_scattered(self) -> scattered_aloc_t\n"
		""},
	 { "lvar_locator_t___eq__", _wrap_lvar_locator_t___eq__, METH_VARARGS, "lvar_locator_t___eq__(self, r) -> bool"},
	 { "lvar_locator_t___ne__", _wrap_lvar_locator_t___ne__, METH_VARARGS, "lvar_locator_t___ne__(self, r) -> bool"},
	 { "lvar_locator_t___lt__", _wrap_lvar_locator_t___lt__, METH_VARARGS, "lvar_locator_t___lt__(self, r) -> bool"},
	 { "lvar_locator_t___gt__", _wrap_lvar_locator_t___gt__, METH_VARARGS, "lvar_locator_t___gt__(self, r) -> bool"},
	 { "lvar_locator_t___le__", _wrap_lvar_locator_t___le__, METH_VARARGS, "lvar_locator_t___le__(self, r) -> bool"},
	 { "lvar_locator_t___ge__", _wrap_lvar_locator_t___ge__, METH_VARARGS, "lvar_locator_t___ge__(self, r) -> bool"},
	 { "lvar_locator_t_compare", _wrap_lvar_locator_t_compare, METH_VARARGS, "lvar_locator_t_compare(self, r) -> int"},
	 { "delete_lvar_locator_t", _wrap_delete_lvar_locator_t, METH_O, "delete_lvar_locator_t(self)"},
	 { "lvar_locator_t_swigregister", lvar_locator_t_swigregister, METH_O, NULL},
	 { "lvar_locator_t_swiginit", lvar_locator_t_swiginit, METH_VARARGS, NULL},
	 { "lvar_t_name_set", _wrap_lvar_t_name_set, METH_VARARGS, "lvar_t_name_set(self, name)"},
	 { "lvar_t_name_get", _wrap_lvar_t_name_get, METH_O, "lvar_t_name_get(self) -> qstring *"},
	 { "lvar_t_cmt_set", _wrap_lvar_t_cmt_set, METH_VARARGS, "lvar_t_cmt_set(self, cmt)"},
	 { "lvar_t_cmt_get", _wrap_lvar_t_cmt_get, METH_O, "lvar_t_cmt_get(self) -> qstring *"},
	 { "lvar_t_tif_set", _wrap_lvar_t_tif_set, METH_VARARGS, "lvar_t_tif_set(self, tif)"},
	 { "lvar_t_tif_get", _wrap_lvar_t_tif_get, METH_O, "lvar_t_tif_get(self) -> tinfo_t"},
	 { "lvar_t_width_set", _wrap_lvar_t_width_set, METH_VARARGS, "lvar_t_width_set(self, width)"},
	 { "lvar_t_width_get", _wrap_lvar_t_width_get, METH_O, "lvar_t_width_get(self) -> int"},
	 { "lvar_t_defblk_set", _wrap_lvar_t_defblk_set, METH_VARARGS, "lvar_t_defblk_set(self, defblk)"},
	 { "lvar_t_defblk_get", _wrap_lvar_t_defblk_get, METH_O, "lvar_t_defblk_get(self) -> int"},
	 { "lvar_t_divisor_set", _wrap_lvar_t_divisor_set, METH_VARARGS, "lvar_t_divisor_set(self, divisor)"},
	 { "lvar_t_divisor_get", _wrap_lvar_t_divisor_get, METH_O, "lvar_t_divisor_get(self) -> uint64"},
	 { "lvar_t_used", _wrap_lvar_t_used, METH_O, "lvar_t_used(self) -> bool"},
	 { "lvar_t_typed", _wrap_lvar_t_typed, METH_O, "lvar_t_typed(self) -> bool"},
	 { "lvar_t_mreg_done", _wrap_lvar_t_mreg_done, METH_O, "lvar_t_mreg_done(self) -> bool"},
	 { "lvar_t_has_nice_name", _wrap_lvar_t_has_nice_name, METH_O, "lvar_t_has_nice_name(self) -> bool"},
	 { "lvar_t_is_unknown_width", _wrap_lvar_t_is_unknown_width, METH_O, "lvar_t_is_unknown_width(self) -> bool"},
	 { "lvar_t_has_user_info", _wrap_lvar_t_has_user_info, METH_O, "lvar_t_has_user_info(self) -> bool"},
	 { "lvar_t_has_user_name", _wrap_lvar_t_has_user_name, METH_O, "lvar_t_has_user_name(self) -> bool"},
	 { "lvar_t_has_user_type", _wrap_lvar_t_has_user_type, METH_O, "lvar_t_has_user_type(self) -> bool"},
	 { "lvar_t_is_result_var", _wrap_lvar_t_is_result_var, METH_O, "lvar_t_is_result_var(self) -> bool"},
	 { "lvar_t_is_arg_var", _wrap_lvar_t_is_arg_var, METH_O, "lvar_t_is_arg_var(self) -> bool"},
	 { "lvar_t_is_fake_var", _wrap_lvar_t_is_fake_var, METH_O, "lvar_t_is_fake_var(self) -> bool"},
	 { "lvar_t_is_overlapped_var", _wrap_lvar_t_is_overlapped_var, METH_O, "lvar_t_is_overlapped_var(self) -> bool"},
	 { "lvar_t_is_floating_var", _wrap_lvar_t_is_floating_var, METH_O, "lvar_t_is_floating_var(self) -> bool"},
	 { "lvar_t_is_spoiled_var", _wrap_lvar_t_is_spoiled_var, METH_O, "lvar_t_is_spoiled_var(self) -> bool"},
	 { "lvar_t_is_noptr_var", _wrap_lvar_t_is_noptr_var, METH_O, "lvar_t_is_noptr_var(self) -> bool"},
	 { "lvar_t_is_mapdst_var", _wrap_lvar_t_is_mapdst_var, METH_O, "lvar_t_is_mapdst_var(self) -> bool"},
	 { "lvar_t_is_thisarg", _wrap_lvar_t_is_thisarg, METH_O, "lvar_t_is_thisarg(self) -> bool"},
	 { "lvar_t_is_forced_var", _wrap_lvar_t_is_forced_var, METH_O, "lvar_t_is_forced_var(self) -> bool"},
	 { "lvar_t_has_regname", _wrap_lvar_t_has_regname, METH_O, "lvar_t_has_regname(self) -> bool"},
	 { "lvar_t_set_used", _wrap_lvar_t_set_used, METH_O, "lvar_t_set_used(self)"},
	 { "lvar_t_clear_used", _wrap_lvar_t_clear_used, METH_O, "lvar_t_clear_used(self)"},
	 { "lvar_t_set_typed", _wrap_lvar_t_set_typed, METH_O, "lvar_t_set_typed(self)"},
	 { "lvar_t_set_non_typed", _wrap_lvar_t_set_non_typed, METH_O, "lvar_t_set_non_typed(self)"},
	 { "lvar_t_clr_user_info", _wrap_lvar_t_clr_user_info, METH_O, "lvar_t_clr_user_info(self)"},
	 { "lvar_t_set_user_name", _wrap_lvar_t_set_user_name, METH_O, "lvar_t_set_user_name(self)"},
	 { "lvar_t_set_user_type", _wrap_lvar_t_set_user_type, METH_O, "lvar_t_set_user_type(self)"},
	 { "lvar_t_clr_user_type", _wrap_lvar_t_clr_user_type, METH_O, "lvar_t_clr_user_type(self)"},
	 { "lvar_t_clr_user_name", _wrap_lvar_t_clr_user_name, METH_O, "lvar_t_clr_user_name(self)"},
	 { "lvar_t_set_mreg_done", _wrap_lvar_t_set_mreg_done, METH_O, "lvar_t_set_mreg_done(self)"},
	 { "lvar_t_clr_mreg_done", _wrap_lvar_t_clr_mreg_done, METH_O, "lvar_t_clr_mreg_done(self)"},
	 { "lvar_t_set_unknown_width", _wrap_lvar_t_set_unknown_width, METH_O, "lvar_t_set_unknown_width(self)"},
	 { "lvar_t_clr_unknown_width", _wrap_lvar_t_clr_unknown_width, METH_O, "lvar_t_clr_unknown_width(self)"},
	 { "lvar_t_set_arg_var", _wrap_lvar_t_set_arg_var, METH_O, "lvar_t_set_arg_var(self)"},
	 { "lvar_t_clr_arg_var", _wrap_lvar_t_clr_arg_var, METH_O, "lvar_t_clr_arg_var(self)"},
	 { "lvar_t_set_fake_var", _wrap_lvar_t_set_fake_var, METH_O, "lvar_t_set_fake_var(self)"},
	 { "lvar_t_clr_fake_var", _wrap_lvar_t_clr_fake_var, METH_O, "lvar_t_clr_fake_var(self)"},
	 { "lvar_t_set_overlapped_var", _wrap_lvar_t_set_overlapped_var, METH_O, "lvar_t_set_overlapped_var(self)"},
	 { "lvar_t_clr_overlapped_var", _wrap_lvar_t_clr_overlapped_var, METH_O, "lvar_t_clr_overlapped_var(self)"},
	 { "lvar_t_set_floating_var", _wrap_lvar_t_set_floating_var, METH_O, "lvar_t_set_floating_var(self)"},
	 { "lvar_t_clr_floating_var", _wrap_lvar_t_clr_floating_var, METH_O, "lvar_t_clr_floating_var(self)"},
	 { "lvar_t_set_spoiled_var", _wrap_lvar_t_set_spoiled_var, METH_O, "lvar_t_set_spoiled_var(self)"},
	 { "lvar_t_clr_spoiled_var", _wrap_lvar_t_clr_spoiled_var, METH_O, "lvar_t_clr_spoiled_var(self)"},
	 { "lvar_t_set_mapdst_var", _wrap_lvar_t_set_mapdst_var, METH_O, "lvar_t_set_mapdst_var(self)"},
	 { "lvar_t_clr_mapdst_var", _wrap_lvar_t_clr_mapdst_var, METH_O, "lvar_t_clr_mapdst_var(self)"},
	 { "lvar_t_set_noptr_var", _wrap_lvar_t_set_noptr_var, METH_O, "lvar_t_set_noptr_var(self)"},
	 { "lvar_t_clr_noptr_var", _wrap_lvar_t_clr_noptr_var, METH_O, "lvar_t_clr_noptr_var(self)"},
	 { "lvar_t_set_thisarg", _wrap_lvar_t_set_thisarg, METH_O, "lvar_t_set_thisarg(self)"},
	 { "lvar_t_clr_thisarg", _wrap_lvar_t_clr_thisarg, METH_O, "lvar_t_clr_thisarg(self)"},
	 { "lvar_t_set_forced_var", _wrap_lvar_t_set_forced_var, METH_O, "lvar_t_set_forced_var(self)"},
	 { "lvar_t_clr_forced_var", _wrap_lvar_t_clr_forced_var, METH_O, "lvar_t_clr_forced_var(self)"},
	 { "lvar_t_has_common", _wrap_lvar_t_has_common, METH_VARARGS, "lvar_t_has_common(self, v) -> bool"},
	 { "lvar_t_has_common_bit", _wrap_lvar_t_has_common_bit, METH_VARARGS, "lvar_t_has_common_bit(self, loc, width2) -> bool"},
	 { "lvar_t_type", _wrap_lvar_t_type, METH_VARARGS, "\n"
		"lvar_t_type(self) -> tinfo_t\n"
		"lvar_t_type(self) -> tinfo_t\n"
		""},
	 { "lvar_t_accepts_type", _wrap_lvar_t_accepts_type, METH_VARARGS, "lvar_t_accepts_type(self, t, may_change_thisarg=False) -> bool"},
	 { "lvar_t_set_lvar_type", _wrap_lvar_t_set_lvar_type, METH_VARARGS, "lvar_t_set_lvar_type(self, t, may_fail=False) -> bool"},
	 { "lvar_t_set_final_lvar_type", _wrap_lvar_t_set_final_lvar_type, METH_VARARGS, "lvar_t_set_final_lvar_type(self, t)"},
	 { "lvar_t_set_width", _wrap_lvar_t_set_width, METH_VARARGS, "lvar_t_set_width(self, w, svw_flags=0) -> bool"},
	 { "lvar_t_append_list", _wrap_lvar_t_append_list, METH_VARARGS, "lvar_t_append_list(self, lst, pad_if_scattered=False)"},
	 { "lvar_t_is_aliasable", _wrap_lvar_t_is_aliasable, METH_VARARGS, "lvar_t_is_aliasable(self, mba) -> bool"},
	 { "delete_lvar_t", _wrap_delete_lvar_t, METH_O, "delete_lvar_t(self)"},
	 { "lvar_t_swigregister", lvar_t_swigregister, METH_O, NULL},
	 { "lvars_t_find_input_lvar", _wrap_lvars_t_find_input_lvar, METH_VARARGS, "lvars_t_find_input_lvar(self, argloc, _size) -> int"},
	 { "lvars_t_find_stkvar", _wrap_lvars_t_find_stkvar, METH_VARARGS, "lvars_t_find_stkvar(self, spoff, width) -> int"},
	 { "lvars_t_find", _wrap_lvars_t_find, METH_VARARGS, "lvars_t_find(self, ll) -> lvar_t"},
	 { "lvars_t_find_lvar", _wrap_lvars_t_find_lvar, METH_VARARGS, "lvars_t_find_lvar(self, location, width, defblk=-1) -> int"},
	 { "new_lvars_t", _wrap_new_lvars_t, METH_NOARGS, "new_lvars_t() -> lvars_t"},
	 { "delete_lvars_t", _wrap_delete_lvars_t, METH_O, "delete_lvars_t(self)"},
	 { "lvars_t_swigregister", lvars_t_swigregister, METH_O, NULL},
	 { "lvars_t_swiginit", lvars_t_swiginit, METH_VARARGS, NULL},
	 { "lvar_saved_info_t_ll_set", _wrap_lvar_saved_info_t_ll_set, METH_VARARGS, "lvar_saved_info_t_ll_set(self, ll)"},
	 { "lvar_saved_info_t_ll_get", _wrap_lvar_saved_info_t_ll_get, METH_O, "lvar_saved_info_t_ll_get(self) -> lvar_locator_t"},
	 { "lvar_saved_info_t_name_set", _wrap_lvar_saved_info_t_name_set, METH_VARARGS, "lvar_saved_info_t_name_set(self, name)"},
	 { "lvar_saved_info_t_name_get", _wrap_lvar_saved_info_t_name_get, METH_O, "lvar_saved_info_t_name_get(self) -> qstring *"},
	 { "lvar_saved_info_t_type_set", _wrap_lvar_saved_info_t_type_set, METH_VARARGS, "lvar_saved_info_t_type_set(self, type)"},
	 { "lvar_saved_info_t_type_get", _wrap_lvar_saved_info_t_type_get, METH_O, "lvar_saved_info_t_type_get(self) -> tinfo_t"},
	 { "lvar_saved_info_t_cmt_set", _wrap_lvar_saved_info_t_cmt_set, METH_VARARGS, "lvar_saved_info_t_cmt_set(self, cmt)"},
	 { "lvar_saved_info_t_cmt_get", _wrap_lvar_saved_info_t_cmt_get, METH_O, "lvar_saved_info_t_cmt_get(self) -> qstring *"},
	 { "lvar_saved_info_t_size_set", _wrap_lvar_saved_info_t_size_set, METH_VARARGS, "lvar_saved_info_t_size_set(self, size)"},
	 { "lvar_saved_info_t_size_get", _wrap_lvar_saved_info_t_size_get, METH_O, "lvar_saved_info_t_size_get(self) -> ssize_t"},
	 { "lvar_saved_info_t_flags_set", _wrap_lvar_saved_info_t_flags_set, METH_VARARGS, "lvar_saved_info_t_flags_set(self, flags)"},
	 { "lvar_saved_info_t_flags_get", _wrap_lvar_saved_info_t_flags_get, METH_O, "lvar_saved_info_t_flags_get(self) -> int"},
	 { "new_lvar_saved_info_t", _wrap_new_lvar_saved_info_t, METH_NOARGS, "new_lvar_saved_info_t() -> lvar_saved_info_t"},
	 { "lvar_saved_info_t_has_info", _wrap_lvar_saved_info_t_has_info, METH_O, "lvar_saved_info_t_has_info(self) -> bool"},
	 { "lvar_saved_info_t___eq__", _wrap_lvar_saved_info_t___eq__, METH_VARARGS, "lvar_saved_info_t___eq__(self, r) -> bool"},
	 { "lvar_saved_info_t___ne__", _wrap_lvar_saved_info_t___ne__, METH_VARARGS, "lvar_saved_info_t___ne__(self, r) -> bool"},
	 { "lvar_saved_info_t_is_kept", _wrap_lvar_saved_info_t_is_kept, METH_O, "lvar_saved_info_t_is_kept(self) -> bool"},
	 { "lvar_saved_info_t_clear_keep", _wrap_lvar_saved_info_t_clear_keep, METH_O, "lvar_saved_info_t_clear_keep(self)"},
	 { "lvar_saved_info_t_set_keep", _wrap_lvar_saved_info_t_set_keep, METH_O, "lvar_saved_info_t_set_keep(self)"},
	 { "lvar_saved_info_t_is_forced_lvar", _wrap_lvar_saved_info_t_is_forced_lvar, METH_O, "lvar_saved_info_t_is_forced_lvar(self) -> bool"},
	 { "lvar_saved_info_t_set_forced_lvar", _wrap_lvar_saved_info_t_set_forced_lvar, METH_O, "lvar_saved_info_t_set_forced_lvar(self)"},
	 { "lvar_saved_info_t_clr_forced_lvar", _wrap_lvar_saved_info_t_clr_forced_lvar, METH_O, "lvar_saved_info_t_clr_forced_lvar(self)"},
	 { "lvar_saved_info_t_is_noptr_lvar", _wrap_lvar_saved_info_t_is_noptr_lvar, METH_O, "lvar_saved_info_t_is_noptr_lvar(self) -> bool"},
	 { "lvar_saved_info_t_set_noptr_lvar", _wrap_lvar_saved_info_t_set_noptr_lvar, METH_O, "lvar_saved_info_t_set_noptr_lvar(self)"},
	 { "lvar_saved_info_t_clr_noptr_lvar", _wrap_lvar_saved_info_t_clr_noptr_lvar, METH_O, "lvar_saved_info_t_clr_noptr_lvar(self)"},
	 { "delete_lvar_saved_info_t", _wrap_delete_lvar_saved_info_t, METH_O, "delete_lvar_saved_info_t(self)"},
	 { "lvar_saved_info_t_swigregister", lvar_saved_info_t_swigregister, METH_O, NULL},
	 { "lvar_saved_info_t_swiginit", lvar_saved_info_t_swiginit, METH_VARARGS, NULL},
	 { "lvar_uservec_t_lvvec_set", _wrap_lvar_uservec_t_lvvec_set, METH_VARARGS, "lvar_uservec_t_lvvec_set(self, lvvec)"},
	 { "lvar_uservec_t_lvvec_get", _wrap_lvar_uservec_t_lvvec_get, METH_O, "lvar_uservec_t_lvvec_get(self) -> lvar_saved_infos_t"},
	 { "lvar_uservec_t_lmaps_set", _wrap_lvar_uservec_t_lmaps_set, METH_VARARGS, "lvar_uservec_t_lmaps_set(self, lmaps)"},
	 { "lvar_uservec_t_lmaps_get", _wrap_lvar_uservec_t_lmaps_get, METH_O, "lvar_uservec_t_lmaps_get(self) -> lvar_mapping_t"},
	 { "lvar_uservec_t_stkoff_delta_set", _wrap_lvar_uservec_t_stkoff_delta_set, METH_VARARGS, "lvar_uservec_t_stkoff_delta_set(self, stkoff_delta)"},
	 { "lvar_uservec_t_stkoff_delta_get", _wrap_lvar_uservec_t_stkoff_delta_get, METH_O, "lvar_uservec_t_stkoff_delta_get(self) -> uval_t"},
	 { "lvar_uservec_t_ulv_flags_set", _wrap_lvar_uservec_t_ulv_flags_set, METH_VARARGS, "lvar_uservec_t_ulv_flags_set(self, ulv_flags)"},
	 { "lvar_uservec_t_ulv_flags_get", _wrap_lvar_uservec_t_ulv_flags_get, METH_O, "lvar_uservec_t_ulv_flags_get(self) -> int"},
	 { "new_lvar_uservec_t", _wrap_new_lvar_uservec_t, METH_NOARGS, "new_lvar_uservec_t() -> lvar_uservec_t"},
	 { "lvar_uservec_t_swap", _wrap_lvar_uservec_t_swap, METH_VARARGS, "lvar_uservec_t_swap(self, r)"},
	 { "lvar_uservec_t_find_info", _wrap_lvar_uservec_t_find_info, METH_VARARGS, "lvar_uservec_t_find_info(self, vloc) -> lvar_saved_info_t"},
	 { "lvar_uservec_t_keep_info", _wrap_lvar_uservec_t_keep_info, METH_VARARGS, "lvar_uservec_t_keep_info(self, v)"},
	 { "delete_lvar_uservec_t", _wrap_delete_lvar_uservec_t, METH_O, "delete_lvar_uservec_t(self)"},
	 { "lvar_uservec_t_swigregister", lvar_uservec_t_swigregister, METH_O, NULL},
	 { "lvar_uservec_t_swiginit", lvar_uservec_t_swiginit, METH_VARARGS, NULL},
	 { "restore_user_lvar_settings", _wrap_restore_user_lvar_settings, METH_VARARGS, "restore_user_lvar_settings(lvinf, func_ea) -> bool"},
	 { "save_user_lvar_settings", _wrap_save_user_lvar_settings, METH_VARARGS, "save_user_lvar_settings(func_ea, lvinf)"},
	 { "user_lvar_modifier_t_modify_lvars", _wrap_user_lvar_modifier_t_modify_lvars, METH_VARARGS, "user_lvar_modifier_t_modify_lvars(self, lvinf) -> bool"},
	 { "new_user_lvar_modifier_t", _wrap_new_user_lvar_modifier_t, METH_O, "new_user_lvar_modifier_t(_self) -> user_lvar_modifier_t"},
	 { "delete_user_lvar_modifier_t", _wrap_delete_user_lvar_modifier_t, METH_O, "delete_user_lvar_modifier_t(self)"},
	 { "disown_user_lvar_modifier_t", _wrap_disown_user_lvar_modifier_t, METH_O, NULL},
	 { "user_lvar_modifier_t_swigregister", user_lvar_modifier_t_swigregister, METH_O, NULL},
	 { "user_lvar_modifier_t_swiginit", user_lvar_modifier_t_swiginit, METH_VARARGS, NULL},
	 { "modify_user_lvars", _wrap_modify_user_lvars, METH_VARARGS, "modify_user_lvars(entry_ea, mlv) -> bool"},
	 { "udcall_t_name_set", _wrap_udcall_t_name_set, METH_VARARGS, "udcall_t_name_set(self, name)"},
	 { "udcall_t_name_get", _wrap_udcall_t_name_get, METH_O, "udcall_t_name_get(self) -> qstring *"},
	 { "udcall_t_tif_set", _wrap_udcall_t_tif_set, METH_VARARGS, "udcall_t_tif_set(self, tif)"},
	 { "udcall_t_tif_get", _wrap_udcall_t_tif_get, METH_O, "udcall_t_tif_get(self) -> tinfo_t"},
	 { "new_udcall_t", _wrap_new_udcall_t, METH_NOARGS, "new_udcall_t() -> udcall_t"},
	 { "delete_udcall_t", _wrap_delete_udcall_t, METH_O, "delete_udcall_t(self)"},
	 { "udcall_t_swigregister", udcall_t_swigregister, METH_O, NULL},
	 { "udcall_t_swiginit", udcall_t_swiginit, METH_VARARGS, NULL},
	 { "restore_user_defined_calls", _wrap_restore_user_defined_calls, METH_VARARGS, "restore_user_defined_calls(udcalls, func_ea) -> bool"},
	 { "save_user_defined_calls", _wrap_save_user_defined_calls, METH_VARARGS, "save_user_defined_calls(func_ea, udcalls)"},
	 { "parse_user_call", _wrap_parse_user_call, METH_VARARGS, "parse_user_call(udc, decl, silent) -> bool"},
	 { "convert_to_user_call", _wrap_convert_to_user_call, METH_VARARGS, "convert_to_user_call(udc, cdg) -> merror_t"},
	 { "microcode_filter_t_match", _wrap_microcode_filter_t_match, METH_VARARGS, "microcode_filter_t_match(self, cdg) -> bool"},
	 { "microcode_filter_t_apply", _wrap_microcode_filter_t_apply, METH_VARARGS, "microcode_filter_t_apply(self, cdg) -> merror_t"},
	 { "new_microcode_filter_t", _wrap_new_microcode_filter_t, METH_O, "new_microcode_filter_t(_self) -> microcode_filter_t"},
	 { "delete_microcode_filter_t", _wrap_delete_microcode_filter_t, METH_O, "delete_microcode_filter_t(self)"},
	 { "disown_microcode_filter_t", _wrap_disown_microcode_filter_t, METH_O, NULL},
	 { "microcode_filter_t_swigregister", microcode_filter_t_swigregister, METH_O, NULL},
	 { "microcode_filter_t_swiginit", microcode_filter_t_swiginit, METH_VARARGS, NULL},
	 { "install_microcode_filter", _wrap_install_microcode_filter, METH_VARARGS, "install_microcode_filter(filter, install=True)"},
	 { "udc_filter_t_match", _wrap_udc_filter_t_match, METH_VARARGS, "udc_filter_t_match(self, cdg) -> bool"},
	 { "udc_filter_t_init", _wrap_udc_filter_t_init, METH_VARARGS, "udc_filter_t_init(self, decl) -> bool"},
	 { "udc_filter_t_apply", _wrap_udc_filter_t_apply, METH_VARARGS, "udc_filter_t_apply(self, cdg) -> merror_t"},
	 { "new_udc_filter_t", _wrap_new_udc_filter_t, METH_O, "new_udc_filter_t(_self) -> udc_filter_t"},
	 { "delete_udc_filter_t", _wrap_delete_udc_filter_t, METH_O, "delete_udc_filter_t(self)"},
	 { "disown_udc_filter_t", _wrap_disown_udc_filter_t, METH_O, NULL},
	 { "udc_filter_t_swigregister", udc_filter_t_swigregister, METH_O, NULL},
	 { "udc_filter_t_swiginit", udc_filter_t_swiginit, METH_VARARGS, NULL},
	 { "fnumber_t_fnum_set", _wrap_fnumber_t_fnum_set, METH_VARARGS, "fnumber_t_fnum_set(self, fnum)"},
	 { "fnumber_t_fnum_get", _wrap_fnumber_t_fnum_get, METH_O, "fnumber_t_fnum_get(self) -> uint16 [6]"},
	 { "fnumber_t_nbytes_set", _wrap_fnumber_t_nbytes_set, METH_VARARGS, "fnumber_t_nbytes_set(self, nbytes)"},
	 { "fnumber_t_nbytes_get", _wrap_fnumber_t_nbytes_get, METH_O, "fnumber_t_nbytes_get(self) -> int"},
	 { "fnumber_t_dereference_uint16", _wrap_fnumber_t_dereference_uint16, METH_O, "fnumber_t_dereference_uint16(self) -> uint16 *"},
	 { "fnumber_t_dereference_const_uint16", _wrap_fnumber_t_dereference_const_uint16, METH_O, "fnumber_t_dereference_const_uint16(self) -> uint16 const *"},
	 { "fnumber_t__print", _wrap_fnumber_t__print, METH_O, "fnumber_t__print(self)"},
	 { "fnumber_t___eq__", _wrap_fnumber_t___eq__, METH_VARARGS, "fnumber_t___eq__(self, r) -> bool"},
	 { "fnumber_t___ne__", _wrap_fnumber_t___ne__, METH_VARARGS, "fnumber_t___ne__(self, r) -> bool"},
	 { "fnumber_t___lt__", _wrap_fnumber_t___lt__, METH_VARARGS, "fnumber_t___lt__(self, r) -> bool"},
	 { "fnumber_t___gt__", _wrap_fnumber_t___gt__, METH_VARARGS, "fnumber_t___gt__(self, r) -> bool"},
	 { "fnumber_t___le__", _wrap_fnumber_t___le__, METH_VARARGS, "fnumber_t___le__(self, r) -> bool"},
	 { "fnumber_t___ge__", _wrap_fnumber_t___ge__, METH_VARARGS, "fnumber_t___ge__(self, r) -> bool"},
	 { "fnumber_t_compare", _wrap_fnumber_t_compare, METH_VARARGS, "fnumber_t_compare(self, r) -> int"},
	 { "fnumber_t___get_fnum", _wrap_fnumber_t___get_fnum, METH_O, "fnumber_t___get_fnum(self) -> fnum_array"},
	 { "new_fnumber_t", _wrap_new_fnumber_t, METH_NOARGS, "new_fnumber_t() -> fnumber_t"},
	 { "delete_fnumber_t", _wrap_delete_fnumber_t, METH_O, "delete_fnumber_t(self)"},
	 { "fnumber_t_swigregister", fnumber_t_swigregister, METH_O, NULL},
	 { "fnumber_t_swiginit", fnumber_t_swiginit, METH_VARARGS, NULL},
	 { "hexwarn_t_ea_set", _wrap_hexwarn_t_ea_set, METH_VARARGS, "hexwarn_t_ea_set(self, ea)"},
	 { "hexwarn_t_ea_get", _wrap_hexwarn_t_ea_get, METH_O, "hexwarn_t_ea_get(self) -> ea_t"},
	 { "hexwarn_t_id_set", _wrap_hexwarn_t_id_set, METH_VARARGS, "hexwarn_t_id_set(self, id)"},
	 { "hexwarn_t_id_get", _wrap_hexwarn_t_id_get, METH_O, "hexwarn_t_id_get(self) -> warnid_t"},
	 { "hexwarn_t_text_set", _wrap_hexwarn_t_text_set, METH_VARARGS, "hexwarn_t_text_set(self, text)"},
	 { "hexwarn_t_text_get", _wrap_hexwarn_t_text_get, METH_O, "hexwarn_t_text_get(self) -> qstring *"},
	 { "hexwarn_t___eq__", _wrap_hexwarn_t___eq__, METH_VARARGS, "hexwarn_t___eq__(self, r) -> bool"},
	 { "hexwarn_t___ne__", _wrap_hexwarn_t___ne__, METH_VARARGS, "hexwarn_t___ne__(self, r) -> bool"},
	 { "hexwarn_t___lt__", _wrap_hexwarn_t___lt__, METH_VARARGS, "hexwarn_t___lt__(self, r) -> bool"},
	 { "hexwarn_t___gt__", _wrap_hexwarn_t___gt__, METH_VARARGS, "hexwarn_t___gt__(self, r) -> bool"},
	 { "hexwarn_t___le__", _wrap_hexwarn_t___le__, METH_VARARGS, "hexwarn_t___le__(self, r) -> bool"},
	 { "hexwarn_t___ge__", _wrap_hexwarn_t___ge__, METH_VARARGS, "hexwarn_t___ge__(self, r) -> bool"},
	 { "hexwarn_t_compare", _wrap_hexwarn_t_compare, METH_VARARGS, "hexwarn_t_compare(self, r) -> int"},
	 { "new_hexwarn_t", _wrap_new_hexwarn_t, METH_NOARGS, "new_hexwarn_t() -> hexwarn_t"},
	 { "delete_hexwarn_t", _wrap_delete_hexwarn_t, METH_O, "delete_hexwarn_t(self)"},
	 { "hexwarn_t_swigregister", hexwarn_t_swigregister, METH_O, NULL},
	 { "hexwarn_t_swiginit", hexwarn_t_swiginit, METH_VARARGS, NULL},
	 { "codegen_t_mba_set", _wrap_codegen_t_mba_set, METH_VARARGS, "codegen_t_mba_set(self, mba)"},
	 { "codegen_t_mba_get", _wrap_codegen_t_mba_get, METH_O, "codegen_t_mba_get(self) -> mbl_array_t *"},
	 { "codegen_t_mb_set", _wrap_codegen_t_mb_set, METH_VARARGS, "codegen_t_mb_set(self, mb)"},
	 { "codegen_t_mb_get", _wrap_codegen_t_mb_get, METH_O, "codegen_t_mb_get(self) -> mblock_t *"},
	 { "codegen_t_insn_set", _wrap_codegen_t_insn_set, METH_VARARGS, "codegen_t_insn_set(self, insn)"},
	 { "codegen_t_insn_get", _wrap_codegen_t_insn_get, METH_O, "codegen_t_insn_get(self) -> insn_t *"},
	 { "codegen_t_ignore_micro_set", _wrap_codegen_t_ignore_micro_set, METH_VARARGS, "codegen_t_ignore_micro_set(self, ignore_micro)"},
	 { "codegen_t_ignore_micro_get", _wrap_codegen_t_ignore_micro_get, METH_O, "codegen_t_ignore_micro_get(self) -> char"},
	 { "new_codegen_t", _wrap_new_codegen_t, METH_VARARGS, "new_codegen_t(_self, m) -> codegen_t"},
	 { "delete_codegen_t", _wrap_delete_codegen_t, METH_O, "delete_codegen_t(self)"},
	 { "codegen_t_analyze_prolog", _wrap_codegen_t_analyze_prolog, METH_VARARGS, "codegen_t_analyze_prolog(self, fc, reachable) -> merror_t"},
	 { "codegen_t_gen_micro", _wrap_codegen_t_gen_micro, METH_O, "codegen_t_gen_micro(self) -> merror_t"},
	 { "codegen_t_load_operand", _wrap_codegen_t_load_operand, METH_VARARGS, "codegen_t_load_operand(self, opnum) -> mreg_t"},
	 { "codegen_t_emit_micro_mvm", _wrap_codegen_t_emit_micro_mvm, METH_VARARGS, "codegen_t_emit_micro_mvm(self, code, dtype, l, r, d, offsize) -> minsn_t *"},
	 { "codegen_t_emit", _wrap_codegen_t_emit, METH_VARARGS, "\n"
		"codegen_t_emit(self, code, width, l, r, d, offsize) -> minsn_t\n"
		"codegen_t_emit(self, code, l, r, d) -> minsn_t *\n"
		""},
	 { "disown_codegen_t", _wrap_disown_codegen_t, METH_O, NULL},
	 { "codegen_t_swigregister", codegen_t_swigregister, METH_O, NULL},
	 { "codegen_t_swiginit", codegen_t_swiginit, METH_VARARGS, NULL},
	 { "get_hexrays_version", _wrap_get_hexrays_version, METH_NOARGS, "get_hexrays_version() -> char const *"},
	 { "open_pseudocode", _wrap_open_pseudocode, METH_VARARGS, "open_pseudocode(ea, new_window) -> vdui_t"},
	 { "close_pseudocode", _wrap_close_pseudocode, METH_O, "close_pseudocode(f) -> bool"},
	 { "hexrays_failure_t_code_set", _wrap_hexrays_failure_t_code_set, METH_VARARGS, "hexrays_failure_t_code_set(self, code)"},
	 { "hexrays_failure_t_code_get", _wrap_hexrays_failure_t_code_get, METH_O, "hexrays_failure_t_code_get(self) -> merror_t"},
	 { "hexrays_failure_t_errea_set", _wrap_hexrays_failure_t_errea_set, METH_VARARGS, "hexrays_failure_t_errea_set(self, errea)"},
	 { "hexrays_failure_t_errea_get", _wrap_hexrays_failure_t_errea_get, METH_O, "hexrays_failure_t_errea_get(self) -> ea_t"},
	 { "hexrays_failure_t_str_set", _wrap_hexrays_failure_t_str_set, METH_VARARGS, "hexrays_failure_t_str_set(self, str)"},
	 { "hexrays_failure_t_str_get", _wrap_hexrays_failure_t_str_get, METH_O, "hexrays_failure_t_str_get(self) -> qstring *"},
	 { "new_hexrays_failure_t", _wrap_new_hexrays_failure_t, METH_VARARGS, "\n"
		"hexrays_failure_t()\n"
		"hexrays_failure_t(c, ea, buf=None)\n"
		"new_hexrays_failure_t(c, ea, buf) -> hexrays_failure_t\n"
		""},
	 { "hexrays_failure_t_desc", _wrap_hexrays_failure_t_desc, METH_O, "hexrays_failure_t_desc(self) -> qstring"},
	 { "delete_hexrays_failure_t", _wrap_delete_hexrays_failure_t, METH_O, "delete_hexrays_failure_t(self)"},
	 { "hexrays_failure_t_swigregister", hexrays_failure_t_swigregister, METH_O, NULL},
	 { "hexrays_failure_t_swiginit", hexrays_failure_t_swiginit, METH_VARARGS, NULL},
	 { "vd_failure_t_hf_set", _wrap_vd_failure_t_hf_set, METH_VARARGS, "vd_failure_t_hf_set(self, hf)"},
	 { "vd_failure_t_hf_get", _wrap_vd_failure_t_hf_get, METH_O, "vd_failure_t_hf_get(self) -> hexrays_failure_t"},
	 { "new_vd_failure_t", _wrap_new_vd_failure_t, METH_VARARGS, "\n"
		"vd_failure_t()\n"
		"vd_failure_t(code, ea, buf=None)\n"
		"vd_failure_t(code, ea, buf)\n"
		"new_vd_failure_t(_hf) -> vd_failure_t\n"
		""},
	 { "vd_failure_t_desc", _wrap_vd_failure_t_desc, METH_O, "vd_failure_t_desc(self) -> qstring"},
	 { "delete_vd_failure_t", _wrap_delete_vd_failure_t, METH_O, "delete_vd_failure_t(self)"},
	 { "vd_failure_t_swigregister", vd_failure_t_swigregister, METH_O, NULL},
	 { "vd_failure_t_swiginit", vd_failure_t_swiginit, METH_VARARGS, NULL},
	 { "new_vd_interr_t", _wrap_new_vd_interr_t, METH_VARARGS, "\n"
		"vd_interr_t(ea, buf)\n"
		"new_vd_interr_t(ea, buf) -> vd_interr_t\n"
		""},
	 { "delete_vd_interr_t", _wrap_delete_vd_interr_t, METH_O, "delete_vd_interr_t(self)"},
	 { "vd_interr_t_swigregister", vd_interr_t_swigregister, METH_O, NULL},
	 { "vd_interr_t_swiginit", vd_interr_t_swiginit, METH_VARARGS, NULL},
	 { "send_database", _wrap_send_database, METH_VARARGS, "send_database(err, silent)"},
	 { "remitem", _wrap_remitem, METH_O, "remitem(e)"},
	 { "operator_info_t_text_set", _wrap_operator_info_t_text_set, METH_VARARGS, "operator_info_t_text_set(self, text)"},
	 { "operator_info_t_text_get", _wrap_operator_info_t_text_get, METH_O, "operator_info_t_text_get(self) -> char const *"},
	 { "operator_info_t_precedence_set", _wrap_operator_info_t_precedence_set, METH_VARARGS, "operator_info_t_precedence_set(self, precedence)"},
	 { "operator_info_t_precedence_get", _wrap_operator_info_t_precedence_get, METH_O, "operator_info_t_precedence_get(self) -> uchar"},
	 { "operator_info_t_valency_set", _wrap_operator_info_t_valency_set, METH_VARARGS, "operator_info_t_valency_set(self, valency)"},
	 { "operator_info_t_valency_get", _wrap_operator_info_t_valency_get, METH_O, "operator_info_t_valency_get(self) -> uchar"},
	 { "operator_info_t_fixtype_set", _wrap_operator_info_t_fixtype_set, METH_VARARGS, "operator_info_t_fixtype_set(self, fixtype)"},
	 { "operator_info_t_fixtype_get", _wrap_operator_info_t_fixtype_get, METH_O, "operator_info_t_fixtype_get(self) -> uchar"},
	 { "operator_info_t_flags_set", _wrap_operator_info_t_flags_set, METH_VARARGS, "operator_info_t_flags_set(self, flags)"},
	 { "operator_info_t_flags_get", _wrap_operator_info_t_flags_get, METH_O, "operator_info_t_flags_get(self) -> uchar"},
	 { "new_operator_info_t", _wrap_new_operator_info_t, METH_NOARGS, "new_operator_info_t() -> operator_info_t"},
	 { "delete_operator_info_t", _wrap_delete_operator_info_t, METH_O, "delete_operator_info_t(self)"},
	 { "operator_info_t_swigregister", operator_info_t_swigregister, METH_O, NULL},
	 { "operator_info_t_swiginit", operator_info_t_swiginit, METH_VARARGS, NULL},
	 { "negated_relation", _wrap_negated_relation, METH_O, "negated_relation(op) -> ctype_t"},
	 { "swapped_relation", _wrap_swapped_relation, METH_O, "swapped_relation(op) -> ctype_t"},
	 { "get_op_signness", _wrap_get_op_signness, METH_O, "get_op_signness(op) -> type_sign_t"},
	 { "asgop", _wrap_asgop, METH_O, "asgop(cop) -> ctype_t"},
	 { "asgop_revert", _wrap_asgop_revert, METH_O, "asgop_revert(cop) -> ctype_t"},
	 { "op_uses_x", _wrap_op_uses_x, METH_O, "op_uses_x(op) -> bool"},
	 { "op_uses_y", _wrap_op_uses_y, METH_O, "op_uses_y(op) -> bool"},
	 { "op_uses_z", _wrap_op_uses_z, METH_O, "op_uses_z(op) -> bool"},
	 { "is_binary", _wrap_is_binary, METH_O, "is_binary(op) -> bool"},
	 { "is_unary", _wrap_is_unary, METH_O, "is_unary(op) -> bool"},
	 { "is_relational", _wrap_is_relational, METH_O, "is_relational(op) -> bool"},
	 { "is_assignment", _wrap_is_assignment, METH_O, "is_assignment(op) -> bool"},
	 { "accepts_udts", _wrap_accepts_udts, METH_O, "accepts_udts(op) -> bool"},
	 { "is_prepost", _wrap_is_prepost, METH_O, "is_prepost(op) -> bool"},
	 { "is_commutative", _wrap_is_commutative, METH_O, "is_commutative(op) -> bool"},
	 { "is_additive", _wrap_is_additive, METH_O, "is_additive(op) -> bool"},
	 { "is_multiplicative", _wrap_is_multiplicative, METH_O, "is_multiplicative(op) -> bool"},
	 { "is_bitop", _wrap_is_bitop, METH_O, "is_bitop(op) -> bool"},
	 { "is_logical", _wrap_is_logical, METH_O, "is_logical(op) -> bool"},
	 { "is_loop", _wrap_is_loop, METH_O, "is_loop(op) -> bool"},
	 { "is_break_consumer", _wrap_is_break_consumer, METH_O, "is_break_consumer(op) -> bool"},
	 { "is_lvalue", _wrap_is_lvalue, METH_O, "is_lvalue(op) -> bool"},
	 { "is_allowed_on_small_struni", _wrap_is_allowed_on_small_struni, METH_O, "is_allowed_on_small_struni(op) -> bool"},
	 { "cnumber_t__value_set", _wrap_cnumber_t__value_set, METH_VARARGS, "cnumber_t__value_set(self, _value)"},
	 { "cnumber_t__value_get", _wrap_cnumber_t__value_get, METH_O, "cnumber_t__value_get(self) -> uint64"},
	 { "cnumber_t_nf_set", _wrap_cnumber_t_nf_set, METH_VARARGS, "cnumber_t_nf_set(self, nf)"},
	 { "cnumber_t_nf_get", _wrap_cnumber_t_nf_get, METH_O, "cnumber_t_nf_get(self) -> number_format_t"},
	 { "new_cnumber_t", _wrap_new_cnumber_t, METH_VARARGS, "new_cnumber_t(_opnum=0) -> cnumber_t"},
	 { "cnumber_t__print", _wrap_cnumber_t__print, METH_VARARGS, "cnumber_t__print(self, type, parent=None, nice_stroff=None)"},
	 { "cnumber_t_value", _wrap_cnumber_t_value, METH_VARARGS, "cnumber_t_value(self, type) -> uint64"},
	 { "cnumber_t_assign", _wrap_cnumber_t_assign, METH_VARARGS, "cnumber_t_assign(self, v, nbytes, sign)"},
	 { "cnumber_t___eq__", _wrap_cnumber_t___eq__, METH_VARARGS, "cnumber_t___eq__(self, r) -> bool"},
	 { "cnumber_t___ne__", _wrap_cnumber_t___ne__, METH_VARARGS, "cnumber_t___ne__(self, r) -> bool"},
	 { "cnumber_t___lt__", _wrap_cnumber_t___lt__, METH_VARARGS, "cnumber_t___lt__(self, r) -> bool"},
	 { "cnumber_t___gt__", _wrap_cnumber_t___gt__, METH_VARARGS, "cnumber_t___gt__(self, r) -> bool"},
	 { "cnumber_t___le__", _wrap_cnumber_t___le__, METH_VARARGS, "cnumber_t___le__(self, r) -> bool"},
	 { "cnumber_t___ge__", _wrap_cnumber_t___ge__, METH_VARARGS, "cnumber_t___ge__(self, r) -> bool"},
	 { "cnumber_t_compare", _wrap_cnumber_t_compare, METH_VARARGS, "cnumber_t_compare(self, r) -> int"},
	 { "delete_cnumber_t", _wrap_delete_cnumber_t, METH_O, "delete_cnumber_t(self)"},
	 { "cnumber_t_swigregister", cnumber_t_swigregister, METH_O, NULL},
	 { "cnumber_t_swiginit", cnumber_t_swiginit, METH_VARARGS, NULL},
	 { "var_ref_t_mba_set", _wrap_var_ref_t_mba_set, METH_VARARGS, "var_ref_t_mba_set(self, mba)"},
	 { "var_ref_t_mba_get", _wrap_var_ref_t_mba_get, METH_O, "var_ref_t_mba_get(self) -> mbl_array_t *"},
	 { "var_ref_t_idx_set", _wrap_var_ref_t_idx_set, METH_VARARGS, "var_ref_t_idx_set(self, idx)"},
	 { "var_ref_t_idx_get", _wrap_var_ref_t_idx_get, METH_O, "var_ref_t_idx_get(self) -> int"},
	 { "var_ref_t___eq__", _wrap_var_ref_t___eq__, METH_VARARGS, "var_ref_t___eq__(self, r) -> bool"},
	 { "var_ref_t___ne__", _wrap_var_ref_t___ne__, METH_VARARGS, "var_ref_t___ne__(self, r) -> bool"},
	 { "var_ref_t___lt__", _wrap_var_ref_t___lt__, METH_VARARGS, "var_ref_t___lt__(self, r) -> bool"},
	 { "var_ref_t___gt__", _wrap_var_ref_t___gt__, METH_VARARGS, "var_ref_t___gt__(self, r) -> bool"},
	 { "var_ref_t___le__", _wrap_var_ref_t___le__, METH_VARARGS, "var_ref_t___le__(self, r) -> bool"},
	 { "var_ref_t___ge__", _wrap_var_ref_t___ge__, METH_VARARGS, "var_ref_t___ge__(self, r) -> bool"},
	 { "var_ref_t_compare", _wrap_var_ref_t_compare, METH_VARARGS, "var_ref_t_compare(self, r) -> int"},
	 { "new_var_ref_t", _wrap_new_var_ref_t, METH_NOARGS, "new_var_ref_t() -> var_ref_t"},
	 { "delete_var_ref_t", _wrap_delete_var_ref_t, METH_O, "delete_var_ref_t(self)"},
	 { "var_ref_t_swigregister", var_ref_t_swigregister, METH_O, NULL},
	 { "var_ref_t_swiginit", var_ref_t_swiginit, METH_VARARGS, NULL},
	 { "ctree_visitor_t_cv_flags_set", _wrap_ctree_visitor_t_cv_flags_set, METH_VARARGS, "ctree_visitor_t_cv_flags_set(self, cv_flags)"},
	 { "ctree_visitor_t_cv_flags_get", _wrap_ctree_visitor_t_cv_flags_get, METH_O, "ctree_visitor_t_cv_flags_get(self) -> int"},
	 { "ctree_visitor_t_maintain_parents", _wrap_ctree_visitor_t_maintain_parents, METH_O, "ctree_visitor_t_maintain_parents(self) -> bool"},
	 { "ctree_visitor_t_must_prune", _wrap_ctree_visitor_t_must_prune, METH_O, "ctree_visitor_t_must_prune(self) -> bool"},
	 { "ctree_visitor_t_must_restart", _wrap_ctree_visitor_t_must_restart, METH_O, "ctree_visitor_t_must_restart(self) -> bool"},
	 { "ctree_visitor_t_is_postorder", _wrap_ctree_visitor_t_is_postorder, METH_O, "ctree_visitor_t_is_postorder(self) -> bool"},
	 { "ctree_visitor_t_only_insns", _wrap_ctree_visitor_t_only_insns, METH_O, "ctree_visitor_t_only_insns(self) -> bool"},
	 { "ctree_visitor_t_prune_now", _wrap_ctree_visitor_t_prune_now, METH_O, "ctree_visitor_t_prune_now(self)"},
	 { "ctree_visitor_t_clr_prune", _wrap_ctree_visitor_t_clr_prune, METH_O, "ctree_visitor_t_clr_prune(self)"},
	 { "ctree_visitor_t_set_restart", _wrap_ctree_visitor_t_set_restart, METH_O, "ctree_visitor_t_set_restart(self)"},
	 { "ctree_visitor_t_clr_restart", _wrap_ctree_visitor_t_clr_restart, METH_O, "ctree_visitor_t_clr_restart(self)"},
	 { "ctree_visitor_t_parents_set", _wrap_ctree_visitor_t_parents_set, METH_VARARGS, "ctree_visitor_t_parents_set(self, parents)"},
	 { "ctree_visitor_t_parents_get", _wrap_ctree_visitor_t_parents_get, METH_O, "ctree_visitor_t_parents_get(self) -> ctree_items_t"},
	 { "new_ctree_visitor_t", _wrap_new_ctree_visitor_t, METH_VARARGS, "new_ctree_visitor_t(_self, _flags) -> ctree_visitor_t"},
	 { "ctree_visitor_t_apply_to", _wrap_ctree_visitor_t_apply_to, METH_VARARGS, "ctree_visitor_t_apply_to(self, item, parent) -> int"},
	 { "ctree_visitor_t_apply_to_exprs", _wrap_ctree_visitor_t_apply_to_exprs, METH_VARARGS, "ctree_visitor_t_apply_to_exprs(self, item, parent) -> int"},
	 { "ctree_visitor_t_parent_expr", _wrap_ctree_visitor_t_parent_expr, METH_O, "ctree_visitor_t_parent_expr(self) -> cexpr_t"},
	 { "ctree_visitor_t_parent_insn", _wrap_ctree_visitor_t_parent_insn, METH_O, "ctree_visitor_t_parent_insn(self) -> cinsn_t"},
	 { "ctree_visitor_t_visit_insn", _wrap_ctree_visitor_t_visit_insn, METH_VARARGS, "ctree_visitor_t_visit_insn(self, arg0) -> int"},
	 { "ctree_visitor_t_visit_expr", _wrap_ctree_visitor_t_visit_expr, METH_VARARGS, "ctree_visitor_t_visit_expr(self, arg0) -> int"},
	 { "ctree_visitor_t_leave_insn", _wrap_ctree_visitor_t_leave_insn, METH_VARARGS, "ctree_visitor_t_leave_insn(self, arg0) -> int"},
	 { "ctree_visitor_t_leave_expr", _wrap_ctree_visitor_t_leave_expr, METH_VARARGS, "ctree_visitor_t_leave_expr(self, arg0) -> int"},
	 { "delete_ctree_visitor_t", _wrap_delete_ctree_visitor_t, METH_O, "delete_ctree_visitor_t(self)"},
	 { "disown_ctree_visitor_t", _wrap_disown_ctree_visitor_t, METH_O, NULL},
	 { "ctree_visitor_t_swigregister", ctree_visitor_t_swigregister, METH_O, NULL},
	 { "ctree_visitor_t_swiginit", ctree_visitor_t_swiginit, METH_VARARGS, NULL},
	 { "new_ctree_parentee_t", _wrap_new_ctree_parentee_t, METH_VARARGS, "new_ctree_parentee_t(_self, post=False) -> ctree_parentee_t"},
	 { "ctree_parentee_t_recalc_parent_types", _wrap_ctree_parentee_t_recalc_parent_types, METH_O, "ctree_parentee_t_recalc_parent_types(self) -> bool"},
	 { "delete_ctree_parentee_t", _wrap_delete_ctree_parentee_t, METH_O, "delete_ctree_parentee_t(self)"},
	 { "disown_ctree_parentee_t", _wrap_disown_ctree_parentee_t, METH_O, NULL},
	 { "ctree_parentee_t_swigregister", ctree_parentee_t_swigregister, METH_O, NULL},
	 { "ctree_parentee_t_swiginit", ctree_parentee_t_swiginit, METH_VARARGS, NULL},
	 { "cfunc_parentee_t_func_set", _wrap_cfunc_parentee_t_func_set, METH_VARARGS, "cfunc_parentee_t_func_set(self, func)"},
	 { "cfunc_parentee_t_func_get", _wrap_cfunc_parentee_t_func_get, METH_O, "cfunc_parentee_t_func_get(self) -> cfunc_t"},
	 { "new_cfunc_parentee_t", _wrap_new_cfunc_parentee_t, METH_VARARGS, "new_cfunc_parentee_t(_self, f, post=False) -> cfunc_parentee_t"},
	 { "cfunc_parentee_t_calc_rvalue_type", _wrap_cfunc_parentee_t_calc_rvalue_type, METH_VARARGS, "cfunc_parentee_t_calc_rvalue_type(self, target, e) -> bool"},
	 { "delete_cfunc_parentee_t", _wrap_delete_cfunc_parentee_t, METH_O, "delete_cfunc_parentee_t(self)"},
	 { "disown_cfunc_parentee_t", _wrap_disown_cfunc_parentee_t, METH_O, NULL},
	 { "cfunc_parentee_t_swigregister", cfunc_parentee_t_swigregister, METH_O, NULL},
	 { "cfunc_parentee_t_swiginit", cfunc_parentee_t_swiginit, METH_VARARGS, NULL},
	 { "treeloc_t_ea_set", _wrap_treeloc_t_ea_set, METH_VARARGS, "treeloc_t_ea_set(self, ea)"},
	 { "treeloc_t_ea_get", _wrap_treeloc_t_ea_get, METH_O, "treeloc_t_ea_get(self) -> ea_t"},
	 { "treeloc_t_itp_set", _wrap_treeloc_t_itp_set, METH_VARARGS, "treeloc_t_itp_set(self, itp)"},
	 { "treeloc_t_itp_get", _wrap_treeloc_t_itp_get, METH_O, "treeloc_t_itp_get(self) -> item_preciser_t"},
	 { "treeloc_t___lt__", _wrap_treeloc_t___lt__, METH_VARARGS, "treeloc_t___lt__(self, r) -> bool"},
	 { "treeloc_t___eq__", _wrap_treeloc_t___eq__, METH_VARARGS, "treeloc_t___eq__(self, r) -> bool"},
	 { "new_treeloc_t", _wrap_new_treeloc_t, METH_NOARGS, "new_treeloc_t() -> treeloc_t"},
	 { "delete_treeloc_t", _wrap_delete_treeloc_t, METH_O, "delete_treeloc_t(self)"},
	 { "treeloc_t_swigregister", treeloc_t_swigregister, METH_O, NULL},
	 { "treeloc_t_swiginit", treeloc_t_swiginit, METH_VARARGS, NULL},
	 { "citem_cmt_t_used_set", _wrap_citem_cmt_t_used_set, METH_VARARGS, "citem_cmt_t_used_set(self, used)"},
	 { "citem_cmt_t_used_get", _wrap_citem_cmt_t_used_get, METH_O, "citem_cmt_t_used_get(self) -> bool"},
	 { "new_citem_cmt_t", _wrap_new_citem_cmt_t, METH_VARARGS, "\n"
		"citem_cmt_t()\n"
		"new_citem_cmt_t(s) -> citem_cmt_t\n"
		""},
	 { "citem_cmt_t_c_str", _wrap_citem_cmt_t_c_str, METH_O, "citem_cmt_t_c_str(self) -> char const *"},
	 { "citem_cmt_t___str__", _wrap_citem_cmt_t___str__, METH_O, "citem_cmt_t___str__(self) -> char const *"},
	 { "delete_citem_cmt_t", _wrap_delete_citem_cmt_t, METH_O, "delete_citem_cmt_t(self)"},
	 { "citem_cmt_t_swigregister", citem_cmt_t_swigregister, METH_O, NULL},
	 { "citem_cmt_t_swiginit", citem_cmt_t_swiginit, METH_VARARGS, NULL},
	 { "citem_locator_t_ea_set", _wrap_citem_locator_t_ea_set, METH_VARARGS, "citem_locator_t_ea_set(self, ea)"},
	 { "citem_locator_t_ea_get", _wrap_citem_locator_t_ea_get, METH_O, "citem_locator_t_ea_get(self) -> ea_t"},
	 { "citem_locator_t_op_set", _wrap_citem_locator_t_op_set, METH_VARARGS, "citem_locator_t_op_set(self, op)"},
	 { "citem_locator_t_op_get", _wrap_citem_locator_t_op_get, METH_O, "citem_locator_t_op_get(self) -> ctype_t"},
	 { "new_citem_locator_t", _wrap_new_citem_locator_t, METH_VARARGS, "\n"
		"citem_locator_t(_ea, _op)\n"
		"new_citem_locator_t(i) -> citem_locator_t\n"
		""},
	 { "citem_locator_t___eq__", _wrap_citem_locator_t___eq__, METH_VARARGS, "citem_locator_t___eq__(self, r) -> bool"},
	 { "citem_locator_t___ne__", _wrap_citem_locator_t___ne__, METH_VARARGS, "citem_locator_t___ne__(self, r) -> bool"},
	 { "citem_locator_t___lt__", _wrap_citem_locator_t___lt__, METH_VARARGS, "citem_locator_t___lt__(self, r) -> bool"},
	 { "citem_locator_t___gt__", _wrap_citem_locator_t___gt__, METH_VARARGS, "citem_locator_t___gt__(self, r) -> bool"},
	 { "citem_locator_t___le__", _wrap_citem_locator_t___le__, METH_VARARGS, "citem_locator_t___le__(self, r) -> bool"},
	 { "citem_locator_t___ge__", _wrap_citem_locator_t___ge__, METH_VARARGS, "citem_locator_t___ge__(self, r) -> bool"},
	 { "citem_locator_t_compare", _wrap_citem_locator_t_compare, METH_VARARGS, "citem_locator_t_compare(self, r) -> int"},
	 { "delete_citem_locator_t", _wrap_delete_citem_locator_t, METH_O, "delete_citem_locator_t(self)"},
	 { "citem_locator_t_swigregister", citem_locator_t_swigregister, METH_O, NULL},
	 { "citem_locator_t_swiginit", citem_locator_t_swiginit, METH_VARARGS, NULL},
	 { "bit_bound_t_nbits_set", _wrap_bit_bound_t_nbits_set, METH_VARARGS, "bit_bound_t_nbits_set(self, nbits)"},
	 { "bit_bound_t_nbits_get", _wrap_bit_bound_t_nbits_get, METH_O, "bit_bound_t_nbits_get(self) -> int16"},
	 { "bit_bound_t_sbits_set", _wrap_bit_bound_t_sbits_set, METH_VARARGS, "bit_bound_t_sbits_set(self, sbits)"},
	 { "bit_bound_t_sbits_get", _wrap_bit_bound_t_sbits_get, METH_O, "bit_bound_t_sbits_get(self) -> int16"},
	 { "new_bit_bound_t", _wrap_new_bit_bound_t, METH_VARARGS, "new_bit_bound_t(n=0, s=0) -> bit_bound_t"},
	 { "delete_bit_bound_t", _wrap_delete_bit_bound_t, METH_O, "delete_bit_bound_t(self)"},
	 { "bit_bound_t_swigregister", bit_bound_t_swigregister, METH_O, NULL},
	 { "bit_bound_t_swiginit", bit_bound_t_swiginit, METH_VARARGS, NULL},
	 { "citem_t_ea_set", _wrap_citem_t_ea_set, METH_VARARGS, "citem_t_ea_set(self, ea)"},
	 { "citem_t_ea_get", _wrap_citem_t_ea_get, METH_O, "citem_t_ea_get(self) -> ea_t"},
	 { "citem_t_label_num_set", _wrap_citem_t_label_num_set, METH_VARARGS, "citem_t_label_num_set(self, label_num)"},
	 { "citem_t_label_num_get", _wrap_citem_t_label_num_get, METH_O, "citem_t_label_num_get(self) -> int"},
	 { "citem_t_index_set", _wrap_citem_t_index_set, METH_VARARGS, "citem_t_index_set(self, index)"},
	 { "citem_t_index_get", _wrap_citem_t_index_get, METH_O, "citem_t_index_get(self) -> int"},
	 { "new_citem_t", _wrap_new_citem_t, METH_VARARGS, "\n"
		"citem_t()\n"
		"new_citem_t(o) -> citem_t\n"
		""},
	 { "citem_t_swap", _wrap_citem_t_swap, METH_VARARGS, "citem_t_swap(self, r)"},
	 { "citem_t_is_expr", _wrap_citem_t_is_expr, METH_O, "citem_t_is_expr(self) -> bool"},
	 { "citem_t_contains_expr", _wrap_citem_t_contains_expr, METH_VARARGS, "citem_t_contains_expr(self, e) -> bool"},
	 { "citem_t_contains_label", _wrap_citem_t_contains_label, METH_O, "citem_t_contains_label(self) -> bool"},
	 { "citem_t_find_parent_of", _wrap_citem_t_find_parent_of, METH_VARARGS, "\n"
		"citem_t_find_parent_of(self, sitem) -> citem_t\n"
		"citem_t_find_parent_of(self, item) -> citem_t\n"
		""},
	 { "citem_t_find_closest_addr", _wrap_citem_t_find_closest_addr, METH_VARARGS, "citem_t_find_closest_addr(self, _ea) -> citem_t"},
	 { "citem_t_print1", _wrap_citem_t_print1, METH_VARARGS, "citem_t_print1(self, func)"},
	 { "delete_citem_t", _wrap_delete_citem_t, METH_O, "delete_citem_t(self)"},
	 { "citem_t_cinsn_get", _wrap_citem_t_cinsn_get, METH_O, "citem_t_cinsn_get(self) -> cinsn_t"},
	 { "citem_t_cexpr_get", _wrap_citem_t_cexpr_get, METH_O, "citem_t_cexpr_get(self) -> cexpr_t"},
	 { "citem_t__get_op", _wrap_citem_t__get_op, METH_O, "citem_t__get_op(self) -> ctype_t"},
	 { "citem_t__set_op", _wrap_citem_t__set_op, METH_VARARGS, "citem_t__set_op(self, v)"},
	 { "citem_t__obj_id", _wrap_citem_t__obj_id, METH_O, "citem_t__obj_id(self) -> PyObject *"},
	 { "citem_t_swigregister", citem_t_swigregister, METH_O, NULL},
	 { "citem_t_swiginit", citem_t_swiginit, METH_VARARGS, NULL},
	 { "cexpr_t_type_set", _wrap_cexpr_t_type_set, METH_VARARGS, "cexpr_t_type_set(self, type)"},
	 { "cexpr_t_type_get", _wrap_cexpr_t_type_get, METH_O, "cexpr_t_type_get(self) -> tinfo_t"},
	 { "cexpr_t_exflags_set", _wrap_cexpr_t_exflags_set, METH_VARARGS, "cexpr_t_exflags_set(self, exflags)"},
	 { "cexpr_t_exflags_get", _wrap_cexpr_t_exflags_get, METH_O, "cexpr_t_exflags_get(self) -> uint32"},
	 { "cexpr_t_cpadone", _wrap_cexpr_t_cpadone, METH_O, "cexpr_t_cpadone(self) -> bool"},
	 { "cexpr_t_is_odd_lvalue", _wrap_cexpr_t_is_odd_lvalue, METH_O, "cexpr_t_is_odd_lvalue(self) -> bool"},
	 { "cexpr_t_is_fpop", _wrap_cexpr_t_is_fpop, METH_O, "cexpr_t_is_fpop(self) -> bool"},
	 { "cexpr_t_is_cstr", _wrap_cexpr_t_is_cstr, METH_O, "cexpr_t_is_cstr(self) -> bool"},
	 { "cexpr_t_is_undef_val", _wrap_cexpr_t_is_undef_val, METH_O, "cexpr_t_is_undef_val(self) -> bool"},
	 { "cexpr_t_is_jumpout", _wrap_cexpr_t_is_jumpout, METH_O, "cexpr_t_is_jumpout(self) -> bool"},
	 { "cexpr_t_is_vftable", _wrap_cexpr_t_is_vftable, METH_O, "cexpr_t_is_vftable(self) -> bool"},
	 { "cexpr_t_set_cpadone", _wrap_cexpr_t_set_cpadone, METH_O, "cexpr_t_set_cpadone(self)"},
	 { "cexpr_t_set_vftable", _wrap_cexpr_t_set_vftable, METH_O, "cexpr_t_set_vftable(self)"},
	 { "new_cexpr_t", _wrap_new_cexpr_t, METH_VARARGS, "\n"
		"cexpr_t()\n"
		"cexpr_t(cop, _x)\n"
		"cexpr_t(cop, _x, _y)\n"
		"cexpr_t(cop, _x, _y, _z)\n"
		"new_cexpr_t(r) -> cexpr_t\n"
		""},
	 { "cexpr_t_swap", _wrap_cexpr_t_swap, METH_VARARGS, "cexpr_t_swap(self, r)"},
	 { "cexpr_t_assign", _wrap_cexpr_t_assign, METH_VARARGS, "cexpr_t_assign(self, r) -> cexpr_t"},
	 { "cexpr_t___eq__", _wrap_cexpr_t___eq__, METH_VARARGS, "cexpr_t___eq__(self, r) -> bool"},
	 { "cexpr_t___ne__", _wrap_cexpr_t___ne__, METH_VARARGS, "cexpr_t___ne__(self, r) -> bool"},
	 { "cexpr_t___lt__", _wrap_cexpr_t___lt__, METH_VARARGS, "cexpr_t___lt__(self, r) -> bool"},
	 { "cexpr_t___gt__", _wrap_cexpr_t___gt__, METH_VARARGS, "cexpr_t___gt__(self, r) -> bool"},
	 { "cexpr_t___le__", _wrap_cexpr_t___le__, METH_VARARGS, "cexpr_t___le__(self, r) -> bool"},
	 { "cexpr_t___ge__", _wrap_cexpr_t___ge__, METH_VARARGS, "cexpr_t___ge__(self, r) -> bool"},
	 { "cexpr_t_compare", _wrap_cexpr_t_compare, METH_VARARGS, "cexpr_t_compare(self, r) -> int"},
	 { "delete_cexpr_t", _wrap_delete_cexpr_t, METH_O, "delete_cexpr_t(self)"},
	 { "cexpr_t__replace_by", _wrap_cexpr_t__replace_by, METH_VARARGS, "cexpr_t__replace_by(self, r)"},
	 { "cexpr_t_cleanup", _wrap_cexpr_t_cleanup, METH_O, "cexpr_t_cleanup(self)"},
	 { "cexpr_t_put_number", _wrap_cexpr_t_put_number, METH_VARARGS, "cexpr_t_put_number(self, func, value, nbytes, sign=no_sign)"},
	 { "cexpr_t_print1", _wrap_cexpr_t_print1, METH_VARARGS, "cexpr_t_print1(self, func)"},
	 { "cexpr_t_calc_type", _wrap_cexpr_t_calc_type, METH_VARARGS, "cexpr_t_calc_type(self, recursive)"},
	 { "cexpr_t_equal_effect", _wrap_cexpr_t_equal_effect, METH_VARARGS, "cexpr_t_equal_effect(self, r) -> bool"},
	 { "cexpr_t_is_child_of", _wrap_cexpr_t_is_child_of, METH_VARARGS, "cexpr_t_is_child_of(self, parent) -> bool"},
	 { "cexpr_t_contains_operator", _wrap_cexpr_t_contains_operator, METH_VARARGS, "cexpr_t_contains_operator(self, needed_op, times=1) -> bool"},
	 { "cexpr_t_contains_comma", _wrap_cexpr_t_contains_comma, METH_VARARGS, "cexpr_t_contains_comma(self, times=1) -> bool"},
	 { "cexpr_t_contains_insn", _wrap_cexpr_t_contains_insn, METH_VARARGS, "cexpr_t_contains_insn(self, times=1) -> bool"},
	 { "cexpr_t_contains_insn_or_label", _wrap_cexpr_t_contains_insn_or_label, METH_O, "cexpr_t_contains_insn_or_label(self) -> bool"},
	 { "cexpr_t_contains_comma_or_insn_or_label", _wrap_cexpr_t_contains_comma_or_insn_or_label, METH_VARARGS, "cexpr_t_contains_comma_or_insn_or_label(self, maxcommas=1) -> bool"},
	 { "cexpr_t_is_nice_expr", _wrap_cexpr_t_is_nice_expr, METH_O, "cexpr_t_is_nice_expr(self) -> bool"},
	 { "cexpr_t_is_nice_cond", _wrap_cexpr_t_is_nice_cond, METH_O, "cexpr_t_is_nice_cond(self) -> bool"},
	 { "cexpr_t_is_call_object_of", _wrap_cexpr_t_is_call_object_of, METH_VARARGS, "cexpr_t_is_call_object_of(self, parent) -> bool"},
	 { "cexpr_t_is_call_arg_of", _wrap_cexpr_t_is_call_arg_of, METH_VARARGS, "cexpr_t_is_call_arg_of(self, parent) -> bool"},
	 { "cexpr_t_get_type_sign", _wrap_cexpr_t_get_type_sign, METH_O, "cexpr_t_get_type_sign(self) -> type_sign_t"},
	 { "cexpr_t_is_type_unsigned", _wrap_cexpr_t_is_type_unsigned, METH_O, "cexpr_t_is_type_unsigned(self) -> bool"},
	 { "cexpr_t_is_type_signed", _wrap_cexpr_t_is_type_signed, METH_O, "cexpr_t_is_type_signed(self) -> bool"},
	 { "cexpr_t_get_high_nbit_bound", _wrap_cexpr_t_get_high_nbit_bound, METH_O, "cexpr_t_get_high_nbit_bound(self) -> bit_bound_t"},
	 { "cexpr_t_get_low_nbit_bound", _wrap_cexpr_t_get_low_nbit_bound, METH_O, "cexpr_t_get_low_nbit_bound(self) -> int"},
	 { "cexpr_t_requires_lvalue", _wrap_cexpr_t_requires_lvalue, METH_VARARGS, "cexpr_t_requires_lvalue(self, child) -> bool"},
	 { "cexpr_t_has_side_effects", _wrap_cexpr_t_has_side_effects, METH_O, "cexpr_t_has_side_effects(self) -> bool"},
	 { "cexpr_t_numval", _wrap_cexpr_t_numval, METH_O, "cexpr_t_numval(self) -> uint64"},
	 { "cexpr_t_is_const_value", _wrap_cexpr_t_is_const_value, METH_VARARGS, "cexpr_t_is_const_value(self, _v) -> bool"},
	 { "cexpr_t_is_negative_const", _wrap_cexpr_t_is_negative_const, METH_O, "cexpr_t_is_negative_const(self) -> bool"},
	 { "cexpr_t_is_non_negative_const", _wrap_cexpr_t_is_non_negative_const, METH_O, "cexpr_t_is_non_negative_const(self) -> bool"},
	 { "cexpr_t_is_non_zero_const", _wrap_cexpr_t_is_non_zero_const, METH_O, "cexpr_t_is_non_zero_const(self) -> bool"},
	 { "cexpr_t_is_zero_const", _wrap_cexpr_t_is_zero_const, METH_O, "cexpr_t_is_zero_const(self) -> bool"},
	 { "cexpr_t_get_const_value", _wrap_cexpr_t_get_const_value, METH_O, "cexpr_t_get_const_value(self) -> bool"},
	 { "cexpr_t_maybe_ptr", _wrap_cexpr_t_maybe_ptr, METH_O, "cexpr_t_maybe_ptr(self) -> bool"},
	 { "cexpr_t_get_ptr_or_array", _wrap_cexpr_t_get_ptr_or_array, METH_O, "cexpr_t_get_ptr_or_array(self) -> cexpr_t"},
	 { "cexpr_t_find_op", _wrap_cexpr_t_find_op, METH_VARARGS, "\n"
		"cexpr_t_find_op(self, _op) -> cexpr_t\n"
		"cexpr_t_find_op(self, _op) -> cexpr_t\n"
		""},
	 { "cexpr_t_find_num_op", _wrap_cexpr_t_find_num_op, METH_VARARGS, "\n"
		"cexpr_t_find_num_op(self) -> cexpr_t\n"
		"cexpr_t_find_num_op(self) -> cexpr_t\n"
		""},
	 { "cexpr_t_theother", _wrap_cexpr_t_theother, METH_VARARGS, "\n"
		"cexpr_t_theother(self, what) -> cexpr_t\n"
		"cexpr_t_theother(self, what) -> cexpr_t\n"
		""},
	 { "cexpr_t_get_1num_op", _wrap_cexpr_t_get_1num_op, METH_VARARGS, "cexpr_t_get_1num_op(self, o1, o2) -> bool"},
	 { "cexpr_t__deregister", _wrap_cexpr_t__deregister, METH_O, "cexpr_t__deregister(self)"},
	 { "cexpr_t__register", _wrap_cexpr_t__register, METH_O, "cexpr_t__register(self)"},
	 { "cexpr_t__get_n", _wrap_cexpr_t__get_n, METH_O, "cexpr_t__get_n(self) -> cnumber_t"},
	 { "cexpr_t__set_n", _wrap_cexpr_t__set_n, METH_VARARGS, "cexpr_t__set_n(self, _v)"},
	 { "cexpr_t__get_fpc", _wrap_cexpr_t__get_fpc, METH_O, "cexpr_t__get_fpc(self) -> fnumber_t"},
	 { "cexpr_t__set_fpc", _wrap_cexpr_t__set_fpc, METH_VARARGS, "cexpr_t__set_fpc(self, _v)"},
	 { "cexpr_t_get_v", _wrap_cexpr_t_get_v, METH_O, "cexpr_t_get_v(self) -> var_ref_t"},
	 { "cexpr_t_set_v", _wrap_cexpr_t_set_v, METH_VARARGS, "cexpr_t_set_v(self, v)"},
	 { "cexpr_t__get_obj_ea", _wrap_cexpr_t__get_obj_ea, METH_O, "cexpr_t__get_obj_ea(self) -> ea_t"},
	 { "cexpr_t__set_obj_ea", _wrap_cexpr_t__set_obj_ea, METH_VARARGS, "cexpr_t__set_obj_ea(self, _v)"},
	 { "cexpr_t__get_refwidth", _wrap_cexpr_t__get_refwidth, METH_O, "cexpr_t__get_refwidth(self) -> int"},
	 { "cexpr_t__set_refwidth", _wrap_cexpr_t__set_refwidth, METH_VARARGS, "cexpr_t__set_refwidth(self, _v)"},
	 { "cexpr_t__get_x", _wrap_cexpr_t__get_x, METH_O, "cexpr_t__get_x(self) -> cexpr_t"},
	 { "cexpr_t__set_x", _wrap_cexpr_t__set_x, METH_VARARGS, "cexpr_t__set_x(self, _v)"},
	 { "cexpr_t__get_y", _wrap_cexpr_t__get_y, METH_O, "cexpr_t__get_y(self) -> cexpr_t"},
	 { "cexpr_t__set_y", _wrap_cexpr_t__set_y, METH_VARARGS, "cexpr_t__set_y(self, _v)"},
	 { "cexpr_t__get_a", _wrap_cexpr_t__get_a, METH_O, "cexpr_t__get_a(self) -> carglist_t"},
	 { "cexpr_t__set_a", _wrap_cexpr_t__set_a, METH_VARARGS, "cexpr_t__set_a(self, _v)"},
	 { "cexpr_t__get_m", _wrap_cexpr_t__get_m, METH_O, "cexpr_t__get_m(self) -> int"},
	 { "cexpr_t__set_m", _wrap_cexpr_t__set_m, METH_VARARGS, "cexpr_t__set_m(self, _v)"},
	 { "cexpr_t__get_z", _wrap_cexpr_t__get_z, METH_O, "cexpr_t__get_z(self) -> cexpr_t"},
	 { "cexpr_t__set_z", _wrap_cexpr_t__set_z, METH_VARARGS, "cexpr_t__set_z(self, _v)"},
	 { "cexpr_t__get_ptrsize", _wrap_cexpr_t__get_ptrsize, METH_O, "cexpr_t__get_ptrsize(self) -> int"},
	 { "cexpr_t__set_ptrsize", _wrap_cexpr_t__set_ptrsize, METH_VARARGS, "cexpr_t__set_ptrsize(self, _v)"},
	 { "cexpr_t__get_insn", _wrap_cexpr_t__get_insn, METH_O, "cexpr_t__get_insn(self) -> cinsn_t"},
	 { "cexpr_t__set_insn", _wrap_cexpr_t__set_insn, METH_VARARGS, "cexpr_t__set_insn(self, _v)"},
	 { "cexpr_t__get_helper", _wrap_cexpr_t__get_helper, METH_O, "cexpr_t__get_helper(self) -> char *"},
	 { "cexpr_t__set_helper", _wrap_cexpr_t__set_helper, METH_VARARGS, "cexpr_t__set_helper(self, _v)"},
	 { "cexpr_t__get_string", _wrap_cexpr_t__get_string, METH_O, "cexpr_t__get_string(self) -> char *"},
	 { "cexpr_t__set_string", _wrap_cexpr_t__set_string, METH_VARARGS, "cexpr_t__set_string(self, _v)"},
	 { "cexpr_t_swigregister", cexpr_t_swigregister, METH_O, NULL},
	 { "cexpr_t_swiginit", cexpr_t_swiginit, METH_VARARGS, NULL},
	 { "ceinsn_t_expr_set", _wrap_ceinsn_t_expr_set, METH_VARARGS, "ceinsn_t_expr_set(self, expr)"},
	 { "ceinsn_t_expr_get", _wrap_ceinsn_t_expr_get, METH_O, "ceinsn_t_expr_get(self) -> cexpr_t"},
	 { "new_ceinsn_t", _wrap_new_ceinsn_t, METH_NOARGS, "new_ceinsn_t() -> ceinsn_t"},
	 { "delete_ceinsn_t", _wrap_delete_ceinsn_t, METH_O, "delete_ceinsn_t(self)"},
	 { "ceinsn_t_swigregister", ceinsn_t_swigregister, METH_O, NULL},
	 { "ceinsn_t_swiginit", ceinsn_t_swiginit, METH_VARARGS, NULL},
	 { "cif_t_ithen_set", _wrap_cif_t_ithen_set, METH_VARARGS, "cif_t_ithen_set(self, ithen)"},
	 { "cif_t_ithen_get", _wrap_cif_t_ithen_get, METH_O, "cif_t_ithen_get(self) -> cinsn_t"},
	 { "cif_t_ielse_set", _wrap_cif_t_ielse_set, METH_VARARGS, "cif_t_ielse_set(self, ielse)"},
	 { "cif_t_ielse_get", _wrap_cif_t_ielse_get, METH_O, "cif_t_ielse_get(self) -> cinsn_t"},
	 { "new_cif_t", _wrap_new_cif_t, METH_VARARGS, "\n"
		"cif_t()\n"
		"new_cif_t(r) -> cif_t\n"
		""},
	 { "cif_t_assign", _wrap_cif_t_assign, METH_VARARGS, "cif_t_assign(self, r) -> cif_t"},
	 { "cif_t___eq__", _wrap_cif_t___eq__, METH_VARARGS, "cif_t___eq__(self, r) -> bool"},
	 { "cif_t___ne__", _wrap_cif_t___ne__, METH_VARARGS, "cif_t___ne__(self, r) -> bool"},
	 { "cif_t___lt__", _wrap_cif_t___lt__, METH_VARARGS, "cif_t___lt__(self, r) -> bool"},
	 { "cif_t___gt__", _wrap_cif_t___gt__, METH_VARARGS, "cif_t___gt__(self, r) -> bool"},
	 { "cif_t___le__", _wrap_cif_t___le__, METH_VARARGS, "cif_t___le__(self, r) -> bool"},
	 { "cif_t___ge__", _wrap_cif_t___ge__, METH_VARARGS, "cif_t___ge__(self, r) -> bool"},
	 { "cif_t_compare", _wrap_cif_t_compare, METH_VARARGS, "cif_t_compare(self, r) -> int"},
	 { "delete_cif_t", _wrap_delete_cif_t, METH_O, "delete_cif_t(self)"},
	 { "cif_t_cleanup", _wrap_cif_t_cleanup, METH_O, "cif_t_cleanup(self)"},
	 { "cif_t_swigregister", cif_t_swigregister, METH_O, NULL},
	 { "cif_t_swiginit", cif_t_swiginit, METH_VARARGS, NULL},
	 { "cloop_t_body_set", _wrap_cloop_t_body_set, METH_VARARGS, "cloop_t_body_set(self, body)"},
	 { "cloop_t_body_get", _wrap_cloop_t_body_get, METH_O, "cloop_t_body_get(self) -> cinsn_t"},
	 { "new_cloop_t", _wrap_new_cloop_t, METH_VARARGS, "\n"
		"cloop_t()\n"
		"cloop_t(b)\n"
		"new_cloop_t(r) -> cloop_t\n"
		""},
	 { "cloop_t_assign", _wrap_cloop_t_assign, METH_VARARGS, "cloop_t_assign(self, r) -> cloop_t"},
	 { "delete_cloop_t", _wrap_delete_cloop_t, METH_O, "delete_cloop_t(self)"},
	 { "cloop_t_cleanup", _wrap_cloop_t_cleanup, METH_O, "cloop_t_cleanup(self)"},
	 { "cloop_t_swigregister", cloop_t_swigregister, METH_O, NULL},
	 { "cloop_t_swiginit", cloop_t_swiginit, METH_VARARGS, NULL},
	 { "cfor_t_init_set", _wrap_cfor_t_init_set, METH_VARARGS, "cfor_t_init_set(self, init)"},
	 { "cfor_t_init_get", _wrap_cfor_t_init_get, METH_O, "cfor_t_init_get(self) -> cexpr_t"},
	 { "cfor_t_step_set", _wrap_cfor_t_step_set, METH_VARARGS, "cfor_t_step_set(self, step)"},
	 { "cfor_t_step_get", _wrap_cfor_t_step_get, METH_O, "cfor_t_step_get(self) -> cexpr_t"},
	 { "cfor_t___eq__", _wrap_cfor_t___eq__, METH_VARARGS, "cfor_t___eq__(self, r) -> bool"},
	 { "cfor_t___ne__", _wrap_cfor_t___ne__, METH_VARARGS, "cfor_t___ne__(self, r) -> bool"},
	 { "cfor_t___lt__", _wrap_cfor_t___lt__, METH_VARARGS, "cfor_t___lt__(self, r) -> bool"},
	 { "cfor_t___gt__", _wrap_cfor_t___gt__, METH_VARARGS, "cfor_t___gt__(self, r) -> bool"},
	 { "cfor_t___le__", _wrap_cfor_t___le__, METH_VARARGS, "cfor_t___le__(self, r) -> bool"},
	 { "cfor_t___ge__", _wrap_cfor_t___ge__, METH_VARARGS, "cfor_t___ge__(self, r) -> bool"},
	 { "cfor_t_compare", _wrap_cfor_t_compare, METH_VARARGS, "cfor_t_compare(self, r) -> int"},
	 { "new_cfor_t", _wrap_new_cfor_t, METH_NOARGS, "new_cfor_t() -> cfor_t"},
	 { "delete_cfor_t", _wrap_delete_cfor_t, METH_O, "delete_cfor_t(self)"},
	 { "cfor_t_swigregister", cfor_t_swigregister, METH_O, NULL},
	 { "cfor_t_swiginit", cfor_t_swiginit, METH_VARARGS, NULL},
	 { "cwhile_t___eq__", _wrap_cwhile_t___eq__, METH_VARARGS, "cwhile_t___eq__(self, r) -> bool"},
	 { "cwhile_t___ne__", _wrap_cwhile_t___ne__, METH_VARARGS, "cwhile_t___ne__(self, r) -> bool"},
	 { "cwhile_t___lt__", _wrap_cwhile_t___lt__, METH_VARARGS, "cwhile_t___lt__(self, r) -> bool"},
	 { "cwhile_t___gt__", _wrap_cwhile_t___gt__, METH_VARARGS, "cwhile_t___gt__(self, r) -> bool"},
	 { "cwhile_t___le__", _wrap_cwhile_t___le__, METH_VARARGS, "cwhile_t___le__(self, r) -> bool"},
	 { "cwhile_t___ge__", _wrap_cwhile_t___ge__, METH_VARARGS, "cwhile_t___ge__(self, r) -> bool"},
	 { "cwhile_t_compare", _wrap_cwhile_t_compare, METH_VARARGS, "cwhile_t_compare(self, r) -> int"},
	 { "new_cwhile_t", _wrap_new_cwhile_t, METH_NOARGS, "new_cwhile_t() -> cwhile_t"},
	 { "delete_cwhile_t", _wrap_delete_cwhile_t, METH_O, "delete_cwhile_t(self)"},
	 { "cwhile_t_swigregister", cwhile_t_swigregister, METH_O, NULL},
	 { "cwhile_t_swiginit", cwhile_t_swiginit, METH_VARARGS, NULL},
	 { "cdo_t___eq__", _wrap_cdo_t___eq__, METH_VARARGS, "cdo_t___eq__(self, r) -> bool"},
	 { "cdo_t___ne__", _wrap_cdo_t___ne__, METH_VARARGS, "cdo_t___ne__(self, r) -> bool"},
	 { "cdo_t___lt__", _wrap_cdo_t___lt__, METH_VARARGS, "cdo_t___lt__(self, r) -> bool"},
	 { "cdo_t___gt__", _wrap_cdo_t___gt__, METH_VARARGS, "cdo_t___gt__(self, r) -> bool"},
	 { "cdo_t___le__", _wrap_cdo_t___le__, METH_VARARGS, "cdo_t___le__(self, r) -> bool"},
	 { "cdo_t___ge__", _wrap_cdo_t___ge__, METH_VARARGS, "cdo_t___ge__(self, r) -> bool"},
	 { "cdo_t_compare", _wrap_cdo_t_compare, METH_VARARGS, "cdo_t_compare(self, r) -> int"},
	 { "new_cdo_t", _wrap_new_cdo_t, METH_NOARGS, "new_cdo_t() -> cdo_t"},
	 { "delete_cdo_t", _wrap_delete_cdo_t, METH_O, "delete_cdo_t(self)"},
	 { "cdo_t_swigregister", cdo_t_swigregister, METH_O, NULL},
	 { "cdo_t_swiginit", cdo_t_swiginit, METH_VARARGS, NULL},
	 { "creturn_t___eq__", _wrap_creturn_t___eq__, METH_VARARGS, "creturn_t___eq__(self, r) -> bool"},
	 { "creturn_t___ne__", _wrap_creturn_t___ne__, METH_VARARGS, "creturn_t___ne__(self, r) -> bool"},
	 { "creturn_t___lt__", _wrap_creturn_t___lt__, METH_VARARGS, "creturn_t___lt__(self, r) -> bool"},
	 { "creturn_t___gt__", _wrap_creturn_t___gt__, METH_VARARGS, "creturn_t___gt__(self, r) -> bool"},
	 { "creturn_t___le__", _wrap_creturn_t___le__, METH_VARARGS, "creturn_t___le__(self, r) -> bool"},
	 { "creturn_t___ge__", _wrap_creturn_t___ge__, METH_VARARGS, "creturn_t___ge__(self, r) -> bool"},
	 { "creturn_t_compare", _wrap_creturn_t_compare, METH_VARARGS, "creturn_t_compare(self, r) -> int"},
	 { "new_creturn_t", _wrap_new_creturn_t, METH_NOARGS, "new_creturn_t() -> creturn_t"},
	 { "delete_creturn_t", _wrap_delete_creturn_t, METH_O, "delete_creturn_t(self)"},
	 { "creturn_t_swigregister", creturn_t_swigregister, METH_O, NULL},
	 { "creturn_t_swiginit", creturn_t_swiginit, METH_VARARGS, NULL},
	 { "cgoto_t_label_num_set", _wrap_cgoto_t_label_num_set, METH_VARARGS, "cgoto_t_label_num_set(self, label_num)"},
	 { "cgoto_t_label_num_get", _wrap_cgoto_t_label_num_get, METH_O, "cgoto_t_label_num_get(self) -> int"},
	 { "cgoto_t___eq__", _wrap_cgoto_t___eq__, METH_VARARGS, "cgoto_t___eq__(self, r) -> bool"},
	 { "cgoto_t___ne__", _wrap_cgoto_t___ne__, METH_VARARGS, "cgoto_t___ne__(self, r) -> bool"},
	 { "cgoto_t___lt__", _wrap_cgoto_t___lt__, METH_VARARGS, "cgoto_t___lt__(self, r) -> bool"},
	 { "cgoto_t___gt__", _wrap_cgoto_t___gt__, METH_VARARGS, "cgoto_t___gt__(self, r) -> bool"},
	 { "cgoto_t___le__", _wrap_cgoto_t___le__, METH_VARARGS, "cgoto_t___le__(self, r) -> bool"},
	 { "cgoto_t___ge__", _wrap_cgoto_t___ge__, METH_VARARGS, "cgoto_t___ge__(self, r) -> bool"},
	 { "cgoto_t_compare", _wrap_cgoto_t_compare, METH_VARARGS, "cgoto_t_compare(self, r) -> int"},
	 { "new_cgoto_t", _wrap_new_cgoto_t, METH_NOARGS, "new_cgoto_t() -> cgoto_t"},
	 { "delete_cgoto_t", _wrap_delete_cgoto_t, METH_O, "delete_cgoto_t(self)"},
	 { "cgoto_t_swigregister", cgoto_t_swigregister, METH_O, NULL},
	 { "cgoto_t_swiginit", cgoto_t_swiginit, METH_VARARGS, NULL},
	 { "new_casm_t", _wrap_new_casm_t, METH_VARARGS, "\n"
		"casm_t(ea)\n"
		"new_casm_t(r) -> casm_t\n"
		""},
	 { "casm_t___eq__", _wrap_casm_t___eq__, METH_VARARGS, "casm_t___eq__(self, r) -> bool"},
	 { "casm_t___ne__", _wrap_casm_t___ne__, METH_VARARGS, "casm_t___ne__(self, r) -> bool"},
	 { "casm_t___lt__", _wrap_casm_t___lt__, METH_VARARGS, "casm_t___lt__(self, r) -> bool"},
	 { "casm_t___gt__", _wrap_casm_t___gt__, METH_VARARGS, "casm_t___gt__(self, r) -> bool"},
	 { "casm_t___le__", _wrap_casm_t___le__, METH_VARARGS, "casm_t___le__(self, r) -> bool"},
	 { "casm_t___ge__", _wrap_casm_t___ge__, METH_VARARGS, "casm_t___ge__(self, r) -> bool"},
	 { "casm_t_compare", _wrap_casm_t_compare, METH_VARARGS, "casm_t_compare(self, r) -> int"},
	 { "casm_t_one_insn", _wrap_casm_t_one_insn, METH_O, "casm_t_one_insn(self) -> bool"},
	 { "delete_casm_t", _wrap_delete_casm_t, METH_O, "delete_casm_t(self)"},
	 { "casm_t_swigregister", casm_t_swigregister, METH_O, NULL},
	 { "casm_t_swiginit", casm_t_swiginit, METH_VARARGS, NULL},
	 { "new_cinsn_t", _wrap_new_cinsn_t, METH_VARARGS, "\n"
		"cinsn_t()\n"
		"new_cinsn_t(r) -> cinsn_t\n"
		""},
	 { "cinsn_t_swap", _wrap_cinsn_t_swap, METH_VARARGS, "cinsn_t_swap(self, r)"},
	 { "cinsn_t_assign", _wrap_cinsn_t_assign, METH_VARARGS, "cinsn_t_assign(self, r) -> cinsn_t"},
	 { "cinsn_t___eq__", _wrap_cinsn_t___eq__, METH_VARARGS, "cinsn_t___eq__(self, r) -> bool"},
	 { "cinsn_t___ne__", _wrap_cinsn_t___ne__, METH_VARARGS, "cinsn_t___ne__(self, r) -> bool"},
	 { "cinsn_t___lt__", _wrap_cinsn_t___lt__, METH_VARARGS, "cinsn_t___lt__(self, r) -> bool"},
	 { "cinsn_t___gt__", _wrap_cinsn_t___gt__, METH_VARARGS, "cinsn_t___gt__(self, r) -> bool"},
	 { "cinsn_t___le__", _wrap_cinsn_t___le__, METH_VARARGS, "cinsn_t___le__(self, r) -> bool"},
	 { "cinsn_t___ge__", _wrap_cinsn_t___ge__, METH_VARARGS, "cinsn_t___ge__(self, r) -> bool"},
	 { "cinsn_t_compare", _wrap_cinsn_t_compare, METH_VARARGS, "cinsn_t_compare(self, r) -> int"},
	 { "delete_cinsn_t", _wrap_delete_cinsn_t, METH_O, "delete_cinsn_t(self)"},
	 { "cinsn_t__replace_by", _wrap_cinsn_t__replace_by, METH_VARARGS, "cinsn_t__replace_by(self, r)"},
	 { "cinsn_t_cleanup", _wrap_cinsn_t_cleanup, METH_O, "cinsn_t_cleanup(self)"},
	 { "cinsn_t_zero", _wrap_cinsn_t_zero, METH_O, "cinsn_t_zero(self)"},
	 { "cinsn_t_new_insn", _wrap_cinsn_t_new_insn, METH_VARARGS, "cinsn_t_new_insn(self, insn_ea) -> cinsn_t"},
	 { "cinsn_t_create_if", _wrap_cinsn_t_create_if, METH_VARARGS, "cinsn_t_create_if(self, cnd) -> cif_t"},
	 { "cinsn_t__print", _wrap_cinsn_t__print, METH_VARARGS, "cinsn_t__print(self, indent, vp, use_curly=CALC_CURLY_BRACES)"},
	 { "cinsn_t_print1", _wrap_cinsn_t_print1, METH_VARARGS, "cinsn_t_print1(self, func)"},
	 { "cinsn_t_is_ordinary_flow", _wrap_cinsn_t_is_ordinary_flow, METH_O, "cinsn_t_is_ordinary_flow(self) -> bool"},
	 { "cinsn_t_contains_insn", _wrap_cinsn_t_contains_insn, METH_VARARGS, "cinsn_t_contains_insn(self, type, times=1) -> bool"},
	 { "cinsn_t_collect_free_breaks", _wrap_cinsn_t_collect_free_breaks, METH_VARARGS, "cinsn_t_collect_free_breaks(self, breaks) -> bool"},
	 { "cinsn_t_collect_free_continues", _wrap_cinsn_t_collect_free_continues, METH_VARARGS, "cinsn_t_collect_free_continues(self, continues) -> bool"},
	 { "cinsn_t_contains_free_break", _wrap_cinsn_t_contains_free_break, METH_O, "cinsn_t_contains_free_break(self) -> bool"},
	 { "cinsn_t_contains_free_continue", _wrap_cinsn_t_contains_free_continue, METH_O, "cinsn_t_contains_free_continue(self) -> bool"},
	 { "cinsn_t__deregister", _wrap_cinsn_t__deregister, METH_O, "cinsn_t__deregister(self)"},
	 { "cinsn_t__register", _wrap_cinsn_t__register, METH_O, "cinsn_t__register(self)"},
	 { "cinsn_t__get_cblock", _wrap_cinsn_t__get_cblock, METH_O, "cinsn_t__get_cblock(self) -> cblock_t"},
	 { "cinsn_t__set_cblock", _wrap_cinsn_t__set_cblock, METH_VARARGS, "cinsn_t__set_cblock(self, _v)"},
	 { "cinsn_t__get_cexpr", _wrap_cinsn_t__get_cexpr, METH_O, "cinsn_t__get_cexpr(self) -> cexpr_t"},
	 { "cinsn_t__set_cexpr", _wrap_cinsn_t__set_cexpr, METH_VARARGS, "cinsn_t__set_cexpr(self, _v)"},
	 { "cinsn_t__get_cif", _wrap_cinsn_t__get_cif, METH_O, "cinsn_t__get_cif(self) -> cif_t"},
	 { "cinsn_t__set_cif", _wrap_cinsn_t__set_cif, METH_VARARGS, "cinsn_t__set_cif(self, _v)"},
	 { "cinsn_t__get_cfor", _wrap_cinsn_t__get_cfor, METH_O, "cinsn_t__get_cfor(self) -> cfor_t"},
	 { "cinsn_t__set_cfor", _wrap_cinsn_t__set_cfor, METH_VARARGS, "cinsn_t__set_cfor(self, _v)"},
	 { "cinsn_t__get_cwhile", _wrap_cinsn_t__get_cwhile, METH_O, "cinsn_t__get_cwhile(self) -> cwhile_t"},
	 { "cinsn_t__set_cwhile", _wrap_cinsn_t__set_cwhile, METH_VARARGS, "cinsn_t__set_cwhile(self, _v)"},
	 { "cinsn_t__get_cdo", _wrap_cinsn_t__get_cdo, METH_O, "cinsn_t__get_cdo(self) -> cdo_t"},
	 { "cinsn_t__set_cdo", _wrap_cinsn_t__set_cdo, METH_VARARGS, "cinsn_t__set_cdo(self, _v)"},
	 { "cinsn_t__get_cswitch", _wrap_cinsn_t__get_cswitch, METH_O, "cinsn_t__get_cswitch(self) -> cswitch_t"},
	 { "cinsn_t__set_cswitch", _wrap_cinsn_t__set_cswitch, METH_VARARGS, "cinsn_t__set_cswitch(self, _v)"},
	 { "cinsn_t__get_creturn", _wrap_cinsn_t__get_creturn, METH_O, "cinsn_t__get_creturn(self) -> creturn_t"},
	 { "cinsn_t__set_creturn", _wrap_cinsn_t__set_creturn, METH_VARARGS, "cinsn_t__set_creturn(self, _v)"},
	 { "cinsn_t__get_cgoto", _wrap_cinsn_t__get_cgoto, METH_O, "cinsn_t__get_cgoto(self) -> cgoto_t"},
	 { "cinsn_t__set_cgoto", _wrap_cinsn_t__set_cgoto, METH_VARARGS, "cinsn_t__set_cgoto(self, _v)"},
	 { "cinsn_t__get_casm", _wrap_cinsn_t__get_casm, METH_O, "cinsn_t__get_casm(self) -> casm_t"},
	 { "cinsn_t__set_casm", _wrap_cinsn_t__set_casm, METH_VARARGS, "cinsn_t__set_casm(self, _v)"},
	 { "cinsn_t_insn_is_epilog", _wrap_cinsn_t_insn_is_epilog, METH_O, "cinsn_t_insn_is_epilog(insn) -> bool"},
	 { "cinsn_t_swigregister", cinsn_t_swigregister, METH_O, NULL},
	 { "cinsn_t_swiginit", cinsn_t_swiginit, METH_VARARGS, NULL},
	 { "cblock_t___eq__", _wrap_cblock_t___eq__, METH_VARARGS, "cblock_t___eq__(self, r) -> bool"},
	 { "cblock_t___ne__", _wrap_cblock_t___ne__, METH_VARARGS, "cblock_t___ne__(self, r) -> bool"},
	 { "cblock_t___lt__", _wrap_cblock_t___lt__, METH_VARARGS, "cblock_t___lt__(self, r) -> bool"},
	 { "cblock_t___gt__", _wrap_cblock_t___gt__, METH_VARARGS, "cblock_t___gt__(self, r) -> bool"},
	 { "cblock_t___le__", _wrap_cblock_t___le__, METH_VARARGS, "cblock_t___le__(self, r) -> bool"},
	 { "cblock_t___ge__", _wrap_cblock_t___ge__, METH_VARARGS, "cblock_t___ge__(self, r) -> bool"},
	 { "cblock_t_compare", _wrap_cblock_t_compare, METH_VARARGS, "cblock_t_compare(self, r) -> int"},
	 { "new_cblock_t", _wrap_new_cblock_t, METH_NOARGS, "new_cblock_t() -> cblock_t"},
	 { "delete_cblock_t", _wrap_delete_cblock_t, METH_O, "delete_cblock_t(self)"},
	 { "cblock_t__deregister", _wrap_cblock_t__deregister, METH_O, "cblock_t__deregister(self)"},
	 { "cblock_t_swigregister", cblock_t_swigregister, METH_O, NULL},
	 { "cblock_t_swiginit", cblock_t_swiginit, METH_VARARGS, NULL},
	 { "carg_t_is_vararg_set", _wrap_carg_t_is_vararg_set, METH_VARARGS, "carg_t_is_vararg_set(self, is_vararg)"},
	 { "carg_t_is_vararg_get", _wrap_carg_t_is_vararg_get, METH_O, "carg_t_is_vararg_get(self) -> bool"},
	 { "carg_t_formal_type_set", _wrap_carg_t_formal_type_set, METH_VARARGS, "carg_t_formal_type_set(self, formal_type)"},
	 { "carg_t_formal_type_get", _wrap_carg_t_formal_type_get, METH_O, "carg_t_formal_type_get(self) -> tinfo_t"},
	 { "carg_t_consume_cexpr", _wrap_carg_t_consume_cexpr, METH_VARARGS, "carg_t_consume_cexpr(self, e)"},
	 { "new_carg_t", _wrap_new_carg_t, METH_NOARGS, "new_carg_t() -> carg_t"},
	 { "carg_t___eq__", _wrap_carg_t___eq__, METH_VARARGS, "carg_t___eq__(self, r) -> bool"},
	 { "carg_t___ne__", _wrap_carg_t___ne__, METH_VARARGS, "carg_t___ne__(self, r) -> bool"},
	 { "carg_t___lt__", _wrap_carg_t___lt__, METH_VARARGS, "carg_t___lt__(self, r) -> bool"},
	 { "carg_t___gt__", _wrap_carg_t___gt__, METH_VARARGS, "carg_t___gt__(self, r) -> bool"},
	 { "carg_t___le__", _wrap_carg_t___le__, METH_VARARGS, "carg_t___le__(self, r) -> bool"},
	 { "carg_t___ge__", _wrap_carg_t___ge__, METH_VARARGS, "carg_t___ge__(self, r) -> bool"},
	 { "carg_t_compare", _wrap_carg_t_compare, METH_VARARGS, "carg_t_compare(self, r) -> int"},
	 { "delete_carg_t", _wrap_delete_carg_t, METH_O, "delete_carg_t(self)"},
	 { "carg_t_swigregister", carg_t_swigregister, METH_O, NULL},
	 { "carg_t_swiginit", carg_t_swiginit, METH_VARARGS, NULL},
	 { "carglist_t_functype_set", _wrap_carglist_t_functype_set, METH_VARARGS, "carglist_t_functype_set(self, functype)"},
	 { "carglist_t_functype_get", _wrap_carglist_t_functype_get, METH_O, "carglist_t_functype_get(self) -> tinfo_t"},
	 { "carglist_t_flags_set", _wrap_carglist_t_flags_set, METH_VARARGS, "carglist_t_flags_set(self, flags)"},
	 { "carglist_t_flags_get", _wrap_carglist_t_flags_get, METH_O, "carglist_t_flags_get(self) -> int"},
	 { "new_carglist_t", _wrap_new_carglist_t, METH_VARARGS, "\n"
		"carglist_t()\n"
		"new_carglist_t(ftype, fl=0) -> carglist_t\n"
		""},
	 { "carglist_t___eq__", _wrap_carglist_t___eq__, METH_VARARGS, "carglist_t___eq__(self, r) -> bool"},
	 { "carglist_t___ne__", _wrap_carglist_t___ne__, METH_VARARGS, "carglist_t___ne__(self, r) -> bool"},
	 { "carglist_t___lt__", _wrap_carglist_t___lt__, METH_VARARGS, "carglist_t___lt__(self, r) -> bool"},
	 { "carglist_t___gt__", _wrap_carglist_t___gt__, METH_VARARGS, "carglist_t___gt__(self, r) -> bool"},
	 { "carglist_t___le__", _wrap_carglist_t___le__, METH_VARARGS, "carglist_t___le__(self, r) -> bool"},
	 { "carglist_t___ge__", _wrap_carglist_t___ge__, METH_VARARGS, "carglist_t___ge__(self, r) -> bool"},
	 { "carglist_t_compare", _wrap_carglist_t_compare, METH_VARARGS, "carglist_t_compare(self, r) -> int"},
	 { "delete_carglist_t", _wrap_delete_carglist_t, METH_O, "delete_carglist_t(self)"},
	 { "carglist_t_swigregister", carglist_t_swigregister, METH_O, NULL},
	 { "carglist_t_swiginit", carglist_t_swiginit, METH_VARARGS, NULL},
	 { "ccase_t_values_set", _wrap_ccase_t_values_set, METH_VARARGS, "ccase_t_values_set(self, values)"},
	 { "ccase_t_values_get", _wrap_ccase_t_values_get, METH_O, "ccase_t_values_get(self) -> uint64vec_t *"},
	 { "ccase_t___eq__", _wrap_ccase_t___eq__, METH_VARARGS, "ccase_t___eq__(self, r) -> bool"},
	 { "ccase_t___ne__", _wrap_ccase_t___ne__, METH_VARARGS, "ccase_t___ne__(self, r) -> bool"},
	 { "ccase_t___lt__", _wrap_ccase_t___lt__, METH_VARARGS, "ccase_t___lt__(self, r) -> bool"},
	 { "ccase_t___gt__", _wrap_ccase_t___gt__, METH_VARARGS, "ccase_t___gt__(self, r) -> bool"},
	 { "ccase_t___le__", _wrap_ccase_t___le__, METH_VARARGS, "ccase_t___le__(self, r) -> bool"},
	 { "ccase_t___ge__", _wrap_ccase_t___ge__, METH_VARARGS, "ccase_t___ge__(self, r) -> bool"},
	 { "ccase_t_compare", _wrap_ccase_t_compare, METH_VARARGS, "ccase_t_compare(self, r) -> int"},
	 { "ccase_t_size", _wrap_ccase_t_size, METH_O, "ccase_t_size(self) -> size_t"},
	 { "ccase_t_value", _wrap_ccase_t_value, METH_VARARGS, "ccase_t_value(self, i) -> uint64 const &"},
	 { "new_ccase_t", _wrap_new_ccase_t, METH_NOARGS, "new_ccase_t() -> ccase_t"},
	 { "delete_ccase_t", _wrap_delete_ccase_t, METH_O, "delete_ccase_t(self)"},
	 { "ccase_t_swigregister", ccase_t_swigregister, METH_O, NULL},
	 { "ccase_t_swiginit", ccase_t_swiginit, METH_VARARGS, NULL},
	 { "ccases_t___eq__", _wrap_ccases_t___eq__, METH_VARARGS, "ccases_t___eq__(self, r) -> bool"},
	 { "ccases_t___ne__", _wrap_ccases_t___ne__, METH_VARARGS, "ccases_t___ne__(self, r) -> bool"},
	 { "ccases_t___lt__", _wrap_ccases_t___lt__, METH_VARARGS, "ccases_t___lt__(self, r) -> bool"},
	 { "ccases_t___gt__", _wrap_ccases_t___gt__, METH_VARARGS, "ccases_t___gt__(self, r) -> bool"},
	 { "ccases_t___le__", _wrap_ccases_t___le__, METH_VARARGS, "ccases_t___le__(self, r) -> bool"},
	 { "ccases_t___ge__", _wrap_ccases_t___ge__, METH_VARARGS, "ccases_t___ge__(self, r) -> bool"},
	 { "ccases_t_compare", _wrap_ccases_t_compare, METH_VARARGS, "ccases_t_compare(self, r) -> int"},
	 { "new_ccases_t", _wrap_new_ccases_t, METH_NOARGS, "new_ccases_t() -> ccases_t"},
	 { "delete_ccases_t", _wrap_delete_ccases_t, METH_O, "delete_ccases_t(self)"},
	 { "ccases_t_swigregister", ccases_t_swigregister, METH_O, NULL},
	 { "ccases_t_swiginit", ccases_t_swiginit, METH_VARARGS, NULL},
	 { "cswitch_t_mvnf_set", _wrap_cswitch_t_mvnf_set, METH_VARARGS, "cswitch_t_mvnf_set(self, mvnf)"},
	 { "cswitch_t_mvnf_get", _wrap_cswitch_t_mvnf_get, METH_O, "cswitch_t_mvnf_get(self) -> cnumber_t"},
	 { "cswitch_t_cases_set", _wrap_cswitch_t_cases_set, METH_VARARGS, "cswitch_t_cases_set(self, cases)"},
	 { "cswitch_t_cases_get", _wrap_cswitch_t_cases_get, METH_O, "cswitch_t_cases_get(self) -> ccases_t"},
	 { "cswitch_t___eq__", _wrap_cswitch_t___eq__, METH_VARARGS, "cswitch_t___eq__(self, r) -> bool"},
	 { "cswitch_t___ne__", _wrap_cswitch_t___ne__, METH_VARARGS, "cswitch_t___ne__(self, r) -> bool"},
	 { "cswitch_t___lt__", _wrap_cswitch_t___lt__, METH_VARARGS, "cswitch_t___lt__(self, r) -> bool"},
	 { "cswitch_t___gt__", _wrap_cswitch_t___gt__, METH_VARARGS, "cswitch_t___gt__(self, r) -> bool"},
	 { "cswitch_t___le__", _wrap_cswitch_t___le__, METH_VARARGS, "cswitch_t___le__(self, r) -> bool"},
	 { "cswitch_t___ge__", _wrap_cswitch_t___ge__, METH_VARARGS, "cswitch_t___ge__(self, r) -> bool"},
	 { "cswitch_t_compare", _wrap_cswitch_t_compare, METH_VARARGS, "cswitch_t_compare(self, r) -> int"},
	 { "new_cswitch_t", _wrap_new_cswitch_t, METH_NOARGS, "new_cswitch_t() -> cswitch_t"},
	 { "delete_cswitch_t", _wrap_delete_cswitch_t, METH_O, "delete_cswitch_t(self)"},
	 { "cswitch_t_swigregister", cswitch_t_swigregister, METH_O, NULL},
	 { "cswitch_t_swiginit", cswitch_t_swiginit, METH_VARARGS, NULL},
	 { "ctree_anchor_t_value_set", _wrap_ctree_anchor_t_value_set, METH_VARARGS, "ctree_anchor_t_value_set(self, value)"},
	 { "ctree_anchor_t_value_get", _wrap_ctree_anchor_t_value_get, METH_O, "ctree_anchor_t_value_get(self) -> uval_t"},
	 { "new_ctree_anchor_t", _wrap_new_ctree_anchor_t, METH_NOARGS, "new_ctree_anchor_t() -> ctree_anchor_t"},
	 { "ctree_anchor_t_get_index", _wrap_ctree_anchor_t_get_index, METH_O, "ctree_anchor_t_get_index(self) -> int"},
	 { "ctree_anchor_t_get_itp", _wrap_ctree_anchor_t_get_itp, METH_O, "ctree_anchor_t_get_itp(self) -> item_preciser_t"},
	 { "ctree_anchor_t_is_valid_anchor", _wrap_ctree_anchor_t_is_valid_anchor, METH_O, "ctree_anchor_t_is_valid_anchor(self) -> bool"},
	 { "ctree_anchor_t_is_citem_anchor", _wrap_ctree_anchor_t_is_citem_anchor, METH_O, "ctree_anchor_t_is_citem_anchor(self) -> bool"},
	 { "ctree_anchor_t_is_lvar_anchor", _wrap_ctree_anchor_t_is_lvar_anchor, METH_O, "ctree_anchor_t_is_lvar_anchor(self) -> bool"},
	 { "ctree_anchor_t_is_itp_anchor", _wrap_ctree_anchor_t_is_itp_anchor, METH_O, "ctree_anchor_t_is_itp_anchor(self) -> bool"},
	 { "ctree_anchor_t_is_blkcmt_anchor", _wrap_ctree_anchor_t_is_blkcmt_anchor, METH_O, "ctree_anchor_t_is_blkcmt_anchor(self) -> bool"},
	 { "delete_ctree_anchor_t", _wrap_delete_ctree_anchor_t, METH_O, "delete_ctree_anchor_t(self)"},
	 { "ctree_anchor_t_swigregister", ctree_anchor_t_swigregister, METH_O, NULL},
	 { "ctree_anchor_t_swiginit", ctree_anchor_t_swiginit, METH_VARARGS, NULL},
	 { "ctree_item_t_citype_set", _wrap_ctree_item_t_citype_set, METH_VARARGS, "ctree_item_t_citype_set(self, citype)"},
	 { "ctree_item_t_citype_get", _wrap_ctree_item_t_citype_get, METH_O, "ctree_item_t_citype_get(self) -> cursor_item_type_t"},
	 { "new_ctree_item_t", _wrap_new_ctree_item_t, METH_NOARGS, "new_ctree_item_t() -> ctree_item_t"},
	 { "ctree_item_t_get_memptr", _wrap_ctree_item_t_get_memptr, METH_VARARGS, "ctree_item_t_get_memptr(self, p_sptr=None) -> member_t *"},
	 { "ctree_item_t_get_lvar", _wrap_ctree_item_t_get_lvar, METH_O, "ctree_item_t_get_lvar(self) -> lvar_t"},
	 { "ctree_item_t_get_ea", _wrap_ctree_item_t_get_ea, METH_O, "ctree_item_t_get_ea(self) -> ea_t"},
	 { "ctree_item_t_get_label_num", _wrap_ctree_item_t_get_label_num, METH_VARARGS, "ctree_item_t_get_label_num(self, gln_flags) -> int"},
	 { "ctree_item_t_is_citem", _wrap_ctree_item_t_is_citem, METH_O, "ctree_item_t_is_citem(self) -> bool"},
	 { "ctree_item_t__get_it", _wrap_ctree_item_t__get_it, METH_O, "ctree_item_t__get_it(self) -> citem_t"},
	 { "ctree_item_t__get_e", _wrap_ctree_item_t__get_e, METH_O, "ctree_item_t__get_e(self) -> cexpr_t"},
	 { "ctree_item_t__get_i", _wrap_ctree_item_t__get_i, METH_O, "ctree_item_t__get_i(self) -> cinsn_t"},
	 { "ctree_item_t__get_l", _wrap_ctree_item_t__get_l, METH_O, "ctree_item_t__get_l(self) -> lvar_t"},
	 { "ctree_item_t__get_f", _wrap_ctree_item_t__get_f, METH_O, "ctree_item_t__get_f(self) -> cfunc_t"},
	 { "ctree_item_t_loc_get", _wrap_ctree_item_t_loc_get, METH_O, "ctree_item_t_loc_get(self) -> treeloc_t"},
	 { "delete_ctree_item_t", _wrap_delete_ctree_item_t, METH_O, "delete_ctree_item_t(self)"},
	 { "ctree_item_t_swigregister", ctree_item_t_swigregister, METH_O, NULL},
	 { "ctree_item_t_swiginit", ctree_item_t_swiginit, METH_VARARGS, NULL},
	 { "_ll_lnot", _wrap__ll_lnot, METH_O, "_ll_lnot(e) -> cexpr_t"},
	 { "_ll_new_block", _wrap__ll_new_block, METH_NOARGS, "_ll_new_block() -> cinsn_t"},
	 { "_ll_create_helper", _wrap__ll_create_helper, METH_VARARGS, "_ll_create_helper(standalone, type, format) -> cexpr_t"},
	 { "_ll_call_helper", _wrap__ll_call_helper, METH_VARARGS, "_ll_call_helper(rettype, args, format) -> cexpr_t"},
	 { "_ll_make_num", _wrap__ll_make_num, METH_VARARGS, "_ll_make_num(n, func=None, ea=BADADDR, opnum=0, sign=no_sign, size=0) -> cexpr_t"},
	 { "_ll_make_ref", _wrap__ll_make_ref, METH_O, "_ll_make_ref(e) -> cexpr_t"},
	 { "_ll_dereference", _wrap__ll_dereference, METH_VARARGS, "_ll_dereference(e, ptrsize, is_flt=False) -> cexpr_t"},
	 { "save_user_labels", _wrap_save_user_labels, METH_VARARGS, "save_user_labels(func_ea, user_labels)"},
	 { "save_user_cmts", _wrap_save_user_cmts, METH_VARARGS, "save_user_cmts(func_ea, user_cmts)"},
	 { "save_user_numforms", _wrap_save_user_numforms, METH_VARARGS, "save_user_numforms(func_ea, numforms)"},
	 { "save_user_iflags", _wrap_save_user_iflags, METH_VARARGS, "save_user_iflags(func_ea, iflags)"},
	 { "save_user_unions", _wrap_save_user_unions, METH_VARARGS, "save_user_unions(func_ea, unions)"},
	 { "restore_user_labels", _wrap_restore_user_labels, METH_O, "restore_user_labels(func_ea) -> user_labels_t"},
	 { "restore_user_cmts", _wrap_restore_user_cmts, METH_O, "restore_user_cmts(func_ea) -> user_cmts_t"},
	 { "restore_user_numforms", _wrap_restore_user_numforms, METH_O, "restore_user_numforms(func_ea) -> user_numforms_t"},
	 { "restore_user_iflags", _wrap_restore_user_iflags, METH_O, "restore_user_iflags(func_ea) -> user_iflags_t"},
	 { "restore_user_unions", _wrap_restore_user_unions, METH_O, "restore_user_unions(func_ea) -> user_unions_t"},
	 { "cfunc_t_entry_ea_set", _wrap_cfunc_t_entry_ea_set, METH_VARARGS, "cfunc_t_entry_ea_set(self, entry_ea)"},
	 { "cfunc_t_entry_ea_get", _wrap_cfunc_t_entry_ea_get, METH_O, "cfunc_t_entry_ea_get(self) -> ea_t"},
	 { "cfunc_t_mba_set", _wrap_cfunc_t_mba_set, METH_VARARGS, "cfunc_t_mba_set(self, mba)"},
	 { "cfunc_t_mba_get", _wrap_cfunc_t_mba_get, METH_O, "cfunc_t_mba_get(self) -> mbl_array_t *"},
	 { "cfunc_t_body_set", _wrap_cfunc_t_body_set, METH_VARARGS, "cfunc_t_body_set(self, body)"},
	 { "cfunc_t_body_get", _wrap_cfunc_t_body_get, METH_O, "cfunc_t_body_get(self) -> cinsn_t"},
	 { "cfunc_t_argidx_get", _wrap_cfunc_t_argidx_get, METH_O, "cfunc_t_argidx_get(self) -> intvec_t &"},
	 { "cfunc_t_maturity_set", _wrap_cfunc_t_maturity_set, METH_VARARGS, "cfunc_t_maturity_set(self, maturity)"},
	 { "cfunc_t_maturity_get", _wrap_cfunc_t_maturity_get, METH_O, "cfunc_t_maturity_get(self) -> ctree_maturity_t"},
	 { "cfunc_t_user_labels_set", _wrap_cfunc_t_user_labels_set, METH_VARARGS, "cfunc_t_user_labels_set(self, user_labels)"},
	 { "cfunc_t_user_labels_get", _wrap_cfunc_t_user_labels_get, METH_O, "cfunc_t_user_labels_get(self) -> user_labels_t"},
	 { "cfunc_t_user_cmts_set", _wrap_cfunc_t_user_cmts_set, METH_VARARGS, "cfunc_t_user_cmts_set(self, user_cmts)"},
	 { "cfunc_t_user_cmts_get", _wrap_cfunc_t_user_cmts_get, METH_O, "cfunc_t_user_cmts_get(self) -> user_cmts_t"},
	 { "cfunc_t_numforms_set", _wrap_cfunc_t_numforms_set, METH_VARARGS, "cfunc_t_numforms_set(self, numforms)"},
	 { "cfunc_t_numforms_get", _wrap_cfunc_t_numforms_get, METH_O, "cfunc_t_numforms_get(self) -> user_numforms_t"},
	 { "cfunc_t_user_iflags_set", _wrap_cfunc_t_user_iflags_set, METH_VARARGS, "cfunc_t_user_iflags_set(self, user_iflags)"},
	 { "cfunc_t_user_iflags_get", _wrap_cfunc_t_user_iflags_get, METH_O, "cfunc_t_user_iflags_get(self) -> user_iflags_t"},
	 { "cfunc_t_user_unions_set", _wrap_cfunc_t_user_unions_set, METH_VARARGS, "cfunc_t_user_unions_set(self, user_unions)"},
	 { "cfunc_t_user_unions_get", _wrap_cfunc_t_user_unions_get, METH_O, "cfunc_t_user_unions_get(self) -> user_unions_t"},
	 { "cfunc_t_refcnt_set", _wrap_cfunc_t_refcnt_set, METH_VARARGS, "cfunc_t_refcnt_set(self, refcnt)"},
	 { "cfunc_t_refcnt_get", _wrap_cfunc_t_refcnt_get, METH_O, "cfunc_t_refcnt_get(self) -> int"},
	 { "cfunc_t_statebits_set", _wrap_cfunc_t_statebits_set, METH_VARARGS, "cfunc_t_statebits_set(self, statebits)"},
	 { "cfunc_t_statebits_get", _wrap_cfunc_t_statebits_get, METH_O, "cfunc_t_statebits_get(self) -> int"},
	 { "cfunc_t_hdrlines_set", _wrap_cfunc_t_hdrlines_set, METH_VARARGS, "cfunc_t_hdrlines_set(self, hdrlines)"},
	 { "cfunc_t_hdrlines_get", _wrap_cfunc_t_hdrlines_get, METH_O, "cfunc_t_hdrlines_get(self) -> int"},
	 { "cfunc_t_treeitems_set", _wrap_cfunc_t_treeitems_set, METH_VARARGS, "cfunc_t_treeitems_set(self, treeitems)"},
	 { "cfunc_t_treeitems_get", _wrap_cfunc_t_treeitems_get, METH_O, "cfunc_t_treeitems_get(self) -> ctree_items_t"},
	 { "delete_cfunc_t", _wrap_delete_cfunc_t, METH_O, "delete_cfunc_t(self)"},
	 { "cfunc_t_release", _wrap_cfunc_t_release, METH_O, "cfunc_t_release(self)"},
	 { "cfunc_t_build_c_tree", _wrap_cfunc_t_build_c_tree, METH_O, "cfunc_t_build_c_tree(self)"},
	 { "cfunc_t_verify", _wrap_cfunc_t_verify, METH_VARARGS, "cfunc_t_verify(self, aul, even_without_debugger)"},
	 { "cfunc_t_print_dcl", _wrap_cfunc_t_print_dcl, METH_O, "cfunc_t_print_dcl(self)"},
	 { "cfunc_t_print_func", _wrap_cfunc_t_print_func, METH_VARARGS, "cfunc_t_print_func(self, vp)"},
	 { "cfunc_t_get_func_type", _wrap_cfunc_t_get_func_type, METH_VARARGS, "cfunc_t_get_func_type(self, type) -> bool"},
	 { "cfunc_t_get_lvars", _wrap_cfunc_t_get_lvars, METH_O, "cfunc_t_get_lvars(self) -> lvars_t"},
	 { "cfunc_t_get_stkoff_delta", _wrap_cfunc_t_get_stkoff_delta, METH_O, "cfunc_t_get_stkoff_delta(self) -> sval_t"},
	 { "cfunc_t_find_label", _wrap_cfunc_t_find_label, METH_VARARGS, "cfunc_t_find_label(self, label) -> citem_t"},
	 { "cfunc_t_remove_unused_labels", _wrap_cfunc_t_remove_unused_labels, METH_O, "cfunc_t_remove_unused_labels(self)"},
	 { "cfunc_t_get_user_cmt", _wrap_cfunc_t_get_user_cmt, METH_VARARGS, "cfunc_t_get_user_cmt(self, loc, rt) -> char const *"},
	 { "cfunc_t_set_user_cmt", _wrap_cfunc_t_set_user_cmt, METH_VARARGS, "cfunc_t_set_user_cmt(self, loc, cmt)"},
	 { "cfunc_t_get_user_iflags", _wrap_cfunc_t_get_user_iflags, METH_VARARGS, "cfunc_t_get_user_iflags(self, loc) -> int32"},
	 { "cfunc_t_set_user_iflags", _wrap_cfunc_t_set_user_iflags, METH_VARARGS, "cfunc_t_set_user_iflags(self, loc, iflags)"},
	 { "cfunc_t_has_orphan_cmts", _wrap_cfunc_t_has_orphan_cmts, METH_O, "cfunc_t_has_orphan_cmts(self) -> bool"},
	 { "cfunc_t_del_orphan_cmts", _wrap_cfunc_t_del_orphan_cmts, METH_O, "cfunc_t_del_orphan_cmts(self) -> int"},
	 { "cfunc_t_get_user_union_selection", _wrap_cfunc_t_get_user_union_selection, METH_VARARGS, "cfunc_t_get_user_union_selection(self, ea, path) -> bool"},
	 { "cfunc_t_set_user_union_selection", _wrap_cfunc_t_set_user_union_selection, METH_VARARGS, "cfunc_t_set_user_union_selection(self, ea, path)"},
	 { "cfunc_t_save_user_labels", _wrap_cfunc_t_save_user_labels, METH_O, "cfunc_t_save_user_labels(self)"},
	 { "cfunc_t_save_user_cmts", _wrap_cfunc_t_save_user_cmts, METH_O, "cfunc_t_save_user_cmts(self)"},
	 { "cfunc_t_save_user_numforms", _wrap_cfunc_t_save_user_numforms, METH_O, "cfunc_t_save_user_numforms(self)"},
	 { "cfunc_t_save_user_iflags", _wrap_cfunc_t_save_user_iflags, METH_O, "cfunc_t_save_user_iflags(self)"},
	 { "cfunc_t_save_user_unions", _wrap_cfunc_t_save_user_unions, METH_O, "cfunc_t_save_user_unions(self)"},
	 { "cfunc_t_get_line_item", _wrap_cfunc_t_get_line_item, METH_VARARGS, "cfunc_t_get_line_item(self, line, x, is_ctree_line, phead, pitem, ptail) -> bool"},
	 { "cfunc_t_get_warnings", _wrap_cfunc_t_get_warnings, METH_O, "cfunc_t_get_warnings(self) -> hexwarns_t"},
	 { "cfunc_t_get_eamap", _wrap_cfunc_t_get_eamap, METH_O, "cfunc_t_get_eamap(self) -> eamap_t"},
	 { "cfunc_t_get_boundaries", _wrap_cfunc_t_get_boundaries, METH_O, "cfunc_t_get_boundaries(self) -> boundaries_t"},
	 { "cfunc_t_get_pseudocode", _wrap_cfunc_t_get_pseudocode, METH_O, "cfunc_t_get_pseudocode(self) -> strvec_t const &"},
	 { "cfunc_t_gather_derefs", _wrap_cfunc_t_gather_derefs, METH_VARARGS, "cfunc_t_gather_derefs(self, ci, udm=None) -> bool"},
	 { "cfunc_t_find_item_coords", _wrap_cfunc_t_find_item_coords, METH_VARARGS, "\n"
		"cfunc_t_find_item_coords(self, item, px, py) -> bool\n"
		"cfunc_t_find_item_coords(self, item) -> PyObject *\n"
		""},
	 { "cfunc_t___str__", _wrap_cfunc_t___str__, METH_O, "cfunc_t___str__(self) -> qstring"},
	 { "cfunc_t_swigregister", cfunc_t_swigregister, METH_O, NULL},
	 { "decompile", _wrap_decompile, METH_VARARGS, "decompile(pfn, hf, flags=0) -> cfuncptr_t"},
	 { "mark_cfunc_dirty", _wrap_mark_cfunc_dirty, METH_VARARGS, "mark_cfunc_dirty(ea, close_views=False) -> bool"},
	 { "clear_cached_cfuncs", _wrap_clear_cached_cfuncs, METH_NOARGS, "clear_cached_cfuncs()"},
	 { "has_cached_cfunc", _wrap_has_cached_cfunc, METH_O, "has_cached_cfunc(ea) -> bool"},
	 { "get_ctype_name", _wrap_get_ctype_name, METH_O, "get_ctype_name(op) -> char const *"},
	 { "create_field_name", _wrap_create_field_name, METH_VARARGS, "create_field_name(type, offset=BADADDR) -> qstring"},
	 { "ctext_position_t_lnnum_set", _wrap_ctext_position_t_lnnum_set, METH_VARARGS, "ctext_position_t_lnnum_set(self, lnnum)"},
	 { "ctext_position_t_lnnum_get", _wrap_ctext_position_t_lnnum_get, METH_O, "ctext_position_t_lnnum_get(self) -> int"},
	 { "ctext_position_t_x_set", _wrap_ctext_position_t_x_set, METH_VARARGS, "ctext_position_t_x_set(self, x)"},
	 { "ctext_position_t_x_get", _wrap_ctext_position_t_x_get, METH_O, "ctext_position_t_x_get(self) -> int"},
	 { "ctext_position_t_y_set", _wrap_ctext_position_t_y_set, METH_VARARGS, "ctext_position_t_y_set(self, y)"},
	 { "ctext_position_t_y_get", _wrap_ctext_position_t_y_get, METH_O, "ctext_position_t_y_get(self) -> int"},
	 { "ctext_position_t_in_ctree", _wrap_ctext_position_t_in_ctree, METH_VARARGS, "ctext_position_t_in_ctree(self, hdrlines) -> bool"},
	 { "ctext_position_t___eq__", _wrap_ctext_position_t___eq__, METH_VARARGS, "ctext_position_t___eq__(self, r) -> bool"},
	 { "ctext_position_t___ne__", _wrap_ctext_position_t___ne__, METH_VARARGS, "ctext_position_t___ne__(self, r) -> bool"},
	 { "ctext_position_t___lt__", _wrap_ctext_position_t___lt__, METH_VARARGS, "ctext_position_t___lt__(self, r) -> bool"},
	 { "ctext_position_t___gt__", _wrap_ctext_position_t___gt__, METH_VARARGS, "ctext_position_t___gt__(self, r) -> bool"},
	 { "ctext_position_t___le__", _wrap_ctext_position_t___le__, METH_VARARGS, "ctext_position_t___le__(self, r) -> bool"},
	 { "ctext_position_t___ge__", _wrap_ctext_position_t___ge__, METH_VARARGS, "ctext_position_t___ge__(self, r) -> bool"},
	 { "compare", _wrap_compare, METH_VARARGS, "\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		"compare(a, b) -> int\n"
		""},
	 { "ctext_position_t_compare", _wrap_ctext_position_t_compare, METH_VARARGS, "ctext_position_t_compare(self, r) -> int"},
	 { "new_ctext_position_t", _wrap_new_ctext_position_t, METH_VARARGS, "new_ctext_position_t(_lnnum=-1, _x=0, _y=0) -> ctext_position_t"},
	 { "delete_ctext_position_t", _wrap_delete_ctext_position_t, METH_O, "delete_ctext_position_t(self)"},
	 { "ctext_position_t_swigregister", ctext_position_t_swigregister, METH_O, NULL},
	 { "ctext_position_t_swiginit", ctext_position_t_swiginit, METH_VARARGS, NULL},
	 { "history_item_t_ea_set", _wrap_history_item_t_ea_set, METH_VARARGS, "history_item_t_ea_set(self, ea)"},
	 { "history_item_t_ea_get", _wrap_history_item_t_ea_get, METH_O, "history_item_t_ea_get(self) -> ea_t"},
	 { "history_item_t_end_set", _wrap_history_item_t_end_set, METH_VARARGS, "history_item_t_end_set(self, end)"},
	 { "history_item_t_end_get", _wrap_history_item_t_end_get, METH_O, "history_item_t_end_get(self) -> ea_t"},
	 { "new_history_item_t", _wrap_new_history_item_t, METH_VARARGS, "\n"
		"history_item_t(_ea=BADADDR, _lnnum=-1, _x=0, _y=0)\n"
		"new_history_item_t(_ea, p) -> history_item_t\n"
		""},
	 { "delete_history_item_t", _wrap_delete_history_item_t, METH_O, "delete_history_item_t(self)"},
	 { "history_item_t_swigregister", history_item_t_swigregister, METH_O, NULL},
	 { "history_item_t_swiginit", history_item_t_swiginit, METH_VARARGS, NULL},
	 { "vdui_t_flags_set", _wrap_vdui_t_flags_set, METH_VARARGS, "vdui_t_flags_set(self, flags)"},
	 { "vdui_t_flags_get", _wrap_vdui_t_flags_get, METH_O, "vdui_t_flags_get(self) -> int"},
	 { "vdui_t_visible", _wrap_vdui_t_visible, METH_O, "vdui_t_visible(self) -> bool"},
	 { "vdui_t_valid", _wrap_vdui_t_valid, METH_O, "vdui_t_valid(self) -> bool"},
	 { "vdui_t_locked", _wrap_vdui_t_locked, METH_O, "vdui_t_locked(self) -> bool"},
	 { "vdui_t_set_visible", _wrap_vdui_t_set_visible, METH_VARARGS, "vdui_t_set_visible(self, v)"},
	 { "vdui_t_set_valid", _wrap_vdui_t_set_valid, METH_VARARGS, "vdui_t_set_valid(self, v)"},
	 { "vdui_t_set_locked", _wrap_vdui_t_set_locked, METH_VARARGS, "vdui_t_set_locked(self, v) -> bool"},
	 { "vdui_t_view_idx_set", _wrap_vdui_t_view_idx_set, METH_VARARGS, "vdui_t_view_idx_set(self, view_idx)"},
	 { "vdui_t_view_idx_get", _wrap_vdui_t_view_idx_get, METH_O, "vdui_t_view_idx_get(self) -> int"},
	 { "vdui_t_ct_set", _wrap_vdui_t_ct_set, METH_VARARGS, "vdui_t_ct_set(self, ct)"},
	 { "vdui_t_ct_get", _wrap_vdui_t_ct_get, METH_O, "vdui_t_ct_get(self) -> TWidget *"},
	 { "vdui_t_toplevel_set", _wrap_vdui_t_toplevel_set, METH_VARARGS, "vdui_t_toplevel_set(self, toplevel)"},
	 { "vdui_t_toplevel_get", _wrap_vdui_t_toplevel_get, METH_O, "vdui_t_toplevel_get(self) -> TWidget *"},
	 { "vdui_t_mba_set", _wrap_vdui_t_mba_set, METH_VARARGS, "vdui_t_mba_set(self, mba)"},
	 { "vdui_t_mba_get", _wrap_vdui_t_mba_get, METH_O, "vdui_t_mba_get(self) -> mbl_array_t *"},
	 { "vdui_t_cfunc_set", _wrap_vdui_t_cfunc_set, METH_VARARGS, "vdui_t_cfunc_set(self, cfunc)"},
	 { "vdui_t_cfunc_get", _wrap_vdui_t_cfunc_get, METH_O, "vdui_t_cfunc_get(self) -> cfuncptr_t"},
	 { "vdui_t_last_code_set", _wrap_vdui_t_last_code_set, METH_VARARGS, "vdui_t_last_code_set(self, last_code)"},
	 { "vdui_t_last_code_get", _wrap_vdui_t_last_code_get, METH_O, "vdui_t_last_code_get(self) -> merror_t"},
	 { "vdui_t_cpos_set", _wrap_vdui_t_cpos_set, METH_VARARGS, "vdui_t_cpos_set(self, cpos)"},
	 { "vdui_t_cpos_get", _wrap_vdui_t_cpos_get, METH_O, "vdui_t_cpos_get(self) -> ctext_position_t"},
	 { "vdui_t_head_set", _wrap_vdui_t_head_set, METH_VARARGS, "vdui_t_head_set(self, head)"},
	 { "vdui_t_head_get", _wrap_vdui_t_head_get, METH_O, "vdui_t_head_get(self) -> ctree_item_t"},
	 { "vdui_t_item_set", _wrap_vdui_t_item_set, METH_VARARGS, "vdui_t_item_set(self, item)"},
	 { "vdui_t_item_get", _wrap_vdui_t_item_get, METH_O, "vdui_t_item_get(self) -> ctree_item_t"},
	 { "vdui_t_tail_set", _wrap_vdui_t_tail_set, METH_VARARGS, "vdui_t_tail_set(self, tail)"},
	 { "vdui_t_tail_get", _wrap_vdui_t_tail_get, METH_O, "vdui_t_tail_get(self) -> ctree_item_t"},
	 { "vdui_t_refresh_view", _wrap_vdui_t_refresh_view, METH_VARARGS, "vdui_t_refresh_view(self, redo_mba)"},
	 { "vdui_t_refresh_ctext", _wrap_vdui_t_refresh_ctext, METH_VARARGS, "vdui_t_refresh_ctext(self, activate=True)"},
	 { "vdui_t_switch_to", _wrap_vdui_t_switch_to, METH_VARARGS, "vdui_t_switch_to(self, f, activate)"},
	 { "vdui_t_in_ctree", _wrap_vdui_t_in_ctree, METH_O, "vdui_t_in_ctree(self) -> bool"},
	 { "vdui_t_get_number", _wrap_vdui_t_get_number, METH_O, "vdui_t_get_number(self) -> cnumber_t"},
	 { "vdui_t_get_current_label", _wrap_vdui_t_get_current_label, METH_O, "vdui_t_get_current_label(self) -> int"},
	 { "vdui_t_clear", _wrap_vdui_t_clear, METH_O, "vdui_t_clear(self)"},
	 { "vdui_t_refresh_cpos", _wrap_vdui_t_refresh_cpos, METH_VARARGS, "vdui_t_refresh_cpos(self, idv) -> bool"},
	 { "vdui_t_get_current_item", _wrap_vdui_t_get_current_item, METH_VARARGS, "vdui_t_get_current_item(self, idv) -> bool"},
	 { "vdui_t_ui_rename_lvar", _wrap_vdui_t_ui_rename_lvar, METH_VARARGS, "vdui_t_ui_rename_lvar(self, v) -> bool"},
	 { "vdui_t_rename_lvar", _wrap_vdui_t_rename_lvar, METH_VARARGS, "vdui_t_rename_lvar(self, v, name, is_user_name) -> bool"},
	 { "vdui_t_ui_set_call_type", _wrap_vdui_t_ui_set_call_type, METH_VARARGS, "vdui_t_ui_set_call_type(self, e) -> bool"},
	 { "vdui_t_ui_set_lvar_type", _wrap_vdui_t_ui_set_lvar_type, METH_VARARGS, "vdui_t_ui_set_lvar_type(self, v) -> bool"},
	 { "vdui_t_set_lvar_type", _wrap_vdui_t_set_lvar_type, METH_VARARGS, "vdui_t_set_lvar_type(self, v, type) -> bool"},
	 { "vdui_t_set_noptr_lvar", _wrap_vdui_t_set_noptr_lvar, METH_VARARGS, "vdui_t_set_noptr_lvar(self, v) -> bool"},
	 { "vdui_t_ui_edit_lvar_cmt", _wrap_vdui_t_ui_edit_lvar_cmt, METH_VARARGS, "vdui_t_ui_edit_lvar_cmt(self, v) -> bool"},
	 { "vdui_t_set_lvar_cmt", _wrap_vdui_t_set_lvar_cmt, METH_VARARGS, "vdui_t_set_lvar_cmt(self, v, cmt) -> bool"},
	 { "vdui_t_ui_map_lvar", _wrap_vdui_t_ui_map_lvar, METH_VARARGS, "vdui_t_ui_map_lvar(self, v) -> bool"},
	 { "vdui_t_ui_unmap_lvar", _wrap_vdui_t_ui_unmap_lvar, METH_VARARGS, "vdui_t_ui_unmap_lvar(self, v) -> bool"},
	 { "vdui_t_map_lvar", _wrap_vdui_t_map_lvar, METH_VARARGS, "vdui_t_map_lvar(self, _from, to) -> bool"},
	 { "vdui_t_set_strmem_type", _wrap_vdui_t_set_strmem_type, METH_VARARGS, "vdui_t_set_strmem_type(self, sptr, mptr) -> bool"},
	 { "vdui_t_rename_strmem", _wrap_vdui_t_rename_strmem, METH_VARARGS, "vdui_t_rename_strmem(self, sptr, mptr) -> bool"},
	 { "vdui_t_set_global_type", _wrap_vdui_t_set_global_type, METH_VARARGS, "vdui_t_set_global_type(self, ea) -> bool"},
	 { "vdui_t_rename_global", _wrap_vdui_t_rename_global, METH_VARARGS, "vdui_t_rename_global(self, ea) -> bool"},
	 { "vdui_t_rename_label", _wrap_vdui_t_rename_label, METH_VARARGS, "vdui_t_rename_label(self, label) -> bool"},
	 { "vdui_t_jump_enter", _wrap_vdui_t_jump_enter, METH_VARARGS, "vdui_t_jump_enter(self, idv, omflags) -> bool"},
	 { "vdui_t_ctree_to_disasm", _wrap_vdui_t_ctree_to_disasm, METH_O, "vdui_t_ctree_to_disasm(self) -> bool"},
	 { "vdui_t_calc_cmt_type", _wrap_vdui_t_calc_cmt_type, METH_VARARGS, "vdui_t_calc_cmt_type(self, lnnum, cmttype) -> cmt_type_t"},
	 { "vdui_t_edit_cmt", _wrap_vdui_t_edit_cmt, METH_VARARGS, "vdui_t_edit_cmt(self, loc) -> bool"},
	 { "vdui_t_edit_func_cmt", _wrap_vdui_t_edit_func_cmt, METH_O, "vdui_t_edit_func_cmt(self) -> bool"},
	 { "vdui_t_del_orphan_cmts", _wrap_vdui_t_del_orphan_cmts, METH_O, "vdui_t_del_orphan_cmts(self) -> bool"},
	 { "vdui_t_set_num_radix", _wrap_vdui_t_set_num_radix, METH_VARARGS, "vdui_t_set_num_radix(self, base) -> bool"},
	 { "vdui_t_set_num_enum", _wrap_vdui_t_set_num_enum, METH_O, "vdui_t_set_num_enum(self) -> bool"},
	 { "vdui_t_set_num_stroff", _wrap_vdui_t_set_num_stroff, METH_O, "vdui_t_set_num_stroff(self) -> bool"},
	 { "vdui_t_invert_sign", _wrap_vdui_t_invert_sign, METH_O, "vdui_t_invert_sign(self) -> bool"},
	 { "vdui_t_invert_bits", _wrap_vdui_t_invert_bits, METH_O, "vdui_t_invert_bits(self) -> bool"},
	 { "vdui_t_collapse_item", _wrap_vdui_t_collapse_item, METH_VARARGS, "vdui_t_collapse_item(self, hide) -> bool"},
	 { "vdui_t_collapse_lvars", _wrap_vdui_t_collapse_lvars, METH_VARARGS, "vdui_t_collapse_lvars(self, hide) -> bool"},
	 { "vdui_t_split_item", _wrap_vdui_t_split_item, METH_VARARGS, "vdui_t_split_item(self, split) -> bool"},
	 { "delete_vdui_t", _wrap_delete_vdui_t, METH_O, "delete_vdui_t(self)"},
	 { "vdui_t_swigregister", vdui_t_swigregister, METH_O, NULL},
	 { "user_numforms_iterator_t_x_set", _wrap_user_numforms_iterator_t_x_set, METH_VARARGS, "user_numforms_iterator_t_x_set(self, x)"},
	 { "user_numforms_iterator_t_x_get", _wrap_user_numforms_iterator_t_x_get, METH_O, "user_numforms_iterator_t_x_get(self) -> iterator_word"},
	 { "user_numforms_iterator_t___eq__", _wrap_user_numforms_iterator_t___eq__, METH_VARARGS, "user_numforms_iterator_t___eq__(self, p) -> bool"},
	 { "user_numforms_iterator_t___ne__", _wrap_user_numforms_iterator_t___ne__, METH_VARARGS, "user_numforms_iterator_t___ne__(self, p) -> bool"},
	 { "new_user_numforms_iterator_t", _wrap_new_user_numforms_iterator_t, METH_NOARGS, "new_user_numforms_iterator_t() -> user_numforms_iterator_t"},
	 { "delete_user_numforms_iterator_t", _wrap_delete_user_numforms_iterator_t, METH_O, "delete_user_numforms_iterator_t(self)"},
	 { "user_numforms_iterator_t_swigregister", user_numforms_iterator_t_swigregister, METH_O, NULL},
	 { "user_numforms_iterator_t_swiginit", user_numforms_iterator_t_swiginit, METH_VARARGS, NULL},
	 { "user_numforms_begin", _wrap_user_numforms_begin, METH_O, "user_numforms_begin(map) -> user_numforms_iterator_t"},
	 { "user_numforms_end", _wrap_user_numforms_end, METH_O, "user_numforms_end(map) -> user_numforms_iterator_t"},
	 { "user_numforms_next", _wrap_user_numforms_next, METH_O, "user_numforms_next(p) -> user_numforms_iterator_t"},
	 { "user_numforms_prev", _wrap_user_numforms_prev, METH_O, "user_numforms_prev(p) -> user_numforms_iterator_t"},
	 { "user_numforms_first", _wrap_user_numforms_first, METH_O, "user_numforms_first(p) -> operand_locator_t"},
	 { "user_numforms_second", _wrap_user_numforms_second, METH_O, "user_numforms_second(p) -> number_format_t"},
	 { "user_numforms_find", _wrap_user_numforms_find, METH_VARARGS, "user_numforms_find(map, key) -> user_numforms_iterator_t"},
	 { "user_numforms_insert", _wrap_user_numforms_insert, METH_VARARGS, "user_numforms_insert(map, key, val) -> user_numforms_iterator_t"},
	 { "user_numforms_erase", _wrap_user_numforms_erase, METH_VARARGS, "user_numforms_erase(map, p)"},
	 { "user_numforms_clear", _wrap_user_numforms_clear, METH_O, "user_numforms_clear(map)"},
	 { "user_numforms_size", _wrap_user_numforms_size, METH_O, "user_numforms_size(map) -> size_t"},
	 { "user_numforms_free", _wrap_user_numforms_free, METH_O, "user_numforms_free(map)"},
	 { "user_numforms_new", _wrap_user_numforms_new, METH_NOARGS, "user_numforms_new() -> user_numforms_t"},
	 { "lvar_mapping_iterator_t_x_set", _wrap_lvar_mapping_iterator_t_x_set, METH_VARARGS, "lvar_mapping_iterator_t_x_set(self, x)"},
	 { "lvar_mapping_iterator_t_x_get", _wrap_lvar_mapping_iterator_t_x_get, METH_O, "lvar_mapping_iterator_t_x_get(self) -> iterator_word"},
	 { "lvar_mapping_iterator_t___eq__", _wrap_lvar_mapping_iterator_t___eq__, METH_VARARGS, "lvar_mapping_iterator_t___eq__(self, p) -> bool"},
	 { "lvar_mapping_iterator_t___ne__", _wrap_lvar_mapping_iterator_t___ne__, METH_VARARGS, "lvar_mapping_iterator_t___ne__(self, p) -> bool"},
	 { "new_lvar_mapping_iterator_t", _wrap_new_lvar_mapping_iterator_t, METH_NOARGS, "new_lvar_mapping_iterator_t() -> lvar_mapping_iterator_t"},
	 { "delete_lvar_mapping_iterator_t", _wrap_delete_lvar_mapping_iterator_t, METH_O, "delete_lvar_mapping_iterator_t(self)"},
	 { "lvar_mapping_iterator_t_swigregister", lvar_mapping_iterator_t_swigregister, METH_O, NULL},
	 { "lvar_mapping_iterator_t_swiginit", lvar_mapping_iterator_t_swiginit, METH_VARARGS, NULL},
	 { "lvar_mapping_begin", _wrap_lvar_mapping_begin, METH_O, "lvar_mapping_begin(map) -> lvar_mapping_iterator_t"},
	 { "lvar_mapping_end", _wrap_lvar_mapping_end, METH_O, "lvar_mapping_end(map) -> lvar_mapping_iterator_t"},
	 { "lvar_mapping_next", _wrap_lvar_mapping_next, METH_O, "lvar_mapping_next(p) -> lvar_mapping_iterator_t"},
	 { "lvar_mapping_prev", _wrap_lvar_mapping_prev, METH_O, "lvar_mapping_prev(p) -> lvar_mapping_iterator_t"},
	 { "lvar_mapping_first", _wrap_lvar_mapping_first, METH_O, "lvar_mapping_first(p) -> lvar_locator_t"},
	 { "lvar_mapping_second", _wrap_lvar_mapping_second, METH_O, "lvar_mapping_second(p) -> lvar_locator_t"},
	 { "lvar_mapping_find", _wrap_lvar_mapping_find, METH_VARARGS, "lvar_mapping_find(map, key) -> lvar_mapping_iterator_t"},
	 { "lvar_mapping_insert", _wrap_lvar_mapping_insert, METH_VARARGS, "lvar_mapping_insert(map, key, val) -> lvar_mapping_iterator_t"},
	 { "lvar_mapping_erase", _wrap_lvar_mapping_erase, METH_VARARGS, "lvar_mapping_erase(map, p)"},
	 { "lvar_mapping_clear", _wrap_lvar_mapping_clear, METH_O, "lvar_mapping_clear(map)"},
	 { "lvar_mapping_size", _wrap_lvar_mapping_size, METH_O, "lvar_mapping_size(map) -> size_t"},
	 { "lvar_mapping_free", _wrap_lvar_mapping_free, METH_O, "lvar_mapping_free(map)"},
	 { "lvar_mapping_new", _wrap_lvar_mapping_new, METH_NOARGS, "lvar_mapping_new() -> lvar_mapping_t"},
	 { "udcall_map_iterator_t_x_set", _wrap_udcall_map_iterator_t_x_set, METH_VARARGS, "udcall_map_iterator_t_x_set(self, x)"},
	 { "udcall_map_iterator_t_x_get", _wrap_udcall_map_iterator_t_x_get, METH_O, "udcall_map_iterator_t_x_get(self) -> iterator_word"},
	 { "udcall_map_iterator_t___eq__", _wrap_udcall_map_iterator_t___eq__, METH_VARARGS, "udcall_map_iterator_t___eq__(self, p) -> bool"},
	 { "udcall_map_iterator_t___ne__", _wrap_udcall_map_iterator_t___ne__, METH_VARARGS, "udcall_map_iterator_t___ne__(self, p) -> bool"},
	 { "new_udcall_map_iterator_t", _wrap_new_udcall_map_iterator_t, METH_NOARGS, "new_udcall_map_iterator_t() -> udcall_map_iterator_t"},
	 { "delete_udcall_map_iterator_t", _wrap_delete_udcall_map_iterator_t, METH_O, "delete_udcall_map_iterator_t(self)"},
	 { "udcall_map_iterator_t_swigregister", udcall_map_iterator_t_swigregister, METH_O, NULL},
	 { "udcall_map_iterator_t_swiginit", udcall_map_iterator_t_swiginit, METH_VARARGS, NULL},
	 { "udcall_map_begin", _wrap_udcall_map_begin, METH_O, "udcall_map_begin(map) -> udcall_map_iterator_t"},
	 { "udcall_map_end", _wrap_udcall_map_end, METH_O, "udcall_map_end(map) -> udcall_map_iterator_t"},
	 { "udcall_map_next", _wrap_udcall_map_next, METH_O, "udcall_map_next(p) -> udcall_map_iterator_t"},
	 { "udcall_map_prev", _wrap_udcall_map_prev, METH_O, "udcall_map_prev(p) -> udcall_map_iterator_t"},
	 { "udcall_map_first", _wrap_udcall_map_first, METH_O, "udcall_map_first(p) -> ea_t const &"},
	 { "udcall_map_second", _wrap_udcall_map_second, METH_O, "udcall_map_second(p) -> udcall_t"},
	 { "udcall_map_find", _wrap_udcall_map_find, METH_VARARGS, "udcall_map_find(map, key) -> udcall_map_iterator_t"},
	 { "udcall_map_insert", _wrap_udcall_map_insert, METH_VARARGS, "udcall_map_insert(map, key, val) -> udcall_map_iterator_t"},
	 { "udcall_map_erase", _wrap_udcall_map_erase, METH_VARARGS, "udcall_map_erase(map, p)"},
	 { "udcall_map_clear", _wrap_udcall_map_clear, METH_O, "udcall_map_clear(map)"},
	 { "udcall_map_size", _wrap_udcall_map_size, METH_O, "udcall_map_size(map) -> size_t"},
	 { "udcall_map_free", _wrap_udcall_map_free, METH_O, "udcall_map_free(map)"},
	 { "udcall_map_new", _wrap_udcall_map_new, METH_NOARGS, "udcall_map_new() -> udcall_map_t *"},
	 { "user_cmts_iterator_t_x_set", _wrap_user_cmts_iterator_t_x_set, METH_VARARGS, "user_cmts_iterator_t_x_set(self, x)"},
	 { "user_cmts_iterator_t_x_get", _wrap_user_cmts_iterator_t_x_get, METH_O, "user_cmts_iterator_t_x_get(self) -> iterator_word"},
	 { "user_cmts_iterator_t___eq__", _wrap_user_cmts_iterator_t___eq__, METH_VARARGS, "user_cmts_iterator_t___eq__(self, p) -> bool"},
	 { "user_cmts_iterator_t___ne__", _wrap_user_cmts_iterator_t___ne__, METH_VARARGS, "user_cmts_iterator_t___ne__(self, p) -> bool"},
	 { "new_user_cmts_iterator_t", _wrap_new_user_cmts_iterator_t, METH_NOARGS, "new_user_cmts_iterator_t() -> user_cmts_iterator_t"},
	 { "delete_user_cmts_iterator_t", _wrap_delete_user_cmts_iterator_t, METH_O, "delete_user_cmts_iterator_t(self)"},
	 { "user_cmts_iterator_t_swigregister", user_cmts_iterator_t_swigregister, METH_O, NULL},
	 { "user_cmts_iterator_t_swiginit", user_cmts_iterator_t_swiginit, METH_VARARGS, NULL},
	 { "user_cmts_begin", _wrap_user_cmts_begin, METH_O, "user_cmts_begin(map) -> user_cmts_iterator_t"},
	 { "user_cmts_end", _wrap_user_cmts_end, METH_O, "user_cmts_end(map) -> user_cmts_iterator_t"},
	 { "user_cmts_next", _wrap_user_cmts_next, METH_O, "user_cmts_next(p) -> user_cmts_iterator_t"},
	 { "user_cmts_prev", _wrap_user_cmts_prev, METH_O, "user_cmts_prev(p) -> user_cmts_iterator_t"},
	 { "user_cmts_first", _wrap_user_cmts_first, METH_O, "user_cmts_first(p) -> treeloc_t"},
	 { "user_cmts_second", _wrap_user_cmts_second, METH_O, "user_cmts_second(p) -> citem_cmt_t"},
	 { "user_cmts_find", _wrap_user_cmts_find, METH_VARARGS, "user_cmts_find(map, key) -> user_cmts_iterator_t"},
	 { "user_cmts_insert", _wrap_user_cmts_insert, METH_VARARGS, "user_cmts_insert(map, key, val) -> user_cmts_iterator_t"},
	 { "user_cmts_erase", _wrap_user_cmts_erase, METH_VARARGS, "user_cmts_erase(map, p)"},
	 { "user_cmts_clear", _wrap_user_cmts_clear, METH_O, "user_cmts_clear(map)"},
	 { "user_cmts_size", _wrap_user_cmts_size, METH_O, "user_cmts_size(map) -> size_t"},
	 { "user_cmts_free", _wrap_user_cmts_free, METH_O, "user_cmts_free(map)"},
	 { "user_cmts_new", _wrap_user_cmts_new, METH_NOARGS, "user_cmts_new() -> user_cmts_t"},
	 { "user_iflags_iterator_t_x_set", _wrap_user_iflags_iterator_t_x_set, METH_VARARGS, "user_iflags_iterator_t_x_set(self, x)"},
	 { "user_iflags_iterator_t_x_get", _wrap_user_iflags_iterator_t_x_get, METH_O, "user_iflags_iterator_t_x_get(self) -> iterator_word"},
	 { "user_iflags_iterator_t___eq__", _wrap_user_iflags_iterator_t___eq__, METH_VARARGS, "user_iflags_iterator_t___eq__(self, p) -> bool"},
	 { "user_iflags_iterator_t___ne__", _wrap_user_iflags_iterator_t___ne__, METH_VARARGS, "user_iflags_iterator_t___ne__(self, p) -> bool"},
	 { "new_user_iflags_iterator_t", _wrap_new_user_iflags_iterator_t, METH_NOARGS, "new_user_iflags_iterator_t() -> user_iflags_iterator_t"},
	 { "delete_user_iflags_iterator_t", _wrap_delete_user_iflags_iterator_t, METH_O, "delete_user_iflags_iterator_t(self)"},
	 { "user_iflags_iterator_t_swigregister", user_iflags_iterator_t_swigregister, METH_O, NULL},
	 { "user_iflags_iterator_t_swiginit", user_iflags_iterator_t_swiginit, METH_VARARGS, NULL},
	 { "user_iflags_begin", _wrap_user_iflags_begin, METH_O, "user_iflags_begin(map) -> user_iflags_iterator_t"},
	 { "user_iflags_end", _wrap_user_iflags_end, METH_O, "user_iflags_end(map) -> user_iflags_iterator_t"},
	 { "user_iflags_next", _wrap_user_iflags_next, METH_O, "user_iflags_next(p) -> user_iflags_iterator_t"},
	 { "user_iflags_prev", _wrap_user_iflags_prev, METH_O, "user_iflags_prev(p) -> user_iflags_iterator_t"},
	 { "user_iflags_first", _wrap_user_iflags_first, METH_O, "user_iflags_first(p) -> citem_locator_t"},
	 { "user_iflags_find", _wrap_user_iflags_find, METH_VARARGS, "user_iflags_find(map, key) -> user_iflags_iterator_t"},
	 { "user_iflags_insert", _wrap_user_iflags_insert, METH_VARARGS, "user_iflags_insert(map, key, val) -> user_iflags_iterator_t"},
	 { "user_iflags_erase", _wrap_user_iflags_erase, METH_VARARGS, "user_iflags_erase(map, p)"},
	 { "user_iflags_clear", _wrap_user_iflags_clear, METH_O, "user_iflags_clear(map)"},
	 { "user_iflags_size", _wrap_user_iflags_size, METH_O, "user_iflags_size(map) -> size_t"},
	 { "user_iflags_free", _wrap_user_iflags_free, METH_O, "user_iflags_free(map)"},
	 { "user_iflags_new", _wrap_user_iflags_new, METH_NOARGS, "user_iflags_new() -> user_iflags_t"},
	 { "user_unions_iterator_t_x_set", _wrap_user_unions_iterator_t_x_set, METH_VARARGS, "user_unions_iterator_t_x_set(self, x)"},
	 { "user_unions_iterator_t_x_get", _wrap_user_unions_iterator_t_x_get, METH_O, "user_unions_iterator_t_x_get(self) -> iterator_word"},
	 { "user_unions_iterator_t___eq__", _wrap_user_unions_iterator_t___eq__, METH_VARARGS, "user_unions_iterator_t___eq__(self, p) -> bool"},
	 { "user_unions_iterator_t___ne__", _wrap_user_unions_iterator_t___ne__, METH_VARARGS, "user_unions_iterator_t___ne__(self, p) -> bool"},
	 { "new_user_unions_iterator_t", _wrap_new_user_unions_iterator_t, METH_NOARGS, "new_user_unions_iterator_t() -> user_unions_iterator_t"},
	 { "delete_user_unions_iterator_t", _wrap_delete_user_unions_iterator_t, METH_O, "delete_user_unions_iterator_t(self)"},
	 { "user_unions_iterator_t_swigregister", user_unions_iterator_t_swigregister, METH_O, NULL},
	 { "user_unions_iterator_t_swiginit", user_unions_iterator_t_swiginit, METH_VARARGS, NULL},
	 { "user_unions_begin", _wrap_user_unions_begin, METH_O, "user_unions_begin(map) -> user_unions_iterator_t"},
	 { "user_unions_end", _wrap_user_unions_end, METH_O, "user_unions_end(map) -> user_unions_iterator_t"},
	 { "user_unions_next", _wrap_user_unions_next, METH_O, "user_unions_next(p) -> user_unions_iterator_t"},
	 { "user_unions_prev", _wrap_user_unions_prev, METH_O, "user_unions_prev(p) -> user_unions_iterator_t"},
	 { "user_unions_first", _wrap_user_unions_first, METH_O, "user_unions_first(p) -> ea_t const &"},
	 { "user_unions_second", _wrap_user_unions_second, METH_O, "user_unions_second(p) -> intvec_t &"},
	 { "user_unions_find", _wrap_user_unions_find, METH_VARARGS, "user_unions_find(map, key) -> user_unions_iterator_t"},
	 { "user_unions_insert", _wrap_user_unions_insert, METH_VARARGS, "user_unions_insert(map, key, val) -> user_unions_iterator_t"},
	 { "user_unions_erase", _wrap_user_unions_erase, METH_VARARGS, "user_unions_erase(map, p)"},
	 { "user_unions_clear", _wrap_user_unions_clear, METH_O, "user_unions_clear(map)"},
	 { "user_unions_size", _wrap_user_unions_size, METH_O, "user_unions_size(map) -> size_t"},
	 { "user_unions_free", _wrap_user_unions_free, METH_O, "user_unions_free(map)"},
	 { "user_unions_new", _wrap_user_unions_new, METH_NOARGS, "user_unions_new() -> user_unions_t"},
	 { "user_labels_iterator_t_x_set", _wrap_user_labels_iterator_t_x_set, METH_VARARGS, "user_labels_iterator_t_x_set(self, x)"},
	 { "user_labels_iterator_t_x_get", _wrap_user_labels_iterator_t_x_get, METH_O, "user_labels_iterator_t_x_get(self) -> iterator_word"},
	 { "user_labels_iterator_t___eq__", _wrap_user_labels_iterator_t___eq__, METH_VARARGS, "user_labels_iterator_t___eq__(self, p) -> bool"},
	 { "user_labels_iterator_t___ne__", _wrap_user_labels_iterator_t___ne__, METH_VARARGS, "user_labels_iterator_t___ne__(self, p) -> bool"},
	 { "new_user_labels_iterator_t", _wrap_new_user_labels_iterator_t, METH_NOARGS, "new_user_labels_iterator_t() -> user_labels_iterator_t"},
	 { "delete_user_labels_iterator_t", _wrap_delete_user_labels_iterator_t, METH_O, "delete_user_labels_iterator_t(self)"},
	 { "user_labels_iterator_t_swigregister", user_labels_iterator_t_swigregister, METH_O, NULL},
	 { "user_labels_iterator_t_swiginit", user_labels_iterator_t_swiginit, METH_VARARGS, NULL},
	 { "user_labels_begin", _wrap_user_labels_begin, METH_O, "user_labels_begin(map) -> user_labels_iterator_t"},
	 { "user_labels_end", _wrap_user_labels_end, METH_O, "user_labels_end(map) -> user_labels_iterator_t"},
	 { "user_labels_next", _wrap_user_labels_next, METH_O, "user_labels_next(p) -> user_labels_iterator_t"},
	 { "user_labels_prev", _wrap_user_labels_prev, METH_O, "user_labels_prev(p) -> user_labels_iterator_t"},
	 { "user_labels_first", _wrap_user_labels_first, METH_O, "user_labels_first(p) -> int const &"},
	 { "user_labels_second", _wrap_user_labels_second, METH_O, "user_labels_second(p) -> qstring &"},
	 { "user_labels_find", _wrap_user_labels_find, METH_VARARGS, "user_labels_find(map, key) -> user_labels_iterator_t"},
	 { "user_labels_insert", _wrap_user_labels_insert, METH_VARARGS, "user_labels_insert(map, key, val) -> user_labels_iterator_t"},
	 { "user_labels_erase", _wrap_user_labels_erase, METH_VARARGS, "user_labels_erase(map, p)"},
	 { "user_labels_clear", _wrap_user_labels_clear, METH_O, "user_labels_clear(map)"},
	 { "user_labels_size", _wrap_user_labels_size, METH_O, "user_labels_size(map) -> size_t"},
	 { "user_labels_free", _wrap_user_labels_free, METH_O, "user_labels_free(map)"},
	 { "user_labels_new", _wrap_user_labels_new, METH_NOARGS, "user_labels_new() -> user_labels_t"},
	 { "eamap_iterator_t_x_set", _wrap_eamap_iterator_t_x_set, METH_VARARGS, "eamap_iterator_t_x_set(self, x)"},
	 { "eamap_iterator_t_x_get", _wrap_eamap_iterator_t_x_get, METH_O, "eamap_iterator_t_x_get(self) -> iterator_word"},
	 { "eamap_iterator_t___eq__", _wrap_eamap_iterator_t___eq__, METH_VARARGS, "eamap_iterator_t___eq__(self, p) -> bool"},
	 { "eamap_iterator_t___ne__", _wrap_eamap_iterator_t___ne__, METH_VARARGS, "eamap_iterator_t___ne__(self, p) -> bool"},
	 { "new_eamap_iterator_t", _wrap_new_eamap_iterator_t, METH_NOARGS, "new_eamap_iterator_t() -> eamap_iterator_t"},
	 { "delete_eamap_iterator_t", _wrap_delete_eamap_iterator_t, METH_O, "delete_eamap_iterator_t(self)"},
	 { "eamap_iterator_t_swigregister", eamap_iterator_t_swigregister, METH_O, NULL},
	 { "eamap_iterator_t_swiginit", eamap_iterator_t_swiginit, METH_VARARGS, NULL},
	 { "eamap_begin", _wrap_eamap_begin, METH_O, "eamap_begin(map) -> eamap_iterator_t"},
	 { "eamap_end", _wrap_eamap_end, METH_O, "eamap_end(map) -> eamap_iterator_t"},
	 { "eamap_next", _wrap_eamap_next, METH_O, "eamap_next(p) -> eamap_iterator_t"},
	 { "eamap_prev", _wrap_eamap_prev, METH_O, "eamap_prev(p) -> eamap_iterator_t"},
	 { "eamap_first", _wrap_eamap_first, METH_O, "eamap_first(p) -> ea_t const &"},
	 { "eamap_second", _wrap_eamap_second, METH_O, "eamap_second(p) -> cinsnptrvec_t"},
	 { "eamap_find", _wrap_eamap_find, METH_VARARGS, "eamap_find(map, key) -> eamap_iterator_t"},
	 { "eamap_insert", _wrap_eamap_insert, METH_VARARGS, "eamap_insert(map, key, val) -> eamap_iterator_t"},
	 { "eamap_erase", _wrap_eamap_erase, METH_VARARGS, "eamap_erase(map, p)"},
	 { "eamap_clear", _wrap_eamap_clear, METH_O, "eamap_clear(map)"},
	 { "eamap_size", _wrap_eamap_size, METH_O, "eamap_size(map) -> size_t"},
	 { "eamap_free", _wrap_eamap_free, METH_O, "eamap_free(map)"},
	 { "eamap_new", _wrap_eamap_new, METH_NOARGS, "eamap_new() -> eamap_t"},
	 { "boundaries_iterator_t_x_set", _wrap_boundaries_iterator_t_x_set, METH_VARARGS, "boundaries_iterator_t_x_set(self, x)"},
	 { "boundaries_iterator_t_x_get", _wrap_boundaries_iterator_t_x_get, METH_O, "boundaries_iterator_t_x_get(self) -> iterator_word"},
	 { "boundaries_iterator_t___eq__", _wrap_boundaries_iterator_t___eq__, METH_VARARGS, "boundaries_iterator_t___eq__(self, p) -> bool"},
	 { "boundaries_iterator_t___ne__", _wrap_boundaries_iterator_t___ne__, METH_VARARGS, "boundaries_iterator_t___ne__(self, p) -> bool"},
	 { "new_boundaries_iterator_t", _wrap_new_boundaries_iterator_t, METH_NOARGS, "new_boundaries_iterator_t() -> boundaries_iterator_t"},
	 { "delete_boundaries_iterator_t", _wrap_delete_boundaries_iterator_t, METH_O, "delete_boundaries_iterator_t(self)"},
	 { "boundaries_iterator_t_swigregister", boundaries_iterator_t_swigregister, METH_O, NULL},
	 { "boundaries_iterator_t_swiginit", boundaries_iterator_t_swiginit, METH_VARARGS, NULL},
	 { "boundaries_begin", _wrap_boundaries_begin, METH_O, "boundaries_begin(map) -> boundaries_iterator_t"},
	 { "boundaries_end", _wrap_boundaries_end, METH_O, "boundaries_end(map) -> boundaries_iterator_t"},
	 { "boundaries_next", _wrap_boundaries_next, METH_O, "boundaries_next(p) -> boundaries_iterator_t"},
	 { "boundaries_prev", _wrap_boundaries_prev, METH_O, "boundaries_prev(p) -> boundaries_iterator_t"},
	 { "boundaries_first", _wrap_boundaries_first, METH_O, "boundaries_first(p) -> cinsn_t"},
	 { "boundaries_second", _wrap_boundaries_second, METH_O, "boundaries_second(p) -> rangeset_t"},
	 { "boundaries_erase", _wrap_boundaries_erase, METH_VARARGS, "boundaries_erase(map, p)"},
	 { "boundaries_clear", _wrap_boundaries_clear, METH_O, "boundaries_clear(map)"},
	 { "boundaries_size", _wrap_boundaries_size, METH_O, "boundaries_size(map) -> size_t"},
	 { "boundaries_free", _wrap_boundaries_free, METH_O, "boundaries_free(map)"},
	 { "boundaries_new", _wrap_boundaries_new, METH_NOARGS, "boundaries_new() -> boundaries_t"},
	 { NULL, NULL, 0, NULL }
};

#ifndef Py_LIMITED_API
static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_cblock_tTo_p_qlistT_cinsn_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qlist< cinsn_t > *)  ((cblock_t *) x));
}
static void *_p_ccases_tTo_p_qvectorT_ccase_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< ccase_t > *)  ((ccases_t *) x));
}
static void *_p_relobj_tTo_p_qvectorT_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< unsigned char > *) (bytevec_t *) ((relobj_t *) x));
}
static void *_p_bytevec_tTo_p_qvectorT_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< unsigned char > *)  ((bytevec_t *) x));
}
static void *_p_reloc_info_tTo_p_qvectorT_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< unsigned char > *) (bytevec_t *) ((reloc_info_t *) x));
}
static void *_p_history_item_tTo_p_ctext_position_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ctext_position_t *)  ((history_item_t *) x));
}
static void *_p_vd_interr_tTo_p_vd_failure_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vd_failure_t *)  ((vd_interr_t *) x));
}
static void *_p_udt_type_data_tTo_p_qvectorT_udt_member_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< udt_member_t > *)  ((udt_type_data_t *) x));
}
static void *_p_lvar_tTo_p_lvar_locator_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lvar_locator_t *)  ((lvar_t *) x));
}
static void *_p_mnumber_tTo_p_operand_locator_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operand_locator_t *)  ((mnumber_t *) x));
}
static void *_p_qstring_printer_tTo_p_vc_printer_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vc_printer_t *)  ((qstring_printer_t *) x));
}
static void *_p_vc_printer_tTo_p_vd_printer_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vd_printer_t *)  ((vc_printer_t *) x));
}
static void *_p_file_printer_tTo_p_vd_printer_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vd_printer_t *)  ((file_printer_t *) x));
}
static void *_p_qstring_printer_tTo_p_vd_printer_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vd_printer_t *) (vc_printer_t *) ((qstring_printer_t *) x));
}
static void *_p_cwhile_tTo_p_cloop_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cloop_t *)  ((cwhile_t *) x));
}
static void *_p_cdo_tTo_p_cloop_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cloop_t *)  ((cdo_t *) x));
}
static void *_p_cfor_tTo_p_cloop_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cloop_t *)  ((cfor_t *) x));
}
static void *_p_mop_addr_tTo_p_mop_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mop_t *)  ((mop_addr_t *) x));
}
static void *_p_mcallarg_tTo_p_mop_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mop_t *)  ((mcallarg_t *) x));
}
static void *_p_qstackT_history_item_t_tTo_p_qvectorT_history_item_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< history_item_t > *)  ((qstack< history_item_t > *) x));
}
static void *_p_rlist_tTo_p_bitset_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bitset_t *)  ((rlist_t *) x));
}
static void *_p_udc_filter_tTo_p_microcode_filter_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((microcode_filter_t *)  ((udc_filter_t *) x));
}
static void *_p_vivl_tTo_p_voff_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voff_t *)  ((vivl_t *) x));
}
static void *_p_minsn_visitor_tTo_p_op_parent_info_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((op_parent_info_t *)  ((minsn_visitor_t *) x));
}
static void *_p_mop_visitor_tTo_p_op_parent_info_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((op_parent_info_t *)  ((mop_visitor_t *) x));
}
static void *_p_ctree_parentee_tTo_p_ctree_visitor_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ctree_visitor_t *)  ((ctree_parentee_t *) x));
}
static void *_p_cfunc_parentee_tTo_p_ctree_visitor_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ctree_visitor_t *) (ctree_parentee_t *) ((cfunc_parentee_t *) x));
}
static void *_p_scif_tTo_p_vdloc_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vdloc_t *)  ((scif_t *) x));
}
static void *_p_lvars_tTo_p_qvectorT_lvar_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< lvar_t > *)  ((lvars_t *) x));
}
static void *_p_func_type_data_tTo_p_qvectorT_funcarg_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< funcarg_t > *)  ((func_type_data_t *) x));
}
static void *_p_carglist_tTo_p_qvectorT_carg_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< carg_t > *)  ((carglist_t *) x));
}
static void *_p_cfunc_parentee_tTo_p_ctree_parentee_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ctree_parentee_t *)  ((cfunc_parentee_t *) x));
}
static void *_p_ccase_tTo_p_cinsn_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cinsn_t *)  ((ccase_t *) x));
}
static void *_p_p_ccase_tTo_p_p_cinsn_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cinsn_t **)  ((ccase_t **) x));
}
static void *_p_creturn_tTo_p_ceinsn_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ceinsn_t *)  ((creturn_t *) x));
}
static void *_p_cwhile_tTo_p_ceinsn_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ceinsn_t *) (cloop_t *) ((cwhile_t *) x));
}
static void *_p_cdo_tTo_p_ceinsn_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ceinsn_t *) (cloop_t *) ((cdo_t *) x));
}
static void *_p_cif_tTo_p_ceinsn_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ceinsn_t *)  ((cif_t *) x));
}
static void *_p_cloop_tTo_p_ceinsn_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ceinsn_t *)  ((cloop_t *) x));
}
static void *_p_cfor_tTo_p_ceinsn_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ceinsn_t *) (cloop_t *) ((cfor_t *) x));
}
static void *_p_cswitch_tTo_p_ceinsn_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ceinsn_t *)  ((cswitch_t *) x));
}
static void *_p_vdloc_tTo_p_argloc_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argloc_t *)  ((vdloc_t *) x));
}
static void *_p_scif_tTo_p_argloc_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argloc_t *) (vdloc_t *) ((scif_t *) x));
}
static void *_p_argpart_tTo_p_argloc_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argloc_t *)  ((argpart_t *) x));
}
static void *_p_mbl_graph_tTo_p_simple_graph_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((simple_graph_t *)  ((mbl_graph_t *) x));
}
static void *_p_p_carg_tTo_p_p_citem_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((citem_t **) (cexpr_t *) ((carg_t **) x));
}
static void *_p_p_cinsn_tTo_p_p_citem_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((citem_t **)  ((cinsn_t **) x));
}
static void *_p_p_cexpr_tTo_p_p_citem_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((citem_t **)  ((cexpr_t **) x));
}
static void *_p_p_ccase_tTo_p_p_citem_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((citem_t **) (cinsn_t *) ((ccase_t **) x));
}
static void *_p_carg_tTo_p_citem_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((citem_t *) (cexpr_t *) ((carg_t *) x));
}
static void *_p_cinsn_tTo_p_citem_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((citem_t *)  ((cinsn_t *) x));
}
static void *_p_cexpr_tTo_p_citem_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((citem_t *)  ((cexpr_t *) x));
}
static void *_p_ccase_tTo_p_citem_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((citem_t *) (cinsn_t *) ((ccase_t *) x));
}
static void *_p_carg_tTo_p_cexpr_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cexpr_t *)  ((carg_t *) x));
}
static void *_p_p_carg_tTo_p_p_cexpr_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cexpr_t **)  ((carg_t **) x));
}
static swig_type_info _swigt__p_Hexrays_Hooks = {"_p_Hexrays_Hooks", "Hexrays_Hooks *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TPopupMenu = {"_p_TPopupMenu", "TPopupMenu *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TWidget = {"_p_TWidget", "TWidget *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p___int64 = {"_p___int64", "__int64 *|LONGLONG *|LONG64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__qstringT_char_t = {"_p__qstringT_char_t", "_qstring< char > *|qstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__qstringT_unsigned_char_t = {"_p__qstringT_unsigned_char_t", "qtype *|_qstring< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__qstringT_unsigned_short_t = {"_p__qstringT_unsigned_short_t", "_qstring< unsigned short > *|qwstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_6__unsigned_short = {"_p_a_6__unsigned_short", "unsigned short (*)[6]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_action_ctx_base_t = {"_p_action_ctx_base_t", "action_ctx_base_t *|action_update_ctx_t *|action_activation_ctx_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_argloc_t = {"_p_argloc_t", "argloc_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scif_t = {"_p_scif_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_argpart_t = {"_p_argpart_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_biggest_t = {"_p_biggest_t", "biggest_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bit_bound_t = {"_p_bit_bound_t", "bit_bound_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bitfield_type_data_t = {"_p_bitfield_type_data_t", "bitfield_type_data_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bitset_t = {"_p_bitset_t", "bitset_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rlist_t = {"_p_rlist_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boundaries_iterator_t = {"_p_boundaries_iterator_t", "boundaries_iterator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_carg_t = {"_p_carg_t", "carg_t *|qvector< carg_t >::iterator|qvector< carg_t >::const_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_carglist_t = {"_p_carglist_t", "carglist_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casm_t = {"_p_casm_t", "casm_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cblock_t = {"_p_cblock_t", "cblock_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ccase_t = {"_p_ccase_t", "ccase_t *|qvector< ccase_t >::iterator|qvector< ccase_t >::const_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ccases_t = {"_p_ccases_t", "ccases_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cdo_t = {"_p_cdo_t", "cdo_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ceinsn_t = {"_p_ceinsn_t", "ceinsn_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cexpr_t = {"_p_cexpr_t", "cexpr_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cfor_t = {"_p_cfor_t", "cfor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cfunc_parentee_t = {"_p_cfunc_parentee_t", "cfunc_parentee_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cfunc_t = {"_p_cfunc_t", "cfunc_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cgoto_t = {"_p_cgoto_t", "cgoto_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CHAR *|TCHAR *|char *|CCHAR *|int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cif_t = {"_p_cif_t", "cif_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cinsn_t = {"_p_cinsn_t", "cinsn_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_citem_cmt_t = {"_p_citem_cmt_t", "citem_cmt_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_citem_locator_t = {"_p_citem_locator_t", "citem_locator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_citem_t = {"_p_citem_t", "citem_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cloop_t = {"_p_cloop_t", "cloop_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cnumber_t = {"_p_cnumber_t", "cnumber_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_codegen_t = {"_p_codegen_t", "codegen_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_control_graph_t = {"_p_control_graph_t", "control_graph_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_creturn_t = {"_p_creturn_t", "creturn_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cswitch_t = {"_p_cswitch_t", "cswitch_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ctext_position_t = {"_p_ctext_position_t", "ctext_position_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ctree_anchor_t = {"_p_ctree_anchor_t", "ctree_anchor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ctree_item_t = {"_p_ctree_item_t", "ctree_item_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ctree_parentee_t = {"_p_ctree_parentee_t", "ctree_parentee_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ctree_visitor_t = {"_p_ctree_visitor_t", "ctree_visitor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cwhile_t = {"_p_cwhile_t", "cwhile_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eamap_iterator_t = {"_p_eamap_iterator_t", "eamap_iterator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_v_______p_void = {"_p_f_int_v_______p_void", "hexdsp_t *|void *(*)(int,...)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_int_int_p_void__bool = {"_p_f_p_TWidget_int_int_p_void__bool", "custom_viewer_keydown_t *|bool (*)(TWidget *,int,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void = {"_p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void", "void (*)(TWidget *,int,view_mouse_event_t *,void *)|custom_viewer_mouse_moved_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_int_p_void__bool = {"_p_f_p_TWidget_int_p_void__bool", "custom_viewer_click_t *|custom_viewer_dblclick_t *|bool (*)(TWidget *,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_lochist_entry_t_p_void__void = {"_p_f_p_TWidget_p_lochist_entry_t_p_void__void", "custom_viewer_adjust_place_t *|void (*)(TWidget *,lochist_entry_t *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void = {"_p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void", "void (*)(TWidget *,lochist_entry_t const *,lochist_entry_t const *,locchange_md_t const &,void *)|custom_viewer_location_changed_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int = {"_p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int", "custom_viewer_can_navigate_t *|int (*)(TWidget *,lochist_entry_t const *,locchange_md_t const &,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void = {"_p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void", "code_viewer_lines_click_t *|void (*)(TWidget *,place_t const *,int,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int = {"_p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int", "code_viewer_lines_icon_t *|int (*)(TWidget *,place_t const *,int *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int = {"_p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int", "custom_viewer_get_place_xcoord_t *|int (*)(TWidget *,place_t const *,place_t const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool = {"_p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool", "code_viewer_lines_linenum_t *|bool (*)(TWidget *,place_t const *,unsigned int *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_void__int = {"_p_f_p_TWidget_p_void__int", "custom_viewer_help_t *|int (*)(TWidget *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_void__void = {"_p_f_p_TWidget_p_void__void", "custom_viewer_popup_t *|custom_viewer_close_t *|custom_viewer_curpos_t *|void (*)(TWidget *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t = {"_p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t", "chooser_base_t::cbres_t (*)(chooser_multi_t *,sizevec_t *)|chooser_multi_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t = {"_p_f_p_chooser_t_ssize_t__chooser_t__cbret_t", "chooser_t::cbret_t (*)(chooser_t *,ssize_t)|chooser_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_lexer_t_r_q_const__token_t_r_q_const__token_t__p_char = {"_p_f_p_lexer_t_r_q_const__token_t_r_q_const__token_t__p_char", "cfgopt_handler_t *|char *(*)(lexer_t *,token_t const &,token_t const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool = {"_p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool", "bool (*)(lochist_entry_t *,lochist_entry_t const &,TWidget *)|lochist_entry_cvt_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_p_void__void = {"_p_f_p_q_const__char_p_void__void", "void (*)(char const *,void *)|ss_restore_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int = {"_p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int", "h2ti_type_cb *|int (*)(char const *,tinfo_t const &,char const *,unsigned long long const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_v_______int = {"_p_f_p_q_const__char_v_______int", "int (*)(char const *,...)|printer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_enum_hexrays_event_t_va_list__ssize_t = {"_p_f_p_void_enum_hexrays_event_t_va_list__ssize_t", "ssize_t (*)(void *,enum hexrays_event_t,va_list)|hexrays_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int_va_list__ssize_t = {"_p_f_p_void_int_va_list__ssize_t", "ssize_t (*)(void *,int,va_list)|hook_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool = {"_p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool", "bool (*)(insn_t const &,op_t const &,tinfo_t const &,char const *)|set_op_tinfo_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int__bool = {"_p_f_unsigned_int__bool", "bool (*)(unsigned int)|may_destroy_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int = {"_p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int", "int (*)(unsigned int,char const *,unsigned int,void *)|import_enum_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_p_void__bool = {"_p_f_unsigned_int_p_void__bool", "testf_t *|bool (*)(unsigned int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_unsigned_int__unsigned_int = {"_p_f_unsigned_int_unsigned_int__unsigned_int", "unsigned int (*)(unsigned int,unsigned int)|nav_colorizer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fnumber_t = {"_p_fnumber_t", "fnumber_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_func_t = {"_p_func_t", "func_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexrays_failure_t = {"_p_hexrays_failure_t", "hexrays_failure_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexwarn_t = {"_p_hexwarn_t", "hexwarn_t *|qvector< hexwarn_t >::iterator|qvector< hexwarn_t >::const_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_history_item_t = {"_p_history_item_t", "qvector< history_item_t >::iterator|qvector< history_item_t >::const_iterator|history_item_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_insn_t = {"_p_insn_t", "insn_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|adiff_t *|int *|error_t *|help_t *|argloc_type_t *|atype_t *|twidget_type_t *|cmt_type_t *|int32 *|INT_PTR *|INT *|mreg_t *|type_sign_t *|maymust_t *|LONG32 *|view_event_state_t *|idastate_t *|iterator_word *|sval_t *|INT32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ivl_t = {"_p_ivl_t", "ivl_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ivlset_t = {"_p_ivlset_t", "ivlset_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_location_t = {"_p_location_t", "location_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "SHANDLE_PTR *|LONG_PTR *|LONG *|HRESULT *|long *|SSIZE_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64 *|longlong *|long long *|svlr_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lvar_locator_t = {"_p_lvar_locator_t", "lvar_locator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lvar_mapping_iterator_t = {"_p_lvar_mapping_iterator_t", "lvar_mapping_iterator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lvar_ref_t = {"_p_lvar_ref_t", "lvar_ref_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lvar_saved_info_t = {"_p_lvar_saved_info_t", "lvar_saved_info_t *|qvector< lvar_saved_info_t >::iterator|qvector< lvar_saved_info_t >::const_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lvar_t = {"_p_lvar_t", "qvector< lvar_t >::iterator|qvector< lvar_t >::const_iterator|lvar_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lvar_uservec_t = {"_p_lvar_uservec_t", "lvar_uservec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lvars_t = {"_p_lvars_t", "lvars_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mbl_array_t = {"_p_mbl_array_t", "mbl_array_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mblock_t = {"_p_mblock_t", "mblock_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mcases_t = {"_p_mcases_t", "mcases_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_member_t = {"_p_member_t", "member_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_microcode_filter_t = {"_p_microcode_filter_t", "microcode_filter_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_minsn_t = {"_p_minsn_t", "minsn_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mlist_t = {"_p_mlist_t", "mlist_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mnumber_t = {"_p_mnumber_t", "mnumber_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mop_t = {"_p_mop_t", "mop_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mop_addr_t = {"_p_mop_addr_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mcallarg_t = {"_p_mcallarg_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_number_format_t = {"_p_number_format_t", "number_format_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_op_parent_info_t = {"_p_op_parent_info_t", "op_parent_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_minsn_visitor_t = {"_p_minsn_visitor_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mop_visitor_t = {"_p_mop_visitor_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_operand_locator_t = {"_p_operand_locator_t", "operand_locator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operator_info_t = {"_p_operator_info_t", "operator_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cexpr_t = {"_p_p_cexpr_t", "cexpr_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_carg_t = {"_p_p_carg_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "PTCH *|PCTSTR *|LPCTSTR *|LPTCH *|PUTSTR *|LPUTSTR *|PCUTSTR *|LPCUTSTR *|char **|PTSTR *|LPTSTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cinsn_t = {"_p_p_cinsn_t", "cinsn_t **|qvector< cinsn_t * >::iterator|qvector< cinsn_t * >::const_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_ccase_t = {"_p_p_ccase_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_citem_t = {"_p_p_citem_t", "qvector< citem_t * >::iterator|qvector< citem_t * >::const_iterator|citem_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_struc_t = {"_p_p_struc_t", "struc_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "unsigned long **|PLCID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qflow_chart_t = {"_p_qflow_chart_t", "qflow_chart_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qlistT_cinsn_t_t = {"_p_qlistT_cinsn_t_t", "qlist< cinsn_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qlistT_cinsn_t_t__const_reverse_iterator = {"_p_qlistT_cinsn_t_t__const_reverse_iterator", "qlist< cinsn_t >::const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qlistT_cinsn_t_t__iterator = {"_p_qlistT_cinsn_t_t__iterator", "qlist< cinsn_t >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qlistT_cinsn_t_t__reverse_iterator = {"_p_qlistT_cinsn_t_t__reverse_iterator", "qlist< cinsn_t >::reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qlist_cinsn_t_iterator = {"_p_qlist_cinsn_t_iterator", "qlist_cinsn_t_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qrefcnt_tT_cfunc_t_t = {"_p_qrefcnt_tT_cfunc_t_t", "cfuncptr_t *|qrefcnt_t< cfunc_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qstackT_history_item_t_t = {"_p_qstackT_history_item_t_t", "history_t *|qstack< history_item_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qstring_printer_t = {"_p_qstring_printer_t", "qstring_printer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT__qstringT_unsigned_short_t_t = {"_p_qvectorT__qstringT_unsigned_short_t_t", "qvector< _qstring< unsigned short > > *|qwstrvec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_argloc_t_t = {"_p_qvectorT_argloc_t_t", "qvector< argloc_t > *|arglocs_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_bitset_t_t = {"_p_qvectorT_bitset_t_t", "array_of_bitsets *|qvector< bitset_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_bool_t = {"_p_qvectorT_bool_t", "boolvec_t *|qvector< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_carg_t_t = {"_p_qvectorT_carg_t_t", "qvector< carg_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_ccase_t_t = {"_p_qvectorT_ccase_t_t", "qvector< ccase_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_channel_redir_t_t = {"_p_qvectorT_channel_redir_t_t", "qvector< channel_redir_t > *|channel_redirs_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_cinsn_t_p_t = {"_p_qvectorT_cinsn_t_p_t", "cinsnptrvec_t *|qvector< cinsn_t * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_citem_t_p_t = {"_p_qvectorT_citem_t_p_t", "ctree_items_t *|parents_t *|qvector< citem_t * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_compiled_binpat_t_t = {"_p_qvectorT_compiled_binpat_t_t", "compiled_binpat_vec_t *|qvector< compiled_binpat_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_funcarg_t_t = {"_p_qvectorT_funcarg_t_t", "funcargvec_t *|qvector< funcarg_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_func_type_data_t = {"_p_func_type_data_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_qvectorT_hexwarn_t_t = {"_p_qvectorT_hexwarn_t_t", "qvector< hexwarn_t > *|hexwarns_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_history_item_t_t = {"_p_qvectorT_history_item_t_t", "qvector< history_item_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_int_t = {"_p_qvectorT_int_t", "mregvec_t *|svalvec_t *|intvec_t *|qvector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_ivlset_t_t = {"_p_qvectorT_ivlset_t_t", "array_of_ivlsets *|qvector< ivlset_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_lvar_saved_info_t_t = {"_p_qvectorT_lvar_saved_info_t_t", "lvar_saved_infos_t *|qvector< lvar_saved_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_lvar_t_t = {"_p_qvectorT_lvar_t_t", "qvector< lvar_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_mcallarg_t_t = {"_p_qvectorT_mcallarg_t_t", "qvector< mcallarg_t > *|mcallargs_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_minsn_t_p_t = {"_p_qvectorT_minsn_t_p_t", "minsnptrs_t *|qvector< minsn_t * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_mlist_t_t = {"_p_qvectorT_mlist_t_t", "mlistvec_t *|qvector< mlist_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_mop_t_p_t = {"_p_qvectorT_mop_t_p_t", "mopptrs_t *|qvector< mop_t * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_mop_t_t = {"_p_qvectorT_mop_t_t", "mopvec_t *|qvector< mop_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_range_t_t = {"_p_qvectorT_range_t_t", "rangevec_base_t *|qvector< range_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_rangeset_t_const_p_t = {"_p_qvectorT_rangeset_t_const_p_t", "rangeset_crefvec_t *|qvector< rangeset_t const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_rangeset_t_t = {"_p_qvectorT_rangeset_t_t", "qvector< rangeset_t > *|array_of_rangesets *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_refinfo_desc_t_t = {"_p_qvectorT_refinfo_desc_t_t", "refinfo_desc_vec_t *|qvector< refinfo_desc_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_reg_info_t_t = {"_p_qvectorT_reg_info_t_t", "reginfovec_t *|qvector< reg_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_simd_info_t_t = {"_p_qvectorT_simd_info_t_t", "simd_info_vec_t *|qvector< simd_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_simpleline_t_t = {"_p_qvectorT_simpleline_t_t", "strvec_t *|qvector< simpleline_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_size_t_t = {"_p_qvectorT_size_t_t", "sizevec_t *|qvector< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_tinfo_t_t = {"_p_qvectorT_tinfo_t_t", "tinfovec_t *|qvector< tinfo_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_type_attr_t_t = {"_p_qvectorT_type_attr_t_t", "type_attrs_t *|qvector< type_attr_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_udt_member_t_t = {"_p_qvectorT_udt_member_t_t", "udtmembervec_t *|qvector< udt_member_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_unsigned_char_t = {"_p_qvectorT_unsigned_char_t", "qvector< unsigned char > *|compvec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_relobj_t = {"_p_relobj_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_bytevec_t = {"_p_bytevec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_reloc_info_t = {"_p_reloc_info_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_qvectorT_unsigned_int_t = {"_p_qvectorT_unsigned_int_t", "eavec_t *|ordvec_t *|uvalvec_t *|qvector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_unsigned_long_long_t = {"_p_qvectorT_unsigned_long_long_t", "uint64vec_t *|qvector< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rangeset_t = {"_p_rangeset_t", "rangeset_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reg_info_t = {"_p_reg_info_t", "reg_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scattered_aloc_t = {"_p_scattered_aloc_t", "scattered_aloc_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16 *|HALF_PTR *|short *|SHORT *|INT16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|sint8 *|INT8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_simple_graph_t = {"_p_simple_graph_t", "simple_graph_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mbl_graph_t = {"_p_mbl_graph_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *|mbitmap_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_cinsn_t_p_rangeset_t_t = {"_p_std__mapT_cinsn_t_p_rangeset_t_t", "boundaries_t *|std::map< cinsn_t *,rangeset_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_citem_locator_t_int_t = {"_p_std__mapT_citem_locator_t_int_t", "std::map< citem_locator_t,int32 > *|user_iflags_t *|std::map< citem_locator_t,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int__qstringT_char_t_t = {"_p_std__mapT_int__qstringT_char_t_t", "std::map< int,_qstring< char > > *|user_labels_t *|std::map< int,qstring > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_lvar_locator_t_lvar_locator_t_t = {"_p_std__mapT_lvar_locator_t_lvar_locator_t_t", "std::map< lvar_locator_t,lvar_locator_t > *|lvar_mapping_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_operand_locator_t_number_format_t_t = {"_p_std__mapT_operand_locator_t_number_format_t_t", "user_numforms_t *|std::map< operand_locator_t,number_format_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_treeloc_t_citem_cmt_t_t = {"_p_std__mapT_treeloc_t_citem_cmt_t_t", "user_cmts_t *|std::map< treeloc_t,citem_cmt_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_unsigned_int_cinsnptrvec_t_t = {"_p_std__mapT_unsigned_int_cinsnptrvec_t_t", "eamap_t *|std::map< unsigned int,cinsnptrvec_t > *|std::map< ea_t,cinsnptrvec_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_unsigned_int_qvectorT_int_t_t = {"_p_std__mapT_unsigned_int_qvectorT_int_t_t", "std::map< unsigned int,qvector< int > > *|std::map< ea_t,intvec_t > *|user_unions_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_unsigned_int_udcall_t_t = {"_p_std__mapT_unsigned_int_udcall_t_t", "udcall_map_t *|std::map< unsigned int,udcall_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT__qstringT_char_t_t = {"_p_std__setT__qstringT_char_t_t", "std::set< _qstring< char > > *|strings_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_minsn_t_p_t = {"_p_std__setT_minsn_t_p_t", "std::set< minsn_t * > *|minsn_ptr_set_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_unsigned_int_t = {"_p_std__setT_unsigned_int_t", "easet_t *|std::set< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stkpnts_t = {"_p_stkpnts_t", "stkpnts_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stkvar_ref_t = {"_p_stkvar_ref_t", "stkvar_ref_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_struc_t = {"_p_struc_t", "struc_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tinfo_t = {"_p_tinfo_t", "tinfo_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treeloc_t = {"_p_treeloc_t", "treeloc_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_udc_filter_t = {"_p_udc_filter_t", "udc_filter_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_udcall_map_iterator_t = {"_p_udcall_map_iterator_t", "udcall_map_iterator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_udcall_t = {"_p_udcall_t", "udcall_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_udt_type_data_t = {"_p_udt_type_data_t", "udt_type_data_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "UINT64 *|DWORD64 *|unsigned __int64 *|DWORDLONG *|ULONGLONG *|ULONG64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "cm_t *|color_t *|p_list *|uchar *|comp_t *|type_t *|reftype_t *|op_dtype_t *|UCHAR *|mopt_t *|TBYTE *|BYTE *|bte_t *|FCHAR *|BOOLEAN *|UINT8 *|p_string *|uint8 *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "enum_t *|bgcolor_t *|tid_t *|bmask_t *|uint *|uint32 *|DWORD32 *|wchar32_t *|flags_t *|UINT_PTR *|asize_t *|const_t *|sel_t *|nodeidx_t *|ULONG32 *|unsigned int *|uval_t *|UINT32 *|ea_t *|UINT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "HANDLE_PTR *|DWORD *|ULONG_PTR *|DWORD_PTR *|FLONG *|unsigned long *|ULONG *|SIZE_T *|LCID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64 *|ulonglong *|unsigned long long *|uvlr_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16 *|WORD *|UHALF_PTR *|unsigned short *|ushort *|USHORT *|FSHORT *|LANGID *|UINT16 *|wchar16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_user_cmts_iterator_t = {"_p_user_cmts_iterator_t", "user_cmts_iterator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_user_iflags_iterator_t = {"_p_user_iflags_iterator_t", "user_iflags_iterator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_user_labels_iterator_t = {"_p_user_labels_iterator_t", "user_labels_iterator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_user_lvar_modifier_t = {"_p_user_lvar_modifier_t", "user_lvar_modifier_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_user_numforms_iterator_t = {"_p_user_numforms_iterator_t", "user_numforms_iterator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_user_unions_iterator_t = {"_p_user_unions_iterator_t", "user_unions_iterator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_valrng_t = {"_p_valrng_t", "valrng_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_var_ref_t = {"_p_var_ref_t", "var_ref_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vc_printer_t = {"_p_vc_printer_t", "vc_printer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vd_failure_t = {"_p_vd_failure_t", "vd_failure_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vd_interr_t = {"_p_vd_interr_t", "vd_interr_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vd_printer_t = {"_p_vd_printer_t", "vd_printer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_file_printer_t = {"_p_file_printer_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_vdloc_t = {"_p_vdloc_t", "vdloc_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vdui_t = {"_p_vdui_t", "vdui_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vivl_t = {"_p_vivl_t", "vivl_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voff_t = {"_p_voff_t", "voff_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wrapped_array_tT_unsigned_short_6_t = {"_p_wrapped_array_tT_unsigned_short_6_t", "wrapped_array_t< unsigned short,6 > *|wrapped_array_t< uint16,6 > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Hexrays_Hooks,
  &_swigt__p_TPopupMenu,
  &_swigt__p_TWidget,
  &_swigt__p___int64,
  &_swigt__p__qstringT_char_t,
  &_swigt__p__qstringT_unsigned_char_t,
  &_swigt__p__qstringT_unsigned_short_t,
  &_swigt__p_a_6__unsigned_short,
  &_swigt__p_action_ctx_base_t,
  &_swigt__p_argloc_t,
  &_swigt__p_argpart_t,
  &_swigt__p_biggest_t,
  &_swigt__p_bit_bound_t,
  &_swigt__p_bitfield_type_data_t,
  &_swigt__p_bitset_t,
  &_swigt__p_bool,
  &_swigt__p_boundaries_iterator_t,
  &_swigt__p_bytevec_t,
  &_swigt__p_carg_t,
  &_swigt__p_carglist_t,
  &_swigt__p_casm_t,
  &_swigt__p_cblock_t,
  &_swigt__p_ccase_t,
  &_swigt__p_ccases_t,
  &_swigt__p_cdo_t,
  &_swigt__p_ceinsn_t,
  &_swigt__p_cexpr_t,
  &_swigt__p_cfor_t,
  &_swigt__p_cfunc_parentee_t,
  &_swigt__p_cfunc_t,
  &_swigt__p_cgoto_t,
  &_swigt__p_char,
  &_swigt__p_cif_t,
  &_swigt__p_cinsn_t,
  &_swigt__p_citem_cmt_t,
  &_swigt__p_citem_locator_t,
  &_swigt__p_citem_t,
  &_swigt__p_cloop_t,
  &_swigt__p_cnumber_t,
  &_swigt__p_codegen_t,
  &_swigt__p_const_iterator,
  &_swigt__p_control_graph_t,
  &_swigt__p_creturn_t,
  &_swigt__p_cswitch_t,
  &_swigt__p_ctext_position_t,
  &_swigt__p_ctree_anchor_t,
  &_swigt__p_ctree_item_t,
  &_swigt__p_ctree_parentee_t,
  &_swigt__p_ctree_visitor_t,
  &_swigt__p_cwhile_t,
  &_swigt__p_eamap_iterator_t,
  &_swigt__p_f_int_v_______p_void,
  &_swigt__p_f_p_TWidget_int_int_p_void__bool,
  &_swigt__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void,
  &_swigt__p_f_p_TWidget_int_p_void__bool,
  &_swigt__p_f_p_TWidget_p_lochist_entry_t_p_void__void,
  &_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void,
  &_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool,
  &_swigt__p_f_p_TWidget_p_void__int,
  &_swigt__p_f_p_TWidget_p_void__void,
  &_swigt__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t,
  &_swigt__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t,
  &_swigt__p_f_p_lexer_t_r_q_const__token_t_r_q_const__token_t__p_char,
  &_swigt__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool,
  &_swigt__p_f_p_q_const__char_p_void__void,
  &_swigt__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int,
  &_swigt__p_f_p_q_const__char_v_______int,
  &_swigt__p_f_p_void_enum_hexrays_event_t_va_list__ssize_t,
  &_swigt__p_f_p_void_int_va_list__ssize_t,
  &_swigt__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool,
  &_swigt__p_f_unsigned_int__bool,
  &_swigt__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int,
  &_swigt__p_f_unsigned_int_p_void__bool,
  &_swigt__p_f_unsigned_int_unsigned_int__unsigned_int,
  &_swigt__p_file_printer_t,
  &_swigt__p_float,
  &_swigt__p_fnumber_t,
  &_swigt__p_func_t,
  &_swigt__p_func_type_data_t,
  &_swigt__p_hexrays_failure_t,
  &_swigt__p_hexwarn_t,
  &_swigt__p_history_item_t,
  &_swigt__p_insn_t,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_ivl_t,
  &_swigt__p_ivlset_t,
  &_swigt__p_location_t,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_lvar_locator_t,
  &_swigt__p_lvar_mapping_iterator_t,
  &_swigt__p_lvar_ref_t,
  &_swigt__p_lvar_saved_info_t,
  &_swigt__p_lvar_t,
  &_swigt__p_lvar_uservec_t,
  &_swigt__p_lvars_t,
  &_swigt__p_mbl_array_t,
  &_swigt__p_mbl_graph_t,
  &_swigt__p_mblock_t,
  &_swigt__p_mcallarg_t,
  &_swigt__p_mcases_t,
  &_swigt__p_member_t,
  &_swigt__p_microcode_filter_t,
  &_swigt__p_minsn_t,
  &_swigt__p_minsn_visitor_t,
  &_swigt__p_mlist_t,
  &_swigt__p_mnumber_t,
  &_swigt__p_mop_addr_t,
  &_swigt__p_mop_t,
  &_swigt__p_mop_visitor_t,
  &_swigt__p_number_format_t,
  &_swigt__p_op_parent_info_t,
  &_swigt__p_operand_locator_t,
  &_swigt__p_operator_info_t,
  &_swigt__p_p_carg_t,
  &_swigt__p_p_ccase_t,
  &_swigt__p_p_cexpr_t,
  &_swigt__p_p_char,
  &_swigt__p_p_cinsn_t,
  &_swigt__p_p_citem_t,
  &_swigt__p_p_struc_t,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_qflow_chart_t,
  &_swigt__p_qlistT_cinsn_t_t,
  &_swigt__p_qlistT_cinsn_t_t__const_reverse_iterator,
  &_swigt__p_qlistT_cinsn_t_t__iterator,
  &_swigt__p_qlistT_cinsn_t_t__reverse_iterator,
  &_swigt__p_qlist_cinsn_t_iterator,
  &_swigt__p_qrefcnt_tT_cfunc_t_t,
  &_swigt__p_qstackT_history_item_t_t,
  &_swigt__p_qstring_printer_t,
  &_swigt__p_qvectorT__qstringT_unsigned_short_t_t,
  &_swigt__p_qvectorT_argloc_t_t,
  &_swigt__p_qvectorT_bitset_t_t,
  &_swigt__p_qvectorT_bool_t,
  &_swigt__p_qvectorT_carg_t_t,
  &_swigt__p_qvectorT_ccase_t_t,
  &_swigt__p_qvectorT_channel_redir_t_t,
  &_swigt__p_qvectorT_cinsn_t_p_t,
  &_swigt__p_qvectorT_citem_t_p_t,
  &_swigt__p_qvectorT_compiled_binpat_t_t,
  &_swigt__p_qvectorT_funcarg_t_t,
  &_swigt__p_qvectorT_hexwarn_t_t,
  &_swigt__p_qvectorT_history_item_t_t,
  &_swigt__p_qvectorT_int_t,
  &_swigt__p_qvectorT_ivlset_t_t,
  &_swigt__p_qvectorT_lvar_saved_info_t_t,
  &_swigt__p_qvectorT_lvar_t_t,
  &_swigt__p_qvectorT_mcallarg_t_t,
  &_swigt__p_qvectorT_minsn_t_p_t,
  &_swigt__p_qvectorT_mlist_t_t,
  &_swigt__p_qvectorT_mop_t_p_t,
  &_swigt__p_qvectorT_mop_t_t,
  &_swigt__p_qvectorT_range_t_t,
  &_swigt__p_qvectorT_rangeset_t_const_p_t,
  &_swigt__p_qvectorT_rangeset_t_t,
  &_swigt__p_qvectorT_refinfo_desc_t_t,
  &_swigt__p_qvectorT_reg_info_t_t,
  &_swigt__p_qvectorT_simd_info_t_t,
  &_swigt__p_qvectorT_simpleline_t_t,
  &_swigt__p_qvectorT_size_t_t,
  &_swigt__p_qvectorT_tinfo_t_t,
  &_swigt__p_qvectorT_type_attr_t_t,
  &_swigt__p_qvectorT_udt_member_t_t,
  &_swigt__p_qvectorT_unsigned_char_t,
  &_swigt__p_qvectorT_unsigned_int_t,
  &_swigt__p_qvectorT_unsigned_long_long_t,
  &_swigt__p_rangeset_t,
  &_swigt__p_reg_info_t,
  &_swigt__p_relobj_t,
  &_swigt__p_reloc_info_t,
  &_swigt__p_rlist_t,
  &_swigt__p_scattered_aloc_t,
  &_swigt__p_scif_t,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_simple_graph_t,
  &_swigt__p_size_t,
  &_swigt__p_std__mapT_cinsn_t_p_rangeset_t_t,
  &_swigt__p_std__mapT_citem_locator_t_int_t,
  &_swigt__p_std__mapT_int__qstringT_char_t_t,
  &_swigt__p_std__mapT_lvar_locator_t_lvar_locator_t_t,
  &_swigt__p_std__mapT_operand_locator_t_number_format_t_t,
  &_swigt__p_std__mapT_treeloc_t_citem_cmt_t_t,
  &_swigt__p_std__mapT_unsigned_int_cinsnptrvec_t_t,
  &_swigt__p_std__mapT_unsigned_int_qvectorT_int_t_t,
  &_swigt__p_std__mapT_unsigned_int_udcall_t_t,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__setT__qstringT_char_t_t,
  &_swigt__p_std__setT_minsn_t_p_t,
  &_swigt__p_std__setT_unsigned_int_t,
  &_swigt__p_stkpnts_t,
  &_swigt__p_stkvar_ref_t,
  &_swigt__p_struc_t,
  &_swigt__p_tinfo_t,
  &_swigt__p_treeloc_t,
  &_swigt__p_udc_filter_t,
  &_swigt__p_udcall_map_iterator_t,
  &_swigt__p_udcall_t,
  &_swigt__p_udt_type_data_t,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_user_cmts_iterator_t,
  &_swigt__p_user_iflags_iterator_t,
  &_swigt__p_user_labels_iterator_t,
  &_swigt__p_user_lvar_modifier_t,
  &_swigt__p_user_numforms_iterator_t,
  &_swigt__p_user_unions_iterator_t,
  &_swigt__p_valrng_t,
  &_swigt__p_value_type,
  &_swigt__p_var_ref_t,
  &_swigt__p_vc_printer_t,
  &_swigt__p_vd_failure_t,
  &_swigt__p_vd_interr_t,
  &_swigt__p_vd_printer_t,
  &_swigt__p_vdloc_t,
  &_swigt__p_vdui_t,
  &_swigt__p_vivl_t,
  &_swigt__p_voff_t,
  &_swigt__p_void,
  &_swigt__p_wrapped_array_tT_unsigned_short_6_t,
};

static swig_cast_info _swigc__p_Hexrays_Hooks[] = {  {&_swigt__p_Hexrays_Hooks, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TPopupMenu[] = {  {&_swigt__p_TPopupMenu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TWidget[] = {  {&_swigt__p_TWidget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__qstringT_char_t[] = {  {&_swigt__p__qstringT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__qstringT_unsigned_char_t[] = {  {&_swigt__p__qstringT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__qstringT_unsigned_short_t[] = {  {&_swigt__p__qstringT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_6__unsigned_short[] = {  {&_swigt__p_a_6__unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_action_ctx_base_t[] = {  {&_swigt__p_action_ctx_base_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scif_t[] = {{&_swigt__p_scif_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argpart_t[] = {{&_swigt__p_argpart_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argloc_t[] = {  {&_swigt__p_vdloc_t, _p_vdloc_tTo_p_argloc_t, 0, 0},  {&_swigt__p_scif_t, _p_scif_tTo_p_argloc_t, 0, 0},  {&_swigt__p_argpart_t, _p_argpart_tTo_p_argloc_t, 0, 0},  {&_swigt__p_argloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_biggest_t[] = {  {&_swigt__p_biggest_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bit_bound_t[] = {  {&_swigt__p_bit_bound_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bitfield_type_data_t[] = {  {&_swigt__p_bitfield_type_data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlist_t[] = {{&_swigt__p_rlist_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bitset_t[] = {  {&_swigt__p_rlist_t, _p_rlist_tTo_p_bitset_t, 0, 0},  {&_swigt__p_bitset_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boundaries_iterator_t[] = {  {&_swigt__p_boundaries_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_carg_t[] = {  {&_swigt__p_carg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_carglist_t[] = {  {&_swigt__p_carglist_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casm_t[] = {  {&_swigt__p_casm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cblock_t[] = {  {&_swigt__p_cblock_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccase_t[] = {  {&_swigt__p_ccase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccases_t[] = {  {&_swigt__p_ccases_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cdo_t[] = {  {&_swigt__p_cdo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ceinsn_t[] = {  {&_swigt__p_ceinsn_t, 0, 0, 0},  {&_swigt__p_creturn_t, _p_creturn_tTo_p_ceinsn_t, 0, 0},  {&_swigt__p_cdo_t, _p_cdo_tTo_p_ceinsn_t, 0, 0},  {&_swigt__p_cwhile_t, _p_cwhile_tTo_p_ceinsn_t, 0, 0},  {&_swigt__p_cif_t, _p_cif_tTo_p_ceinsn_t, 0, 0},  {&_swigt__p_cfor_t, _p_cfor_tTo_p_ceinsn_t, 0, 0},  {&_swigt__p_cloop_t, _p_cloop_tTo_p_ceinsn_t, 0, 0},  {&_swigt__p_cswitch_t, _p_cswitch_tTo_p_ceinsn_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cexpr_t[] = {  {&_swigt__p_cexpr_t, 0, 0, 0},  {&_swigt__p_carg_t, _p_carg_tTo_p_cexpr_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cfor_t[] = {  {&_swigt__p_cfor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cfunc_parentee_t[] = {  {&_swigt__p_cfunc_parentee_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cfunc_t[] = {  {&_swigt__p_cfunc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cgoto_t[] = {  {&_swigt__p_cgoto_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cif_t[] = {  {&_swigt__p_cif_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cinsn_t[] = {  {&_swigt__p_cinsn_t, 0, 0, 0},  {&_swigt__p_ccase_t, _p_ccase_tTo_p_cinsn_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_citem_cmt_t[] = {  {&_swigt__p_citem_cmt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_citem_locator_t[] = {  {&_swigt__p_citem_locator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_citem_t[] = {  {&_swigt__p_cinsn_t, _p_cinsn_tTo_p_citem_t, 0, 0},  {&_swigt__p_citem_t, 0, 0, 0},  {&_swigt__p_ccase_t, _p_ccase_tTo_p_citem_t, 0, 0},  {&_swigt__p_cexpr_t, _p_cexpr_tTo_p_citem_t, 0, 0},  {&_swigt__p_carg_t, _p_carg_tTo_p_citem_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cloop_t[] = {  {&_swigt__p_cdo_t, _p_cdo_tTo_p_cloop_t, 0, 0},  {&_swigt__p_cwhile_t, _p_cwhile_tTo_p_cloop_t, 0, 0},  {&_swigt__p_cfor_t, _p_cfor_tTo_p_cloop_t, 0, 0},  {&_swigt__p_cloop_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cnumber_t[] = {  {&_swigt__p_cnumber_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_codegen_t[] = {  {&_swigt__p_codegen_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_control_graph_t[] = {  {&_swigt__p_control_graph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_creturn_t[] = {  {&_swigt__p_creturn_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cswitch_t[] = {  {&_swigt__p_cswitch_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ctext_position_t[] = {  {&_swigt__p_history_item_t, _p_history_item_tTo_p_ctext_position_t, 0, 0},  {&_swigt__p_ctext_position_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ctree_anchor_t[] = {  {&_swigt__p_ctree_anchor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ctree_item_t[] = {  {&_swigt__p_ctree_item_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ctree_parentee_t[] = {  {&_swigt__p_ctree_parentee_t, 0, 0, 0},  {&_swigt__p_cfunc_parentee_t, _p_cfunc_parentee_tTo_p_ctree_parentee_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ctree_visitor_t[] = {  {&_swigt__p_ctree_visitor_t, 0, 0, 0},  {&_swigt__p_ctree_parentee_t, _p_ctree_parentee_tTo_p_ctree_visitor_t, 0, 0},  {&_swigt__p_cfunc_parentee_t, _p_cfunc_parentee_tTo_p_ctree_visitor_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cwhile_t[] = {  {&_swigt__p_cwhile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eamap_iterator_t[] = {  {&_swigt__p_eamap_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_v_______p_void[] = {  {&_swigt__p_f_int_v_______p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_int_int_p_void__bool[] = {  {&_swigt__p_f_p_TWidget_int_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void[] = {  {&_swigt__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_int_p_void__bool[] = {  {&_swigt__p_f_p_TWidget_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_lochist_entry_t_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_lochist_entry_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t[] = {  {&_swigt__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t[] = {  {&_swigt__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_lexer_t_r_q_const__token_t_r_q_const__token_t__p_char[] = {  {&_swigt__p_f_p_lexer_t_r_q_const__token_t_r_q_const__token_t__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool[] = {  {&_swigt__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_p_void__void[] = {  {&_swigt__p_f_p_q_const__char_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int[] = {  {&_swigt__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_v_______int[] = {  {&_swigt__p_f_p_q_const__char_v_______int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_enum_hexrays_event_t_va_list__ssize_t[] = {  {&_swigt__p_f_p_void_enum_hexrays_event_t_va_list__ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int_va_list__ssize_t[] = {  {&_swigt__p_f_p_void_int_va_list__ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool[] = {  {&_swigt__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int__bool[] = {  {&_swigt__p_f_unsigned_int__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int[] = {  {&_swigt__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_p_void__bool[] = {  {&_swigt__p_f_unsigned_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_unsigned_int__unsigned_int[] = {  {&_swigt__p_f_unsigned_int_unsigned_int__unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fnumber_t[] = {  {&_swigt__p_fnumber_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_func_t[] = {  {&_swigt__p_func_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexrays_failure_t[] = {  {&_swigt__p_hexrays_failure_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexwarn_t[] = {  {&_swigt__p_hexwarn_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_history_item_t[] = {  {&_swigt__p_history_item_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_insn_t[] = {  {&_swigt__p_insn_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ivl_t[] = {  {&_swigt__p_ivl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ivlset_t[] = {  {&_swigt__p_ivlset_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_location_t[] = {  {&_swigt__p_location_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lvar_locator_t[] = {  {&_swigt__p_lvar_t, _p_lvar_tTo_p_lvar_locator_t, 0, 0},  {&_swigt__p_lvar_locator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lvar_mapping_iterator_t[] = {  {&_swigt__p_lvar_mapping_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lvar_ref_t[] = {  {&_swigt__p_lvar_ref_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lvar_saved_info_t[] = {  {&_swigt__p_lvar_saved_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lvar_t[] = {  {&_swigt__p_lvar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lvar_uservec_t[] = {  {&_swigt__p_lvar_uservec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lvars_t[] = {  {&_swigt__p_lvars_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mbl_array_t[] = {  {&_swigt__p_mbl_array_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mblock_t[] = {  {&_swigt__p_mblock_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mcases_t[] = {  {&_swigt__p_mcases_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_member_t[] = {  {&_swigt__p_member_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_microcode_filter_t[] = {  {&_swigt__p_microcode_filter_t, 0, 0, 0},  {&_swigt__p_udc_filter_t, _p_udc_filter_tTo_p_microcode_filter_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_minsn_t[] = {  {&_swigt__p_minsn_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mlist_t[] = {  {&_swigt__p_mlist_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mnumber_t[] = {  {&_swigt__p_mnumber_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mop_addr_t[] = {{&_swigt__p_mop_addr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mcallarg_t[] = {{&_swigt__p_mcallarg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mop_t[] = {  {&_swigt__p_mop_addr_t, _p_mop_addr_tTo_p_mop_t, 0, 0},  {&_swigt__p_mcallarg_t, _p_mcallarg_tTo_p_mop_t, 0, 0},  {&_swigt__p_mop_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_number_format_t[] = {  {&_swigt__p_number_format_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_minsn_visitor_t[] = {{&_swigt__p_minsn_visitor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mop_visitor_t[] = {{&_swigt__p_mop_visitor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_op_parent_info_t[] = {  {&_swigt__p_minsn_visitor_t, _p_minsn_visitor_tTo_p_op_parent_info_t, 0, 0},  {&_swigt__p_mop_visitor_t, _p_mop_visitor_tTo_p_op_parent_info_t, 0, 0},  {&_swigt__p_op_parent_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operand_locator_t[] = {  {&_swigt__p_mnumber_t, _p_mnumber_tTo_p_operand_locator_t, 0, 0},  {&_swigt__p_operand_locator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operator_info_t[] = {  {&_swigt__p_operator_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_carg_t[] = {{&_swigt__p_p_carg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cexpr_t[] = {  {&_swigt__p_p_cexpr_t, 0, 0, 0},  {&_swigt__p_p_carg_t, _p_p_carg_tTo_p_p_cexpr_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ccase_t[] = {{&_swigt__p_p_ccase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cinsn_t[] = {  {&_swigt__p_p_cinsn_t, 0, 0, 0},  {&_swigt__p_p_ccase_t, _p_p_ccase_tTo_p_p_cinsn_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_citem_t[] = {  {&_swigt__p_p_cinsn_t, _p_p_cinsn_tTo_p_p_citem_t, 0, 0},  {&_swigt__p_p_citem_t, 0, 0, 0},  {&_swigt__p_p_ccase_t, _p_p_ccase_tTo_p_p_citem_t, 0, 0},  {&_swigt__p_p_cexpr_t, _p_p_cexpr_tTo_p_p_citem_t, 0, 0},  {&_swigt__p_p_carg_t, _p_p_carg_tTo_p_p_citem_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_struc_t[] = {  {&_swigt__p_p_struc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qflow_chart_t[] = {  {&_swigt__p_qflow_chart_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qlistT_cinsn_t_t[] = {  {&_swigt__p_qlistT_cinsn_t_t, 0, 0, 0},  {&_swigt__p_cblock_t, _p_cblock_tTo_p_qlistT_cinsn_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qlistT_cinsn_t_t__const_reverse_iterator[] = {  {&_swigt__p_qlistT_cinsn_t_t__const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qlistT_cinsn_t_t__iterator[] = {  {&_swigt__p_qlistT_cinsn_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qlistT_cinsn_t_t__reverse_iterator[] = {  {&_swigt__p_qlistT_cinsn_t_t__reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qlist_cinsn_t_iterator[] = {  {&_swigt__p_qlist_cinsn_t_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qrefcnt_tT_cfunc_t_t[] = {  {&_swigt__p_qrefcnt_tT_cfunc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qstackT_history_item_t_t[] = {  {&_swigt__p_qstackT_history_item_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qstring_printer_t[] = {  {&_swigt__p_qstring_printer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT__qstringT_unsigned_short_t_t[] = {  {&_swigt__p_qvectorT__qstringT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_argloc_t_t[] = {  {&_swigt__p_qvectorT_argloc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_bitset_t_t[] = {  {&_swigt__p_qvectorT_bitset_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_bool_t[] = {  {&_swigt__p_qvectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_carg_t_t[] = {  {&_swigt__p_qvectorT_carg_t_t, 0, 0, 0},  {&_swigt__p_carglist_t, _p_carglist_tTo_p_qvectorT_carg_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_ccase_t_t[] = {  {&_swigt__p_ccases_t, _p_ccases_tTo_p_qvectorT_ccase_t_t, 0, 0},  {&_swigt__p_qvectorT_ccase_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_channel_redir_t_t[] = {  {&_swigt__p_qvectorT_channel_redir_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_cinsn_t_p_t[] = {  {&_swigt__p_qvectorT_cinsn_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_citem_t_p_t[] = {  {&_swigt__p_qvectorT_citem_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_compiled_binpat_t_t[] = {  {&_swigt__p_qvectorT_compiled_binpat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_func_type_data_t[] = {{&_swigt__p_func_type_data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_funcarg_t_t[] = {  {&_swigt__p_qvectorT_funcarg_t_t, 0, 0, 0},  {&_swigt__p_func_type_data_t, _p_func_type_data_tTo_p_qvectorT_funcarg_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_hexwarn_t_t[] = {  {&_swigt__p_qvectorT_hexwarn_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_history_item_t_t[] = {  {&_swigt__p_qvectorT_history_item_t_t, 0, 0, 0},  {&_swigt__p_qstackT_history_item_t_t, _p_qstackT_history_item_t_tTo_p_qvectorT_history_item_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_int_t[] = {  {&_swigt__p_qvectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_ivlset_t_t[] = {  {&_swigt__p_qvectorT_ivlset_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_lvar_saved_info_t_t[] = {  {&_swigt__p_qvectorT_lvar_saved_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_lvar_t_t[] = {  {&_swigt__p_qvectorT_lvar_t_t, 0, 0, 0},  {&_swigt__p_lvars_t, _p_lvars_tTo_p_qvectorT_lvar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_mcallarg_t_t[] = {  {&_swigt__p_qvectorT_mcallarg_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_minsn_t_p_t[] = {  {&_swigt__p_qvectorT_minsn_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_mlist_t_t[] = {  {&_swigt__p_qvectorT_mlist_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_mop_t_p_t[] = {  {&_swigt__p_qvectorT_mop_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_mop_t_t[] = {  {&_swigt__p_qvectorT_mop_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_range_t_t[] = {  {&_swigt__p_qvectorT_range_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_rangeset_t_const_p_t[] = {  {&_swigt__p_qvectorT_rangeset_t_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_rangeset_t_t[] = {  {&_swigt__p_qvectorT_rangeset_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_refinfo_desc_t_t[] = {  {&_swigt__p_qvectorT_refinfo_desc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_reg_info_t_t[] = {  {&_swigt__p_qvectorT_reg_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_simd_info_t_t[] = {  {&_swigt__p_qvectorT_simd_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_simpleline_t_t[] = {  {&_swigt__p_qvectorT_simpleline_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_size_t_t[] = {  {&_swigt__p_qvectorT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_tinfo_t_t[] = {  {&_swigt__p_qvectorT_tinfo_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_type_attr_t_t[] = {  {&_swigt__p_qvectorT_type_attr_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_udt_member_t_t[] = {  {&_swigt__p_qvectorT_udt_member_t_t, 0, 0, 0},  {&_swigt__p_udt_type_data_t, _p_udt_type_data_tTo_p_qvectorT_udt_member_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_relobj_t[] = {{&_swigt__p_relobj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bytevec_t[] = {{&_swigt__p_bytevec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reloc_info_t[] = {{&_swigt__p_reloc_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_unsigned_char_t[] = {  {&_swigt__p_relobj_t, _p_relobj_tTo_p_qvectorT_unsigned_char_t, 0, 0},  {&_swigt__p_qvectorT_unsigned_char_t, 0, 0, 0},  {&_swigt__p_bytevec_t, _p_bytevec_tTo_p_qvectorT_unsigned_char_t, 0, 0},  {&_swigt__p_reloc_info_t, _p_reloc_info_tTo_p_qvectorT_unsigned_char_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_unsigned_int_t[] = {  {&_swigt__p_qvectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_unsigned_long_long_t[] = {  {&_swigt__p_qvectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rangeset_t[] = {  {&_swigt__p_rangeset_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reg_info_t[] = {  {&_swigt__p_reg_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scattered_aloc_t[] = {  {&_swigt__p_scattered_aloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mbl_graph_t[] = {{&_swigt__p_mbl_graph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_simple_graph_t[] = {  {&_swigt__p_simple_graph_t, 0, 0, 0},  {&_swigt__p_mbl_graph_t, _p_mbl_graph_tTo_p_simple_graph_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_cinsn_t_p_rangeset_t_t[] = {  {&_swigt__p_std__mapT_cinsn_t_p_rangeset_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_citem_locator_t_int_t[] = {  {&_swigt__p_std__mapT_citem_locator_t_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int__qstringT_char_t_t[] = {  {&_swigt__p_std__mapT_int__qstringT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_lvar_locator_t_lvar_locator_t_t[] = {  {&_swigt__p_std__mapT_lvar_locator_t_lvar_locator_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_operand_locator_t_number_format_t_t[] = {  {&_swigt__p_std__mapT_operand_locator_t_number_format_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_treeloc_t_citem_cmt_t_t[] = {  {&_swigt__p_std__mapT_treeloc_t_citem_cmt_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_unsigned_int_cinsnptrvec_t_t[] = {  {&_swigt__p_std__mapT_unsigned_int_cinsnptrvec_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_unsigned_int_qvectorT_int_t_t[] = {  {&_swigt__p_std__mapT_unsigned_int_qvectorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_unsigned_int_udcall_t_t[] = {  {&_swigt__p_std__mapT_unsigned_int_udcall_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT__qstringT_char_t_t[] = {  {&_swigt__p_std__setT__qstringT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_minsn_t_p_t[] = {  {&_swigt__p_std__setT_minsn_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_unsigned_int_t[] = {  {&_swigt__p_std__setT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stkpnts_t[] = {  {&_swigt__p_stkpnts_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stkvar_ref_t[] = {  {&_swigt__p_stkvar_ref_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_struc_t[] = {  {&_swigt__p_struc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tinfo_t[] = {  {&_swigt__p_tinfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treeloc_t[] = {  {&_swigt__p_treeloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_udc_filter_t[] = {  {&_swigt__p_udc_filter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_udcall_map_iterator_t[] = {  {&_swigt__p_udcall_map_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_udcall_t[] = {  {&_swigt__p_udcall_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_udt_type_data_t[] = {  {&_swigt__p_udt_type_data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_user_cmts_iterator_t[] = {  {&_swigt__p_user_cmts_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_user_iflags_iterator_t[] = {  {&_swigt__p_user_iflags_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_user_labels_iterator_t[] = {  {&_swigt__p_user_labels_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_user_lvar_modifier_t[] = {  {&_swigt__p_user_lvar_modifier_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_user_numforms_iterator_t[] = {  {&_swigt__p_user_numforms_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_user_unions_iterator_t[] = {  {&_swigt__p_user_unions_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_valrng_t[] = {  {&_swigt__p_valrng_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_var_ref_t[] = {  {&_swigt__p_var_ref_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vc_printer_t[] = {  {&_swigt__p_vc_printer_t, 0, 0, 0},  {&_swigt__p_qstring_printer_t, _p_qstring_printer_tTo_p_vc_printer_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vd_failure_t[] = {  {&_swigt__p_vd_failure_t, 0, 0, 0},  {&_swigt__p_vd_interr_t, _p_vd_interr_tTo_p_vd_failure_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vd_interr_t[] = {  {&_swigt__p_vd_interr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_file_printer_t[] = {{&_swigt__p_file_printer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vd_printer_t[] = {  {&_swigt__p_vd_printer_t, 0, 0, 0},  {&_swigt__p_vc_printer_t, _p_vc_printer_tTo_p_vd_printer_t, 0, 0},  {&_swigt__p_qstring_printer_t, _p_qstring_printer_tTo_p_vd_printer_t, 0, 0},  {&_swigt__p_file_printer_t, _p_file_printer_tTo_p_vd_printer_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vdloc_t[] = {  {&_swigt__p_vdloc_t, 0, 0, 0},  {&_swigt__p_scif_t, _p_scif_tTo_p_vdloc_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vdui_t[] = {  {&_swigt__p_vdui_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vivl_t[] = {  {&_swigt__p_vivl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voff_t[] = {  {&_swigt__p_voff_t, 0, 0, 0},  {&_swigt__p_vivl_t, _p_vivl_tTo_p_voff_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wrapped_array_tT_unsigned_short_6_t[] = {  {&_swigt__p_wrapped_array_tT_unsigned_short_6_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Hexrays_Hooks,
  _swigc__p_TPopupMenu,
  _swigc__p_TWidget,
  _swigc__p___int64,
  _swigc__p__qstringT_char_t,
  _swigc__p__qstringT_unsigned_char_t,
  _swigc__p__qstringT_unsigned_short_t,
  _swigc__p_a_6__unsigned_short,
  _swigc__p_action_ctx_base_t,
  _swigc__p_argloc_t,
  _swigc__p_argpart_t,
  _swigc__p_biggest_t,
  _swigc__p_bit_bound_t,
  _swigc__p_bitfield_type_data_t,
  _swigc__p_bitset_t,
  _swigc__p_bool,
  _swigc__p_boundaries_iterator_t,
  _swigc__p_bytevec_t,
  _swigc__p_carg_t,
  _swigc__p_carglist_t,
  _swigc__p_casm_t,
  _swigc__p_cblock_t,
  _swigc__p_ccase_t,
  _swigc__p_ccases_t,
  _swigc__p_cdo_t,
  _swigc__p_ceinsn_t,
  _swigc__p_cexpr_t,
  _swigc__p_cfor_t,
  _swigc__p_cfunc_parentee_t,
  _swigc__p_cfunc_t,
  _swigc__p_cgoto_t,
  _swigc__p_char,
  _swigc__p_cif_t,
  _swigc__p_cinsn_t,
  _swigc__p_citem_cmt_t,
  _swigc__p_citem_locator_t,
  _swigc__p_citem_t,
  _swigc__p_cloop_t,
  _swigc__p_cnumber_t,
  _swigc__p_codegen_t,
  _swigc__p_const_iterator,
  _swigc__p_control_graph_t,
  _swigc__p_creturn_t,
  _swigc__p_cswitch_t,
  _swigc__p_ctext_position_t,
  _swigc__p_ctree_anchor_t,
  _swigc__p_ctree_item_t,
  _swigc__p_ctree_parentee_t,
  _swigc__p_ctree_visitor_t,
  _swigc__p_cwhile_t,
  _swigc__p_eamap_iterator_t,
  _swigc__p_f_int_v_______p_void,
  _swigc__p_f_p_TWidget_int_int_p_void__bool,
  _swigc__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void,
  _swigc__p_f_p_TWidget_int_p_void__bool,
  _swigc__p_f_p_TWidget_p_lochist_entry_t_p_void__void,
  _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void,
  _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int,
  _swigc__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void,
  _swigc__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int,
  _swigc__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int,
  _swigc__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool,
  _swigc__p_f_p_TWidget_p_void__int,
  _swigc__p_f_p_TWidget_p_void__void,
  _swigc__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t,
  _swigc__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t,
  _swigc__p_f_p_lexer_t_r_q_const__token_t_r_q_const__token_t__p_char,
  _swigc__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool,
  _swigc__p_f_p_q_const__char_p_void__void,
  _swigc__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int,
  _swigc__p_f_p_q_const__char_v_______int,
  _swigc__p_f_p_void_enum_hexrays_event_t_va_list__ssize_t,
  _swigc__p_f_p_void_int_va_list__ssize_t,
  _swigc__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool,
  _swigc__p_f_unsigned_int__bool,
  _swigc__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int,
  _swigc__p_f_unsigned_int_p_void__bool,
  _swigc__p_f_unsigned_int_unsigned_int__unsigned_int,
  _swigc__p_file_printer_t,
  _swigc__p_float,
  _swigc__p_fnumber_t,
  _swigc__p_func_t,
  _swigc__p_func_type_data_t,
  _swigc__p_hexrays_failure_t,
  _swigc__p_hexwarn_t,
  _swigc__p_history_item_t,
  _swigc__p_insn_t,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_ivl_t,
  _swigc__p_ivlset_t,
  _swigc__p_location_t,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_lvar_locator_t,
  _swigc__p_lvar_mapping_iterator_t,
  _swigc__p_lvar_ref_t,
  _swigc__p_lvar_saved_info_t,
  _swigc__p_lvar_t,
  _swigc__p_lvar_uservec_t,
  _swigc__p_lvars_t,
  _swigc__p_mbl_array_t,
  _swigc__p_mbl_graph_t,
  _swigc__p_mblock_t,
  _swigc__p_mcallarg_t,
  _swigc__p_mcases_t,
  _swigc__p_member_t,
  _swigc__p_microcode_filter_t,
  _swigc__p_minsn_t,
  _swigc__p_minsn_visitor_t,
  _swigc__p_mlist_t,
  _swigc__p_mnumber_t,
  _swigc__p_mop_addr_t,
  _swigc__p_mop_t,
  _swigc__p_mop_visitor_t,
  _swigc__p_number_format_t,
  _swigc__p_op_parent_info_t,
  _swigc__p_operand_locator_t,
  _swigc__p_operator_info_t,
  _swigc__p_p_carg_t,
  _swigc__p_p_ccase_t,
  _swigc__p_p_cexpr_t,
  _swigc__p_p_char,
  _swigc__p_p_cinsn_t,
  _swigc__p_p_citem_t,
  _swigc__p_p_struc_t,
  _swigc__p_p_unsigned_long,
  _swigc__p_qflow_chart_t,
  _swigc__p_qlistT_cinsn_t_t,
  _swigc__p_qlistT_cinsn_t_t__const_reverse_iterator,
  _swigc__p_qlistT_cinsn_t_t__iterator,
  _swigc__p_qlistT_cinsn_t_t__reverse_iterator,
  _swigc__p_qlist_cinsn_t_iterator,
  _swigc__p_qrefcnt_tT_cfunc_t_t,
  _swigc__p_qstackT_history_item_t_t,
  _swigc__p_qstring_printer_t,
  _swigc__p_qvectorT__qstringT_unsigned_short_t_t,
  _swigc__p_qvectorT_argloc_t_t,
  _swigc__p_qvectorT_bitset_t_t,
  _swigc__p_qvectorT_bool_t,
  _swigc__p_qvectorT_carg_t_t,
  _swigc__p_qvectorT_ccase_t_t,
  _swigc__p_qvectorT_channel_redir_t_t,
  _swigc__p_qvectorT_cinsn_t_p_t,
  _swigc__p_qvectorT_citem_t_p_t,
  _swigc__p_qvectorT_compiled_binpat_t_t,
  _swigc__p_qvectorT_funcarg_t_t,
  _swigc__p_qvectorT_hexwarn_t_t,
  _swigc__p_qvectorT_history_item_t_t,
  _swigc__p_qvectorT_int_t,
  _swigc__p_qvectorT_ivlset_t_t,
  _swigc__p_qvectorT_lvar_saved_info_t_t,
  _swigc__p_qvectorT_lvar_t_t,
  _swigc__p_qvectorT_mcallarg_t_t,
  _swigc__p_qvectorT_minsn_t_p_t,
  _swigc__p_qvectorT_mlist_t_t,
  _swigc__p_qvectorT_mop_t_p_t,
  _swigc__p_qvectorT_mop_t_t,
  _swigc__p_qvectorT_range_t_t,
  _swigc__p_qvectorT_rangeset_t_const_p_t,
  _swigc__p_qvectorT_rangeset_t_t,
  _swigc__p_qvectorT_refinfo_desc_t_t,
  _swigc__p_qvectorT_reg_info_t_t,
  _swigc__p_qvectorT_simd_info_t_t,
  _swigc__p_qvectorT_simpleline_t_t,
  _swigc__p_qvectorT_size_t_t,
  _swigc__p_qvectorT_tinfo_t_t,
  _swigc__p_qvectorT_type_attr_t_t,
  _swigc__p_qvectorT_udt_member_t_t,
  _swigc__p_qvectorT_unsigned_char_t,
  _swigc__p_qvectorT_unsigned_int_t,
  _swigc__p_qvectorT_unsigned_long_long_t,
  _swigc__p_rangeset_t,
  _swigc__p_reg_info_t,
  _swigc__p_relobj_t,
  _swigc__p_reloc_info_t,
  _swigc__p_rlist_t,
  _swigc__p_scattered_aloc_t,
  _swigc__p_scif_t,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_simple_graph_t,
  _swigc__p_size_t,
  _swigc__p_std__mapT_cinsn_t_p_rangeset_t_t,
  _swigc__p_std__mapT_citem_locator_t_int_t,
  _swigc__p_std__mapT_int__qstringT_char_t_t,
  _swigc__p_std__mapT_lvar_locator_t_lvar_locator_t_t,
  _swigc__p_std__mapT_operand_locator_t_number_format_t_t,
  _swigc__p_std__mapT_treeloc_t_citem_cmt_t_t,
  _swigc__p_std__mapT_unsigned_int_cinsnptrvec_t_t,
  _swigc__p_std__mapT_unsigned_int_qvectorT_int_t_t,
  _swigc__p_std__mapT_unsigned_int_udcall_t_t,
  _swigc__p_std__out_of_range,
  _swigc__p_std__setT__qstringT_char_t_t,
  _swigc__p_std__setT_minsn_t_p_t,
  _swigc__p_std__setT_unsigned_int_t,
  _swigc__p_stkpnts_t,
  _swigc__p_stkvar_ref_t,
  _swigc__p_struc_t,
  _swigc__p_tinfo_t,
  _swigc__p_treeloc_t,
  _swigc__p_udc_filter_t,
  _swigc__p_udcall_map_iterator_t,
  _swigc__p_udcall_t,
  _swigc__p_udt_type_data_t,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_user_cmts_iterator_t,
  _swigc__p_user_iflags_iterator_t,
  _swigc__p_user_labels_iterator_t,
  _swigc__p_user_lvar_modifier_t,
  _swigc__p_user_numforms_iterator_t,
  _swigc__p_user_unions_iterator_t,
  _swigc__p_valrng_t,
  _swigc__p_value_type,
  _swigc__p_var_ref_t,
  _swigc__p_vc_printer_t,
  _swigc__p_vd_failure_t,
  _swigc__p_vd_interr_t,
  _swigc__p_vd_printer_t,
  _swigc__p_vdloc_t,
  _swigc__p_vdui_t,
  _swigc__p_vivl_t,
  _swigc__p_voff_t,
  _swigc__p_void,
  _swigc__p_wrapped_array_tT_unsigned_short_6_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
#ifndef Py_LIMITED_API  
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
#else
    PyType_Slot slots[] = {
      {
        Py_tp_dealloc, (void*)swig_varlink_dealloc 
      },
      {
        Py_tp_getattr, (void*)swig_varlink_getattr 
      },
      {
        Py_tp_setattr, (void*)swig_varlink_setattr 
      },
      {
        Py_tp_repr, (void*)swig_varlink_repr 
      },
      {
        Py_tp_str, (void*)swig_varlink_str 
      },
      {
        Py_tp_doc, (void*)varlink__doc__ 
      },
      {
        0, NULL 
      }
    };
    PyType_Spec spec = {
      
    };
    spec.name = "swigvarlink";
    spec.basicsize = sizeof(swig_varlinkobject);
    spec.flags = Py_TPFLAGS_DEFAULT;
    spec.slots = slots;
    return (PyTypeObject*)PyType_FromSpec(&spec);
#endif  
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
#ifndef Py_LIMITED_API
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#endif // Py_LIMITED_API
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __NT__
#pragma warning(disable: 4883)
#endif // __NT__
#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  Py_DECREF(globals);
  SWIG_addvarlink(globals, "MAX_VALUE", Swig_var_MAX_VALUE_get, Swig_var_MAX_VALUE_set);
  SWIG_addvarlink(globals, "MAX_SVALUE", Swig_var_MAX_SVALUE_get, Swig_var_MAX_SVALUE_set);
  SWIG_addvarlink(globals, "MIN_SVALUE", Swig_var_MIN_SVALUE_get, Swig_var_MIN_SVALUE_set);
  SWIG_addvarlink(globals, "MUST_ACCESS", Swig_var_MUST_ACCESS_get, Swig_var_MUST_ACCESS_set);
  SWIG_addvarlink(globals, "MAY_ACCESS", Swig_var_MAY_ACCESS_get, Swig_var_MAY_ACCESS_set);
  SWIG_addvarlink(globals, "MAYMUST_ACCESS_MASK", Swig_var_MAYMUST_ACCESS_MASK_get, Swig_var_MAYMUST_ACCESS_MASK_set);
  SWIG_addvarlink(globals, "ONE_ACCESS_TYPE", Swig_var_ONE_ACCESS_TYPE_get, Swig_var_ONE_ACCESS_TYPE_set);
  SWIG_addvarlink(globals, "INCLUDE_SPOILED_REGS", Swig_var_INCLUDE_SPOILED_REGS_get, Swig_var_INCLUDE_SPOILED_REGS_set);
  SWIG_addvarlink(globals, "EXCLUDE_PASS_REGS", Swig_var_EXCLUDE_PASS_REGS_get, Swig_var_EXCLUDE_PASS_REGS_set);
  SWIG_addvarlink(globals, "FULL_XDSU", Swig_var_FULL_XDSU_get, Swig_var_FULL_XDSU_set);
  SWIG_addvarlink(globals, "WITH_ASSERTS", Swig_var_WITH_ASSERTS_get, Swig_var_WITH_ASSERTS_set);
  SWIG_addvarlink(globals, "EXCLUDE_VOLATILE", Swig_var_EXCLUDE_VOLATILE_get, Swig_var_EXCLUDE_VOLATILE_set);
  SWIG_addvarlink(globals, "INCLUDE_UNUSED_SRC", Swig_var_INCLUDE_UNUSED_SRC_get, Swig_var_INCLUDE_UNUSED_SRC_set);
  SWIG_addvarlink(globals, "INCLUDE_DEAD_RETREGS", Swig_var_INCLUDE_DEAD_RETREGS_get, Swig_var_INCLUDE_DEAD_RETREGS_set);
  SWIG_addvarlink(globals, "INCLUDE_RESTRICTED", Swig_var_INCLUDE_RESTRICTED_get, Swig_var_INCLUDE_RESTRICTED_set);
  SWIG_addvarlink(globals, "mr_none", Swig_var_mr_none_get, Swig_var_mr_none_set);
  SWIG_addvarlink(globals, "mr_cf", Swig_var_mr_cf_get, Swig_var_mr_cf_set);
  SWIG_addvarlink(globals, "mr_zf", Swig_var_mr_zf_get, Swig_var_mr_zf_set);
  SWIG_addvarlink(globals, "mr_sf", Swig_var_mr_sf_get, Swig_var_mr_sf_set);
  SWIG_addvarlink(globals, "mr_of", Swig_var_mr_of_get, Swig_var_mr_of_set);
  SWIG_addvarlink(globals, "mr_pf", Swig_var_mr_pf_get, Swig_var_mr_pf_set);
  SWIG_addvarlink(globals, "cc_count", Swig_var_cc_count_get, Swig_var_cc_count_set);
  SWIG_addvarlink(globals, "mr_cc", Swig_var_mr_cc_get, Swig_var_mr_cc_set);
  SWIG_addvarlink(globals, "mr_first", Swig_var_mr_first_get, Swig_var_mr_first_set);
  SWIG_addvarlink(globals, "bitset_width", Swig_var_bitset_width_get, Swig_var_bitset_width_set);
  SWIG_addvarlink(globals, "bitset_align", Swig_var_bitset_align_get, Swig_var_bitset_align_set);
  SWIG_addvarlink(globals, "bitset_shift", Swig_var_bitset_shift_get, Swig_var_bitset_shift_set);
  SWIG_addvarlink(globals, "mop_z", Swig_var_mop_z_get, Swig_var_mop_z_set);
  SWIG_addvarlink(globals, "mop_r", Swig_var_mop_r_get, Swig_var_mop_r_set);
  SWIG_addvarlink(globals, "mop_n", Swig_var_mop_n_get, Swig_var_mop_n_set);
  SWIG_addvarlink(globals, "mop_str", Swig_var_mop_str_get, Swig_var_mop_str_set);
  SWIG_addvarlink(globals, "mop_d", Swig_var_mop_d_get, Swig_var_mop_d_set);
  SWIG_addvarlink(globals, "mop_S", Swig_var_mop_S_get, Swig_var_mop_S_set);
  SWIG_addvarlink(globals, "mop_v", Swig_var_mop_v_get, Swig_var_mop_v_set);
  SWIG_addvarlink(globals, "mop_b", Swig_var_mop_b_get, Swig_var_mop_b_set);
  SWIG_addvarlink(globals, "mop_f", Swig_var_mop_f_get, Swig_var_mop_f_set);
  SWIG_addvarlink(globals, "mop_l", Swig_var_mop_l_get, Swig_var_mop_l_set);
  SWIG_addvarlink(globals, "mop_a", Swig_var_mop_a_get, Swig_var_mop_a_set);
  SWIG_addvarlink(globals, "mop_h", Swig_var_mop_h_get, Swig_var_mop_h_set);
  SWIG_addvarlink(globals, "mop_c", Swig_var_mop_c_get, Swig_var_mop_c_set);
  SWIG_addvarlink(globals, "mop_fn", Swig_var_mop_fn_get, Swig_var_mop_fn_set);
  SWIG_addvarlink(globals, "mop_p", Swig_var_mop_p_get, Swig_var_mop_p_set);
  SWIG_addvarlink(globals, "mop_sc", Swig_var_mop_sc_get, Swig_var_mop_sc_set);
  SWIG_addvarlink(globals, "NOSIZE", Swig_var_NOSIZE_get, Swig_var_NOSIZE_set);
  SWIG_addvarlink(globals, "MAX_OPSIZE", Swig_var_MAX_OPSIZE_get, Swig_var_MAX_OPSIZE_set);
  SWIG_addvarlink(globals, "DOUBLE_OPSIZE", Swig_var_DOUBLE_OPSIZE_get, Swig_var_DOUBLE_OPSIZE_set);
  SWIG_Python_SetConstant(d, "FUNC_NAME_MEMCPY",SWIG_FromCharPtr("memcpy"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_MEMSET",SWIG_FromCharPtr("memset"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_MEMSET32",SWIG_FromCharPtr("memset32"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_MEMSET64",SWIG_FromCharPtr("memset64"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_STRCPY",SWIG_FromCharPtr("strcpy"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_STRLEN",SWIG_FromCharPtr("strlen"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_STRCAT",SWIG_FromCharPtr("strcat"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_TAIL",SWIG_FromCharPtr("tail"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_VA_ARG",SWIG_FromCharPtr("va_arg"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_EMPTY",SWIG_FromCharPtr("$empty"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_PRESENT",SWIG_FromCharPtr("$present"));
  SWIG_Python_SetConstant(d, "FUNC_NAME_CONTAINING_RECORD",SWIG_FromCharPtr("CONTAINING_RECORD"));
  SWIG_addvarlink(globals, "FX_NONE", Swig_var_FX_NONE_get, Swig_var_FX_NONE_set);
  SWIG_addvarlink(globals, "FX_INFIX", Swig_var_FX_INFIX_get, Swig_var_FX_INFIX_set);
  SWIG_addvarlink(globals, "FX_PREFIX", Swig_var_FX_PREFIX_get, Swig_var_FX_PREFIX_set);
  SWIG_addvarlink(globals, "FX_POSTFIX", Swig_var_FX_POSTFIX_get, Swig_var_FX_POSTFIX_set);
  SWIG_addvarlink(globals, "FX_TERNARY", Swig_var_FX_TERNARY_get, Swig_var_FX_TERNARY_set);
  SWIG_addvarlink(globals, "COI_RL", Swig_var_COI_RL_get, Swig_var_COI_RL_set);
  SWIG_addvarlink(globals, "COI_LR", Swig_var_COI_LR_get, Swig_var_COI_LR_set);
  SWIG_addvarlink(globals, "COI_INT", Swig_var_COI_INT_get, Swig_var_COI_INT_set);
  SWIG_addvarlink(globals, "COI_FP", Swig_var_COI_FP_get, Swig_var_COI_FP_set);
  SWIG_addvarlink(globals, "COI_SH", Swig_var_COI_SH_get, Swig_var_COI_SH_set);
  SWIG_addvarlink(globals, "COI_SGN", Swig_var_COI_SGN_get, Swig_var_COI_SGN_set);
  SWIG_addvarlink(globals, "COI_SBN", Swig_var_COI_SBN_get, Swig_var_COI_SBN_set);
  SWIG_addvarlink(globals, "HEXRAYS_API_MAGIC", Swig_var_HEXRAYS_API_MAGIC_get, Swig_var_HEXRAYS_API_MAGIC_set);
  SWIG_addvarlink(globals, "CMT_NONE", Swig_var_CMT_NONE_get, Swig_var_CMT_NONE_set);
  SWIG_addvarlink(globals, "CMT_TAIL", Swig_var_CMT_TAIL_get, Swig_var_CMT_TAIL_set);
  SWIG_addvarlink(globals, "CMT_BLOCK1", Swig_var_CMT_BLOCK1_get, Swig_var_CMT_BLOCK1_set);
  SWIG_addvarlink(globals, "CMT_BLOCK2", Swig_var_CMT_BLOCK2_get, Swig_var_CMT_BLOCK2_set);
  SWIG_addvarlink(globals, "CMT_LVAR", Swig_var_CMT_LVAR_get, Swig_var_CMT_LVAR_set);
  SWIG_addvarlink(globals, "CMT_FUNC", Swig_var_CMT_FUNC_get, Swig_var_CMT_FUNC_set);
  SWIG_addvarlink(globals, "CMT_ALL", Swig_var_CMT_ALL_get, Swig_var_CMT_ALL_set);
  SWIG_addvarlink(globals, "hexdsp", Swig_var_hexdsp_get, Swig_var_hexdsp_set);
  
  //<init(py_hexrays)>
  idapython_hook_to_notification_point(HT_UI, ida_hexrays_ui_notification, NULL);
  //</init(py_hexrays)>
  
  
  {
    module_callbacks_t module_lfc;
    module_lfc.closebase = ida_hexrays_closebase;
    module_lfc.term = ida_hexrays_term;
    register_module_lifecycle_callbacks(module_lfc);
  }
  
  
  /* Initialize threading */

/* 'SetConstant' replacement */

static const ida_local struct ci_t
{
    const char *name;
    int  val;
} cis[939] = {
	{ "MAX_SUPPORTED_STACK_SIZE", static_cast< int >(0x100000)},
	{ "MAX_VLR_SIZE", static_cast< int >(MAX_VLR_SIZE)},
	{ "CMP_NZ", static_cast< int >(CMP_NZ)},
	{ "CMP_Z", static_cast< int >(CMP_Z)},
	{ "CMP_AE", static_cast< int >(CMP_AE)},
	{ "CMP_B", static_cast< int >(CMP_B)},
	{ "CMP_A", static_cast< int >(CMP_A)},
	{ "CMP_BE", static_cast< int >(CMP_BE)},
	{ "CMP_GT", static_cast< int >(CMP_GT)},
	{ "CMP_GE", static_cast< int >(CMP_GE)},
	{ "CMP_LT", static_cast< int >(CMP_LT)},
	{ "CMP_LE", static_cast< int >(CMP_LE)},
	{ "NO_ACCESS", static_cast< int >(NO_ACCESS)},
	{ "WRITE_ACCESS", static_cast< int >(WRITE_ACCESS)},
	{ "READ_ACCESS", static_cast< int >(READ_ACCESS)},
	{ "RW_ACCESS", static_cast< int >(RW_ACCESS)},
	{ "MERR_OK", static_cast< int >(MERR_OK)},
	{ "MERR_BLOCK", static_cast< int >(MERR_BLOCK)},
	{ "MERR_INTERR", static_cast< int >(MERR_INTERR)},
	{ "MERR_INSN", static_cast< int >(MERR_INSN)},
	{ "MERR_MEM", static_cast< int >(MERR_MEM)},
	{ "MERR_BADBLK", static_cast< int >(MERR_BADBLK)},
	{ "MERR_BADSP", static_cast< int >(MERR_BADSP)},
	{ "MERR_PROLOG", static_cast< int >(MERR_PROLOG)},
	{ "MERR_SWITCH", static_cast< int >(MERR_SWITCH)},
	{ "MERR_EXCEPTION", static_cast< int >(MERR_EXCEPTION)},
	{ "MERR_HUGESTACK", static_cast< int >(MERR_HUGESTACK)},
	{ "MERR_LVARS", static_cast< int >(MERR_LVARS)},
	{ "MERR_BITNESS", static_cast< int >(MERR_BITNESS)},
	{ "MERR_BADCALL", static_cast< int >(MERR_BADCALL)},
	{ "MERR_BADFRAME", static_cast< int >(MERR_BADFRAME)},
	{ "MERR_UNKTYPE", static_cast< int >(MERR_UNKTYPE)},
	{ "MERR_BADIDB", static_cast< int >(MERR_BADIDB)},
	{ "MERR_SIZEOF", static_cast< int >(MERR_SIZEOF)},
	{ "MERR_REDO", static_cast< int >(MERR_REDO)},
	{ "MERR_CANCELED", static_cast< int >(MERR_CANCELED)},
	{ "MERR_RECDEPTH", static_cast< int >(MERR_RECDEPTH)},
	{ "MERR_OVERLAP", static_cast< int >(MERR_OVERLAP)},
	{ "MERR_PARTINIT", static_cast< int >(MERR_PARTINIT)},
	{ "MERR_COMPLEX", static_cast< int >(MERR_COMPLEX)},
	{ "MERR_LICENSE", static_cast< int >(MERR_LICENSE)},
	{ "MERR_ONLY32", static_cast< int >(MERR_ONLY32)},
	{ "MERR_ONLY64", static_cast< int >(MERR_ONLY64)},
	{ "MERR_BUSY", static_cast< int >(MERR_BUSY)},
	{ "MERR_FARPTR", static_cast< int >(MERR_FARPTR)},
	{ "MERR_EXTERN", static_cast< int >(MERR_EXTERN)},
	{ "MERR_FUNCSIZE", static_cast< int >(MERR_FUNCSIZE)},
	{ "MERR_BADRANGES", static_cast< int >(MERR_BADRANGES)},
	{ "MERR_STOP", static_cast< int >(MERR_STOP)},
	{ "MERR_MAX_ERR", static_cast< int >(MERR_MAX_ERR)},
	{ "MERR_LOOP", static_cast< int >(MERR_LOOP)},
	{ "NF_FIXED", static_cast< int >(0x01)},
	{ "NF_NEGDONE", static_cast< int >(0x02)},
	{ "NF_BINVDONE", static_cast< int >(0x04)},
	{ "NF_NEGATE", static_cast< int >(0x08)},
	{ "NF_BITNOT", static_cast< int >(0x10)},
	{ "NF_STROFF", static_cast< int >(0x20)},
	{ "GUESSED_NONE", static_cast< int >(GUESSED_NONE)},
	{ "GUESSED_WEAK", static_cast< int >(GUESSED_WEAK)},
	{ "GUESSED_FUNC", static_cast< int >(GUESSED_FUNC)},
	{ "GUESSED_DATA", static_cast< int >(GUESSED_DATA)},
	{ "TS_NOELL", static_cast< int >(TS_NOELL)},
	{ "TS_SHRINK", static_cast< int >(TS_SHRINK)},
	{ "TS_DONTREF", static_cast< int >(TS_DONTREF)},
	{ "TS_MASK", static_cast< int >(TS_MASK)},
	{ "SVW_INT", static_cast< int >(0x00)},
	{ "SVW_FLOAT", static_cast< int >(0x01)},
	{ "SVW_SOFT", static_cast< int >(0x02)},
	{ "LVINF_KEEP", static_cast< int >(0x0001)},
	{ "LVINF_FORCE", static_cast< int >(0x0002)},
	{ "LVINF_NOPTR", static_cast< int >(0x0004)},
	{ "ULV_PRECISE_DEFEA", static_cast< int >(0x0001)},
	{ "SHINS_NUMADDR", static_cast< int >(0x01)},
	{ "SHINS_VALNUM", static_cast< int >(0x02)},
	{ "SHINS_SHORT", static_cast< int >(0x04)},
	{ "SHINS_LDXEA", static_cast< int >(0x08)},
	{ "NO_SIDEFF", static_cast< int >(NO_SIDEFF)},
	{ "WITH_SIDEFF", static_cast< int >(WITH_SIDEFF)},
	{ "ONLY_SIDEFF", static_cast< int >(ONLY_SIDEFF)},
	{ "ANY_REGSIZE", static_cast< int >(ANY_REGSIZE)},
	{ "ROLE_UNK", static_cast< int >(ROLE_UNK)},
	{ "ROLE_EMPTY", static_cast< int >(ROLE_EMPTY)},
	{ "ROLE_MEMSET", static_cast< int >(ROLE_MEMSET)},
	{ "ROLE_MEMSET32", static_cast< int >(ROLE_MEMSET32)},
	{ "ROLE_MEMSET64", static_cast< int >(ROLE_MEMSET64)},
	{ "ROLE_MEMCPY", static_cast< int >(ROLE_MEMCPY)},
	{ "ROLE_STRCPY", static_cast< int >(ROLE_STRCPY)},
	{ "ROLE_STRLEN", static_cast< int >(ROLE_STRLEN)},
	{ "ROLE_STRCAT", static_cast< int >(ROLE_STRCAT)},
	{ "ROLE_TAIL", static_cast< int >(ROLE_TAIL)},
	{ "ROLE_BUG", static_cast< int >(ROLE_BUG)},
	{ "ROLE_ALLOCA", static_cast< int >(ROLE_ALLOCA)},
	{ "ROLE_BSWAP", static_cast< int >(ROLE_BSWAP)},
	{ "ROLE_PRESENT", static_cast< int >(ROLE_PRESENT)},
	{ "ROLE_CONTAINING_RECORD", static_cast< int >(ROLE_CONTAINING_RECORD)},
	{ "ROLE_FASTFAIL", static_cast< int >(ROLE_FASTFAIL)},
	{ "ROLE_READFLAGS", static_cast< int >(ROLE_READFLAGS)},
	{ "ROLE_IS_MUL_OK", static_cast< int >(ROLE_IS_MUL_OK)},
	{ "ROLE_SATURATED_MUL", static_cast< int >(ROLE_SATURATED_MUL)},
	{ "ROLE_BITTEST", static_cast< int >(ROLE_BITTEST)},
	{ "ROLE_BITTESTANDSET", static_cast< int >(ROLE_BITTESTANDSET)},
	{ "ROLE_BITTESTANDRESET", static_cast< int >(ROLE_BITTESTANDRESET)},
	{ "ROLE_BITTESTANDCOMPLEMENT", static_cast< int >(ROLE_BITTESTANDCOMPLEMENT)},
	{ "ROLE_VA_ARG", static_cast< int >(ROLE_VA_ARG)},
	{ "ROLE_VA_COPY", static_cast< int >(ROLE_VA_COPY)},
	{ "ROLE_VA_START", static_cast< int >(ROLE_VA_START)},
	{ "ROLE_VA_END", static_cast< int >(ROLE_VA_END)},
	{ "ROLE_ROL", static_cast< int >(ROLE_ROL)},
	{ "ROLE_ROR", static_cast< int >(ROLE_ROR)},
	{ "ROLE_CFSUB3", static_cast< int >(ROLE_CFSUB3)},
	{ "ROLE_OFSUB3", static_cast< int >(ROLE_OFSUB3)},
	{ "ROLE_ABS", static_cast< int >(ROLE_ABS)},
	{ "SIZEOF_BLOCK_CHAINS", static_cast< int >(24)},
	{ "BLT_NONE", static_cast< int >(BLT_NONE)},
	{ "BLT_STOP", static_cast< int >(BLT_STOP)},
	{ "BLT_0WAY", static_cast< int >(BLT_0WAY)},
	{ "BLT_1WAY", static_cast< int >(BLT_1WAY)},
	{ "BLT_2WAY", static_cast< int >(BLT_2WAY)},
	{ "BLT_NWAY", static_cast< int >(BLT_NWAY)},
	{ "BLT_XTRN", static_cast< int >(BLT_XTRN)},
	{ "WARN_VARARG_REGS", static_cast< int >(WARN_VARARG_REGS)},
	{ "WARN_ILL_PURGED", static_cast< int >(WARN_ILL_PURGED)},
	{ "WARN_ILL_FUNCTYPE", static_cast< int >(WARN_ILL_FUNCTYPE)},
	{ "WARN_VARARG_TCAL", static_cast< int >(WARN_VARARG_TCAL)},
	{ "WARN_VARARG_NOSTK", static_cast< int >(WARN_VARARG_NOSTK)},
	{ "WARN_VARARG_MANY", static_cast< int >(WARN_VARARG_MANY)},
	{ "WARN_ADDR_OUTARGS", static_cast< int >(WARN_ADDR_OUTARGS)},
	{ "WARN_DEP_UNK_CALLS", static_cast< int >(WARN_DEP_UNK_CALLS)},
	{ "WARN_ILL_ELLIPSIS", static_cast< int >(WARN_ILL_ELLIPSIS)},
	{ "WARN_GUESSED_TYPE", static_cast< int >(WARN_GUESSED_TYPE)},
	{ "WARN_EXP_LINVAR", static_cast< int >(WARN_EXP_LINVAR)},
	{ "WARN_WIDEN_CHAINS", static_cast< int >(WARN_WIDEN_CHAINS)},
	{ "WARN_BAD_PURGED", static_cast< int >(WARN_BAD_PURGED)},
	{ "WARN_CBUILD_LOOPS", static_cast< int >(WARN_CBUILD_LOOPS)},
	{ "WARN_NO_SAVE_REST", static_cast< int >(WARN_NO_SAVE_REST)},
	{ "WARN_ODD_INPUT_REG", static_cast< int >(WARN_ODD_INPUT_REG)},
	{ "WARN_ODD_ADDR_USE", static_cast< int >(WARN_ODD_ADDR_USE)},
	{ "WARN_MUST_RET_FP", static_cast< int >(WARN_MUST_RET_FP)},
	{ "WARN_ILL_FPU_STACK", static_cast< int >(WARN_ILL_FPU_STACK)},
	{ "WARN_SELFREF_PROP", static_cast< int >(WARN_SELFREF_PROP)},
	{ "WARN_WOULD_OVERLAP", static_cast< int >(WARN_WOULD_OVERLAP)},
	{ "WARN_ARRAY_INARG", static_cast< int >(WARN_ARRAY_INARG)},
	{ "WARN_MAX_ARGS", static_cast< int >(WARN_MAX_ARGS)},
	{ "WARN_BAD_FIELD_TYPE", static_cast< int >(WARN_BAD_FIELD_TYPE)},
	{ "WARN_WRITE_CONST", static_cast< int >(WARN_WRITE_CONST)},
	{ "WARN_BAD_RETVAR", static_cast< int >(WARN_BAD_RETVAR)},
	{ "WARN_FRAG_LVAR", static_cast< int >(WARN_FRAG_LVAR)},
	{ "WARN_HUGE_STKOFF", static_cast< int >(WARN_HUGE_STKOFF)},
	{ "WARN_UNINITED_REG", static_cast< int >(WARN_UNINITED_REG)},
	{ "WARN_FIXED_MACRO", static_cast< int >(WARN_FIXED_MACRO)},
	{ "WARN_WRONG_VA_OFF", static_cast< int >(WARN_WRONG_VA_OFF)},
	{ "WARN_CR_NOFIELD", static_cast< int >(WARN_CR_NOFIELD)},
	{ "WARN_CR_BADOFF", static_cast< int >(WARN_CR_BADOFF)},
	{ "WARN_BAD_STROFF", static_cast< int >(WARN_BAD_STROFF)},
	{ "WARN_BAD_VARSIZE", static_cast< int >(WARN_BAD_VARSIZE)},
	{ "WARN_UNSUPP_REG", static_cast< int >(WARN_UNSUPP_REG)},
	{ "WARN_UNALIGNED_ARG", static_cast< int >(WARN_UNALIGNED_ARG)},
	{ "WARN_BAD_STD_TYPE", static_cast< int >(WARN_BAD_STD_TYPE)},
	{ "WARN_BAD_CALL_SP", static_cast< int >(WARN_BAD_CALL_SP)},
	{ "WARN_MISSED_SWITCH", static_cast< int >(WARN_MISSED_SWITCH)},
	{ "WARN_BAD_SP", static_cast< int >(WARN_BAD_SP)},
	{ "WARN_BAD_STKPNT", static_cast< int >(WARN_BAD_STKPNT)},
	{ "WARN_UNDEF_LVAR", static_cast< int >(WARN_UNDEF_LVAR)},
	{ "WARN_JUMPOUT", static_cast< int >(WARN_JUMPOUT)},
	{ "WARN_BAD_VALRNG", static_cast< int >(WARN_BAD_VALRNG)},
	{ "WARN_MAX", static_cast< int >(WARN_MAX)},
	{ "MMAT_ZERO", static_cast< int >(MMAT_ZERO)},
	{ "MMAT_GENERATED", static_cast< int >(MMAT_GENERATED)},
	{ "MMAT_PREOPTIMIZED", static_cast< int >(MMAT_PREOPTIMIZED)},
	{ "MMAT_LOCOPT", static_cast< int >(MMAT_LOCOPT)},
	{ "MMAT_CALLS", static_cast< int >(MMAT_CALLS)},
	{ "MMAT_GLBOPT1", static_cast< int >(MMAT_GLBOPT1)},
	{ "MMAT_GLBOPT2", static_cast< int >(MMAT_GLBOPT2)},
	{ "MMAT_GLBOPT3", static_cast< int >(MMAT_GLBOPT3)},
	{ "MMAT_LVARS", static_cast< int >(MMAT_LVARS)},
	{ "MMIDX_GLBLOW", static_cast< int >(MMIDX_GLBLOW)},
	{ "MMIDX_LVARS", static_cast< int >(MMIDX_LVARS)},
	{ "MMIDX_RETADDR", static_cast< int >(MMIDX_RETADDR)},
	{ "MMIDX_SHADOW", static_cast< int >(MMIDX_SHADOW)},
	{ "MMIDX_ARGS", static_cast< int >(MMIDX_ARGS)},
	{ "MMIDX_GLBHIGH", static_cast< int >(MMIDX_GLBHIGH)},
	{ "VDRUN_NEWFILE", static_cast< int >(0x0000)},
	{ "VDRUN_APPEND", static_cast< int >(0x0001)},
	{ "VDRUN_ONLYNEW", static_cast< int >(0x0002)},
	{ "VDRUN_SILENT", static_cast< int >(0x0004)},
	{ "VDRUN_SENDIDB", static_cast< int >(0x0008)},
	{ "VDRUN_MAYSTOP", static_cast< int >(0x0010)},
	{ "VDRUN_CMDLINE", static_cast< int >(0x0020)},
	{ "VDRUN_STATS", static_cast< int >(0x0040)},
	{ "VDRUN_LUMINA", static_cast< int >(0x0080)},
	{ "cot_empty", static_cast< int >(cot_empty)},
	{ "cot_comma", static_cast< int >(cot_comma)},
	{ "cot_asg", static_cast< int >(cot_asg)},
	{ "cot_asgbor", static_cast< int >(cot_asgbor)},
	{ "cot_asgxor", static_cast< int >(cot_asgxor)},
	{ "cot_asgband", static_cast< int >(cot_asgband)},
	{ "cot_asgadd", static_cast< int >(cot_asgadd)},
	{ "cot_asgsub", static_cast< int >(cot_asgsub)},
	{ "cot_asgmul", static_cast< int >(cot_asgmul)},
	{ "cot_asgsshr", static_cast< int >(cot_asgsshr)},
	{ "cot_asgushr", static_cast< int >(cot_asgushr)},
	{ "cot_asgshl", static_cast< int >(cot_asgshl)},
	{ "cot_asgsdiv", static_cast< int >(cot_asgsdiv)},
	{ "cot_asgudiv", static_cast< int >(cot_asgudiv)},
	{ "cot_asgsmod", static_cast< int >(cot_asgsmod)},
	{ "cot_asgumod", static_cast< int >(cot_asgumod)},
	{ "cot_tern", static_cast< int >(cot_tern)},
	{ "cot_lor", static_cast< int >(cot_lor)},
	{ "cot_land", static_cast< int >(cot_land)},
	{ "cot_bor", static_cast< int >(cot_bor)},
	{ "cot_xor", static_cast< int >(cot_xor)},
	{ "cot_band", static_cast< int >(cot_band)},
	{ "cot_eq", static_cast< int >(cot_eq)},
	{ "cot_ne", static_cast< int >(cot_ne)},
	{ "cot_sge", static_cast< int >(cot_sge)},
	{ "cot_uge", static_cast< int >(cot_uge)},
	{ "cot_sle", static_cast< int >(cot_sle)},
	{ "cot_ule", static_cast< int >(cot_ule)},
	{ "cot_sgt", static_cast< int >(cot_sgt)},
	{ "cot_ugt", static_cast< int >(cot_ugt)},
	{ "cot_slt", static_cast< int >(cot_slt)},
	{ "cot_ult", static_cast< int >(cot_ult)},
	{ "cot_sshr", static_cast< int >(cot_sshr)},
	{ "cot_ushr", static_cast< int >(cot_ushr)},
	{ "cot_shl", static_cast< int >(cot_shl)},
	{ "cot_add", static_cast< int >(cot_add)},
	{ "cot_sub", static_cast< int >(cot_sub)},
	{ "cot_mul", static_cast< int >(cot_mul)},
	{ "cot_sdiv", static_cast< int >(cot_sdiv)},
	{ "cot_udiv", static_cast< int >(cot_udiv)},
	{ "cot_smod", static_cast< int >(cot_smod)},
	{ "cot_umod", static_cast< int >(cot_umod)},
	{ "cot_fadd", static_cast< int >(cot_fadd)},
	{ "cot_fsub", static_cast< int >(cot_fsub)},
	{ "cot_fmul", static_cast< int >(cot_fmul)},
	{ "cot_fdiv", static_cast< int >(cot_fdiv)},
	{ "cot_fneg", static_cast< int >(cot_fneg)},
	{ "cot_neg", static_cast< int >(cot_neg)},
	{ "cot_cast", static_cast< int >(cot_cast)},
	{ "cot_lnot", static_cast< int >(cot_lnot)},
	{ "cot_bnot", static_cast< int >(cot_bnot)},
	{ "cot_ptr", static_cast< int >(cot_ptr)},
	{ "cot_ref", static_cast< int >(cot_ref)},
	{ "cot_postinc", static_cast< int >(cot_postinc)},
	{ "cot_postdec", static_cast< int >(cot_postdec)},
	{ "cot_preinc", static_cast< int >(cot_preinc)},
	{ "cot_predec", static_cast< int >(cot_predec)},
	{ "cot_call", static_cast< int >(cot_call)},
	{ "cot_idx", static_cast< int >(cot_idx)},
	{ "cot_memref", static_cast< int >(cot_memref)},
	{ "cot_memptr", static_cast< int >(cot_memptr)},
	{ "cot_num", static_cast< int >(cot_num)},
	{ "cot_fnum", static_cast< int >(cot_fnum)},
	{ "cot_str", static_cast< int >(cot_str)},
	{ "cot_obj", static_cast< int >(cot_obj)},
	{ "cot_var", static_cast< int >(cot_var)},
	{ "cot_insn", static_cast< int >(cot_insn)},
	{ "cot_sizeof", static_cast< int >(cot_sizeof)},
	{ "cot_helper", static_cast< int >(cot_helper)},
	{ "cot_type", static_cast< int >(cot_type)},
	{ "cot_last", static_cast< int >(cot_last)},
	{ "cit_empty", static_cast< int >(cit_empty)},
	{ "cit_block", static_cast< int >(cit_block)},
	{ "cit_expr", static_cast< int >(cit_expr)},
	{ "cit_if", static_cast< int >(cit_if)},
	{ "cit_for", static_cast< int >(cit_for)},
	{ "cit_while", static_cast< int >(cit_while)},
	{ "cit_do", static_cast< int >(cit_do)},
	{ "cit_switch", static_cast< int >(cit_switch)},
	{ "cit_break", static_cast< int >(cit_break)},
	{ "cit_continue", static_cast< int >(cit_continue)},
	{ "cit_return", static_cast< int >(cit_return)},
	{ "cit_goto", static_cast< int >(cit_goto)},
	{ "cit_asm", static_cast< int >(cit_asm)},
	{ "cit_end", static_cast< int >(cit_end)},
	{ "CV_FAST", static_cast< int >(0x0000)},
	{ "CV_PRUNE", static_cast< int >(0x0001)},
	{ "CV_PARENTS", static_cast< int >(0x0002)},
	{ "CV_POST", static_cast< int >(0x0004)},
	{ "CV_RESTART", static_cast< int >(0x0008)},
	{ "CV_INSNS", static_cast< int >(0x0010)},
	{ "CMAT_ZERO", static_cast< int >(CMAT_ZERO)},
	{ "CMAT_BUILT", static_cast< int >(CMAT_BUILT)},
	{ "CMAT_TRANS1", static_cast< int >(CMAT_TRANS1)},
	{ "CMAT_NICE", static_cast< int >(CMAT_NICE)},
	{ "CMAT_TRANS2", static_cast< int >(CMAT_TRANS2)},
	{ "CMAT_CPA", static_cast< int >(CMAT_CPA)},
	{ "CMAT_TRANS3", static_cast< int >(CMAT_TRANS3)},
	{ "CMAT_CASTED", static_cast< int >(CMAT_CASTED)},
	{ "CMAT_FINAL", static_cast< int >(CMAT_FINAL)},
	{ "ITP_EMPTY", static_cast< int >(ITP_EMPTY)},
	{ "ITP_ARG1", static_cast< int >(ITP_ARG1)},
	{ "ITP_ARG64", static_cast< int >(ITP_ARG64)},
	{ "ITP_BRACE1", static_cast< int >(ITP_BRACE1)},
	{ "ITP_INNER_LAST", static_cast< int >(ITP_INNER_LAST)},
	{ "ITP_ASM", static_cast< int >(ITP_ASM)},
	{ "ITP_ELSE", static_cast< int >(ITP_ELSE)},
	{ "ITP_DO", static_cast< int >(ITP_DO)},
	{ "ITP_SEMI", static_cast< int >(ITP_SEMI)},
	{ "ITP_CURLY1", static_cast< int >(ITP_CURLY1)},
	{ "ITP_CURLY2", static_cast< int >(ITP_CURLY2)},
	{ "ITP_BRACE2", static_cast< int >(ITP_BRACE2)},
	{ "ITP_COLON", static_cast< int >(ITP_COLON)},
	{ "ITP_BLOCK1", static_cast< int >(ITP_BLOCK1)},
	{ "ITP_BLOCK2", static_cast< int >(ITP_BLOCK2)},
	{ "ITP_CASE", static_cast< int >(ITP_CASE)},
	{ "ITP_SIGN", static_cast< int >(ITP_SIGN)},
	{ "RETRIEVE_ONCE", static_cast< int >(RETRIEVE_ONCE)},
	{ "RETRIEVE_ALWAYS", static_cast< int >(RETRIEVE_ALWAYS)},
	{ "EXFL_CPADONE", static_cast< int >(0x0001)},
	{ "EXFL_LVALUE", static_cast< int >(0x0002)},
	{ "EXFL_FPOP", static_cast< int >(0x0004)},
	{ "EXFL_ALONE", static_cast< int >(0x0008)},
	{ "EXFL_CSTR", static_cast< int >(0x0010)},
	{ "EXFL_PARTIAL", static_cast< int >(0x0020)},
	{ "EXFL_UNDEF", static_cast< int >(0x0040)},
	{ "EXFL_JUMPOUT", static_cast< int >(0x0080)},
	{ "EXFL_VFTABLE", static_cast< int >(0x0100)},
	{ "EXFL_ALL", static_cast< int >(0x01FF)},
	{ "CALC_CURLY_BRACES", static_cast< int >(CALC_CURLY_BRACES)},
	{ "NO_CURLY_BRACES", static_cast< int >(NO_CURLY_BRACES)},
	{ "USE_CURLY_BRACES", static_cast< int >(USE_CURLY_BRACES)},
	{ "CFL_FINAL", static_cast< int >(0x0001)},
	{ "CFL_HELPER", static_cast< int >(0x0002)},
	{ "ANCHOR_INDEX", static_cast< int >(0x1FFFFFFF)},
	{ "ANCHOR_MASK", static_cast< int >(0xC0000000)},
	{ "ANCHOR_CITEM", static_cast< int >(0x00000000)},
	{ "ANCHOR_LVAR", static_cast< int >(0x40000000)},
	{ "ANCHOR_ITP", static_cast< int >(0x80000000)},
	{ "ANCHOR_BLKCMT", static_cast< int >(0x20000000)},
	{ "VDI_NONE", static_cast< int >(VDI_NONE)},
	{ "VDI_EXPR", static_cast< int >(VDI_EXPR)},
	{ "VDI_LVAR", static_cast< int >(VDI_LVAR)},
	{ "VDI_FUNC", static_cast< int >(VDI_FUNC)},
	{ "VDI_TAIL", static_cast< int >(VDI_TAIL)},
	{ "GLN_CURRENT", static_cast< int >(0x01)},
	{ "GLN_GOTO_TARGET", static_cast< int >(0x02)},
	{ "GLN_ALL", static_cast< int >(0x03)},
	{ "FORBID_UNUSED_LABELS", static_cast< int >(FORBID_UNUSED_LABELS)},
	{ "ALLOW_UNUSED_LABELS", static_cast< int >(ALLOW_UNUSED_LABELS)},
	{ "CIT_COLLAPSED", static_cast< int >(0x0001)},
	{ "CFS_BOUNDS", static_cast< int >(0x0001)},
	{ "CFS_TEXT", static_cast< int >(0x0002)},
	{ "CFS_LVARS_HIDDEN", static_cast< int >(0x0004)},
	{ "DECOMP_NO_WAIT", static_cast< int >(0x0001)},
	{ "DECOMP_NO_CACHE", static_cast< int >(0x0002)},
	{ "DECOMP_NO_FRAME", static_cast< int >(0x0004)},
	{ "DECOMP_WARNINGS", static_cast< int >(0x0008)},
	{ "hxe_flowchart", static_cast< int >(hxe_flowchart)},
	{ "hxe_stkpnts", static_cast< int >(hxe_stkpnts)},
	{ "hxe_prolog", static_cast< int >(hxe_prolog)},
	{ "hxe_microcode", static_cast< int >(hxe_microcode)},
	{ "hxe_preoptimized", static_cast< int >(hxe_preoptimized)},
	{ "hxe_locopt", static_cast< int >(hxe_locopt)},
	{ "hxe_prealloc", static_cast< int >(hxe_prealloc)},
	{ "hxe_glbopt", static_cast< int >(hxe_glbopt)},
	{ "hxe_structural", static_cast< int >(hxe_structural)},
	{ "hxe_maturity", static_cast< int >(hxe_maturity)},
	{ "hxe_interr", static_cast< int >(hxe_interr)},
	{ "hxe_combine", static_cast< int >(hxe_combine)},
	{ "hxe_print_func", static_cast< int >(hxe_print_func)},
	{ "hxe_func_printed", static_cast< int >(hxe_func_printed)},
	{ "hxe_resolve_stkaddrs", static_cast< int >(hxe_resolve_stkaddrs)},
	{ "hxe_open_pseudocode", static_cast< int >(hxe_open_pseudocode)},
	{ "hxe_switch_pseudocode", static_cast< int >(hxe_switch_pseudocode)},
	{ "hxe_refresh_pseudocode", static_cast< int >(hxe_refresh_pseudocode)},
	{ "hxe_close_pseudocode", static_cast< int >(hxe_close_pseudocode)},
	{ "hxe_keyboard", static_cast< int >(hxe_keyboard)},
	{ "hxe_right_click", static_cast< int >(hxe_right_click)},
	{ "hxe_double_click", static_cast< int >(hxe_double_click)},
	{ "hxe_curpos", static_cast< int >(hxe_curpos)},
	{ "hxe_create_hint", static_cast< int >(hxe_create_hint)},
	{ "hxe_text_ready", static_cast< int >(hxe_text_ready)},
	{ "hxe_populating_popup", static_cast< int >(hxe_populating_popup)},
	{ "lxe_lvar_name_changed", static_cast< int >(lxe_lvar_name_changed)},
	{ "lxe_lvar_type_changed", static_cast< int >(lxe_lvar_type_changed)},
	{ "lxe_lvar_cmt_changed", static_cast< int >(lxe_lvar_cmt_changed)},
	{ "lxe_lvar_mapping_changed", static_cast< int >(lxe_lvar_mapping_changed)},
	{ "hxe_cmt_changed", static_cast< int >(hxe_cmt_changed)},
	{ "USE_KEYBOARD", static_cast< int >(USE_KEYBOARD)},
	{ "USE_MOUSE", static_cast< int >(USE_MOUSE)},
	{ "VDUI_VISIBLE", static_cast< int >(0x0001)},
	{ "VDUI_VALID", static_cast< int >(0x0002)},
	{ "VDUI_LOCKED", static_cast< int >(0x0004)},
	{ "hx_user_numforms_begin", static_cast< int >(hx_user_numforms_begin)},
	{ "hx_user_numforms_end", static_cast< int >(hx_user_numforms_end)},
	{ "hx_user_numforms_next", static_cast< int >(hx_user_numforms_next)},
	{ "hx_user_numforms_prev", static_cast< int >(hx_user_numforms_prev)},
	{ "hx_user_numforms_first", static_cast< int >(hx_user_numforms_first)},
	{ "hx_user_numforms_second", static_cast< int >(hx_user_numforms_second)},
	{ "hx_user_numforms_find", static_cast< int >(hx_user_numforms_find)},
	{ "hx_user_numforms_insert", static_cast< int >(hx_user_numforms_insert)},
	{ "hx_user_numforms_erase", static_cast< int >(hx_user_numforms_erase)},
	{ "hx_user_numforms_clear", static_cast< int >(hx_user_numforms_clear)},
	{ "hx_user_numforms_size", static_cast< int >(hx_user_numforms_size)},
	{ "hx_user_numforms_free", static_cast< int >(hx_user_numforms_free)},
	{ "hx_user_numforms_new", static_cast< int >(hx_user_numforms_new)},
	{ "hx_lvar_mapping_begin", static_cast< int >(hx_lvar_mapping_begin)},
	{ "hx_lvar_mapping_end", static_cast< int >(hx_lvar_mapping_end)},
	{ "hx_lvar_mapping_next", static_cast< int >(hx_lvar_mapping_next)},
	{ "hx_lvar_mapping_prev", static_cast< int >(hx_lvar_mapping_prev)},
	{ "hx_lvar_mapping_first", static_cast< int >(hx_lvar_mapping_first)},
	{ "hx_lvar_mapping_second", static_cast< int >(hx_lvar_mapping_second)},
	{ "hx_lvar_mapping_find", static_cast< int >(hx_lvar_mapping_find)},
	{ "hx_lvar_mapping_insert", static_cast< int >(hx_lvar_mapping_insert)},
	{ "hx_lvar_mapping_erase", static_cast< int >(hx_lvar_mapping_erase)},
	{ "hx_lvar_mapping_clear", static_cast< int >(hx_lvar_mapping_clear)},
	{ "hx_lvar_mapping_size", static_cast< int >(hx_lvar_mapping_size)},
	{ "hx_lvar_mapping_free", static_cast< int >(hx_lvar_mapping_free)},
	{ "hx_lvar_mapping_new", static_cast< int >(hx_lvar_mapping_new)},
	{ "hx_udcall_map_begin", static_cast< int >(hx_udcall_map_begin)},
	{ "hx_udcall_map_end", static_cast< int >(hx_udcall_map_end)},
	{ "hx_udcall_map_next", static_cast< int >(hx_udcall_map_next)},
	{ "hx_udcall_map_prev", static_cast< int >(hx_udcall_map_prev)},
	{ "hx_udcall_map_first", static_cast< int >(hx_udcall_map_first)},
	{ "hx_udcall_map_second", static_cast< int >(hx_udcall_map_second)},
	{ "hx_udcall_map_find", static_cast< int >(hx_udcall_map_find)},
	{ "hx_udcall_map_insert", static_cast< int >(hx_udcall_map_insert)},
	{ "hx_udcall_map_erase", static_cast< int >(hx_udcall_map_erase)},
	{ "hx_udcall_map_clear", static_cast< int >(hx_udcall_map_clear)},
	{ "hx_udcall_map_size", static_cast< int >(hx_udcall_map_size)},
	{ "hx_udcall_map_free", static_cast< int >(hx_udcall_map_free)},
	{ "hx_udcall_map_new", static_cast< int >(hx_udcall_map_new)},
	{ "hx_user_cmts_begin", static_cast< int >(hx_user_cmts_begin)},
	{ "hx_user_cmts_end", static_cast< int >(hx_user_cmts_end)},
	{ "hx_user_cmts_next", static_cast< int >(hx_user_cmts_next)},
	{ "hx_user_cmts_prev", static_cast< int >(hx_user_cmts_prev)},
	{ "hx_user_cmts_first", static_cast< int >(hx_user_cmts_first)},
	{ "hx_user_cmts_second", static_cast< int >(hx_user_cmts_second)},
	{ "hx_user_cmts_find", static_cast< int >(hx_user_cmts_find)},
	{ "hx_user_cmts_insert", static_cast< int >(hx_user_cmts_insert)},
	{ "hx_user_cmts_erase", static_cast< int >(hx_user_cmts_erase)},
	{ "hx_user_cmts_clear", static_cast< int >(hx_user_cmts_clear)},
	{ "hx_user_cmts_size", static_cast< int >(hx_user_cmts_size)},
	{ "hx_user_cmts_free", static_cast< int >(hx_user_cmts_free)},
	{ "hx_user_cmts_new", static_cast< int >(hx_user_cmts_new)},
	{ "hx_user_iflags_begin", static_cast< int >(hx_user_iflags_begin)},
	{ "hx_user_iflags_end", static_cast< int >(hx_user_iflags_end)},
	{ "hx_user_iflags_next", static_cast< int >(hx_user_iflags_next)},
	{ "hx_user_iflags_prev", static_cast< int >(hx_user_iflags_prev)},
	{ "hx_user_iflags_first", static_cast< int >(hx_user_iflags_first)},
	{ "hx_user_iflags_second", static_cast< int >(hx_user_iflags_second)},
	{ "hx_user_iflags_find", static_cast< int >(hx_user_iflags_find)},
	{ "hx_user_iflags_insert", static_cast< int >(hx_user_iflags_insert)},
	{ "hx_user_iflags_erase", static_cast< int >(hx_user_iflags_erase)},
	{ "hx_user_iflags_clear", static_cast< int >(hx_user_iflags_clear)},
	{ "hx_user_iflags_size", static_cast< int >(hx_user_iflags_size)},
	{ "hx_user_iflags_free", static_cast< int >(hx_user_iflags_free)},
	{ "hx_user_iflags_new", static_cast< int >(hx_user_iflags_new)},
	{ "hx_user_unions_begin", static_cast< int >(hx_user_unions_begin)},
	{ "hx_user_unions_end", static_cast< int >(hx_user_unions_end)},
	{ "hx_user_unions_next", static_cast< int >(hx_user_unions_next)},
	{ "hx_user_unions_prev", static_cast< int >(hx_user_unions_prev)},
	{ "hx_user_unions_first", static_cast< int >(hx_user_unions_first)},
	{ "hx_user_unions_second", static_cast< int >(hx_user_unions_second)},
	{ "hx_user_unions_find", static_cast< int >(hx_user_unions_find)},
	{ "hx_user_unions_insert", static_cast< int >(hx_user_unions_insert)},
	{ "hx_user_unions_erase", static_cast< int >(hx_user_unions_erase)},
	{ "hx_user_unions_clear", static_cast< int >(hx_user_unions_clear)},
	{ "hx_user_unions_size", static_cast< int >(hx_user_unions_size)},
	{ "hx_user_unions_free", static_cast< int >(hx_user_unions_free)},
	{ "hx_user_unions_new", static_cast< int >(hx_user_unions_new)},
	{ "hx_user_labels_begin", static_cast< int >(hx_user_labels_begin)},
	{ "hx_user_labels_end", static_cast< int >(hx_user_labels_end)},
	{ "hx_user_labels_next", static_cast< int >(hx_user_labels_next)},
	{ "hx_user_labels_prev", static_cast< int >(hx_user_labels_prev)},
	{ "hx_user_labels_first", static_cast< int >(hx_user_labels_first)},
	{ "hx_user_labels_second", static_cast< int >(hx_user_labels_second)},
	{ "hx_user_labels_find", static_cast< int >(hx_user_labels_find)},
	{ "hx_user_labels_insert", static_cast< int >(hx_user_labels_insert)},
	{ "hx_user_labels_erase", static_cast< int >(hx_user_labels_erase)},
	{ "hx_user_labels_clear", static_cast< int >(hx_user_labels_clear)},
	{ "hx_user_labels_size", static_cast< int >(hx_user_labels_size)},
	{ "hx_user_labels_free", static_cast< int >(hx_user_labels_free)},
	{ "hx_user_labels_new", static_cast< int >(hx_user_labels_new)},
	{ "hx_eamap_begin", static_cast< int >(hx_eamap_begin)},
	{ "hx_eamap_end", static_cast< int >(hx_eamap_end)},
	{ "hx_eamap_next", static_cast< int >(hx_eamap_next)},
	{ "hx_eamap_prev", static_cast< int >(hx_eamap_prev)},
	{ "hx_eamap_first", static_cast< int >(hx_eamap_first)},
	{ "hx_eamap_second", static_cast< int >(hx_eamap_second)},
	{ "hx_eamap_find", static_cast< int >(hx_eamap_find)},
	{ "hx_eamap_insert", static_cast< int >(hx_eamap_insert)},
	{ "hx_eamap_erase", static_cast< int >(hx_eamap_erase)},
	{ "hx_eamap_clear", static_cast< int >(hx_eamap_clear)},
	{ "hx_eamap_size", static_cast< int >(hx_eamap_size)},
	{ "hx_eamap_free", static_cast< int >(hx_eamap_free)},
	{ "hx_eamap_new", static_cast< int >(hx_eamap_new)},
	{ "hx_boundaries_begin", static_cast< int >(hx_boundaries_begin)},
	{ "hx_boundaries_end", static_cast< int >(hx_boundaries_end)},
	{ "hx_boundaries_next", static_cast< int >(hx_boundaries_next)},
	{ "hx_boundaries_prev", static_cast< int >(hx_boundaries_prev)},
	{ "hx_boundaries_first", static_cast< int >(hx_boundaries_first)},
	{ "hx_boundaries_second", static_cast< int >(hx_boundaries_second)},
	{ "hx_boundaries_find", static_cast< int >(hx_boundaries_find)},
	{ "hx_boundaries_insert", static_cast< int >(hx_boundaries_insert)},
	{ "hx_boundaries_erase", static_cast< int >(hx_boundaries_erase)},
	{ "hx_boundaries_clear", static_cast< int >(hx_boundaries_clear)},
	{ "hx_boundaries_size", static_cast< int >(hx_boundaries_size)},
	{ "hx_boundaries_free", static_cast< int >(hx_boundaries_free)},
	{ "hx_boundaries_new", static_cast< int >(hx_boundaries_new)},
	{ "hx_block_chains_begin", static_cast< int >(hx_block_chains_begin)},
	{ "hx_block_chains_end", static_cast< int >(hx_block_chains_end)},
	{ "hx_block_chains_next", static_cast< int >(hx_block_chains_next)},
	{ "hx_block_chains_prev", static_cast< int >(hx_block_chains_prev)},
	{ "hx_block_chains_get", static_cast< int >(hx_block_chains_get)},
	{ "hx_block_chains_find", static_cast< int >(hx_block_chains_find)},
	{ "hx_block_chains_insert", static_cast< int >(hx_block_chains_insert)},
	{ "hx_block_chains_erase", static_cast< int >(hx_block_chains_erase)},
	{ "hx_block_chains_clear", static_cast< int >(hx_block_chains_clear)},
	{ "hx_block_chains_size", static_cast< int >(hx_block_chains_size)},
	{ "hx_block_chains_free", static_cast< int >(hx_block_chains_free)},
	{ "hx_block_chains_new", static_cast< int >(hx_block_chains_new)},
	{ "hx_valrng_t_clear", static_cast< int >(hx_valrng_t_clear)},
	{ "hx_valrng_t_copy", static_cast< int >(hx_valrng_t_copy)},
	{ "hx_valrng_t_assign", static_cast< int >(hx_valrng_t_assign)},
	{ "hx_valrng_t_compare", static_cast< int >(hx_valrng_t_compare)},
	{ "hx_valrng_t_set_eq", static_cast< int >(hx_valrng_t_set_eq)},
	{ "hx_valrng_t_set_cmp", static_cast< int >(hx_valrng_t_set_cmp)},
	{ "hx_valrng_t_reduce_size", static_cast< int >(hx_valrng_t_reduce_size)},
	{ "hx_valrng_t_intersect_with", static_cast< int >(hx_valrng_t_intersect_with)},
	{ "hx_valrng_t_unite_with", static_cast< int >(hx_valrng_t_unite_with)},
	{ "hx_valrng_t_inverse", static_cast< int >(hx_valrng_t_inverse)},
	{ "hx_valrng_t_has", static_cast< int >(hx_valrng_t_has)},
	{ "hx_valrng_t_print", static_cast< int >(hx_valrng_t_print)},
	{ "hx_valrng_t_dstr", static_cast< int >(hx_valrng_t_dstr)},
	{ "hx_valrng_t_cvt_to_single_value", static_cast< int >(hx_valrng_t_cvt_to_single_value)},
	{ "hx_valrng_t_cvt_to_cmp", static_cast< int >(hx_valrng_t_cvt_to_cmp)},
	{ "hx_get_merror_desc", static_cast< int >(hx_get_merror_desc)},
	{ "hx_reg2mreg", static_cast< int >(hx_reg2mreg)},
	{ "hx_mreg2reg", static_cast< int >(hx_mreg2reg)},
	{ "hx_install_optinsn_handler", static_cast< int >(hx_install_optinsn_handler)},
	{ "hx_remove_optinsn_handler", static_cast< int >(hx_remove_optinsn_handler)},
	{ "hx_install_optblock_handler", static_cast< int >(hx_install_optblock_handler)},
	{ "hx_remove_optblock_handler", static_cast< int >(hx_remove_optblock_handler)},
	{ "hx_must_mcode_close_block", static_cast< int >(hx_must_mcode_close_block)},
	{ "hx_is_mcode_propagatable", static_cast< int >(hx_is_mcode_propagatable)},
	{ "hx_negate_mcode_relation", static_cast< int >(hx_negate_mcode_relation)},
	{ "hx_swap_mcode_relation", static_cast< int >(hx_swap_mcode_relation)},
	{ "hx_get_signed_mcode", static_cast< int >(hx_get_signed_mcode)},
	{ "hx_get_unsigned_mcode", static_cast< int >(hx_get_unsigned_mcode)},
	{ "hx_mcode_modifies_d", static_cast< int >(hx_mcode_modifies_d)},
	{ "hx_operand_locator_t_compare", static_cast< int >(hx_operand_locator_t_compare)},
	{ "hx_vd_printer_t_print", static_cast< int >(hx_vd_printer_t_print)},
	{ "hx_file_printer_t_print", static_cast< int >(hx_file_printer_t_print)},
	{ "hx_qstring_printer_t_print", static_cast< int >(hx_qstring_printer_t_print)},
	{ "hx_dstr", static_cast< int >(hx_dstr)},
	{ "hx_is_type_correct", static_cast< int >(hx_is_type_correct)},
	{ "hx_is_small_struni", static_cast< int >(hx_is_small_struni)},
	{ "hx_is_nonbool_type", static_cast< int >(hx_is_nonbool_type)},
	{ "hx_is_bool_type", static_cast< int >(hx_is_bool_type)},
	{ "hx_partial_type_num", static_cast< int >(hx_partial_type_num)},
	{ "hx_get_float_type", static_cast< int >(hx_get_float_type)},
	{ "hx_get_int_type_by_width_and_sign", static_cast< int >(hx_get_int_type_by_width_and_sign)},
	{ "hx_get_unk_type", static_cast< int >(hx_get_unk_type)},
	{ "hx_dummy_ptrtype", static_cast< int >(hx_dummy_ptrtype)},
	{ "hx_get_member_type", static_cast< int >(hx_get_member_type)},
	{ "hx_make_pointer", static_cast< int >(hx_make_pointer)},
	{ "hx_create_typedef", static_cast< int >(hx_create_typedef)},
	{ "hx_get_type", static_cast< int >(hx_get_type)},
	{ "hx_set_type", static_cast< int >(hx_set_type)},
	{ "hx_vdloc_t_dstr", static_cast< int >(hx_vdloc_t_dstr)},
	{ "hx_vdloc_t_compare", static_cast< int >(hx_vdloc_t_compare)},
	{ "hx_vdloc_t_is_aliasable", static_cast< int >(hx_vdloc_t_is_aliasable)},
	{ "hx_print_vdloc", static_cast< int >(hx_print_vdloc)},
	{ "hx_arglocs_overlap", static_cast< int >(hx_arglocs_overlap)},
	{ "hx_lvar_locator_t_compare", static_cast< int >(hx_lvar_locator_t_compare)},
	{ "hx_lvar_locator_t_dstr", static_cast< int >(hx_lvar_locator_t_dstr)},
	{ "hx_lvar_t_dstr", static_cast< int >(hx_lvar_t_dstr)},
	{ "hx_lvar_t_is_promoted_arg", static_cast< int >(hx_lvar_t_is_promoted_arg)},
	{ "hx_lvar_t_accepts_type", static_cast< int >(hx_lvar_t_accepts_type)},
	{ "hx_lvar_t_set_lvar_type", static_cast< int >(hx_lvar_t_set_lvar_type)},
	{ "hx_lvar_t_set_width", static_cast< int >(hx_lvar_t_set_width)},
	{ "hx_lvar_t_append_list", static_cast< int >(hx_lvar_t_append_list)},
	{ "hx_lvars_t_find_stkvar", static_cast< int >(hx_lvars_t_find_stkvar)},
	{ "hx_lvars_t_find", static_cast< int >(hx_lvars_t_find)},
	{ "hx_lvars_t_find_lvar", static_cast< int >(hx_lvars_t_find_lvar)},
	{ "hx_restore_user_lvar_settings", static_cast< int >(hx_restore_user_lvar_settings)},
	{ "hx_save_user_lvar_settings", static_cast< int >(hx_save_user_lvar_settings)},
	{ "hx_modify_user_lvars", static_cast< int >(hx_modify_user_lvars)},
	{ "hx_restore_user_defined_calls", static_cast< int >(hx_restore_user_defined_calls)},
	{ "hx_save_user_defined_calls", static_cast< int >(hx_save_user_defined_calls)},
	{ "hx_parse_user_call", static_cast< int >(hx_parse_user_call)},
	{ "hx_convert_to_user_call", static_cast< int >(hx_convert_to_user_call)},
	{ "hx_install_microcode_filter", static_cast< int >(hx_install_microcode_filter)},
	{ "hx_udc_filter_t_init", static_cast< int >(hx_udc_filter_t_init)},
	{ "hx_udc_filter_t_apply", static_cast< int >(hx_udc_filter_t_apply)},
	{ "hx_bitset_t_bitset_t", static_cast< int >(hx_bitset_t_bitset_t)},
	{ "hx_bitset_t_copy", static_cast< int >(hx_bitset_t_copy)},
	{ "hx_bitset_t_add", static_cast< int >(hx_bitset_t_add)},
	{ "hx_bitset_t_add_", static_cast< int >(hx_bitset_t_add_)},
	{ "hx_bitset_t_add__", static_cast< int >(hx_bitset_t_add__)},
	{ "hx_bitset_t_sub", static_cast< int >(hx_bitset_t_sub)},
	{ "hx_bitset_t_sub_", static_cast< int >(hx_bitset_t_sub_)},
	{ "hx_bitset_t_sub__", static_cast< int >(hx_bitset_t_sub__)},
	{ "hx_bitset_t_cut_at", static_cast< int >(hx_bitset_t_cut_at)},
	{ "hx_bitset_t_shift_down", static_cast< int >(hx_bitset_t_shift_down)},
	{ "hx_bitset_t_has", static_cast< int >(hx_bitset_t_has)},
	{ "hx_bitset_t_has_all", static_cast< int >(hx_bitset_t_has_all)},
	{ "hx_bitset_t_has_any", static_cast< int >(hx_bitset_t_has_any)},
	{ "hx_bitset_t_dstr", static_cast< int >(hx_bitset_t_dstr)},
	{ "hx_bitset_t_empty", static_cast< int >(hx_bitset_t_empty)},
	{ "hx_bitset_t_count", static_cast< int >(hx_bitset_t_count)},
	{ "hx_bitset_t_count_", static_cast< int >(hx_bitset_t_count_)},
	{ "hx_bitset_t_last", static_cast< int >(hx_bitset_t_last)},
	{ "hx_bitset_t_fill_with_ones", static_cast< int >(hx_bitset_t_fill_with_ones)},
	{ "hx_bitset_t_has_common", static_cast< int >(hx_bitset_t_has_common)},
	{ "hx_bitset_t_intersect", static_cast< int >(hx_bitset_t_intersect)},
	{ "hx_bitset_t_is_subset_of", static_cast< int >(hx_bitset_t_is_subset_of)},
	{ "hx_bitset_t_compare", static_cast< int >(hx_bitset_t_compare)},
	{ "hx_bitset_t_goup", static_cast< int >(hx_bitset_t_goup)},
	{ "hx_ivl_t_dstr", static_cast< int >(hx_ivl_t_dstr)},
	{ "hx_ivl_t_compare", static_cast< int >(hx_ivl_t_compare)},
	{ "hx_ivlset_t_add", static_cast< int >(hx_ivlset_t_add)},
	{ "hx_ivlset_t_add_", static_cast< int >(hx_ivlset_t_add_)},
	{ "hx_ivlset_t_addmasked", static_cast< int >(hx_ivlset_t_addmasked)},
	{ "hx_ivlset_t_sub", static_cast< int >(hx_ivlset_t_sub)},
	{ "hx_ivlset_t_sub_", static_cast< int >(hx_ivlset_t_sub_)},
	{ "hx_ivlset_t_has_common", static_cast< int >(hx_ivlset_t_has_common)},
	{ "hx_ivlset_t_print", static_cast< int >(hx_ivlset_t_print)},
	{ "hx_ivlset_t_dstr", static_cast< int >(hx_ivlset_t_dstr)},
	{ "hx_ivlset_t_count", static_cast< int >(hx_ivlset_t_count)},
	{ "hx_ivlset_t_has_common_", static_cast< int >(hx_ivlset_t_has_common_)},
	{ "hx_ivlset_t_contains", static_cast< int >(hx_ivlset_t_contains)},
	{ "hx_ivlset_t_includes", static_cast< int >(hx_ivlset_t_includes)},
	{ "hx_ivlset_t_intersect", static_cast< int >(hx_ivlset_t_intersect)},
	{ "hx_ivlset_t_compare", static_cast< int >(hx_ivlset_t_compare)},
	{ "hx_get_mreg_name", static_cast< int >(hx_get_mreg_name)},
	{ "hx_rlist_t_print", static_cast< int >(hx_rlist_t_print)},
	{ "hx_rlist_t_dstr", static_cast< int >(hx_rlist_t_dstr)},
	{ "hx_mlist_t_addmem", static_cast< int >(hx_mlist_t_addmem)},
	{ "hx_mlist_t_print", static_cast< int >(hx_mlist_t_print)},
	{ "hx_mlist_t_dstr", static_cast< int >(hx_mlist_t_dstr)},
	{ "hx_mlist_t_compare", static_cast< int >(hx_mlist_t_compare)},
	{ "hx_lvar_ref_t_compare", static_cast< int >(hx_lvar_ref_t_compare)},
	{ "hx_lvar_ref_t_var", static_cast< int >(hx_lvar_ref_t_var)},
	{ "hx_stkvar_ref_t_compare", static_cast< int >(hx_stkvar_ref_t_compare)},
	{ "hx_stkvar_ref_t_get_stkvar", static_cast< int >(hx_stkvar_ref_t_get_stkvar)},
	{ "hx_fnumber_t_print", static_cast< int >(hx_fnumber_t_print)},
	{ "hx_fnumber_t_dstr", static_cast< int >(hx_fnumber_t_dstr)},
	{ "hx_mop_t_copy", static_cast< int >(hx_mop_t_copy)},
	{ "hx_mop_t_assign", static_cast< int >(hx_mop_t_assign)},
	{ "hx_mop_t_swap", static_cast< int >(hx_mop_t_swap)},
	{ "hx_mop_t_erase", static_cast< int >(hx_mop_t_erase)},
	{ "hx_mop_t_print", static_cast< int >(hx_mop_t_print)},
	{ "hx_mop_t_dstr", static_cast< int >(hx_mop_t_dstr)},
	{ "hx_mop_t_create_from_mlist", static_cast< int >(hx_mop_t_create_from_mlist)},
	{ "hx_mop_t_create_from_ivlset", static_cast< int >(hx_mop_t_create_from_ivlset)},
	{ "hx_mop_t_create_from_vdloc", static_cast< int >(hx_mop_t_create_from_vdloc)},
	{ "hx_mop_t_create_from_scattered_vdloc", static_cast< int >(hx_mop_t_create_from_scattered_vdloc)},
	{ "hx_mop_t_create_from_insn", static_cast< int >(hx_mop_t_create_from_insn)},
	{ "hx_mop_t_make_number", static_cast< int >(hx_mop_t_make_number)},
	{ "hx_mop_t_make_fpnum", static_cast< int >(hx_mop_t_make_fpnum)},
	{ "hx_mop_t_make_reg_pair", static_cast< int >(hx_mop_t_make_reg_pair)},
	{ "hx_mop_t_make_helper", static_cast< int >(hx_mop_t_make_helper)},
	{ "hx_mop_t_is_bit_reg", static_cast< int >(hx_mop_t_is_bit_reg)},
	{ "hx_mop_t_may_use_aliased_memory", static_cast< int >(hx_mop_t_may_use_aliased_memory)},
	{ "hx_mop_t_is01", static_cast< int >(hx_mop_t_is01)},
	{ "hx_mop_t_is_sign_extended_from", static_cast< int >(hx_mop_t_is_sign_extended_from)},
	{ "hx_mop_t_is_zero_extended_from", static_cast< int >(hx_mop_t_is_zero_extended_from)},
	{ "hx_mop_t_equal_mops", static_cast< int >(hx_mop_t_equal_mops)},
	{ "hx_mop_t_lexcompare", static_cast< int >(hx_mop_t_lexcompare)},
	{ "hx_mop_t_for_all_ops", static_cast< int >(hx_mop_t_for_all_ops)},
	{ "hx_mop_t_for_all_scattered_submops", static_cast< int >(hx_mop_t_for_all_scattered_submops)},
	{ "hx_mop_t_is_constant", static_cast< int >(hx_mop_t_is_constant)},
	{ "hx_mop_t_get_stkoff", static_cast< int >(hx_mop_t_get_stkoff)},
	{ "hx_mop_t_make_low_half", static_cast< int >(hx_mop_t_make_low_half)},
	{ "hx_mop_t_make_high_half", static_cast< int >(hx_mop_t_make_high_half)},
	{ "hx_mop_t_make_first_half", static_cast< int >(hx_mop_t_make_first_half)},
	{ "hx_mop_t_make_second_half", static_cast< int >(hx_mop_t_make_second_half)},
	{ "hx_mop_t_shift_mop", static_cast< int >(hx_mop_t_shift_mop)},
	{ "hx_mop_t_change_size", static_cast< int >(hx_mop_t_change_size)},
	{ "hx_mop_t_preserve_side_effects", static_cast< int >(hx_mop_t_preserve_side_effects)},
	{ "hx_mop_t_apply_ld_mcode", static_cast< int >(hx_mop_t_apply_ld_mcode)},
	{ "hx_mcallarg_t_print", static_cast< int >(hx_mcallarg_t_print)},
	{ "hx_mcallarg_t_dstr", static_cast< int >(hx_mcallarg_t_dstr)},
	{ "hx_mcallarg_t_set_regarg", static_cast< int >(hx_mcallarg_t_set_regarg)},
	{ "hx_mcallinfo_t_lexcompare", static_cast< int >(hx_mcallinfo_t_lexcompare)},
	{ "hx_mcallinfo_t_set_type", static_cast< int >(hx_mcallinfo_t_set_type)},
	{ "hx_mcallinfo_t_get_type", static_cast< int >(hx_mcallinfo_t_get_type)},
	{ "hx_mcallinfo_t_print", static_cast< int >(hx_mcallinfo_t_print)},
	{ "hx_mcallinfo_t_dstr", static_cast< int >(hx_mcallinfo_t_dstr)},
	{ "hx_mcases_t_compare", static_cast< int >(hx_mcases_t_compare)},
	{ "hx_mcases_t_print", static_cast< int >(hx_mcases_t_print)},
	{ "hx_mcases_t_dstr", static_cast< int >(hx_mcases_t_dstr)},
	{ "hx_vivl_t_extend_to_cover", static_cast< int >(hx_vivl_t_extend_to_cover)},
	{ "hx_vivl_t_intersect", static_cast< int >(hx_vivl_t_intersect)},
	{ "hx_vivl_t_print", static_cast< int >(hx_vivl_t_print)},
	{ "hx_vivl_t_dstr", static_cast< int >(hx_vivl_t_dstr)},
	{ "hx_chain_t_print", static_cast< int >(hx_chain_t_print)},
	{ "hx_chain_t_dstr", static_cast< int >(hx_chain_t_dstr)},
	{ "hx_chain_t_append_list", static_cast< int >(hx_chain_t_append_list)},
	{ "hx_block_chains_t_get_chain", static_cast< int >(hx_block_chains_t_get_chain)},
	{ "hx_block_chains_t_print", static_cast< int >(hx_block_chains_t_print)},
	{ "hx_block_chains_t_dstr", static_cast< int >(hx_block_chains_t_dstr)},
	{ "hx_graph_chains_t_for_all_chains", static_cast< int >(hx_graph_chains_t_for_all_chains)},
	{ "hx_graph_chains_t_release", static_cast< int >(hx_graph_chains_t_release)},
	{ "hx_minsn_t_init", static_cast< int >(hx_minsn_t_init)},
	{ "hx_minsn_t_copy", static_cast< int >(hx_minsn_t_copy)},
	{ "hx_minsn_t_swap", static_cast< int >(hx_minsn_t_swap)},
	{ "hx_minsn_t_print", static_cast< int >(hx_minsn_t_print)},
	{ "hx_minsn_t_dstr", static_cast< int >(hx_minsn_t_dstr)},
	{ "hx_minsn_t_setaddr", static_cast< int >(hx_minsn_t_setaddr)},
	{ "hx_minsn_t_optimize_subtree", static_cast< int >(hx_minsn_t_optimize_subtree)},
	{ "hx_minsn_t_for_all_ops", static_cast< int >(hx_minsn_t_for_all_ops)},
	{ "hx_minsn_t_for_all_insns", static_cast< int >(hx_minsn_t_for_all_insns)},
	{ "hx_minsn_t__make_nop", static_cast< int >(hx_minsn_t__make_nop)},
	{ "hx_minsn_t_equal_insns", static_cast< int >(hx_minsn_t_equal_insns)},
	{ "hx_minsn_t_lexcompare", static_cast< int >(hx_minsn_t_lexcompare)},
	{ "hx_minsn_t_is_noret_call", static_cast< int >(hx_minsn_t_is_noret_call)},
	{ "hx_minsn_t_is_helper", static_cast< int >(hx_minsn_t_is_helper)},
	{ "hx_minsn_t_find_call", static_cast< int >(hx_minsn_t_find_call)},
	{ "hx_minsn_t_has_side_effects", static_cast< int >(hx_minsn_t_has_side_effects)},
	{ "hx_minsn_t_find_opcode", static_cast< int >(hx_minsn_t_find_opcode)},
	{ "hx_minsn_t_find_ins_op", static_cast< int >(hx_minsn_t_find_ins_op)},
	{ "hx_minsn_t_find_num_op", static_cast< int >(hx_minsn_t_find_num_op)},
	{ "hx_minsn_t_modifes_d", static_cast< int >(hx_minsn_t_modifes_d)},
	{ "hx_minsn_t_is_between", static_cast< int >(hx_minsn_t_is_between)},
	{ "hx_minsn_t_may_use_aliased_memory", static_cast< int >(hx_minsn_t_may_use_aliased_memory)},
	{ "hx_getf_reginsn", static_cast< int >(hx_getf_reginsn)},
	{ "hx_getb_reginsn", static_cast< int >(hx_getb_reginsn)},
	{ "hx_mblock_t_init", static_cast< int >(hx_mblock_t_init)},
	{ "hx_mblock_t_print", static_cast< int >(hx_mblock_t_print)},
	{ "hx_mblock_t_dump", static_cast< int >(hx_mblock_t_dump)},
	{ "hx_mblock_t_vdump_block", static_cast< int >(hx_mblock_t_vdump_block)},
	{ "hx_mblock_t_insert_into_block", static_cast< int >(hx_mblock_t_insert_into_block)},
	{ "hx_mblock_t_remove_from_block", static_cast< int >(hx_mblock_t_remove_from_block)},
	{ "hx_mblock_t_for_all_insns", static_cast< int >(hx_mblock_t_for_all_insns)},
	{ "hx_mblock_t_for_all_ops", static_cast< int >(hx_mblock_t_for_all_ops)},
	{ "hx_mblock_t_for_all_uses", static_cast< int >(hx_mblock_t_for_all_uses)},
	{ "hx_mblock_t_optimize_insn", static_cast< int >(hx_mblock_t_optimize_insn)},
	{ "hx_mblock_t_optimize_block", static_cast< int >(hx_mblock_t_optimize_block)},
	{ "hx_mblock_t_build_lists", static_cast< int >(hx_mblock_t_build_lists)},
	{ "hx_mblock_t_append_use_list", static_cast< int >(hx_mblock_t_append_use_list)},
	{ "hx_mblock_t_append_def_list", static_cast< int >(hx_mblock_t_append_def_list)},
	{ "hx_mblock_t_build_use_list", static_cast< int >(hx_mblock_t_build_use_list)},
	{ "hx_mblock_t_build_def_list", static_cast< int >(hx_mblock_t_build_def_list)},
	{ "hx_mblock_t_find_first_use", static_cast< int >(hx_mblock_t_find_first_use)},
	{ "hx_mblock_t_find_redefinition", static_cast< int >(hx_mblock_t_find_redefinition)},
	{ "hx_mblock_t_is_rhs_redefined", static_cast< int >(hx_mblock_t_is_rhs_redefined)},
	{ "hx_mblock_t_find_access", static_cast< int >(hx_mblock_t_find_access)},
	{ "hx_mblock_t_get_valranges", static_cast< int >(hx_mblock_t_get_valranges)},
	{ "hx_mbl_array_t_idaloc2vd", static_cast< int >(hx_mbl_array_t_idaloc2vd)},
	{ "hx_mbl_array_t_vd2idaloc", static_cast< int >(hx_mbl_array_t_vd2idaloc)},
	{ "hx_mbl_array_t_term", static_cast< int >(hx_mbl_array_t_term)},
	{ "hx_mbl_array_t_optimize_local", static_cast< int >(hx_mbl_array_t_optimize_local)},
	{ "hx_mbl_array_t_build_graph", static_cast< int >(hx_mbl_array_t_build_graph)},
	{ "hx_mbl_array_t_get_graph", static_cast< int >(hx_mbl_array_t_get_graph)},
	{ "hx_mbl_array_t_analyze_calls", static_cast< int >(hx_mbl_array_t_analyze_calls)},
	{ "hx_mbl_array_t_optimize_global", static_cast< int >(hx_mbl_array_t_optimize_global)},
	{ "hx_mbl_array_t_alloc_lvars", static_cast< int >(hx_mbl_array_t_alloc_lvars)},
	{ "hx_mbl_array_t_dump", static_cast< int >(hx_mbl_array_t_dump)},
	{ "hx_mbl_array_t_vdump_mba", static_cast< int >(hx_mbl_array_t_vdump_mba)},
	{ "hx_mbl_array_t_print", static_cast< int >(hx_mbl_array_t_print)},
	{ "hx_mbl_array_t_verify", static_cast< int >(hx_mbl_array_t_verify)},
	{ "hx_mbl_array_t_mark_chains_dirty", static_cast< int >(hx_mbl_array_t_mark_chains_dirty)},
	{ "hx_mbl_array_t_insert_block", static_cast< int >(hx_mbl_array_t_insert_block)},
	{ "hx_mbl_array_t_remove_block", static_cast< int >(hx_mbl_array_t_remove_block)},
	{ "hx_mbl_array_t_remove_empty_blocks", static_cast< int >(hx_mbl_array_t_remove_empty_blocks)},
	{ "hx_mbl_array_t_combine_blocks", static_cast< int >(hx_mbl_array_t_combine_blocks)},
	{ "hx_mbl_array_t_for_all_ops", static_cast< int >(hx_mbl_array_t_for_all_ops)},
	{ "hx_mbl_array_t_for_all_insns", static_cast< int >(hx_mbl_array_t_for_all_insns)},
	{ "hx_mbl_array_t_for_all_topinsns", static_cast< int >(hx_mbl_array_t_for_all_topinsns)},
	{ "hx_mbl_array_t_find_mop", static_cast< int >(hx_mbl_array_t_find_mop)},
	{ "hx_mbl_array_t_arg", static_cast< int >(hx_mbl_array_t_arg)},
	{ "hx_mbl_array_t_serialize", static_cast< int >(hx_mbl_array_t_serialize)},
	{ "hx_mbl_array_t_deserialize", static_cast< int >(hx_mbl_array_t_deserialize)},
	{ "hx_mbl_graph_t_is_accessed_globally", static_cast< int >(hx_mbl_graph_t_is_accessed_globally)},
	{ "hx_mbl_graph_t_get_ud", static_cast< int >(hx_mbl_graph_t_get_ud)},
	{ "hx_mbl_graph_t_get_du", static_cast< int >(hx_mbl_graph_t_get_du)},
	{ "hx_codegen_t_emit", static_cast< int >(hx_codegen_t_emit)},
	{ "hx_codegen_t_emit_", static_cast< int >(hx_codegen_t_emit_)},
	{ "hx_is_kreg", static_cast< int >(hx_is_kreg)},
	{ "hx_get_temp_regs", static_cast< int >(hx_get_temp_regs)},
	{ "hx_get_hexrays_version", static_cast< int >(hx_get_hexrays_version)},
	{ "hx_open_pseudocode", static_cast< int >(hx_open_pseudocode)},
	{ "hx_close_pseudocode", static_cast< int >(hx_close_pseudocode)},
	{ "hx_get_widget_vdui", static_cast< int >(hx_get_widget_vdui)},
	{ "hx_decompile_many", static_cast< int >(hx_decompile_many)},
	{ "hx_hexrays_failure_t_desc", static_cast< int >(hx_hexrays_failure_t_desc)},
	{ "hx_send_database", static_cast< int >(hx_send_database)},
	{ "hx_gco_info_t_append_to_list", static_cast< int >(hx_gco_info_t_append_to_list)},
	{ "hx_get_current_operand", static_cast< int >(hx_get_current_operand)},
	{ "hx_remitem", static_cast< int >(hx_remitem)},
	{ "hx_negated_relation", static_cast< int >(hx_negated_relation)},
	{ "hx_swapped_relation", static_cast< int >(hx_swapped_relation)},
	{ "hx_get_op_signness", static_cast< int >(hx_get_op_signness)},
	{ "hx_asgop", static_cast< int >(hx_asgop)},
	{ "hx_asgop_revert", static_cast< int >(hx_asgop_revert)},
	{ "hx_cnumber_t_print", static_cast< int >(hx_cnumber_t_print)},
	{ "hx_cnumber_t_value", static_cast< int >(hx_cnumber_t_value)},
	{ "hx_cnumber_t_assign", static_cast< int >(hx_cnumber_t_assign)},
	{ "hx_cnumber_t_compare", static_cast< int >(hx_cnumber_t_compare)},
	{ "hx_var_ref_t_compare", static_cast< int >(hx_var_ref_t_compare)},
	{ "hx_ctree_visitor_t_apply_to", static_cast< int >(hx_ctree_visitor_t_apply_to)},
	{ "hx_ctree_visitor_t_apply_to_exprs", static_cast< int >(hx_ctree_visitor_t_apply_to_exprs)},
	{ "hx_ctree_parentee_t_recalc_parent_types", static_cast< int >(hx_ctree_parentee_t_recalc_parent_types)},
	{ "hx_cfunc_parentee_t_calc_rvalue_type", static_cast< int >(hx_cfunc_parentee_t_calc_rvalue_type)},
	{ "hx_citem_locator_t_compare", static_cast< int >(hx_citem_locator_t_compare)},
	{ "hx_citem_t_contains_expr", static_cast< int >(hx_citem_t_contains_expr)},
	{ "hx_citem_t_contains_label", static_cast< int >(hx_citem_t_contains_label)},
	{ "hx_citem_t_find_parent_of", static_cast< int >(hx_citem_t_find_parent_of)},
	{ "hx_citem_t_find_closest_addr", static_cast< int >(hx_citem_t_find_closest_addr)},
	{ "hx_cexpr_t_assign", static_cast< int >(hx_cexpr_t_assign)},
	{ "hx_cexpr_t_compare", static_cast< int >(hx_cexpr_t_compare)},
	{ "hx_cexpr_t_replace_by", static_cast< int >(hx_cexpr_t_replace_by)},
	{ "hx_cexpr_t_cleanup", static_cast< int >(hx_cexpr_t_cleanup)},
	{ "hx_cexpr_t_put_number", static_cast< int >(hx_cexpr_t_put_number)},
	{ "hx_cexpr_t_print1", static_cast< int >(hx_cexpr_t_print1)},
	{ "hx_cexpr_t_calc_type", static_cast< int >(hx_cexpr_t_calc_type)},
	{ "hx_cexpr_t_equal_effect", static_cast< int >(hx_cexpr_t_equal_effect)},
	{ "hx_cexpr_t_is_child_of", static_cast< int >(hx_cexpr_t_is_child_of)},
	{ "hx_cexpr_t_contains_operator", static_cast< int >(hx_cexpr_t_contains_operator)},
	{ "hx_cexpr_t_get_high_nbit_bound", static_cast< int >(hx_cexpr_t_get_high_nbit_bound)},
	{ "hx_cexpr_t_get_low_nbit_bound", static_cast< int >(hx_cexpr_t_get_low_nbit_bound)},
	{ "hx_cexpr_t_requires_lvalue", static_cast< int >(hx_cexpr_t_requires_lvalue)},
	{ "hx_cexpr_t_has_side_effects", static_cast< int >(hx_cexpr_t_has_side_effects)},
	{ "hx_cif_t_assign", static_cast< int >(hx_cif_t_assign)},
	{ "hx_cif_t_compare", static_cast< int >(hx_cif_t_compare)},
	{ "hx_cloop_t_assign", static_cast< int >(hx_cloop_t_assign)},
	{ "hx_cfor_t_compare", static_cast< int >(hx_cfor_t_compare)},
	{ "hx_cwhile_t_compare", static_cast< int >(hx_cwhile_t_compare)},
	{ "hx_cdo_t_compare", static_cast< int >(hx_cdo_t_compare)},
	{ "hx_creturn_t_compare", static_cast< int >(hx_creturn_t_compare)},
	{ "hx_cgoto_t_compare", static_cast< int >(hx_cgoto_t_compare)},
	{ "hx_casm_t_compare", static_cast< int >(hx_casm_t_compare)},
	{ "hx_cinsn_t_assign", static_cast< int >(hx_cinsn_t_assign)},
	{ "hx_cinsn_t_compare", static_cast< int >(hx_cinsn_t_compare)},
	{ "hx_cinsn_t_replace_by", static_cast< int >(hx_cinsn_t_replace_by)},
	{ "hx_cinsn_t_cleanup", static_cast< int >(hx_cinsn_t_cleanup)},
	{ "hx_cinsn_t_new_insn", static_cast< int >(hx_cinsn_t_new_insn)},
	{ "hx_cinsn_t_create_if", static_cast< int >(hx_cinsn_t_create_if)},
	{ "hx_cinsn_t_print", static_cast< int >(hx_cinsn_t_print)},
	{ "hx_cinsn_t_print1", static_cast< int >(hx_cinsn_t_print1)},
	{ "hx_cinsn_t_is_ordinary_flow", static_cast< int >(hx_cinsn_t_is_ordinary_flow)},
	{ "hx_cinsn_t_contains_insn", static_cast< int >(hx_cinsn_t_contains_insn)},
	{ "hx_cinsn_t_collect_free_breaks", static_cast< int >(hx_cinsn_t_collect_free_breaks)},
	{ "hx_cinsn_t_collect_free_continues", static_cast< int >(hx_cinsn_t_collect_free_continues)},
	{ "hx_cblock_t_compare", static_cast< int >(hx_cblock_t_compare)},
	{ "hx_carglist_t_compare", static_cast< int >(hx_carglist_t_compare)},
	{ "hx_ccase_t_compare", static_cast< int >(hx_ccase_t_compare)},
	{ "hx_ccases_t_compare", static_cast< int >(hx_ccases_t_compare)},
	{ "hx_cswitch_t_compare", static_cast< int >(hx_cswitch_t_compare)},
	{ "hx_ctree_item_t_get_memptr", static_cast< int >(hx_ctree_item_t_get_memptr)},
	{ "hx_ctree_item_t_get_lvar", static_cast< int >(hx_ctree_item_t_get_lvar)},
	{ "hx_ctree_item_t_get_ea", static_cast< int >(hx_ctree_item_t_get_ea)},
	{ "hx_ctree_item_t_get_label_num", static_cast< int >(hx_ctree_item_t_get_label_num)},
	{ "hx_lnot", static_cast< int >(hx_lnot)},
	{ "hx_new_block", static_cast< int >(hx_new_block)},
	{ "hx_vcreate_helper", static_cast< int >(hx_vcreate_helper)},
	{ "hx_vcall_helper", static_cast< int >(hx_vcall_helper)},
	{ "hx_make_num", static_cast< int >(hx_make_num)},
	{ "hx_make_ref", static_cast< int >(hx_make_ref)},
	{ "hx_dereference", static_cast< int >(hx_dereference)},
	{ "hx_save_user_labels", static_cast< int >(hx_save_user_labels)},
	{ "hx_save_user_cmts", static_cast< int >(hx_save_user_cmts)},
	{ "hx_save_user_numforms", static_cast< int >(hx_save_user_numforms)},
	{ "hx_save_user_iflags", static_cast< int >(hx_save_user_iflags)},
	{ "hx_save_user_unions", static_cast< int >(hx_save_user_unions)},
	{ "hx_restore_user_labels", static_cast< int >(hx_restore_user_labels)},
	{ "hx_restore_user_cmts", static_cast< int >(hx_restore_user_cmts)},
	{ "hx_restore_user_numforms", static_cast< int >(hx_restore_user_numforms)},
	{ "hx_restore_user_iflags", static_cast< int >(hx_restore_user_iflags)},
	{ "hx_restore_user_unions", static_cast< int >(hx_restore_user_unions)},
	{ "hx_cfunc_t_build_c_tree", static_cast< int >(hx_cfunc_t_build_c_tree)},
	{ "hx_cfunc_t_verify", static_cast< int >(hx_cfunc_t_verify)},
	{ "hx_cfunc_t_print_dcl", static_cast< int >(hx_cfunc_t_print_dcl)},
	{ "hx_cfunc_t_print_func", static_cast< int >(hx_cfunc_t_print_func)},
	{ "hx_cfunc_t_get_func_type", static_cast< int >(hx_cfunc_t_get_func_type)},
	{ "hx_cfunc_t_get_lvars", static_cast< int >(hx_cfunc_t_get_lvars)},
	{ "hx_cfunc_t_get_stkoff_delta", static_cast< int >(hx_cfunc_t_get_stkoff_delta)},
	{ "hx_cfunc_t_find_label", static_cast< int >(hx_cfunc_t_find_label)},
	{ "hx_cfunc_t_remove_unused_labels", static_cast< int >(hx_cfunc_t_remove_unused_labels)},
	{ "hx_cfunc_t_get_user_cmt", static_cast< int >(hx_cfunc_t_get_user_cmt)},
	{ "hx_cfunc_t_set_user_cmt", static_cast< int >(hx_cfunc_t_set_user_cmt)},
	{ "hx_cfunc_t_get_user_iflags", static_cast< int >(hx_cfunc_t_get_user_iflags)},
	{ "hx_cfunc_t_set_user_iflags", static_cast< int >(hx_cfunc_t_set_user_iflags)},
	{ "hx_cfunc_t_has_orphan_cmts", static_cast< int >(hx_cfunc_t_has_orphan_cmts)},
	{ "hx_cfunc_t_del_orphan_cmts", static_cast< int >(hx_cfunc_t_del_orphan_cmts)},
	{ "hx_cfunc_t_get_user_union_selection", static_cast< int >(hx_cfunc_t_get_user_union_selection)},
	{ "hx_cfunc_t_set_user_union_selection", static_cast< int >(hx_cfunc_t_set_user_union_selection)},
	{ "hx_cfunc_t_get_line_item", static_cast< int >(hx_cfunc_t_get_line_item)},
	{ "hx_cfunc_t_get_warnings", static_cast< int >(hx_cfunc_t_get_warnings)},
	{ "hx_cfunc_t_get_eamap", static_cast< int >(hx_cfunc_t_get_eamap)},
	{ "hx_cfunc_t_get_boundaries", static_cast< int >(hx_cfunc_t_get_boundaries)},
	{ "hx_cfunc_t_get_pseudocode", static_cast< int >(hx_cfunc_t_get_pseudocode)},
	{ "hx_cfunc_t_gather_derefs", static_cast< int >(hx_cfunc_t_gather_derefs)},
	{ "hx_cfunc_t_find_item_coords", static_cast< int >(hx_cfunc_t_find_item_coords)},
	{ "hx_cfunc_t_cleanup", static_cast< int >(hx_cfunc_t_cleanup)},
	{ "hx_decompile", static_cast< int >(hx_decompile)},
	{ "hx_gen_microcode", static_cast< int >(hx_gen_microcode)},
	{ "hx_mark_cfunc_dirty", static_cast< int >(hx_mark_cfunc_dirty)},
	{ "hx_clear_cached_cfuncs", static_cast< int >(hx_clear_cached_cfuncs)},
	{ "hx_has_cached_cfunc", static_cast< int >(hx_has_cached_cfunc)},
	{ "hx_get_ctype_name", static_cast< int >(hx_get_ctype_name)},
	{ "hx_create_field_name", static_cast< int >(hx_create_field_name)},
	{ "hx_install_hexrays_callback", static_cast< int >(hx_install_hexrays_callback)},
	{ "hx_remove_hexrays_callback", static_cast< int >(hx_remove_hexrays_callback)},
	{ "hx_vdui_t_set_locked", static_cast< int >(hx_vdui_t_set_locked)},
	{ "hx_vdui_t_refresh_view", static_cast< int >(hx_vdui_t_refresh_view)},
	{ "hx_vdui_t_refresh_ctext", static_cast< int >(hx_vdui_t_refresh_ctext)},
	{ "hx_vdui_t_switch_to", static_cast< int >(hx_vdui_t_switch_to)},
	{ "hx_vdui_t_get_number", static_cast< int >(hx_vdui_t_get_number)},
	{ "hx_vdui_t_get_current_label", static_cast< int >(hx_vdui_t_get_current_label)},
	{ "hx_vdui_t_clear", static_cast< int >(hx_vdui_t_clear)},
	{ "hx_vdui_t_refresh_cpos", static_cast< int >(hx_vdui_t_refresh_cpos)},
	{ "hx_vdui_t_get_current_item", static_cast< int >(hx_vdui_t_get_current_item)},
	{ "hx_vdui_t_ui_rename_lvar", static_cast< int >(hx_vdui_t_ui_rename_lvar)},
	{ "hx_vdui_t_rename_lvar", static_cast< int >(hx_vdui_t_rename_lvar)},
	{ "hx_vdui_t_ui_set_call_type", static_cast< int >(hx_vdui_t_ui_set_call_type)},
	{ "hx_vdui_t_ui_set_lvar_type", static_cast< int >(hx_vdui_t_ui_set_lvar_type)},
	{ "hx_vdui_t_set_lvar_type", static_cast< int >(hx_vdui_t_set_lvar_type)},
	{ "hx_vdui_t_ui_edit_lvar_cmt", static_cast< int >(hx_vdui_t_ui_edit_lvar_cmt)},
	{ "hx_vdui_t_set_lvar_cmt", static_cast< int >(hx_vdui_t_set_lvar_cmt)},
	{ "hx_vdui_t_ui_map_lvar", static_cast< int >(hx_vdui_t_ui_map_lvar)},
	{ "hx_vdui_t_ui_unmap_lvar", static_cast< int >(hx_vdui_t_ui_unmap_lvar)},
	{ "hx_vdui_t_map_lvar", static_cast< int >(hx_vdui_t_map_lvar)},
	{ "hx_vdui_t_set_strmem_type", static_cast< int >(hx_vdui_t_set_strmem_type)},
	{ "hx_vdui_t_rename_strmem", static_cast< int >(hx_vdui_t_rename_strmem)},
	{ "hx_vdui_t_set_global_type", static_cast< int >(hx_vdui_t_set_global_type)},
	{ "hx_vdui_t_rename_global", static_cast< int >(hx_vdui_t_rename_global)},
	{ "hx_vdui_t_rename_label", static_cast< int >(hx_vdui_t_rename_label)},
	{ "hx_vdui_t_jump_enter", static_cast< int >(hx_vdui_t_jump_enter)},
	{ "hx_vdui_t_ctree_to_disasm", static_cast< int >(hx_vdui_t_ctree_to_disasm)},
	{ "hx_vdui_t_calc_cmt_type", static_cast< int >(hx_vdui_t_calc_cmt_type)},
	{ "hx_vdui_t_edit_cmt", static_cast< int >(hx_vdui_t_edit_cmt)},
	{ "hx_vdui_t_edit_func_cmt", static_cast< int >(hx_vdui_t_edit_func_cmt)},
	{ "hx_vdui_t_del_orphan_cmts", static_cast< int >(hx_vdui_t_del_orphan_cmts)},
	{ "hx_vdui_t_set_num_radix", static_cast< int >(hx_vdui_t_set_num_radix)},
	{ "hx_vdui_t_set_num_enum", static_cast< int >(hx_vdui_t_set_num_enum)},
	{ "hx_vdui_t_set_num_stroff", static_cast< int >(hx_vdui_t_set_num_stroff)},
	{ "hx_vdui_t_invert_sign", static_cast< int >(hx_vdui_t_invert_sign)},
	{ "hx_vdui_t_invert_bits", static_cast< int >(hx_vdui_t_invert_bits)},
	{ "hx_vdui_t_collapse_item", static_cast< int >(hx_vdui_t_collapse_item)},
	{ "hx_vdui_t_collapse_lvars", static_cast< int >(hx_vdui_t_collapse_lvars)},
	{ "hx_vdui_t_split_item", static_cast< int >(hx_vdui_t_split_item)},
	{ "hx_hexrays_alloc", static_cast< int >(hx_hexrays_alloc)},
	{ "hx_hexrays_free", static_cast< int >(hx_hexrays_free)},
	{ "hx_vdui_t_set_noptr_lvar", static_cast< int >(hx_vdui_t_set_noptr_lvar)},

};

for ( size_t _cidx = 0; _cidx < qnumber(cis); ++_cidx )
{
  const ci_t &ci = cis[_cidx];
  PyObject *o = SWIG_From_int(static_cast< int >(ci.val));
  SWIG_Python_SetConstant(d, ci.name, o);
}
  SWIG_PYTHON_INITIALIZE_THREADS;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

