

ida_ida.ABI_8ALIGN4
"""
4 byte alignment for 8byte scalars (__int64/double) inside structures?
"""

ida_ida.ABI_BIGARG_ALIGN
"""
(e.g. __int64 argument should be 8byte aligned on some 32bit
platforms)

use natural type alignment for argument if the alignment exceeds
native word size
"""

ida_ida.ABI_GCC_LAYOUT
"""
use gcc layout for udts (used for mingw)
"""

ida_ida.ABI_HARD_FLOAT
"""
use the floating-point register set
"""

ida_ida.ABI_PACK_STKARGS
"""
do not align stack arguments to stack slots
"""

ida_ida.ABI_SET_BY_USER
"""
compiler/abi were set by user flag and require SETCOMP_BY_USER flag to
be changed
"""

ida_ida.ABI_STACK_LDBL
"""
long double areuments are passed on stack
"""

ida_ida.ABI_STACK_VARARGS
"""
varargs are always passed on stack (even when there are free
registers)
"""

ida_ida.AF2_DOEH
"""
Handle EH information.
"""

ida_ida.AF2_DORTTI
"""
Handle RTTI information
"""

ida_ida.AF_ANORET
"""
Perform 'no-return' analysis.
"""

ida_ida.AF_CHKUNI
"""
Check for unicode strings.
"""

ida_ida.AF_CODE
"""
Trace execution flow.
"""

ida_ida.AF_DATOFF
"""
Automatically convert data to offsets.
"""

ida_ida.AF_DOCODE
"""
Coagulate code segs at the final pass.
"""

ida_ida.AF_DODATA
"""
Coagulate data segs at the final pass.
"""

ida_ida.AF_DREFOFF
"""
Create offset if data xref to seg32 exists.
"""

ida_ida.AF_FINAL
"""
Final pass of analysis.
"""

ida_ida.AF_FIXUP
"""
Create offsets and segments using fixup info.
"""

ida_ida.AF_FLIRT
"""
Use flirt signatures.
"""

ida_ida.AF_FTAIL
"""
Create function tails.
"""

ida_ida.AF_HFLIRT
"""
Automatically hide library functions.
"""

ida_ida.AF_IMMOFF
"""
Convert 32bit instruction operand to offset.
"""

ida_ida.AF_JFUNC
"""
Rename jump functions as j_...
"""

ida_ida.AF_JUMPTBL
"""
Locate and create jump tables.
"""

ida_ida.AF_LVAR
"""
Create stack variables.
"""

ida_ida.AF_MARKCODE
"""
Mark typical code sequences as code.
"""

ida_ida.AF_MEMFUNC
"""
Try to guess member function types.
"""

ida_ida.AF_NULLSUB
"""
Rename empty functions as nullsub_...
"""

ida_ida.AF_PROC
"""
Create functions if call is present.
"""

ida_ida.AF_PROCPTR
"""
Create function if data xref data->code32 exists.
"""

ida_ida.AF_PURDAT
"""
Control flow to data segment is ignored.
"""

ida_ida.AF_REGARG
"""
Propagate register argument information.
"""

ida_ida.AF_SIGCMT
"""
Append a signature name comment for recognized anonymous library
functions.
"""

ida_ida.AF_SIGMLT
"""
Allow recognition of several copies of the same function.
"""

ida_ida.AF_STKARG
"""
Propagate stack argument information.
"""

ida_ida.AF_STRLIT
"""
Create string literal if data xref exists.
"""

ida_ida.AF_TRACE
"""
Trace stack pointer.
"""

ida_ida.AF_TRFUNC
"""
Truncate functions upon code deletion.
"""

ida_ida.AF_UNK
"""
Delete instructions with no xrefs.
"""

ida_ida.AF_USED
"""
Analyze and create all xrefs.
"""

ida_ida.AF_VERSP
"""
Perform full SP-analysis. ({verify_sp})
"""

ida_ida.DEMNAM_CMNT
"""
display demangled names as comments
"""

ida_ida.DEMNAM_FIRST
"""
override type info
"""

ida_ida.DEMNAM_GCC3
"""
assume gcc3 names (valid for gnu compiler)
"""

ida_ida.DEMNAM_MASK
"""
mask for name form
"""

ida_ida.DEMNAM_NAME
"""
display demangled names as regular names
"""

ida_ida.DEMNAM_NONE
"""
don't display demangled names
"""

ida_ida.IDB_COMPRESSED
"""
compress & pack database components
"""

ida_ida.IDB_PACKED
"""
pack database components into .idb
"""

ida_ida.IDB_UNPACKED
"""
leave database components unpacked
"""

ida_ida.INFFL_ALLASM
"""
the target assembler

may use constructs not supported by
"""

ida_ida.INFFL_AUTO
"""
Autoanalysis is enabled?
"""

ida_ida.INFFL_CHKOPS
"""
check manual operands? (unused)
"""

ida_ida.INFFL_GRAPH_VIEW
"""
currently using graph options ({graph})
"""

ida_ida.INFFL_LOADIDC
"""
loading an idc file that contains database info
"""

ida_ida.INFFL_NMOPS
"""
allow non-matched operands? (unused)
"""

ida_ida.INFFL_NOUSER
"""
do not store user info in the database
"""

ida_ida.INFFL_READONLY
"""
(internal) temporary interdiction to modify the database
"""

ida_ida.LFLG_64BIT
"""
64-bit program?
"""

ida_ida.LFLG_COMPRESS
"""
compress the database?
"""

ida_ida.LFLG_DBG_NOPATH
"""
do not store input full path in debugger process options
"""

ida_ida.LFLG_FLAT_OFF32
"""
treat 'REF_OFF32' as 32-bit offset for 16bit segments (otherwise try
SEG16:OFF16)
"""

ida_ida.LFLG_IS_DLL
"""
Is dynamic library?
"""

ida_ida.LFLG_KERNMODE
"""
is kernel mode binary?
"""

ida_ida.LFLG_MSF
"""
Byte order: is MSB first?
"""

ida_ida.LFLG_PACK
"""
pack the database?
"""

ida_ida.LFLG_PC_FLAT
"""
32-bit program?
"""

ida_ida.LFLG_PC_FPP
"""
decode floating point processor instructions?
"""

ida_ida.LFLG_SNAPSHOT
"""
memory snapshot was taken?
"""

ida_ida.LFLG_WIDE_HBF
"""
(wide bytes: {dnbits} > 8)

Bit order of wide bytes: high byte first?
"""

ida_ida.LMT_EMPTY
"""
empty lines at the end of basic blocks
"""

ida_ida.LMT_THICK
"""
thick borders
"""

ida_ida.LMT_THIN
"""
thin borders
"""

ida_ida.LN_AUTO
"""
include autogenerated names
"""

ida_ida.LN_NORMAL
"""
include normal names
"""

ida_ida.LN_PUBLIC
"""
include public names
"""

ida_ida.LN_WEAK
"""
include weak names
"""

ida_ida.OFLG_GEN_ASSUME
"""
Generate 'assume' directives?
"""

ida_ida.OFLG_GEN_NULL
"""
Generate empty lines?
"""

ida_ida.OFLG_GEN_ORG
"""
Generate 'org' directives?
"""

ida_ida.OFLG_GEN_TRYBLKS
"""
Generate try/catch directives?
"""

ida_ida.OFLG_LZERO
"""
generate leading zeroes in numbers
"""

ida_ida.OFLG_PREF_SEG
"""
line prefixes with segment name?
"""

ida_ida.OFLG_SHOW_AUTO
"""
Display autoanalysis indicator?
"""

ida_ida.OFLG_SHOW_PREF
"""
Show line prefixes?
"""

ida_ida.OFLG_SHOW_VOID
"""
Display void marks?
"""

ida_ida.PREF_FNCOFF
"""
show function offsets?
"""

ida_ida.PREF_SEGADR
"""
show segment addresses?
"""

ida_ida.PREF_STACK
"""
show stack pointer?
"""

ida_ida.STRF_AUTO
"""
names have 'autogenerated' bit?
"""

ida_ida.STRF_COMMENT
"""
generate auto comment for string references?
"""

ida_ida.STRF_GEN
"""
generate names?
"""

ida_ida.STRF_SAVECASE
"""
preserve case of strings for identifiers
"""

ida_ida.STRF_SERIAL
"""
generate serial names?
"""

ida_ida.STRF_UNICODE
"""
unicode strings are present?
"""

ida_ida.SW_ALLCMT
"""
comment all lines?
"""

ida_ida.SW_LINNUM
"""
show source line numbers
"""

ida_ida.SW_NOCMT
"""
no comments at all
"""

ida_ida.SW_RPTCMT
"""
show repeatable comments?
"""

ida_ida.SW_SEGXRF
"""
show segments in xrefs?
"""

ida_ida.SW_SHHID_FUNC
"""
show hidden functions
"""

ida_ida.SW_SHHID_ITEM
"""
show hidden instructions
"""

ida_ida.SW_SHHID_SEGM
"""
show hidden segments
"""

ida_ida.SW_TESTMODE
"""
testida.idc is running
"""

ida_ida.SW_XRFFNC
"""
show function offsets?
"""

ida_ida.SW_XRFMRK
"""
show xref type marks?
"""

ida_ida.SW_XRFVAL
"""
show xref values? (otherwise-"...")
"""

ida_ida.UA_MAXOP
"""
max number of operands allowed for an instruction
"""