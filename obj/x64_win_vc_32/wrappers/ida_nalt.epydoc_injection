

ida_nalt.AFL_ALIGNFLOW
"""
the previous insn was created for alignment purposes only
"""

ida_nalt.AFL_BNOT0
"""
the 1st operand is bitwise negated
"""

ida_nalt.AFL_BNOT1
"""
the 2nd operand is bitwise negated
"""

ida_nalt.AFL_COLORED
"""
has user defined instruction color?
"""

ida_nalt.AFL_FIXEDSPD
"""
should not be modified by modules

sp delta value is fixed by analysis.
"""

ida_nalt.AFL_HIDDEN
"""
the item is hidden completely
"""

ida_nalt.AFL_LIB
"""
item from the standard library. low level flag, is used to set
'FUNC_LIB' of 'func_t'
"""

ida_nalt.AFL_LINNUM
"""
has line number info
"""

ida_nalt.AFL_LNAME
"""
has local name too ( 'FF_NAME' should be set)
"""

ida_nalt.AFL_LZERO0
"""
toggle leading zeroes for the 1st operand
"""

ida_nalt.AFL_LZERO1
"""
toggle leading zeroes for the 2nd operand
"""

ida_nalt.AFL_MANUAL
"""
the instruction/data is specified by the user
"""

ida_nalt.AFL_NOBRD
"""
the code/data border is hidden
"""

ida_nalt.AFL_NORET
"""
for imported function pointers: doesn't return. this flag can also be
used for any instruction which halts or finishes the program execution
"""

ida_nalt.AFL_NOTCODE
"""
autoanalysis should not create code here
"""

ida_nalt.AFL_NOTPROC
"""
autoanalysis should not create proc here
"""

ida_nalt.AFL_PUBNAM
"""
name is public (inter-file linkage)
"""

ida_nalt.AFL_RETFP
"""
function returns a floating point value
"""

ida_nalt.AFL_SIGN0
"""
code: toggle sign of the 1st operand
"""

ida_nalt.AFL_SIGN1
"""
code: toggle sign of the 2nd operand
"""

ida_nalt.AFL_TERSESTR
"""
terse structure variable display?
"""

ida_nalt.AFL_TI
"""
has typeinfo? ( 'NSUP_TYPEINFO' )
"""

ida_nalt.AFL_TI0
"""
has typeinfo for operand 0? ( 'NSUP_OPTYPES' )
"""

ida_nalt.AFL_TI1
"""
has typeinfo for operand 1? ( 'NSUP_OPTYPES' +1)
"""

ida_nalt.AFL_TILCMT
"""
has type comment? (such a comment may be changed by IDA)
"""

ida_nalt.AFL_USEMODSP
"""
example: pop [rsp+N]

insn modifes SP and uses the modified value
"""

ida_nalt.AFL_USERSP
"""
user-defined SP value
"""

ida_nalt.AFL_USERTI
"""
(comes from the user or type library)

the type information is definitive.
"""

ida_nalt.AFL_WEAKNAM
"""
name is weak
"""

ida_nalt.AFL_ZSTROFF
"""
display struct field name at 0 offset when displaying an offset.
example: {offset somestruct.field_0} if this flag is clear, then
{offset somestruct}
"""

ida_nalt.AP_ALLOWDUPS
"""
use 'dup' construct
"""

ida_nalt.AP_ARRAY
"""
create as array (this flag is not stored in database)
"""

ida_nalt.AP_IDXBASEMASK
"""
mask for number base of the indexes
"""

ida_nalt.AP_IDXBIN
"""
display indexes in binary
"""

ida_nalt.AP_IDXDEC
"""
display indexes in decimal
"""

ida_nalt.AP_IDXHEX
"""
display indexes in hex
"""

ida_nalt.AP_IDXOCT
"""
display indexes in octal
"""

ida_nalt.AP_INDEX
"""
display array element indexes as comments
"""

ida_nalt.AP_SIGNED
"""
treats numbers as signed
"""

ida_nalt.MAXSTRUCPATH
"""
maximal inclusion depth of unions
"""

ida_nalt.NALT_ABSBASE
"""
absolute segment location
"""

ida_nalt.NALT_AFLAGS
"""
additional flags for an item
"""

ida_nalt.NALT_ALIGN
"""
(should by equal to power of 2)

alignment value if the item is 'FF_ALIGN'
"""

ida_nalt.NALT_COLOR
"""
instruction/data background color
"""

ida_nalt.NALT_CREF_FROM
"""
code xref from, idx: source address
"""

ida_nalt.NALT_CREF_TO
"""
code xref to, idx: target address
"""

ida_nalt.NALT_DREF_FROM
"""
data xref from, idx: source address
"""

ida_nalt.NALT_DREF_TO
"""
data xref to, idx: target address
"""

ida_nalt.NALT_ENUM0
"""
enum id for the first operand
"""

ida_nalt.NALT_ENUM1
"""
enum id for the second operand
"""

ida_nalt.NALT_GR_LAYX
"""
group layout ptrs, hash: md5 of 'belongs'
"""

ida_nalt.NALT_LINNUM
"""
source line number
"""

ida_nalt.NALT_PURGE
"""
number of bytes purged from the stack when a function is called
indirectly
"""

ida_nalt.NALT_STRTYPE
"""
type of string item
"""

ida_nalt.NALT_STRUCT
"""
struct id
"""

ida_nalt.NALT_SWITCH
"""
switch idiom address (used at jump targets)
"""

ida_nalt.NSUP_ARGEAS
"""
instructions that initialize call arguments
"""

ida_nalt.NSUP_ARRAY
"""
array parameters
"""

ida_nalt.NSUP_CMT
"""
regular comment
"""

ida_nalt.NSUP_CUSTDT
"""
custom data type id
"""

ida_nalt.NSUP_FOP1
"""
forced operand 1
"""

ida_nalt.NSUP_FOP2
"""
forced operand 2
"""

ida_nalt.NSUP_FOP3
"""
forced operand 3
"""

ida_nalt.NSUP_FOP4
"""
forced operand 4
"""

ida_nalt.NSUP_FOP5
"""
forced operand 5
"""

ida_nalt.NSUP_FOP6
"""
forced operand 6
"""

ida_nalt.NSUP_FOP7
"""
forced operand 7
"""

ida_nalt.NSUP_FOP8
"""
forced operand 8
"""

ida_nalt.NSUP_FTAILS
"""
function tails or tail referers values NSUP_FTAILS..NSUP_FTAILS+0x1000
are reserved
"""

ida_nalt.NSUP_GROUP
"""
graph group information values NSUP_GROUP..NSUP_GROUP+0x1000 are
reserved
"""

ida_nalt.NSUP_GROUPS
"""
SEG_GRP: pack_dd encoded list of selectors.
"""

ida_nalt.NSUP_GR_INFO
"""
group node info: color, ea, text
"""

ida_nalt.NSUP_GR_LAYT
"""
group layouts, idx: layout pointer
"""

ida_nalt.NSUP_JINFO
"""
jump table info
"""

ida_nalt.NSUP_LLABEL
"""
local labels. values NSUP_LLABEL..NSUP_LLABEL+0x1000 are reserved
"""

ida_nalt.NSUP_MANUAL
"""
manual instruction. values NSUP_MANUAL..NSUP_MANUAL+0x1000 are
reserved
"""

ida_nalt.NSUP_OMFGRP
"""
OMF: group of segments (not used anymore)
"""

ida_nalt.NSUP_OPTYPES
"""
operand type information. values NSUP_OPTYPES..NSUP_OPTYPES+0x100000
are reserved
"""

ida_nalt.NSUP_OREF0
"""
outer complex reference information for operand 1
"""

ida_nalt.NSUP_OREF1
"""
outer complex reference information for operand 2
"""

ida_nalt.NSUP_OREF2
"""
outer complex reference information for operand 3
"""

ida_nalt.NSUP_OREF3
"""
outer complex reference information for operand 4
"""

ida_nalt.NSUP_OREF4
"""
outer complex reference information for operand 5
"""

ida_nalt.NSUP_OREF5
"""
outer complex reference information for operand 6
"""

ida_nalt.NSUP_OREF6
"""
outer complex reference information for operand 7
"""

ida_nalt.NSUP_OREF7
"""
outer complex reference information for operand 8
"""

ida_nalt.NSUP_POINTS
"""
SP change points blob (see funcs.cpp). values
NSUP_POINTS..NSUP_POINTS+0x1000 are reserved
"""

ida_nalt.NSUP_REF0
"""
complex reference information for operand 1
"""

ida_nalt.NSUP_REF1
"""
complex reference information for operand 2
"""

ida_nalt.NSUP_REF2
"""
complex reference information for operand 3
"""

ida_nalt.NSUP_REF3
"""
complex reference information for operand 4
"""

ida_nalt.NSUP_REF4
"""
complex reference information for operand 5
"""

ida_nalt.NSUP_REF5
"""
complex reference information for operand 6
"""

ida_nalt.NSUP_REF6
"""
complex reference information for operand 7
"""

ida_nalt.NSUP_REF7
"""
complex reference information for operand 8
"""

ida_nalt.NSUP_REGARG
"""
register argument type/name descriptions values
NSUP_REGARG..NSUP_REGARG+0x1000 are reserved
"""

ida_nalt.NSUP_REGVAR
"""
register variables. values NSUP_REGVAR..NSUP_REGVAR+0x1000 are
reserved
"""

ida_nalt.NSUP_REPCMT
"""
repeatable comment
"""

ida_nalt.NSUP_SEGTRANS
"""
segment translations
"""

ida_nalt.NSUP_STROFF0
"""
stroff: struct path for the first operand
"""

ida_nalt.NSUP_STROFF1
"""
stroff: struct path for the second operand
"""

ida_nalt.NSUP_SWITCH
"""
switch information
"""

ida_nalt.NSUP_TYPEINFO
"""
type information. values NSUP_TYPEINFO..NSUP_TYPEINFO+0x1000 are
reserved
"""

ida_nalt.NSUP_XREFPOS
"""
saved xref address and type in the xrefs window
"""

ida_nalt.PATCH_TAG
"""
Patch netnode tag.
"""

ida_nalt.REFINFO_CUSTOM
"""
a custom reference the kernel will call {notify}(ph.custom_offset,
.... that can change all arguments used for calculations. This flag is
useful for custom fixups
"""

ida_nalt.REFINFO_NOBASE
"""
don't create the base xref implies that the base can be any value nb:
base xrefs are created only if the offset base points to the middle of
a segment
"""

ida_nalt.REFINFO_PASTEND
"""
reference past an item it may point to an nonexistent address do not
destroy alignment dirs
"""

ida_nalt.REFINFO_RVAOFF
"""
based reference (rva) 'refinfo_t::base' will be forced to
'get_imagebase()' such a reference is displayed with the {a_rva}
keyword
"""

ida_nalt.REFINFO_SIGNEDOP
"""
the operand value is sign-extended (only supported for
REF_OFF8/16/32/64)
"""

ida_nalt.REFINFO_SUBTRACT
"""
the reference value is subtracted from the base value instead of (as
usual) being added to it
"""

ida_nalt.REFINFO_TYPE
"""
reference type
"""

ida_nalt.RIDX_ABINAME
"""
ABI name (processor specific)
"""

ida_nalt.RIDX_ARCHIVE_PATH
"""
archive file path
"""

ida_nalt.RIDX_C_MACROS
"""
C predefined macros.
"""

ida_nalt.RIDX_DBG_BINPATHS
"""
debug binary paths, occupies 20 indexes
"""

ida_nalt.RIDX_DUALOP_GRAPH
"""
Graph text representation options.
"""

ida_nalt.RIDX_DUALOP_TEXT
"""
Text text representation options.
"""

ida_nalt.RIDX_FILE_FORMAT_NAME
"""
file format name for loader modules
"""

ida_nalt.RIDX_GROUPS
"""
segment group information (see init_groups())
"""

ida_nalt.RIDX_H_PATH
"""
C header path.
"""

ida_nalt.RIDX_IDA_VERSION
"""
version of ida which created the database
"""

ida_nalt.RIDX_INCLUDE
"""
assembler include file name
"""

ida_nalt.RIDX_MD5
"""
MD5 of the input file.
"""

ida_nalt.RIDX_NOTEPAD
"""
notepad blob, occupies 1000 indexes (1MB of text)
"""

ida_nalt.RIDX_PROBLEMS
"""
problem lists
"""

ida_nalt.RIDX_SELECTED_EXTLANG
"""
last selected extlang name (from the execute script box)
"""

ida_nalt.RIDX_SELECTORS
"""
2..63 are for selector_t blob (see init_selectors())
"""

ida_nalt.RIDX_SHA256
"""
SHA256 of the input file.
"""

ida_nalt.RIDX_SMALL_IDC
"""
Instant IDC statements, blob.
"""

ida_nalt.RIDX_SMALL_IDC_OLD
"""
Instant IDC statements (obsolete)
"""

ida_nalt.RIDX_SRCDBG_PATHS
"""
source debug paths, occupies 20 indexes
"""

ida_nalt.RIDX_STR_ENCODINGS
"""
a list of encodings for the program strings
"""

ida_nalt.STRENC_DEFAULT
"""
use default encoding for this type (see 'get_default_encoding_idx()' )
"""

ida_nalt.STRENC_NONE
"""
force no-conversion encoding
"""

ida_nalt.STRTYPE_C
"""
Zero-terminated 16bit chars.
"""

ida_nalt.STRTYPE_C_16
"""
Zero-terminated 32bit chars.
"""

ida_nalt.STRTYPE_C_32
"""
Pascal-style, one-byte length prefix.
"""

ida_nalt.STRTYPE_LEN2
"""
Pascal-style, 16bit chars, two-byte length prefix.
"""

ida_nalt.STRTYPE_LEN2_16
"""
Pascal-style, four-byte length prefix.
"""

ida_nalt.STRTYPE_LEN4
"""
Pascal-style, 16bit chars, four-byte length prefix.
"""

ida_nalt.STRTYPE_PASCAL
"""
Pascal-style, 16bit chars, one-byte length prefix.
"""

ida_nalt.STRTYPE_PASCAL_16
"""
Pascal-style, two-byte length prefix.
"""

ida_nalt.STRTYPE_TERMCHR
"""
C-style string.

< Character-terminated string. The termination characters are kept in
the next bytes of string type.
"""

ida_nalt.SWI_CUSTOM
"""
custom jump table. {create_switch_xrefs} will be called to create code
xrefs for the table. Custom jump table must be created by the module
(see also 'SWI_STDTBL' )
"""

ida_nalt.SWI_DEFRET
"""
return in the default case (defjump==BADADDR)
"""

ida_nalt.SWI_DEF_IN_TBL
"""
default case is an entry in the jump table. This flag is applicable in
2 cases:The sparse indirect switch (i.e. a switch with a values table)
<jump table="" size>=""> ==+ 1. The default case entry is the last one
in the table (or the first one in the case of an inversed jump
table).The switch with insns in the jump table. The default case entry
is before the first entry of the table. See also the
find_defjump_from_table() helper function.
"""

ida_nalt.SWI_ELBASE
"""
segment will be used)

elbase is present (otherwise the base of the switch
"""

ida_nalt.SWI_HXNOLOWCASE
"""
lowcase value should not be used by the decompiler (internal flag)
"""

ida_nalt.SWI_INDIRECT
"""
(for sparse switches)

value table elements are used as indexes into the jump table
"""

ida_nalt.SWI_J32
"""
32-bit jump offsets
"""

ida_nalt.SWI_JMPINSN
"""
jump table entries are insns. For such entries SHIFT has a different
meaning. It denotes the number of insns in the entry. For example, 0 -
the entry contains the jump to the case, 1 - the entry contains one
insn like a 'mov' and jump to the end of case, and so on.
"""

ida_nalt.SWI_JMP_INV
"""
for first entry in values table)

jumptable is inversed. (last entry is
"""

ida_nalt.SWI_JSIZE
"""
jump offset expansion bit
"""

ida_nalt.SWI_RESERVED
"""
was: SWI_DEFAULT
"""

ida_nalt.SWI_SELFREL
"""
jump address is relative to the element not to ELBASE
"""

ida_nalt.SWI_SEPARATE
"""
create an array of individual elements (otherwise separate items)
"""

ida_nalt.SWI_SHIFT_MASK
"""
use formula (element<<shift) + elbase to find jump targets
"""

ida_nalt.SWI_SIGNED
"""
jump table entries are signed
"""

ida_nalt.SWI_SPARSE
"""
otherwise lowcase present

sparse switch (value table present)
"""

ida_nalt.SWI_STDTBL
"""
custom jump table with standard table formatting. ATM IDA doesn't use
SWI_CUSTOM for switches with standard table formatting. So this flag
can be considered as obsolete.
"""

ida_nalt.SWI_SUBTRACT
"""
table values are subtracted from the elbase instead of being added
"""

ida_nalt.SWI_V32
"""
32-bit values in table
"""

ida_nalt.SWI_VERSION
"""
the structure contains the VERSION member
"""

ida_nalt.SWI_VSIZE
"""
value table element size expansion bit
"""

ida_nalt.SWI_VSPLIT
"""
value table is split (only for 32-bit values)
"""