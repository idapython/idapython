# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""IDA Plugin SDK API wrapper: registry"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_registry
else:
    import _ida_registry

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func


def reg_read_string(*args):
    r"""reg_read_string(name, subkey=None, _def=None) -> PyObject *"""
    return _ida_registry.reg_read_string(*args)

def reg_data_type(*args):
    r"""reg_data_type(name, subkey=None) -> regval_type_t"""
    return _ida_registry.reg_data_type(*args)

def reg_read_binary(*args):
    r"""reg_read_binary(name, subkey=None) -> PyObject *"""
    return _ida_registry.reg_read_binary(*args)

def reg_write_binary(*args):
    r"""reg_write_binary(name, py_bytes, subkey=None)"""
    return _ida_registry.reg_write_binary(*args)

def reg_subkey_subkeys(*args):
    r"""reg_subkey_subkeys(name) -> PyObject *"""
    return _ida_registry.reg_subkey_subkeys(*args)

def reg_subkey_values(*args):
    r"""reg_subkey_values(name) -> PyObject *"""
    return _ida_registry.reg_subkey_values(*args)
ROOT_KEY_NAME = _ida_registry.ROOT_KEY_NAME

reg_unknown = _ida_registry.reg_unknown

reg_sz = _ida_registry.reg_sz

reg_binary = _ida_registry.reg_binary

reg_dword = _ida_registry.reg_dword


def reg_delete_subkey(*args):
    r"""reg_delete_subkey(name) -> bool"""
    return _ida_registry.reg_delete_subkey(*args)

def reg_delete_tree(*args):
    r"""reg_delete_tree(name) -> bool"""
    return _ida_registry.reg_delete_tree(*args)

def reg_delete(*args):
    r"""reg_delete(name, subkey=None) -> bool"""
    return _ida_registry.reg_delete(*args)

def reg_subkey_exists(*args):
    r"""reg_subkey_exists(name) -> bool"""
    return _ida_registry.reg_subkey_exists(*args)

def reg_exists(*args):
    r"""reg_exists(name, subkey=None) -> bool"""
    return _ida_registry.reg_exists(*args)

def reg_read_strlist(*args):
    r"""reg_read_strlist(list, subkey)"""
    return _ida_registry.reg_read_strlist(*args)

def reg_update_strlist(*args):
    r"""reg_update_strlist(subkey, add, maxrecs, rem=None, ignorecase=False)"""
    return _ida_registry.reg_update_strlist(*args)

def reg_write_string(*args):
    r"""reg_write_string(name, utf8, subkey=None)"""
    return _ida_registry.reg_write_string(*args)

def reg_read_int(*args):
    r"""reg_read_int(name, defval, subkey=None) -> int"""
    return _ida_registry.reg_read_int(*args)

def reg_write_int(*args):
    r"""reg_write_int(name, value, subkey=None)"""
    return _ida_registry.reg_write_int(*args)

def reg_read_bool(*args):
    r"""reg_read_bool(name, defval, subkey=None) -> bool"""
    return _ida_registry.reg_read_bool(*args)

def reg_write_bool(*args):
    r"""reg_write_bool(name, value, subkey=None)"""
    return _ida_registry.reg_write_bool(*args)

def reg_update_filestrlist(*args):
    r"""reg_update_filestrlist(subkey, add, maxrecs, rem=None)"""
    return _ida_registry.reg_update_filestrlist(*args)

def reg_load(*args):
    r"""reg_load()"""
    return _ida_registry.reg_load(*args)

def reg_flush(*args):
    r"""reg_flush()"""
    return _ida_registry.reg_flush(*args)


