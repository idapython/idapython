# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""IDA Plugin SDK API wrapper: nalt"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_nalt
else:
    import _ida_nalt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

class custom_data_type_ids_fids_array(object):
    r"""Proxy of C++ wrapped_array_t< int16,8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_ida_nalt.custom_data_type_ids_fids_array_data_get, doc=r"""data""")

    def __init__(self, *args):
        r"""__init__(self, data) -> custom_data_type_ids_fids_array"""
        _ida_nalt.custom_data_type_ids_fids_array_swiginit(self, _ida_nalt.new_custom_data_type_ids_fids_array(*args))

    def __len__(self, *args):
        r"""__len__(self) -> size_t"""
        return _ida_nalt.custom_data_type_ids_fids_array___len__(self, *args)

    def __getitem__(self, *args):
        r"""__getitem__(self, i) -> short const &"""
        return _ida_nalt.custom_data_type_ids_fids_array___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""__setitem__(self, i, v)"""
        return _ida_nalt.custom_data_type_ids_fids_array___setitem__(self, *args)

    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_nalt.delete_custom_data_type_ids_fids_array

# Register custom_data_type_ids_fids_array in _ida_nalt:
_ida_nalt.custom_data_type_ids_fids_array_swigregister(custom_data_type_ids_fids_array)

class strpath_ids_array(object):
    r"""Proxy of C++ wrapped_array_t< tid_t,32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_ida_nalt.strpath_ids_array_data_get, doc=r"""data""")

    def __init__(self, *args):
        r"""__init__(self, data) -> strpath_ids_array"""
        _ida_nalt.strpath_ids_array_swiginit(self, _ida_nalt.new_strpath_ids_array(*args))

    def __len__(self, *args):
        r"""__len__(self) -> size_t"""
        return _ida_nalt.strpath_ids_array___len__(self, *args)

    def __getitem__(self, *args):
        r"""__getitem__(self, i) -> unsigned int const &"""
        return _ida_nalt.strpath_ids_array___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""__setitem__(self, i, v)"""
        return _ida_nalt.strpath_ids_array___setitem__(self, *args)

    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_nalt.delete_strpath_ids_array

# Register strpath_ids_array in _ida_nalt:
_ida_nalt.strpath_ids_array_swigregister(strpath_ids_array)

NALT_SWITCH = _ida_nalt.NALT_SWITCH

NALT_STRUCT = _ida_nalt.NALT_STRUCT

NALT_AFLAGS = _ida_nalt.NALT_AFLAGS

NALT_LINNUM = _ida_nalt.NALT_LINNUM

NALT_ABSBASE = _ida_nalt.NALT_ABSBASE

NALT_ENUM0 = _ida_nalt.NALT_ENUM0

NALT_ENUM1 = _ida_nalt.NALT_ENUM1

NALT_PURGE = _ida_nalt.NALT_PURGE

NALT_STRTYPE = _ida_nalt.NALT_STRTYPE

NALT_ALIGN = _ida_nalt.NALT_ALIGN

NALT_COLOR = _ida_nalt.NALT_COLOR

NSUP_CMT = _ida_nalt.NSUP_CMT

NSUP_REPCMT = _ida_nalt.NSUP_REPCMT

NSUP_FOP1 = _ida_nalt.NSUP_FOP1

NSUP_FOP2 = _ida_nalt.NSUP_FOP2

NSUP_JINFO = _ida_nalt.NSUP_JINFO

NSUP_ARRAY = _ida_nalt.NSUP_ARRAY

NSUP_OMFGRP = _ida_nalt.NSUP_OMFGRP

NSUP_FOP3 = _ida_nalt.NSUP_FOP3

NSUP_SWITCH = _ida_nalt.NSUP_SWITCH

NSUP_REF0 = _ida_nalt.NSUP_REF0

NSUP_REF1 = _ida_nalt.NSUP_REF1

NSUP_REF2 = _ida_nalt.NSUP_REF2

NSUP_OREF0 = _ida_nalt.NSUP_OREF0

NSUP_OREF1 = _ida_nalt.NSUP_OREF1

NSUP_OREF2 = _ida_nalt.NSUP_OREF2

NSUP_STROFF0 = _ida_nalt.NSUP_STROFF0

NSUP_STROFF1 = _ida_nalt.NSUP_STROFF1

NSUP_SEGTRANS = _ida_nalt.NSUP_SEGTRANS

NSUP_FOP4 = _ida_nalt.NSUP_FOP4

NSUP_FOP5 = _ida_nalt.NSUP_FOP5

NSUP_FOP6 = _ida_nalt.NSUP_FOP6

NSUP_REF3 = _ida_nalt.NSUP_REF3

NSUP_REF4 = _ida_nalt.NSUP_REF4

NSUP_REF5 = _ida_nalt.NSUP_REF5

NSUP_OREF3 = _ida_nalt.NSUP_OREF3

NSUP_OREF4 = _ida_nalt.NSUP_OREF4

NSUP_OREF5 = _ida_nalt.NSUP_OREF5

NSUP_XREFPOS = _ida_nalt.NSUP_XREFPOS

NSUP_CUSTDT = _ida_nalt.NSUP_CUSTDT

NSUP_GROUPS = _ida_nalt.NSUP_GROUPS

NSUP_ARGEAS = _ida_nalt.NSUP_ARGEAS

NSUP_FOP7 = _ida_nalt.NSUP_FOP7

NSUP_FOP8 = _ida_nalt.NSUP_FOP8

NSUP_REF6 = _ida_nalt.NSUP_REF6

NSUP_REF7 = _ida_nalt.NSUP_REF7

NSUP_OREF6 = _ida_nalt.NSUP_OREF6

NSUP_OREF7 = _ida_nalt.NSUP_OREF7

NSUP_POINTS = _ida_nalt.NSUP_POINTS

NSUP_MANUAL = _ida_nalt.NSUP_MANUAL

NSUP_TYPEINFO = _ida_nalt.NSUP_TYPEINFO

NSUP_REGVAR = _ida_nalt.NSUP_REGVAR

NSUP_LLABEL = _ida_nalt.NSUP_LLABEL

NSUP_REGARG = _ida_nalt.NSUP_REGARG

NSUP_FTAILS = _ida_nalt.NSUP_FTAILS

NSUP_GROUP = _ida_nalt.NSUP_GROUP

NSUP_OPTYPES = _ida_nalt.NSUP_OPTYPES

NALT_CREF_TO = _ida_nalt.NALT_CREF_TO

NALT_CREF_FROM = _ida_nalt.NALT_CREF_FROM

NALT_DREF_TO = _ida_nalt.NALT_DREF_TO

NALT_DREF_FROM = _ida_nalt.NALT_DREF_FROM

NSUP_GR_INFO = _ida_nalt.NSUP_GR_INFO

NALT_GR_LAYX = _ida_nalt.NALT_GR_LAYX

NSUP_GR_LAYT = _ida_nalt.NSUP_GR_LAYT

PATCH_TAG = _ida_nalt.PATCH_TAG


def ea2node(*args):
    r"""ea2node(ea) -> nodeidx_t"""
    return _ida_nalt.ea2node(*args)

def node2ea(*args):
    r"""node2ea(ndx) -> ea_t"""
    return _ida_nalt.node2ea(*args)

def getnode(*args):
    r"""getnode(ea) -> netnode"""
    return _ida_nalt.getnode(*args)
AFL_LINNUM = _ida_nalt.AFL_LINNUM

AFL_USERSP = _ida_nalt.AFL_USERSP

AFL_PUBNAM = _ida_nalt.AFL_PUBNAM

AFL_WEAKNAM = _ida_nalt.AFL_WEAKNAM

AFL_HIDDEN = _ida_nalt.AFL_HIDDEN

AFL_MANUAL = _ida_nalt.AFL_MANUAL

AFL_NOBRD = _ida_nalt.AFL_NOBRD

AFL_ZSTROFF = _ida_nalt.AFL_ZSTROFF

AFL_BNOT0 = _ida_nalt.AFL_BNOT0

AFL_BNOT1 = _ida_nalt.AFL_BNOT1

AFL_LIB = _ida_nalt.AFL_LIB

AFL_TI = _ida_nalt.AFL_TI

AFL_TI0 = _ida_nalt.AFL_TI0

AFL_TI1 = _ida_nalt.AFL_TI1

AFL_LNAME = _ida_nalt.AFL_LNAME

AFL_TILCMT = _ida_nalt.AFL_TILCMT

AFL_LZERO0 = _ida_nalt.AFL_LZERO0

AFL_LZERO1 = _ida_nalt.AFL_LZERO1

AFL_COLORED = _ida_nalt.AFL_COLORED

AFL_TERSESTR = _ida_nalt.AFL_TERSESTR

AFL_SIGN0 = _ida_nalt.AFL_SIGN0

AFL_SIGN1 = _ida_nalt.AFL_SIGN1

AFL_NORET = _ida_nalt.AFL_NORET

AFL_FIXEDSPD = _ida_nalt.AFL_FIXEDSPD

AFL_ALIGNFLOW = _ida_nalt.AFL_ALIGNFLOW

AFL_USERTI = _ida_nalt.AFL_USERTI

AFL_RETFP = _ida_nalt.AFL_RETFP

AFL_USEMODSP = _ida_nalt.AFL_USEMODSP

AFL_NOTCODE = _ida_nalt.AFL_NOTCODE

AFL_NOTPROC = _ida_nalt.AFL_NOTPROC


def set_aflags(*args):
    r"""set_aflags(ea, flags)"""
    return _ida_nalt.set_aflags(*args)

def set_abits(*args):
    r"""set_abits(ea, bits)"""
    return _ida_nalt.set_abits(*args)

def clr_abits(*args):
    r"""clr_abits(ea, bits)"""
    return _ida_nalt.clr_abits(*args)

def get_aflags(*args):
    r"""get_aflags(ea) -> uint32"""
    return _ida_nalt.get_aflags(*args)

def del_aflags(*args):
    r"""del_aflags(ea)"""
    return _ida_nalt.del_aflags(*args)

def is_hidden_item(*args):
    r"""is_hidden_item(ea) -> bool"""
    return _ida_nalt.is_hidden_item(*args)

def hide_item(*args):
    r"""hide_item(ea)"""
    return _ida_nalt.hide_item(*args)

def unhide_item(*args):
    r"""unhide_item(ea)"""
    return _ida_nalt.unhide_item(*args)

def is_hidden_border(*args):
    r"""is_hidden_border(ea) -> bool"""
    return _ida_nalt.is_hidden_border(*args)

def hide_border(*args):
    r"""hide_border(ea)"""
    return _ida_nalt.hide_border(*args)

def unhide_border(*args):
    r"""unhide_border(ea)"""
    return _ida_nalt.unhide_border(*args)

def uses_modsp(*args):
    r"""uses_modsp(ea) -> bool"""
    return _ida_nalt.uses_modsp(*args)

def set_usemodsp(*args):
    r"""set_usemodsp(ea)"""
    return _ida_nalt.set_usemodsp(*args)

def clr_usemodsp(*args):
    r"""clr_usemodsp(ea)"""
    return _ida_nalt.clr_usemodsp(*args)

def is_zstroff(*args):
    r"""is_zstroff(ea) -> bool"""
    return _ida_nalt.is_zstroff(*args)

def set_zstroff(*args):
    r"""set_zstroff(ea)"""
    return _ida_nalt.set_zstroff(*args)

def clr_zstroff(*args):
    r"""clr_zstroff(ea)"""
    return _ida_nalt.clr_zstroff(*args)

def is__bnot0(*args):
    r"""is__bnot0(ea) -> bool"""
    return _ida_nalt.is__bnot0(*args)

def set__bnot0(*args):
    r"""set__bnot0(ea)"""
    return _ida_nalt.set__bnot0(*args)

def clr__bnot0(*args):
    r"""clr__bnot0(ea)"""
    return _ida_nalt.clr__bnot0(*args)

def is__bnot1(*args):
    r"""is__bnot1(ea) -> bool"""
    return _ida_nalt.is__bnot1(*args)

def set__bnot1(*args):
    r"""set__bnot1(ea)"""
    return _ida_nalt.set__bnot1(*args)

def clr__bnot1(*args):
    r"""clr__bnot1(ea)"""
    return _ida_nalt.clr__bnot1(*args)

def is_libitem(*args):
    r"""is_libitem(ea) -> bool"""
    return _ida_nalt.is_libitem(*args)

def set_libitem(*args):
    r"""set_libitem(ea)"""
    return _ida_nalt.set_libitem(*args)

def clr_libitem(*args):
    r"""clr_libitem(ea)"""
    return _ida_nalt.clr_libitem(*args)

def has_ti(*args):
    r"""has_ti(ea) -> bool"""
    return _ida_nalt.has_ti(*args)

def set_has_ti(*args):
    r"""set_has_ti(ea)"""
    return _ida_nalt.set_has_ti(*args)

def clr_has_ti(*args):
    r"""clr_has_ti(ea)"""
    return _ida_nalt.clr_has_ti(*args)

def has_ti0(*args):
    r"""has_ti0(ea) -> bool"""
    return _ida_nalt.has_ti0(*args)

def set_has_ti0(*args):
    r"""set_has_ti0(ea)"""
    return _ida_nalt.set_has_ti0(*args)

def clr_has_ti0(*args):
    r"""clr_has_ti0(ea)"""
    return _ida_nalt.clr_has_ti0(*args)

def has_ti1(*args):
    r"""has_ti1(ea) -> bool"""
    return _ida_nalt.has_ti1(*args)

def set_has_ti1(*args):
    r"""set_has_ti1(ea)"""
    return _ida_nalt.set_has_ti1(*args)

def clr_has_ti1(*args):
    r"""clr_has_ti1(ea)"""
    return _ida_nalt.clr_has_ti1(*args)

def has_lname(*args):
    r"""has_lname(ea) -> bool"""
    return _ida_nalt.has_lname(*args)

def set_has_lname(*args):
    r"""set_has_lname(ea)"""
    return _ida_nalt.set_has_lname(*args)

def clr_has_lname(*args):
    r"""clr_has_lname(ea)"""
    return _ida_nalt.clr_has_lname(*args)

def is_tilcmt(*args):
    r"""is_tilcmt(ea) -> bool"""
    return _ida_nalt.is_tilcmt(*args)

def set_tilcmt(*args):
    r"""set_tilcmt(ea)"""
    return _ida_nalt.set_tilcmt(*args)

def clr_tilcmt(*args):
    r"""clr_tilcmt(ea)"""
    return _ida_nalt.clr_tilcmt(*args)

def is_usersp(*args):
    r"""is_usersp(ea) -> bool"""
    return _ida_nalt.is_usersp(*args)

def set_usersp(*args):
    r"""set_usersp(ea)"""
    return _ida_nalt.set_usersp(*args)

def clr_usersp(*args):
    r"""clr_usersp(ea)"""
    return _ida_nalt.clr_usersp(*args)

def is_lzero0(*args):
    r"""is_lzero0(ea) -> bool"""
    return _ida_nalt.is_lzero0(*args)

def set_lzero0(*args):
    r"""set_lzero0(ea)"""
    return _ida_nalt.set_lzero0(*args)

def clr_lzero0(*args):
    r"""clr_lzero0(ea)"""
    return _ida_nalt.clr_lzero0(*args)

def is_lzero1(*args):
    r"""is_lzero1(ea) -> bool"""
    return _ida_nalt.is_lzero1(*args)

def set_lzero1(*args):
    r"""set_lzero1(ea)"""
    return _ida_nalt.set_lzero1(*args)

def clr_lzero1(*args):
    r"""clr_lzero1(ea)"""
    return _ida_nalt.clr_lzero1(*args)

def is_colored_item(*args):
    r"""is_colored_item(ea) -> bool"""
    return _ida_nalt.is_colored_item(*args)

def set_colored_item(*args):
    r"""set_colored_item(ea)"""
    return _ida_nalt.set_colored_item(*args)

def clr_colored_item(*args):
    r"""clr_colored_item(ea)"""
    return _ida_nalt.clr_colored_item(*args)

def is_terse_struc(*args):
    r"""is_terse_struc(ea) -> bool"""
    return _ida_nalt.is_terse_struc(*args)

def set_terse_struc(*args):
    r"""set_terse_struc(ea)"""
    return _ida_nalt.set_terse_struc(*args)

def clr_terse_struc(*args):
    r"""clr_terse_struc(ea)"""
    return _ida_nalt.clr_terse_struc(*args)

def is__invsign0(*args):
    r"""is__invsign0(ea) -> bool"""
    return _ida_nalt.is__invsign0(*args)

def set__invsign0(*args):
    r"""set__invsign0(ea)"""
    return _ida_nalt.set__invsign0(*args)

def clr__invsign0(*args):
    r"""clr__invsign0(ea)"""
    return _ida_nalt.clr__invsign0(*args)

def is__invsign1(*args):
    r"""is__invsign1(ea) -> bool"""
    return _ida_nalt.is__invsign1(*args)

def set__invsign1(*args):
    r"""set__invsign1(ea)"""
    return _ida_nalt.set__invsign1(*args)

def clr__invsign1(*args):
    r"""clr__invsign1(ea)"""
    return _ida_nalt.clr__invsign1(*args)

def is_noret(*args):
    r"""is_noret(ea) -> bool"""
    return _ida_nalt.is_noret(*args)

def set_noret(*args):
    r"""set_noret(ea)"""
    return _ida_nalt.set_noret(*args)

def clr_noret(*args):
    r"""clr_noret(ea)"""
    return _ida_nalt.clr_noret(*args)

def is_fixed_spd(*args):
    r"""is_fixed_spd(ea) -> bool"""
    return _ida_nalt.is_fixed_spd(*args)

def set_fixed_spd(*args):
    r"""set_fixed_spd(ea)"""
    return _ida_nalt.set_fixed_spd(*args)

def clr_fixed_spd(*args):
    r"""clr_fixed_spd(ea)"""
    return _ida_nalt.clr_fixed_spd(*args)

def is_align_flow(*args):
    r"""is_align_flow(ea) -> bool"""
    return _ida_nalt.is_align_flow(*args)

def set_align_flow(*args):
    r"""set_align_flow(ea)"""
    return _ida_nalt.set_align_flow(*args)

def clr_align_flow(*args):
    r"""clr_align_flow(ea)"""
    return _ida_nalt.clr_align_flow(*args)

def is_userti(*args):
    r"""is_userti(ea) -> bool"""
    return _ida_nalt.is_userti(*args)

def set_userti(*args):
    r"""set_userti(ea)"""
    return _ida_nalt.set_userti(*args)

def clr_userti(*args):
    r"""clr_userti(ea)"""
    return _ida_nalt.clr_userti(*args)

def is_retfp(*args):
    r"""is_retfp(ea) -> bool"""
    return _ida_nalt.is_retfp(*args)

def set_retfp(*args):
    r"""set_retfp(ea)"""
    return _ida_nalt.set_retfp(*args)

def clr_retfp(*args):
    r"""clr_retfp(ea)"""
    return _ida_nalt.clr_retfp(*args)

def is_notproc(*args):
    r"""is_notproc(ea) -> bool"""
    return _ida_nalt.is_notproc(*args)

def set_notproc(*args):
    r"""set_notproc(ea)"""
    return _ida_nalt.set_notproc(*args)

def clr_notproc(*args):
    r"""clr_notproc(ea)"""
    return _ida_nalt.clr_notproc(*args)

def set_notcode(*args):
    r"""set_notcode(ea)"""
    return _ida_nalt.set_notcode(*args)

def clr_notcode(*args):
    r"""clr_notcode(ea)"""
    return _ida_nalt.clr_notcode(*args)

def is_notcode(*args):
    r"""is_notcode(ea) -> bool"""
    return _ida_nalt.is_notcode(*args)

def set_visible_item(*args):
    r"""set_visible_item(ea, visible)"""
    return _ida_nalt.set_visible_item(*args)

def is_visible_item(*args):
    r"""is_visible_item(ea) -> bool"""
    return _ida_nalt.is_visible_item(*args)

def is_finally_visible_item(*args):
    r"""is_finally_visible_item(ea) -> bool"""
    return _ida_nalt.is_finally_visible_item(*args)

def set_source_linnum(*args):
    r"""set_source_linnum(ea, lnnum)"""
    return _ida_nalt.set_source_linnum(*args)

def get_source_linnum(*args):
    r"""get_source_linnum(ea) -> uval_t"""
    return _ida_nalt.get_source_linnum(*args)

def del_source_linnum(*args):
    r"""del_source_linnum(ea)"""
    return _ida_nalt.del_source_linnum(*args)

def get_absbase(*args):
    r"""get_absbase(ea) -> ea_t"""
    return _ida_nalt.get_absbase(*args)

def set_absbase(*args):
    r"""set_absbase(ea, x)"""
    return _ida_nalt.set_absbase(*args)

def del_absbase(*args):
    r"""del_absbase(ea)"""
    return _ida_nalt.del_absbase(*args)

def get_ind_purged(*args):
    r"""get_ind_purged(ea) -> ea_t"""
    return _ida_nalt.get_ind_purged(*args)

def del_ind_purged(*args):
    r"""del_ind_purged(ea)"""
    return _ida_nalt.del_ind_purged(*args)

def get_str_type(*args):
    r"""get_str_type(ea) -> uint32"""
    return _ida_nalt.get_str_type(*args)

def set_str_type(*args):
    r"""set_str_type(ea, x)"""
    return _ida_nalt.set_str_type(*args)

def del_str_type(*args):
    r"""del_str_type(ea)"""
    return _ida_nalt.del_str_type(*args)
STRWIDTH_1B = _ida_nalt.STRWIDTH_1B

STRWIDTH_2B = _ida_nalt.STRWIDTH_2B

STRWIDTH_4B = _ida_nalt.STRWIDTH_4B

STRWIDTH_MASK = _ida_nalt.STRWIDTH_MASK

STRLYT_TERMCHR = _ida_nalt.STRLYT_TERMCHR

STRLYT_PASCAL1 = _ida_nalt.STRLYT_PASCAL1

STRLYT_PASCAL2 = _ida_nalt.STRLYT_PASCAL2

STRLYT_PASCAL4 = _ida_nalt.STRLYT_PASCAL4

STRLYT_MASK = _ida_nalt.STRLYT_MASK

STRLYT_SHIFT = _ida_nalt.STRLYT_SHIFT

STRTYPE_TERMCHR = _ida_nalt.STRTYPE_TERMCHR

STRTYPE_C = _ida_nalt.STRTYPE_C

STRTYPE_C_16 = _ida_nalt.STRTYPE_C_16

STRTYPE_C_32 = _ida_nalt.STRTYPE_C_32

STRTYPE_PASCAL = _ida_nalt.STRTYPE_PASCAL

STRTYPE_PASCAL_16 = _ida_nalt.STRTYPE_PASCAL_16

STRTYPE_LEN2 = _ida_nalt.STRTYPE_LEN2

STRTYPE_LEN2_16 = _ida_nalt.STRTYPE_LEN2_16

STRTYPE_LEN4 = _ida_nalt.STRTYPE_LEN4

STRTYPE_LEN4_16 = _ida_nalt.STRTYPE_LEN4_16


def get_str_type_code(*args):
    r"""get_str_type_code(strtype) -> uchar"""
    return _ida_nalt.get_str_type_code(*args)

def get_str_term1(*args):
    r"""get_str_term1(strtype) -> char"""
    return _ida_nalt.get_str_term1(*args)

def get_str_term2(*args):
    r"""get_str_term2(strtype) -> char"""
    return _ida_nalt.get_str_term2(*args)

def get_str_encoding_idx(*args):
    r"""get_str_encoding_idx(strtype) -> uchar"""
    return _ida_nalt.get_str_encoding_idx(*args)

def is_pascal(*args):
    r"""is_pascal(strtype) -> bool"""
    return _ida_nalt.is_pascal(*args)
STRENC_DEFAULT = _ida_nalt.STRENC_DEFAULT

STRENC_NONE = _ida_nalt.STRENC_NONE


def get_alignment(*args):
    r"""get_alignment(ea) -> uint32"""
    return _ida_nalt.get_alignment(*args)

def set_alignment(*args):
    r"""set_alignment(ea, x)"""
    return _ida_nalt.set_alignment(*args)

def del_alignment(*args):
    r"""del_alignment(ea)"""
    return _ida_nalt.del_alignment(*args)

def set_item_color(*args):
    r"""set_item_color(ea, color)"""
    return _ida_nalt.set_item_color(*args)

def get_item_color(*args):
    r"""get_item_color(ea) -> bgcolor_t"""
    return _ida_nalt.get_item_color(*args)

def del_item_color(*args):
    r"""del_item_color(ea) -> bool"""
    return _ida_nalt.del_item_color(*args)
class array_parameters_t(object):
    r"""Proxy of C++ array_parameters_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags = property(_ida_nalt.array_parameters_t_flags_get, _ida_nalt.array_parameters_t_flags_set, doc=r"""flags""")
    lineitems = property(_ida_nalt.array_parameters_t_lineitems_get, _ida_nalt.array_parameters_t_lineitems_set, doc=r"""lineitems""")
    alignment = property(_ida_nalt.array_parameters_t_alignment_get, _ida_nalt.array_parameters_t_alignment_set, doc=r"""alignment""")

    def __init__(self, *args):
        r"""__init__(self) -> array_parameters_t"""
        _ida_nalt.array_parameters_t_swiginit(self, _ida_nalt.new_array_parameters_t(*args))
    __swig_destroy__ = _ida_nalt.delete_array_parameters_t

# Register array_parameters_t in _ida_nalt:
_ida_nalt.array_parameters_t_swigregister(array_parameters_t)
AP_ALLOWDUPS = _ida_nalt.AP_ALLOWDUPS

AP_SIGNED = _ida_nalt.AP_SIGNED

AP_INDEX = _ida_nalt.AP_INDEX

AP_ARRAY = _ida_nalt.AP_ARRAY

AP_IDXBASEMASK = _ida_nalt.AP_IDXBASEMASK

AP_IDXDEC = _ida_nalt.AP_IDXDEC

AP_IDXHEX = _ida_nalt.AP_IDXHEX

AP_IDXOCT = _ida_nalt.AP_IDXOCT

AP_IDXBIN = _ida_nalt.AP_IDXBIN



def get_array_parameters(*args):
    r"""get_array_parameters(out, ea) -> ssize_t"""
    return _ida_nalt.get_array_parameters(*args)

def set_array_parameters(*args):
    r"""set_array_parameters(ea, _in)"""
    return _ida_nalt.set_array_parameters(*args)

def del_array_parameters(*args):
    r"""del_array_parameters(ea)"""
    return _ida_nalt.del_array_parameters(*args)
class switch_info_t(object):
    r"""Proxy of C++ switch_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags = property(_ida_nalt.switch_info_t_flags_get, _ida_nalt.switch_info_t_flags_set, doc=r"""flags""")

    def get_shift(self, *args):
        r"""get_shift(self) -> int"""
        return _ida_nalt.switch_info_t_get_shift(self, *args)

    def set_shift(self, *args):
        r"""set_shift(self, shift)"""
        return _ida_nalt.switch_info_t_set_shift(self, *args)

    def get_jtable_element_size(self, *args):
        r"""get_jtable_element_size(self) -> int"""
        return _ida_nalt.switch_info_t_get_jtable_element_size(self, *args)

    def set_jtable_element_size(self, *args):
        r"""set_jtable_element_size(self, size)"""
        return _ida_nalt.switch_info_t_set_jtable_element_size(self, *args)

    def get_vtable_element_size(self, *args):
        r"""get_vtable_element_size(self) -> int"""
        return _ida_nalt.switch_info_t_get_vtable_element_size(self, *args)

    def set_vtable_element_size(self, *args):
        r"""set_vtable_element_size(self, size)"""
        return _ida_nalt.switch_info_t_set_vtable_element_size(self, *args)

    def has_default(self, *args):
        r"""has_default(self) -> bool"""
        return _ida_nalt.switch_info_t_has_default(self, *args)

    def has_elbase(self, *args):
        r"""has_elbase(self) -> bool"""
        return _ida_nalt.switch_info_t_has_elbase(self, *args)

    def is_sparse(self, *args):
        r"""is_sparse(self) -> bool"""
        return _ida_nalt.switch_info_t_is_sparse(self, *args)

    def is_custom(self, *args):
        r"""is_custom(self) -> bool"""
        return _ida_nalt.switch_info_t_is_custom(self, *args)

    def is_indirect(self, *args):
        r"""is_indirect(self) -> bool"""
        return _ida_nalt.switch_info_t_is_indirect(self, *args)

    def is_subtract(self, *args):
        r"""is_subtract(self) -> bool"""
        return _ida_nalt.switch_info_t_is_subtract(self, *args)

    def is_nolowcase(self, *args):
        r"""is_nolowcase(self) -> bool"""
        return _ida_nalt.switch_info_t_is_nolowcase(self, *args)

    def use_std_table(self, *args):
        r"""use_std_table(self) -> bool"""
        return _ida_nalt.switch_info_t_use_std_table(self, *args)
    ncases = property(_ida_nalt.switch_info_t_ncases_get, _ida_nalt.switch_info_t_ncases_set, doc=r"""ncases""")
    jumps = property(_ida_nalt.switch_info_t_jumps_get, _ida_nalt.switch_info_t_jumps_set, doc=r"""jumps""")
    defjump = property(_ida_nalt.switch_info_t_defjump_get, _ida_nalt.switch_info_t_defjump_set, doc=r"""defjump""")
    startea = property(_ida_nalt.switch_info_t_startea_get, _ida_nalt.switch_info_t_startea_set, doc=r"""startea""")
    jcases = property(_ida_nalt.switch_info_t_jcases_get, _ida_nalt.switch_info_t_jcases_set, doc=r"""jcases""")
    ind_lowcase = property(_ida_nalt.switch_info_t_ind_lowcase_get, _ida_nalt.switch_info_t_ind_lowcase_set, doc=r"""ind_lowcase""")

    def get_lowcase(self, *args):
        r"""get_lowcase(self) -> sval_t"""
        return _ida_nalt.switch_info_t_get_lowcase(self, *args)
    elbase = property(_ida_nalt.switch_info_t_elbase_get, _ida_nalt.switch_info_t_elbase_set, doc=r"""elbase""")
    regnum = property(_ida_nalt.switch_info_t_regnum_get, _ida_nalt.switch_info_t_regnum_set, doc=r"""regnum""")
    regdtype = property(_ida_nalt.switch_info_t_regdtype_get, _ida_nalt.switch_info_t_regdtype_set, doc=r"""regdtype""")

    def get_jtable_size(self, *args):
        r"""get_jtable_size(self) -> int"""
        return _ida_nalt.switch_info_t_get_jtable_size(self, *args)

    def set_jtable_size(self, *args):
        r"""set_jtable_size(self, size)"""
        return _ida_nalt.switch_info_t_set_jtable_size(self, *args)

    def set_expr(self, *args):
        r"""set_expr(self, r, dt)"""
        return _ida_nalt.switch_info_t_set_expr(self, *args)

    def get_jrange_vrange(self, *args):
        r"""get_jrange_vrange(self, jrange=None, vrange=None) -> bool"""
        return _ida_nalt.switch_info_t_get_jrange_vrange(self, *args)
    custom = property(_ida_nalt.switch_info_t_custom_get, _ida_nalt.switch_info_t_custom_set, doc=r"""custom""")
    SWITCH_INFO_VERSION = _ida_nalt.switch_info_t_SWITCH_INFO_VERSION
    

    def get_version(self, *args):
        r"""get_version(self) -> int"""
        return _ida_nalt.switch_info_t_get_version(self, *args)
    expr_ea = property(_ida_nalt.switch_info_t_expr_ea_get, _ida_nalt.switch_info_t_expr_ea_set, doc=r"""expr_ea""")
    marks = property(_ida_nalt.switch_info_t_marks_get, _ida_nalt.switch_info_t_marks_set, doc=r"""marks""")

    def __init__(self, *args):
        r"""__init__(self) -> switch_info_t"""
        _ida_nalt.switch_info_t_swiginit(self, _ida_nalt.new_switch_info_t(*args))

    def clear(self, *args):
        r"""clear(self)"""
        return _ida_nalt.switch_info_t_clear(self, *args)

    def assign(self, *args):
        r"""assign(self, other)"""
        return _ida_nalt.switch_info_t_assign(self, *args)

    def _get_values_lowcase(self, *args):
        r"""_get_values_lowcase(self) -> ea_t"""
        return _ida_nalt.switch_info_t__get_values_lowcase(self, *args)

    def _set_values_lowcase(self, *args):
        r"""_set_values_lowcase(self, values)"""
        return _ida_nalt.switch_info_t__set_values_lowcase(self, *args)

    values = property(_get_values_lowcase, _set_values_lowcase)
    lowcase = property(_get_values_lowcase, _set_values_lowcase)

    __swig_destroy__ = _ida_nalt.delete_switch_info_t

# Register switch_info_t in _ida_nalt:
_ida_nalt.switch_info_t_swigregister(switch_info_t)
SWI_SPARSE = _ida_nalt.SWI_SPARSE

SWI_V32 = _ida_nalt.SWI_V32

SWI_J32 = _ida_nalt.SWI_J32

SWI_VSPLIT = _ida_nalt.SWI_VSPLIT

SWI_RESERVED = _ida_nalt.SWI_RESERVED

SWI_DEF_IN_TBL = _ida_nalt.SWI_DEF_IN_TBL

SWI_JMP_INV = _ida_nalt.SWI_JMP_INV

SWI_SHIFT_MASK = _ida_nalt.SWI_SHIFT_MASK

SWI_ELBASE = _ida_nalt.SWI_ELBASE

SWI_JSIZE = _ida_nalt.SWI_JSIZE

SWI_VSIZE = _ida_nalt.SWI_VSIZE

SWI_SEPARATE = _ida_nalt.SWI_SEPARATE

SWI_SIGNED = _ida_nalt.SWI_SIGNED

SWI_CUSTOM = _ida_nalt.SWI_CUSTOM

SWI_INDIRECT = _ida_nalt.SWI_INDIRECT

SWI_SUBTRACT = _ida_nalt.SWI_SUBTRACT

SWI_HXNOLOWCASE = _ida_nalt.SWI_HXNOLOWCASE

SWI_STDTBL = _ida_nalt.SWI_STDTBL

SWI_DEFRET = _ida_nalt.SWI_DEFRET

SWI_SELFREL = _ida_nalt.SWI_SELFREL

SWI_JMPINSN = _ida_nalt.SWI_JMPINSN

SWI_VERSION = _ida_nalt.SWI_VERSION



def get_switch_info(*args):
    r"""get_switch_info(out, ea) -> ssize_t"""
    return _ida_nalt.get_switch_info(*args)

def set_switch_info(*args):
    r"""set_switch_info(ea, _in)"""
    return _ida_nalt.set_switch_info(*args)

def del_switch_info(*args):
    r"""del_switch_info(ea)"""
    return _ida_nalt.del_switch_info(*args)

def get_switch_parent(*args):
    r"""get_switch_parent(ea) -> ea_t"""
    return _ida_nalt.get_switch_parent(*args)

def set_switch_parent(*args):
    r"""set_switch_parent(ea, x)"""
    return _ida_nalt.set_switch_parent(*args)

def del_switch_parent(*args):
    r"""del_switch_parent(ea)"""
    return _ida_nalt.del_switch_parent(*args)
class custom_data_type_ids_t(object):
    r"""Proxy of C++ custom_data_type_ids_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dtid = property(_ida_nalt.custom_data_type_ids_t_dtid_get, _ida_nalt.custom_data_type_ids_t_dtid_set, doc=r"""dtid""")
    fids = property(_ida_nalt.custom_data_type_ids_t_fids_get, _ida_nalt.custom_data_type_ids_t_fids_set, doc=r"""fids""")

    def __getFids(self, *args):
        r"""__getFids(self) -> custom_data_type_ids_fids_array"""
        return _ida_nalt.custom_data_type_ids_t___getFids(self, *args)

    fids = property(__getFids)


    def __init__(self, *args):
        r"""__init__(self) -> custom_data_type_ids_t"""
        _ida_nalt.custom_data_type_ids_t_swiginit(self, _ida_nalt.new_custom_data_type_ids_t(*args))
    __swig_destroy__ = _ida_nalt.delete_custom_data_type_ids_t

# Register custom_data_type_ids_t in _ida_nalt:
_ida_nalt.custom_data_type_ids_t_swigregister(custom_data_type_ids_t)


def get_custom_data_type_ids(*args):
    r"""get_custom_data_type_ids(cdis, ea) -> int"""
    return _ida_nalt.get_custom_data_type_ids(*args)

def set_custom_data_type_ids(*args):
    r"""set_custom_data_type_ids(ea, cdis)"""
    return _ida_nalt.set_custom_data_type_ids(*args)

def del_custom_data_type_ids(*args):
    r"""del_custom_data_type_ids(ea)"""
    return _ida_nalt.del_custom_data_type_ids(*args)

def is_reftype_target_optional(*args):
    r"""is_reftype_target_optional(type) -> bool"""
    return _ida_nalt.is_reftype_target_optional(*args)

def get_reftype_by_size(*args):
    r"""get_reftype_by_size(size) -> reftype_t"""
    return _ida_nalt.get_reftype_by_size(*args)
class refinfo_t(object):
    r"""Proxy of C++ refinfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    target = property(_ida_nalt.refinfo_t_target_get, _ida_nalt.refinfo_t_target_set, doc=r"""target""")
    base = property(_ida_nalt.refinfo_t_base_get, _ida_nalt.refinfo_t_base_set, doc=r"""base""")
    tdelta = property(_ida_nalt.refinfo_t_tdelta_get, _ida_nalt.refinfo_t_tdelta_set, doc=r"""tdelta""")
    flags = property(_ida_nalt.refinfo_t_flags_get, _ida_nalt.refinfo_t_flags_set, doc=r"""flags""")

    def type(self, *args):
        r"""type(self) -> reftype_t"""
        return _ida_nalt.refinfo_t_type(self, *args)

    def is_target_optional(self, *args):
        r"""is_target_optional(self) -> bool"""
        return _ida_nalt.refinfo_t_is_target_optional(self, *args)

    def no_base_xref(self, *args):
        r"""no_base_xref(self) -> bool"""
        return _ida_nalt.refinfo_t_no_base_xref(self, *args)

    def is_pastend(self, *args):
        r"""is_pastend(self) -> bool"""
        return _ida_nalt.refinfo_t_is_pastend(self, *args)

    def is_rvaoff(self, *args):
        r"""is_rvaoff(self) -> bool"""
        return _ida_nalt.refinfo_t_is_rvaoff(self, *args)

    def is_custom(self, *args):
        r"""is_custom(self) -> bool"""
        return _ida_nalt.refinfo_t_is_custom(self, *args)

    def is_subtract(self, *args):
        r"""is_subtract(self) -> bool"""
        return _ida_nalt.refinfo_t_is_subtract(self, *args)

    def is_signed(self, *args):
        r"""is_signed(self) -> bool"""
        return _ida_nalt.refinfo_t_is_signed(self, *args)

    def set_type(self, *args):
        r"""set_type(self, t)"""
        return _ida_nalt.refinfo_t_set_type(self, *args)

    def init(self, *args):
        r"""init(self, reft_and_flags, _base=0, _target=BADADDR, _tdelta=0)"""
        return _ida_nalt.refinfo_t_init(self, *args)

    def __init__(self, *args):
        r"""__init__(self) -> refinfo_t"""
        _ida_nalt.refinfo_t_swiginit(self, _ida_nalt.new_refinfo_t(*args))
    __swig_destroy__ = _ida_nalt.delete_refinfo_t

# Register refinfo_t in _ida_nalt:
_ida_nalt.refinfo_t_swigregister(refinfo_t)
cvar = _ida_nalt.cvar
V695_REF_OFF8 = cvar.V695_REF_OFF8
REF_OFF16 = cvar.REF_OFF16
REF_OFF32 = cvar.REF_OFF32
REF_LOW8 = cvar.REF_LOW8
REF_LOW16 = cvar.REF_LOW16
REF_HIGH8 = cvar.REF_HIGH8
REF_HIGH16 = cvar.REF_HIGH16
V695_REF_VHIGH = cvar.V695_REF_VHIGH
V695_REF_VLOW = cvar.V695_REF_VLOW
REF_OFF64 = cvar.REF_OFF64
REF_OFF8 = cvar.REF_OFF8
REF_LAST = cvar.REF_LAST
REFINFO_TYPE = _ida_nalt.REFINFO_TYPE

REFINFO_RVAOFF = _ida_nalt.REFINFO_RVAOFF

REFINFO_PASTEND = _ida_nalt.REFINFO_PASTEND

REFINFO_CUSTOM = _ida_nalt.REFINFO_CUSTOM

REFINFO_NOBASE = _ida_nalt.REFINFO_NOBASE

REFINFO_SUBTRACT = _ida_nalt.REFINFO_SUBTRACT

REFINFO_SIGNEDOP = _ida_nalt.REFINFO_SIGNEDOP



def find_custom_refinfo(*args):
    r"""find_custom_refinfo(name) -> int"""
    return _ida_nalt.find_custom_refinfo(*args)

def get_custom_refinfo(*args):
    r"""get_custom_refinfo(crid) -> custom_refinfo_handler_t const *"""
    return _ida_nalt.get_custom_refinfo(*args)
MAXSTRUCPATH = _ida_nalt.MAXSTRUCPATH

class strpath_t(object):
    r"""Proxy of C++ strpath_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    len = property(_ida_nalt.strpath_t_len_get, _ida_nalt.strpath_t_len_set, doc=r"""len""")
    ids = property(_ida_nalt.strpath_t_ids_get, _ida_nalt.strpath_t_ids_set, doc=r"""ids""")
    delta = property(_ida_nalt.strpath_t_delta_get, _ida_nalt.strpath_t_delta_set, doc=r"""delta""")

    def __getIds(self, *args):
        r"""__getIds(self) -> strpath_ids_array"""
        return _ida_nalt.strpath_t___getIds(self, *args)

    ids = property(__getIds)


    def __init__(self, *args):
        r"""__init__(self) -> strpath_t"""
        _ida_nalt.strpath_t_swiginit(self, _ida_nalt.new_strpath_t(*args))
    __swig_destroy__ = _ida_nalt.delete_strpath_t

# Register strpath_t in _ida_nalt:
_ida_nalt.strpath_t_swigregister(strpath_t)

class enum_const_t(object):
    r"""Proxy of C++ enum_const_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tid = property(_ida_nalt.enum_const_t_tid_get, _ida_nalt.enum_const_t_tid_set, doc=r"""tid""")
    serial = property(_ida_nalt.enum_const_t_serial_get, _ida_nalt.enum_const_t_serial_set, doc=r"""serial""")

    def __init__(self, *args):
        r"""__init__(self) -> enum_const_t"""
        _ida_nalt.enum_const_t_swiginit(self, _ida_nalt.new_enum_const_t(*args))
    __swig_destroy__ = _ida_nalt.delete_enum_const_t

# Register enum_const_t in _ida_nalt:
_ida_nalt.enum_const_t_swigregister(enum_const_t)

class opinfo_t(object):
    r"""Proxy of C++ opinfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ri = property(_ida_nalt.opinfo_t_ri_get, _ida_nalt.opinfo_t_ri_set, doc=r"""ri""")
    tid = property(_ida_nalt.opinfo_t_tid_get, _ida_nalt.opinfo_t_tid_set, doc=r"""tid""")
    path = property(_ida_nalt.opinfo_t_path_get, _ida_nalt.opinfo_t_path_set, doc=r"""path""")
    strtype = property(_ida_nalt.opinfo_t_strtype_get, _ida_nalt.opinfo_t_strtype_set, doc=r"""strtype""")
    ec = property(_ida_nalt.opinfo_t_ec_get, _ida_nalt.opinfo_t_ec_set, doc=r"""ec""")
    cd = property(_ida_nalt.opinfo_t_cd_get, _ida_nalt.opinfo_t_cd_set, doc=r"""cd""")

    def __init__(self, *args):
        r"""__init__(self) -> opinfo_t"""
        _ida_nalt.opinfo_t_swiginit(self, _ida_nalt.new_opinfo_t(*args))
    __swig_destroy__ = _ida_nalt.delete_opinfo_t

# Register opinfo_t in _ida_nalt:
_ida_nalt.opinfo_t_swigregister(opinfo_t)

class printop_t(object):
    r"""Proxy of C++ printop_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags = property(_ida_nalt.printop_t_flags_get, _ida_nalt.printop_t_flags_set, doc=r"""flags""")
    ti = property(_ida_nalt.printop_t_ti_get, _ida_nalt.printop_t_ti_set, doc=r"""ti""")
    is_ti_valid = property(_ida_nalt.printop_t_is_ti_valid_get, _ida_nalt.printop_t_is_ti_valid_set, doc=r"""is_ti_valid""")
    suspop = property(_ida_nalt.printop_t_suspop_get, _ida_nalt.printop_t_suspop_set, doc=r"""suspop""")

    def get_ti(self, *args):
        r"""get_ti(self) -> opinfo_t"""
        return _ida_nalt.printop_t_get_ti(self, *args)

    def __init__(self, *args):
        r"""__init__(self) -> printop_t"""
        _ida_nalt.printop_t_swiginit(self, _ida_nalt.new_printop_t(*args))
    __swig_destroy__ = _ida_nalt.delete_printop_t

# Register printop_t in _ida_nalt:
_ida_nalt.printop_t_swigregister(printop_t)


def set_refinfo_ex(*args):
    r"""set_refinfo_ex(ea, n, ri) -> int"""
    return _ida_nalt.set_refinfo_ex(*args)

def set_refinfo(*args):
    r"""set_refinfo(ea, n, type, target=BADADDR, base=0, tdelta=0) -> int"""
    return _ida_nalt.set_refinfo(*args)

def get_refinfo(*args):
    r"""get_refinfo(ri, ea, n) -> int"""
    return _ida_nalt.get_refinfo(*args)

def del_refinfo(*args):
    r"""del_refinfo(ea, n) -> int"""
    return _ida_nalt.del_refinfo(*args)

def get_tinfo(*args):
    r"""get_tinfo(tif, ea) -> bool"""
    return _ida_nalt.get_tinfo(*args)

def set_tinfo(*args):
    r"""set_tinfo(ea, tif) -> bool"""
    return _ida_nalt.set_tinfo(*args)

def del_tinfo(*args):
    r"""del_tinfo(ea)"""
    return _ida_nalt.del_tinfo(*args)

def get_op_tinfo(*args):
    r"""get_op_tinfo(tif, ea, n) -> bool"""
    return _ida_nalt.get_op_tinfo(*args)

def set_op_tinfo(*args):
    r"""set_op_tinfo(ea, n, tif) -> bool"""
    return _ida_nalt.set_op_tinfo(*args)

def del_op_tinfo(*args):
    r"""del_op_tinfo(ea, n)"""
    return _ida_nalt.del_op_tinfo(*args)
RIDX_FILE_FORMAT_NAME = _ida_nalt.RIDX_FILE_FORMAT_NAME

RIDX_SELECTORS = _ida_nalt.RIDX_SELECTORS

RIDX_GROUPS = _ida_nalt.RIDX_GROUPS

RIDX_H_PATH = _ida_nalt.RIDX_H_PATH

RIDX_C_MACROS = _ida_nalt.RIDX_C_MACROS

RIDX_SMALL_IDC_OLD = _ida_nalt.RIDX_SMALL_IDC_OLD

RIDX_NOTEPAD = _ida_nalt.RIDX_NOTEPAD

RIDX_INCLUDE = _ida_nalt.RIDX_INCLUDE

RIDX_SMALL_IDC = _ida_nalt.RIDX_SMALL_IDC

RIDX_DUALOP_GRAPH = _ida_nalt.RIDX_DUALOP_GRAPH

RIDX_DUALOP_TEXT = _ida_nalt.RIDX_DUALOP_TEXT

RIDX_MD5 = _ida_nalt.RIDX_MD5

RIDX_IDA_VERSION = _ida_nalt.RIDX_IDA_VERSION

RIDX_STR_ENCODINGS = _ida_nalt.RIDX_STR_ENCODINGS

RIDX_SRCDBG_PATHS = _ida_nalt.RIDX_SRCDBG_PATHS

RIDX_SELECTED_EXTLANG = _ida_nalt.RIDX_SELECTED_EXTLANG

RIDX_DBG_BINPATHS = _ida_nalt.RIDX_DBG_BINPATHS

RIDX_SHA256 = _ida_nalt.RIDX_SHA256

RIDX_ABINAME = _ida_nalt.RIDX_ABINAME

RIDX_ARCHIVE_PATH = _ida_nalt.RIDX_ARCHIVE_PATH

RIDX_PROBLEMS = _ida_nalt.RIDX_PROBLEMS


def get_input_file_path(*args):
    r"""get_input_file_path() -> ssize_t"""
    return _ida_nalt.get_input_file_path(*args)

def get_root_filename(*args):
    r"""get_root_filename() -> ssize_t"""
    return _ida_nalt.get_root_filename(*args)

def set_root_filename(*args):
    r"""set_root_filename(file)"""
    return _ida_nalt.set_root_filename(*args)

def retrieve_input_file_size(*args):
    r"""retrieve_input_file_size() -> uint32"""
    return _ida_nalt.retrieve_input_file_size(*args)

def retrieve_input_file_crc32(*args):
    r"""retrieve_input_file_crc32() -> uint32"""
    return _ida_nalt.retrieve_input_file_crc32(*args)

def retrieve_input_file_md5(*args):
    r"""retrieve_input_file_md5() -> bool"""
    return _ida_nalt.retrieve_input_file_md5(*args)

def retrieve_input_file_sha256(*args):
    r"""retrieve_input_file_sha256() -> bool"""
    return _ida_nalt.retrieve_input_file_sha256(*args)

def get_asm_inc_file(*args):
    r"""get_asm_inc_file() -> ssize_t"""
    return _ida_nalt.get_asm_inc_file(*args)

def set_asm_inc_file(*args):
    r"""set_asm_inc_file(file) -> bool"""
    return _ida_nalt.set_asm_inc_file(*args)

def get_imagebase(*args):
    r"""get_imagebase() -> ea_t"""
    return _ida_nalt.get_imagebase(*args)

def set_imagebase(*args):
    r"""set_imagebase(base)"""
    return _ida_nalt.set_imagebase(*args)

def get_ids_modnode(*args):
    r"""get_ids_modnode() -> netnode"""
    return _ida_nalt.get_ids_modnode(*args)

def set_ids_modnode(*args):
    r"""set_ids_modnode(id)"""
    return _ida_nalt.set_ids_modnode(*args)

def dbg_get_input_path(*args):
    r"""dbg_get_input_path() -> ssize_t"""
    return _ida_nalt.dbg_get_input_path(*args)

def get_archive_path(*args):
    r"""get_archive_path() -> ssize_t"""
    return _ida_nalt.get_archive_path(*args)

def set_archive_path(*args):
    r"""set_archive_path(file) -> bool"""
    return _ida_nalt.set_archive_path(*args)

def get_encoding_qty(*args):
    r"""get_encoding_qty() -> int"""
    return _ida_nalt.get_encoding_qty(*args)

def get_encoding_name(*args):
    r"""get_encoding_name(idx) -> char const *"""
    return _ida_nalt.get_encoding_name(*args)

def add_encoding(*args):
    r"""add_encoding(encoding) -> int"""
    return _ida_nalt.add_encoding(*args)

def del_encoding(*args):
    r"""del_encoding(idx) -> bool"""
    return _ida_nalt.del_encoding(*args)

def rename_encoding(*args):
    r"""rename_encoding(idx, encoding) -> bool"""
    return _ida_nalt.rename_encoding(*args)
BPU_1B = _ida_nalt.BPU_1B

BPU_2B = _ida_nalt.BPU_2B

BPU_4B = _ida_nalt.BPU_4B


def get_encoding_bpu(*args):
    r"""get_encoding_bpu(idx) -> int"""
    return _ida_nalt.get_encoding_bpu(*args)

def get_strtype_bpu(*args):
    r"""get_strtype_bpu(strtype) -> int"""
    return _ida_nalt.get_strtype_bpu(*args)

def get_default_encoding_idx(*args):
    r"""get_default_encoding_idx(bpu) -> int"""
    return _ida_nalt.get_default_encoding_idx(*args)

def set_default_encoding_idx(*args):
    r"""set_default_encoding_idx(bpu, idx) -> bool"""
    return _ida_nalt.set_default_encoding_idx(*args)

def encoding_from_strtype(*args):
    r"""encoding_from_strtype(strtype) -> char const *"""
    return _ida_nalt.encoding_from_strtype(*args)

def get_outfile_encoding_idx(*args):
    r"""get_outfile_encoding_idx() -> int"""
    return _ida_nalt.get_outfile_encoding_idx(*args)

def set_outfile_encoding_idx(*args):
    r"""set_outfile_encoding_idx(idx) -> bool"""
    return _ida_nalt.set_outfile_encoding_idx(*args)

def get_import_module_qty(*args):
    r"""get_import_module_qty() -> uint"""
    return _ida_nalt.get_import_module_qty(*args)

def delete_imports(*args):
    r"""delete_imports()"""
    return _ida_nalt.delete_imports(*args)

def validate_idb_names(*args):
    r"""validate_idb_names(do_repair) -> int"""
    return _ida_nalt.validate_idb_names(*args)

def set_gotea(*args):
    r"""set_gotea(gotea)"""
    return _ida_nalt.set_gotea(*args)

def get_gotea(*args):
    r"""get_gotea() -> ea_t"""
    return _ida_nalt.get_gotea(*args)

def get_import_module_name(*args):
    r"""get_import_module_name(mod_index) -> PyObject *"""
    return _ida_nalt.get_import_module_name(*args)

def enum_import_names(*args):
    r"""enum_import_names(mod_index, py_cb) -> int"""
    return _ida_nalt.enum_import_names(*args)

def switch_info_t__from_ptrval__(*args):
    r"""switch_info_t__from_ptrval__(ptrval) -> switch_info_t"""
    return _ida_nalt.switch_info_t__from_ptrval__(*args)

#<pycode(py_nalt)>
_real_get_switch_info = get_switch_info
def get_switch_info(*args):
    if len(args) == 1:
        si, ea = switch_info_t(), args[0]
    else:
        si, ea = args
    return None if _real_get_switch_info(si, ea) <= 0 else si
def get_abi_name(*args):
    import ida_typeinf
    return ida_typeinf.get_abi_name(args)
#</pycode(py_nalt)>


if _BC695:
    ASCSTR_LAST=7
    ASCSTR_LEN2=STRTYPE_LEN2
    ASCSTR_LEN4=STRTYPE_LEN4
    ASCSTR_PASCAL=STRTYPE_PASCAL
    ASCSTR_TERMCHR=STRTYPE_TERMCHR
    ASCSTR_ULEN2=STRTYPE_LEN2_16
    ASCSTR_ULEN4=STRTYPE_LEN4_16
    ASCSTR_UNICODE=STRTYPE_C_16
    ASCSTR_UTF16=STRTYPE_C_16
    ASCSTR_UTF32=STRTYPE_C_32
    REF_VHIGH=V695_REF_VHIGH
    REF_VLOW=V695_REF_VLOW
    SWI_END_IN_TBL=SWI_DEF_IN_TBL
    SWI_BC695_EXTENDED=0x8000
    SWI2_INDIRECT=SWI_INDIRECT >> 16
    SWI2_SUBTRACT=SWI_SUBTRACT >> 16
    import ida_netnode
    RIDX_AUTO_PLUGINS=ida_netnode.BADNODE
    change_encoding_name=rename_encoding
    def del_tinfo2(ea, n=None):
        if n is not None:
            return del_op_tinfo(ea, n)
        else:
            return del_tinfo(ea)
    get_encodings_count=get_encoding_qty
    def get_op_tinfo(*args):
        import ida_typeinf
        if isinstance(args[2], ida_typeinf.tinfo_t): # 6.95: ea, n, tinfo_t
            ea, n, tif = args
        else:                                        # 7.00: tinfo_t, ea, n
            tif, ea, n = args
        return _ida_nalt.get_op_tinfo(tif, ea, n)
    get_op_tinfo2=get_op_tinfo
    def is_unicode(strtype):
        return (strtype & STRWIDTH_MASK) > 0
    set_op_tinfo2=set_op_tinfo
    set_tinfo2=set_tinfo
    def make_switch_info_t__init__(real_init):
        def wrapper(self):
            real_init(self)
            self.bc695_api = False
        return wrapper
    switch_info_t.__init__ = make_switch_info_t__init__(switch_info_t.__init__)
    switch_info_t.regdtyp = switch_info_t.regdtype
    def get_tinfo(*args):
        import ida_typeinf
        if isinstance(args[1], ida_typeinf.tinfo_t): # 6.95: ea, tinfo_t
            ea, tif = args
        else:                                        # 7.00: tinfo_t, ea
            tif, ea = args
        return _ida_nalt.get_tinfo(tif, ea)
    get_tinfo2=get_tinfo
    def get_refinfo(*args):
        if isinstance(args[2], refinfo_t): # 6.95: ea, n, refinfo_t
            ea, n, ri = args
        else:                              # 7.00: refinfo_t, ea, n
            ri, ea, n = args
        return _ida_nalt.get_refinfo(ri, ea, n)
    get_switch_info_ex=get_switch_info
    set_switch_info_ex=set_switch_info
    del_switch_info_ex=del_switch_info
    switch_info_ex_t_assign=_ida_nalt.switch_info_t_assign
    switch_info_ex_t_get_custom=_ida_nalt.switch_info_t_custom_get
    switch_info_ex_t_get_defjump=_ida_nalt.switch_info_t_defjump_get
    switch_info_ex_t_get_elbase=_ida_nalt.switch_info_t_elbase_get
    switch_info_ex_t_get_flags=_ida_nalt.switch_info_t_flags_get
    switch_info_ex_t_get_ind_lowcase=_ida_nalt.switch_info_t_ind_lowcase_get
    switch_info_ex_t_get_jcases=_ida_nalt.switch_info_t_jcases_get
    switch_info_ex_t_get_jumps=_ida_nalt.switch_info_t_jumps_get
    switch_info_ex_t_get_ncases=_ida_nalt.switch_info_t_ncases_get
    switch_info_ex_t_get_regdtyp=_ida_nalt.switch_info_t_regdtype_get
    switch_info_ex_t_get_regnum=_ida_nalt.switch_info_t_regnum_get
    switch_info_ex_t_get_startea=_ida_nalt.switch_info_t_startea_get
    switch_info_ex_t_get_values_lowcase=_ida_nalt.switch_info_t__get_values_lowcase
    switch_info_ex_t_set_custom=_ida_nalt.switch_info_t_custom_set
    switch_info_ex_t_set_defjump=_ida_nalt.switch_info_t_defjump_set
    switch_info_ex_t_set_elbase=_ida_nalt.switch_info_t_elbase_set
    switch_info_ex_t_set_flags=_ida_nalt.switch_info_t_flags_set
    switch_info_ex_t_set_ind_lowcase=_ida_nalt.switch_info_t_ind_lowcase_set
    switch_info_ex_t_set_jcases=_ida_nalt.switch_info_t_jcases_set
    switch_info_ex_t_set_jumps=_ida_nalt.switch_info_t_jumps_set
    switch_info_ex_t_set_ncases=_ida_nalt.switch_info_t_ncases_set
    switch_info_ex_t_set_regdtyp=_ida_nalt.switch_info_t_regdtype_set
    switch_info_ex_t_set_regnum=_ida_nalt.switch_info_t_regnum_set
    switch_info_ex_t_set_startea=_ida_nalt.switch_info_t_startea_set
    switch_info_ex_t_set_values_lowcase=_ida_nalt.switch_info_t__set_values_lowcase
    def __switch_info_t_get_flags__(instance):
        return _ida_nalt.switch_info_t_flags_get(instance) | SWI_BC695_EXTENDED
    def __switch_info_t_set_flags__(instance, v):
        if instance.bc695_api:
            v |= (_ida_nalt.switch_info_t_flags_get(instance) & 0xFFFF0000)
        _ida_nalt.switch_info_t_flags_set(instance, v)
    switch_info_t.flags = property(__switch_info_t_get_flags__, __switch_info_t_set_flags__)
    def __switch_info_t_get_flags2__(instance):
        instance.bc695_api = True
        return _ida_nalt.switch_info_t_flags_get(instance) >> 16
    def __switch_info_t_set_flags2__(instance, v):
        instance.bc695_api = True
        flags = _ida_nalt.switch_info_t_flags_get(instance)
        instance.flags = (flags & 0xFFFF) | (v << 16)
    switch_info_t.flags2 = property(__switch_info_t_get_flags2__, __switch_info_t_set_flags2__)
    switch_info_ex_t=switch_info_t




