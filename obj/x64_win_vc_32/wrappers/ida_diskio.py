# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""IDA Plugin SDK API wrapper: diskio"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_diskio
else:
    import _ida_diskio

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import ida_idaapi


import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func


def idadir(*args):
    r"""idadir(subdir) -> char const *"""
    return _ida_diskio.idadir(*args)

def getsysfile(*args):
    r"""getsysfile(filename, subdir) -> char *"""
    return _ida_diskio.getsysfile(*args)
CFG_SUBDIR = _ida_diskio.CFG_SUBDIR

IDC_SUBDIR = _ida_diskio.IDC_SUBDIR

IDS_SUBDIR = _ida_diskio.IDS_SUBDIR

IDP_SUBDIR = _ida_diskio.IDP_SUBDIR

LDR_SUBDIR = _ida_diskio.LDR_SUBDIR

SIG_SUBDIR = _ida_diskio.SIG_SUBDIR

TIL_SUBDIR = _ida_diskio.TIL_SUBDIR

PLG_SUBDIR = _ida_diskio.PLG_SUBDIR


def get_user_idadir(*args):
    r"""get_user_idadir() -> char const *"""
    return _ida_diskio.get_user_idadir(*args)

def get_ida_subdirs(*args):
    r"""get_ida_subdirs(subdir, flags=0) -> int"""
    return _ida_diskio.get_ida_subdirs(*args)
IDA_SUBDIR_IDP = _ida_diskio.IDA_SUBDIR_IDP


def get_special_folder(*args):
    r"""get_special_folder(csidl) -> bool"""
    return _ida_diskio.get_special_folder(*args)
CSIDL_APPDATA = _ida_diskio.CSIDL_APPDATA

CSIDL_LOCAL_APPDATA = _ida_diskio.CSIDL_LOCAL_APPDATA

CSIDL_PROGRAM_FILES = _ida_diskio.CSIDL_PROGRAM_FILES

CSIDL_PROGRAM_FILES_COMMON = _ida_diskio.CSIDL_PROGRAM_FILES_COMMON

CSIDL_PROGRAM_FILESX86 = _ida_diskio.CSIDL_PROGRAM_FILESX86


def fopenWT(*args):
    r"""fopenWT(file) -> FILE *"""
    return _ida_diskio.fopenWT(*args)

def fopenWB(*args):
    r"""fopenWB(file) -> FILE *"""
    return _ida_diskio.fopenWB(*args)

def fopenRT(*args):
    r"""fopenRT(file) -> FILE *"""
    return _ida_diskio.fopenRT(*args)

def fopenRB(*args):
    r"""fopenRB(file) -> FILE *"""
    return _ida_diskio.fopenRB(*args)

def fopenM(*args):
    r"""fopenM(file) -> FILE *"""
    return _ida_diskio.fopenM(*args)

def fopenA(*args):
    r"""fopenA(file) -> FILE *"""
    return _ida_diskio.fopenA(*args)
LINPUT_NONE = _ida_diskio.LINPUT_NONE

LINPUT_LOCAL = _ida_diskio.LINPUT_LOCAL

LINPUT_RFILE = _ida_diskio.LINPUT_RFILE

LINPUT_PROCMEM = _ida_diskio.LINPUT_PROCMEM

LINPUT_GENERIC = _ida_diskio.LINPUT_GENERIC


def qlgetz(*args):
    r"""qlgetz(li, fpos) -> char *"""
    return _ida_diskio.qlgetz(*args)

def open_linput(*args):
    r"""open_linput(file, remote) -> linput_t *"""
    return _ida_diskio.open_linput(*args)
class generic_linput_t(object):
    r"""Proxy of C++ generic_linput_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    filesize = property(_ida_diskio.generic_linput_t_filesize_get, _ida_diskio.generic_linput_t_filesize_set, doc=r"""filesize""")
    blocksize = property(_ida_diskio.generic_linput_t_blocksize_get, _ida_diskio.generic_linput_t_blocksize_set, doc=r"""blocksize""")

    def read(self, *args):
        r"""read(self, off, buffer, nbytes) -> ssize_t"""
        return _ida_diskio.generic_linput_t_read(self, *args)
    __swig_destroy__ = _ida_diskio.delete_generic_linput_t

# Register generic_linput_t in _ida_diskio:
_ida_diskio.generic_linput_t_swigregister(generic_linput_t)


def create_generic_linput(*args):
    r"""create_generic_linput(gl) -> linput_t *"""
    return _ida_diskio.create_generic_linput(*args)

def create_memory_linput(*args):
    r"""create_memory_linput(start, size) -> linput_t *"""
    return _ida_diskio.create_memory_linput(*args)

def get_linput_type(*args):
    r"""get_linput_type(li) -> linput_type_t"""
    return _ida_diskio.get_linput_type(*args)
class linput_buffer_t(object):
    r"""Proxy of C++ linput_buffer_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(self, linput, size=0) -> linput_buffer_t"""
        _ida_diskio.linput_buffer_t_swiginit(self, _ida_diskio.new_linput_buffer_t(*args))

    def read(self, *args):
        r"""read(self, buf, n) -> ssize_t"""
        return _ida_diskio.linput_buffer_t_read(self, *args)

    def eof(self, *args):
        r"""eof(self) -> bool"""
        return _ida_diskio.linput_buffer_t_eof(self, *args)
    __swig_destroy__ = _ida_diskio.delete_linput_buffer_t

# Register linput_buffer_t in _ida_diskio:
_ida_diskio.linput_buffer_t_swigregister(linput_buffer_t)


def eclose(*args):
    r"""eclose(fp)"""
    return _ida_diskio.eclose(*args)

def enumerate_files(*args):
    r"""enumerate_files(path, fname, callback) -> PyObject *"""
    return _ida_diskio.enumerate_files(*args)

def create_bytearray_linput(*args):
    r"""create_bytearray_linput(s) -> linput_t *"""
    return _ida_diskio.create_bytearray_linput(*args)

def close_linput(*args):
    r"""close_linput(li)"""
    return _ida_diskio.close_linput(*args)

#<pycode(py_diskio)>
#</pycode(py_diskio)>


if _BC695:
    create_generic_linput64=create_generic_linput
    generic_linput64_t=generic_linput_t




