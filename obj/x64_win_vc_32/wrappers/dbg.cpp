/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_DIRECTORS
#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    PyBytes_AsStringAndSize(str, &cstr, &len);
    newstr = (char *) malloc(len+1);
    memcpy(newstr, cstr, len+1);
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#else
# error Oh noes!
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(Py_TYPE(op), SwigPyObject_type()))
    return 1;
#else
  if (Py_TYPE(op) == SwigPyObject_type())
    return 1;
#endif

#ifndef Py_LIMITED_API
  return strcmp(Py_TYPE(op)->tp_name, "SwigPyObject") == 0;
#else
  //printf("### SwigPyObject_Check\n");
  PyObject* ty_name = PyObject_GetAttrString((PyObject*)Py_TYPE(op), "__name__");
  if (!ty_name)
    return 0;
  int cmp = PyUnicode_CompareWithASCIIString(ty_name, "SwigPyObject");
  Py_DECREF(ty_name);
  return cmp == 0;
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
#else // Py_LIMITED_API
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void*)SwigPyObject_dealloc },
    { Py_tp_repr, (void*)SwigPyObject_repr },
    { Py_tp_getattro, (void*)PyObject_GenericGetAttr },
    { Py_tp_doc, (void*)swigobject_doc },
    { Py_tp_richcompare, (void*)SwigPyObject_richcompare },
    { Py_tp_methods, (void*)swigobject_methods },
    { Py_nb_int, (void*)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {};
    spec.name = "SwigPyObject";
    spec.basicsize = sizeof(SwigPyObject);
    spec.flags = Py_TPFLAGS_DEFAULT;
    spec.slots = slots;
  return (PyTypeObject*)PyType_FromSpec(&spec);
#endif // Py_LIMITED_API
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  if (Py_TYPE(op) == SwigPyPacked_type())
    return 1;

#ifndef Py_LIMITED_API
  return strcmp(Py_TYPE(op)->tp_name, "SwigPyPacked") == 0;
#else
  //printf("### SwigPyPacked_Check\n");
  PyObject* ty_name = PyObject_GetAttrString((PyObject*)Py_TYPE(op), "__name__");
  if (!ty_name)
    return 0;
  int cmp = PyUnicode_CompareWithASCIIString(ty_name, "SwigPyPacked");
  Py_DECREF(ty_name);
  return cmp == 0;
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void*)SwigPyPacked_dealloc },
    { Py_tp_repr, (void*)SwigPyPacked_repr },
    { Py_tp_str, (void*)SwigPyPacked_str },
    { Py_tp_getattro, (void*)PyObject_GenericGetAttr },
    { Py_tp_doc, swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {};
    spec.name = "SwigPyPacked";
    spec.basicsize = sizeof(SwigPyPacked);
    spec.flags = Py_TPFLAGS_DEFAULT;
    spec.slots = slots;
  return (PyTypeObject*)PyType_FromSpec(&spec);
#endif  
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    const char *doc = pystr_doc ? SWIG_Python_str_AsChar(pystr_doc) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    SWIG_Python_str_DelForPy3(doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          PyObject_SetAttr(inst, SWIG_This(), swig_this);
#ifndef Py_LIMITED_API
          Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
          PyType_Modified(Py_TYPE(inst));
#endif
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, "__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
	      allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
          newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API // tp_name is not accessible
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
#endif      
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

#ifndef Py_LIMITED_API
SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
#endif // Py_LIMITED_API

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

/* simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
# define __PTHREAD__
# if defined(_WIN32) || defined(__WIN32__)
#  include <windows.h>
#  define pthread_mutex_lock EnterCriticalSection
#  define pthread_mutex_unlock LeaveCriticalSection
#  define pthread_mutex_t CRITICAL_SECTION
#  define SWIG_MUTEX_INIT(var) var
# else
#  include <pthread.h>
#  define SWIG_MUTEX_INIT(var) var = PTHREAD_MUTEX_INITIALIZER 
# endif
#endif

#ifdef  __PTHREAD__
  class Guard {
    pthread_mutex_t *_mutex;

  public:
    Guard(pthread_mutex_t &mutex) : _mutex(&mutex) {
      pthread_mutex_lock(_mutex);
    }

    ~Guard() {
      pthread_mutex_unlock(_mutex);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __PTHREAD__
    static pthread_mutex_t swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __PTHREAD__
  pthread_mutex_t SWIG_MUTEX_INIT(Director::swig_mutex_own);
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DBG_Hooks swig_types[0]
#define SWIGTYPE_p_TWidget swig_types[1]
#define SWIGTYPE_p__qstringT_char_t swig_types[2]
#define SWIGTYPE_p__qstringT_unsigned_char_t swig_types[3]
#define SWIGTYPE_p__qstringT_unsigned_short_t swig_types[4]
#define SWIGTYPE_p_action_ctx_base_t swig_types[5]
#define SWIGTYPE_p_biggest_t swig_types[6]
#define SWIGTYPE_p_bpt_location_t swig_types[7]
#define SWIGTYPE_p_bpt_t swig_types[8]
#define SWIGTYPE_p_bytevec_t swig_types[9]
#define SWIGTYPE_p_char swig_types[10]
#define SWIGTYPE_p_const_iterator swig_types[11]
#define SWIGTYPE_p_debug_event_t swig_types[12]
#define SWIGTYPE_p_eval_ctx_t swig_types[13]
#define SWIGTYPE_p_f_p_TWidget_int_int_p_void__bool swig_types[14]
#define SWIGTYPE_p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void swig_types[15]
#define SWIGTYPE_p_f_p_TWidget_int_p_void__bool swig_types[16]
#define SWIGTYPE_p_f_p_TWidget_p_lochist_entry_t_p_void__void swig_types[17]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void swig_types[18]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int swig_types[19]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void swig_types[20]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int swig_types[21]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int swig_types[22]
#define SWIGTYPE_p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool swig_types[23]
#define SWIGTYPE_p_f_p_TWidget_p_void__int swig_types[24]
#define SWIGTYPE_p_f_p_TWidget_p_void__void swig_types[25]
#define SWIGTYPE_p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t swig_types[26]
#define SWIGTYPE_p_f_p_chooser_t_ssize_t__chooser_t__cbret_t swig_types[27]
#define SWIGTYPE_p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool swig_types[28]
#define SWIGTYPE_p_f_p_q_const__char_p_void__void swig_types[29]
#define SWIGTYPE_p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int swig_types[30]
#define SWIGTYPE_p_f_p_q_const__char_v_______int swig_types[31]
#define SWIGTYPE_p_f_p_void_int_va_list__ssize_t swig_types[32]
#define SWIGTYPE_p_f_r_q_const__insn_t_p_int_p_int__bool swig_types[33]
#define SWIGTYPE_p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool swig_types[34]
#define SWIGTYPE_p_f_unsigned_int__bool swig_types[35]
#define SWIGTYPE_p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int swig_types[36]
#define SWIGTYPE_p_f_unsigned_int_p_void__bool swig_types[37]
#define SWIGTYPE_p_f_unsigned_int_r_q_const__tinfo_t_p_void__int swig_types[38]
#define SWIGTYPE_p_f_unsigned_int_unsigned_int__unsigned_int swig_types[39]
#define SWIGTYPE_p_int swig_types[40]
#define SWIGTYPE_p_iterator swig_types[41]
#define SWIGTYPE_p_location_t swig_types[42]
#define SWIGTYPE_p_long_long swig_types[43]
#define SWIGTYPE_p_memreg_info_t swig_types[44]
#define SWIGTYPE_p_modinfo_t swig_types[45]
#define SWIGTYPE_p_p_TWidget swig_types[46]
#define SWIGTYPE_p_p_void swig_types[47]
#define SWIGTYPE_p_qiteratorT_qrefcnt_tT_source_file_t_t_t swig_types[48]
#define SWIGTYPE_p_qiteratorT_qrefcnt_tT_source_item_t_t_t swig_types[49]
#define SWIGTYPE_p_qrefcnt_obj_t swig_types[50]
#define SWIGTYPE_p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_file_t_t_t_t swig_types[51]
#define SWIGTYPE_p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_item_t_t_t_t swig_types[52]
#define SWIGTYPE_p_qrefcnt_tT_source_file_t_t swig_types[53]
#define SWIGTYPE_p_qrefcnt_tT_source_item_t_t swig_types[54]
#define SWIGTYPE_p_qvectorT__qstringT_char_t_t swig_types[55]
#define SWIGTYPE_p_qvectorT__qstringT_unsigned_short_t_t swig_types[56]
#define SWIGTYPE_p_qvectorT_argloc_t_t swig_types[57]
#define SWIGTYPE_p_qvectorT_bool_t swig_types[58]
#define SWIGTYPE_p_qvectorT_bpt_t_t swig_types[59]
#define SWIGTYPE_p_qvectorT_call_stack_info_t_t swig_types[60]
#define SWIGTYPE_p_qvectorT_channel_redir_t_t swig_types[61]
#define SWIGTYPE_p_qvectorT_compiled_binpat_t_t swig_types[62]
#define SWIGTYPE_p_qvectorT_debug_event_t_t swig_types[63]
#define SWIGTYPE_p_qvectorT_exception_info_t_t swig_types[64]
#define SWIGTYPE_p_qvectorT_funcarg_t_t swig_types[65]
#define SWIGTYPE_p_qvectorT_int_t swig_types[66]
#define SWIGTYPE_p_qvectorT_memory_info_t_t swig_types[67]
#define SWIGTYPE_p_qvectorT_memreg_info_t_t swig_types[68]
#define SWIGTYPE_p_qvectorT_modinfo_t_t swig_types[69]
#define SWIGTYPE_p_qvectorT_movbpt_code_t_t swig_types[70]
#define SWIGTYPE_p_qvectorT_movbpt_info_t_t swig_types[71]
#define SWIGTYPE_p_qvectorT_process_info_t_t swig_types[72]
#define SWIGTYPE_p_qvectorT_qrefcnt_tT_source_item_t_t_t swig_types[73]
#define SWIGTYPE_p_qvectorT_range_t_t swig_types[74]
#define SWIGTYPE_p_qvectorT_rangeset_t_const_p_t swig_types[75]
#define SWIGTYPE_p_qvectorT_rangeset_t_t swig_types[76]
#define SWIGTYPE_p_qvectorT_refinfo_desc_t_t swig_types[77]
#define SWIGTYPE_p_qvectorT_regval_t_t swig_types[78]
#define SWIGTYPE_p_qvectorT_scattered_segm_t_t swig_types[79]
#define SWIGTYPE_p_qvectorT_simd_info_t_t swig_types[80]
#define SWIGTYPE_p_qvectorT_simpleline_t_t swig_types[81]
#define SWIGTYPE_p_qvectorT_size_t_t swig_types[82]
#define SWIGTYPE_p_qvectorT_tev_info_reg_t_t swig_types[83]
#define SWIGTYPE_p_qvectorT_tev_info_t_t swig_types[84]
#define SWIGTYPE_p_qvectorT_tev_reg_value_t_t swig_types[85]
#define SWIGTYPE_p_qvectorT_thread_name_t_t swig_types[86]
#define SWIGTYPE_p_qvectorT_tinfo_t_t swig_types[87]
#define SWIGTYPE_p_qvectorT_type_attr_t_t swig_types[88]
#define SWIGTYPE_p_qvectorT_udt_member_t_t swig_types[89]
#define SWIGTYPE_p_qvectorT_unsigned_char_t swig_types[90]
#define SWIGTYPE_p_qvectorT_unsigned_int_t swig_types[91]
#define SWIGTYPE_p_register_info_t swig_types[92]
#define SWIGTYPE_p_regval_t swig_types[93]
#define SWIGTYPE_p_relobj_t swig_types[94]
#define SWIGTYPE_p_reloc_info_t swig_types[95]
#define SWIGTYPE_p_short swig_types[96]
#define SWIGTYPE_p_signed_char swig_types[97]
#define SWIGTYPE_p_source_file_t swig_types[98]
#define SWIGTYPE_p_source_item_t swig_types[99]
#define SWIGTYPE_p_source_view_t swig_types[100]
#define SWIGTYPE_p_srcinfo_provider_t swig_types[101]
#define SWIGTYPE_p_ssize_t swig_types[102]
#define SWIGTYPE_p_tev_info_reg_t swig_types[103]
#define SWIGTYPE_p_tev_info_t swig_types[104]
#define SWIGTYPE_p_tev_reg_value_t swig_types[105]
#define SWIGTYPE_p_ui_notification_t swig_types[106]
#define SWIGTYPE_p_unsigned_char swig_types[107]
#define SWIGTYPE_p_unsigned_int swig_types[108]
#define SWIGTYPE_p_unsigned_long_long swig_types[109]
#define SWIGTYPE_p_unsigned_short swig_types[110]
#define SWIGTYPE_p_value_type swig_types[111]
static swig_type_info *swig_types[113];
static swig_module_info swig_module = {swig_types, 112, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _ida_dbg.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__ida_dbg

#else
#  define SWIG_init    init_ida_dbg

#endif
#define SWIG_name    "_ida_dbg"

#define SWIGVERSION 0x040001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#ifndef USE_DANGEROUS_FUNCTIONS
  #define USE_DANGEROUS_FUNCTIONS 1
#endif
#include <pro.h>


#include "../../../idapy.hpp"


static void __raise_ba(const std::bad_alloc &ba)
{
  PyErr_SetString(PyExc_MemoryError, "Out of memory (bad_alloc)");
}

static void __raise_u()
{
  PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
}

static void __raise_e(const std::exception &e)
{
  const char *what = e.what();
  if ( what == NULL || what[0] == '\0' )
  {
    __raise_u();
  }
  else
  {
    PyErr_SetString(PyExc_RuntimeError, what);
  }
}

static void __raise_ie(const interr_exc_t &ie)
{
  qstring emsg;
  emsg.sprnt(INTERR_EXC_FMT, ie.code);
  PyErr_SetString(PyExc_RuntimeError, emsg.begin());
}

static void __raise_de(const Swig::DirectorException &e)
{
  PyErr_SetString(PyExc_RuntimeError, e.getMessage());
}

static void __raise_oor(const std::out_of_range &e)
{
  PyErr_SetString(PyExc_IndexError, e.what());
}

static bool __chkthr()
{
  bool ok = is_main_thread();
  if ( !ok )
    PyErr_SetString(PyExc_RuntimeError, "Function can be called from the main thread only");
  return ok;
}



/* strnlen() arrived on OSX at v10.7. Provide it ourselves if needed. */
#ifdef __MAC__
#ifndef MAC_OS_X_VERSION_10_7
#define MAC_OS_X_VERSION_10_7 1070
#endif
#if (MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_7)
inline size_t strnlen(const char *s, size_t maxlen)
{
  const char *found = (const char *) memchr(s, 0, maxlen);
  return found != NULL ? size_t(found - s) : maxlen;
}
#endif
#endif


template <typename Type, size_t N>
struct wrapped_array_t {
  Type (&data)[N];
  wrapped_array_t(Type (&data)[N]) : data(data) { }
};


template <typename Type>
struct dynamic_wrapped_array_t {
  Type *data;
  size_t count;
  dynamic_wrapped_array_t(Type *_data, size_t _count)
    : data(_data), count(_count) { }
};


static PyObject *qstrvec2pylist(const qstrvec_t &vec)
{
  size_t n = vec.size();
  PyObject *py_list = PyList_New(n);
  for ( size_t i=0; i < n; ++i )
    PyList_SetItem(
            py_list,
            i,
            IDAPyStr_FromUTF8AndSize(vec[i].c_str(), vec[i].length()));
  return py_list;
}


#include <expr.hpp>
#include <ieee.h>
#include "../../../pywraps.hpp"


#include <dbg.hpp>
#include <loader.hpp>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif

SWIGINTERN size_t qvector_Sl_bpt_t_Sg____len__(qvector< bpt_t > const *self){ return self->size(); }
SWIGINTERN bpt_t const &qvector_Sl_bpt_t_Sg____getitem__(qvector< bpt_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_bpt_t_Sg____setitem__(qvector< bpt_t > *self,size_t i,bpt_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }
SWIGINTERN size_t qvector_Sl_tev_reg_value_t_Sg____len__(qvector< tev_reg_value_t > const *self){ return self->size(); }
SWIGINTERN tev_reg_value_t const &qvector_Sl_tev_reg_value_t_Sg____getitem__(qvector< tev_reg_value_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_tev_reg_value_t_Sg____setitem__(qvector< tev_reg_value_t > *self,size_t i,tev_reg_value_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }
SWIGINTERN size_t qvector_Sl_tev_info_reg_t_Sg____len__(qvector< tev_info_reg_t > const *self){ return self->size(); }
SWIGINTERN tev_info_reg_t const &qvector_Sl_tev_info_reg_t_Sg____getitem__(qvector< tev_info_reg_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_tev_info_reg_t_Sg____setitem__(qvector< tev_info_reg_t > *self,size_t i,tev_info_reg_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }
SWIGINTERN size_t qvector_Sl_memreg_info_t_Sg____len__(qvector< memreg_info_t > const *self){ return self->size(); }
SWIGINTERN memreg_info_t const &qvector_Sl_memreg_info_t_Sg____getitem__(qvector< memreg_info_t > const *self,size_t i){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    return self->at(i);
  }
SWIGINTERN void qvector_Sl_memreg_info_t_Sg____setitem__(qvector< memreg_info_t > *self,size_t i,memreg_info_t const &v){
    if (i >= self->size() || i < 0)
      throw std::out_of_range("out of bounds access");
    self->at(i) = v;
  }

SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


#ifndef _MSC_VER
  inline void  set_debugger_event_cond(const char *nonnul_cond);
#endif


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





#ifndef _MSC_VER
  inline bool  diff_trace_file(const char *nonnul_filename);
#endif


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN PyObject *memreg_info_t_get_bytes(memreg_info_t const *self){
    return IDAPyStr_FromUTF8AndSize(
        (const char *) self->bytes.begin(),
        self->bytes.size());
  }

//<code(py_dbg)>
//</code(py_dbg)>


PyObject *bpt_t_condition_get(bpt_t *bpt)
{
  return IDAPyStr_FromUTF8(bpt->cndbody.c_str());
}

void bpt_t_condition_set(bpt_t *bpt, PyObject *val)
{
  if ( IDAPyStr_Check(val) )
    bpt->cndbody = IDAPyBytes_AsString(val);
  else
    PyErr_SetString(PyExc_ValueError, "expected a string");
}

PyObject *bpt_t_elang_get(bpt_t *bpt)
{
  return IDAPyStr_FromUTF8(bpt->get_cnd_elang());
}

void bpt_t_elang_set(bpt_t *bpt, PyObject *val)
{
  if ( IDAPyStr_Check(val) )
  {
    char *cval = IDAPyBytes_AsString(val);
    if ( !bpt->set_cnd_elang(cval) )
      PyErr_SetString(PyExc_ValueError, "too many extlangs");
  }
  else
  {
    PyErr_SetString(PyExc_ValueError, "expected a string");
  }
}


//<inline(py_dbg)>

//-------------------------------------------------------------------------
/*
#<pydoc>
def get_manual_regions():
    """
    Returns the manual memory regions
    @return: list(start_ea, end_ea, name, sclass, sbase, bitness, perm)
    """
    pass
#</pydoc>
*/
static PyObject *py_get_manual_regions()
{
  meminfo_vec_t ranges;
  get_manual_regions(&ranges);
  return meminfo_vec_t_to_py(ranges);
}

//-------------------------------------------------------------------------
/*
#<pydoc>
def dbg_is_loaded():
    """
    Checks if a debugger is loaded
    @return: Boolean
    """
    pass
#</pydoc>
*/
static bool dbg_is_loaded()
{
  return dbg != NULL;
}

//-------------------------------------------------------------------------
/*
#<pydoc>
def refresh_debugger_memory():
    """
    Refreshes the debugger memory
    @return: Nothing
    """
    pass
#</pydoc>
*/
static PyObject *refresh_debugger_memory()
{
  invalidate_dbgmem_config();
  invalidate_dbgmem_contents(BADADDR, 0);

  // Ask the debugger to populate debug names
  if ( dbg != NULL )
    dbg->suspended(true);

  // Invalidate the cache
  is_mapped(0);

  PYW_GIL_CHECK_LOCKED_SCOPE();
  Py_RETURN_NONE;
}

ssize_t idaapi DBG_Callback(void *ud, int notification_code, va_list va);
class DBG_Hooks
{
public:
  virtual ~DBG_Hooks() { unhook(); }

  bool hook() { return idapython_hook_to_notification_point(HT_DBG, DBG_Callback, this); }
  bool unhook() { return idapython_unhook_from_notification_point(HT_DBG, DBG_Callback, this); }

  static ssize_t store_int(int rc, const debug_event_t *, int *warn)
  {
    *warn = rc;
    return 0;
  }

  static ssize_t store_int(int rc, thid_t, ea_t, int *warn)
  {
    *warn = rc;
    return 0;
  }

  // hookgenDBG:methods
virtual void dbg_process_start(pid_t pid, thid_t tid, ea_t ea, const char * modinfo_name, ea_t modinfo_base, asize_t modinfo_size) {qnotused(pid); qnotused(tid); qnotused(ea); qnotused(modinfo_name); qnotused(modinfo_base); qnotused(modinfo_size); }
virtual void dbg_process_exit(pid_t pid, thid_t tid, ea_t ea, int exit_code) {qnotused(pid); qnotused(tid); qnotused(ea); qnotused(exit_code); }
virtual void dbg_process_attach(pid_t pid, thid_t tid, ea_t ea, const char * modinfo_name, ea_t modinfo_base, asize_t modinfo_size) {qnotused(pid); qnotused(tid); qnotused(ea); qnotused(modinfo_name); qnotused(modinfo_base); qnotused(modinfo_size); }
virtual void dbg_process_detach(pid_t pid, thid_t tid, ea_t ea) {qnotused(pid); qnotused(tid); qnotused(ea); }
virtual void dbg_thread_start(pid_t pid, thid_t tid, ea_t ea) {qnotused(pid); qnotused(tid); qnotused(ea); }
virtual void dbg_thread_exit(pid_t pid, thid_t tid, ea_t ea, int exit_code) {qnotused(pid); qnotused(tid); qnotused(ea); qnotused(exit_code); }
virtual void dbg_library_load(pid_t pid, thid_t tid, ea_t ea, const char * modinfo_name, ea_t modinfo_base, asize_t modinfo_size) {qnotused(pid); qnotused(tid); qnotused(ea); qnotused(modinfo_name); qnotused(modinfo_base); qnotused(modinfo_size); }
virtual void dbg_library_unload(pid_t pid, thid_t tid, ea_t ea, const char * info) {qnotused(pid); qnotused(tid); qnotused(ea); qnotused(info); }
virtual void dbg_information(pid_t pid, thid_t tid, ea_t ea, const char * info) {qnotused(pid); qnotused(tid); qnotused(ea); qnotused(info); }
virtual int dbg_exception(pid_t pid, thid_t tid, ea_t ea, int exc_code, bool exc_can_cont, ea_t exc_ea, const char * exc_info) {qnotused(pid); qnotused(tid); qnotused(ea); qnotused(exc_code); qnotused(exc_can_cont); qnotused(exc_ea); qnotused(exc_info); return 0;}
virtual void dbg_suspend_process() {}
virtual int dbg_bpt(thid_t tid, ea_t bptea) {qnotused(tid); qnotused(bptea); return 0;}
virtual int dbg_trace(thid_t tid, ea_t ip) {qnotused(tid); qnotused(ip); return 0;}
virtual void dbg_request_error(int failed_command, int failed_dbg_notification) {qnotused(failed_command); qnotused(failed_dbg_notification); }
virtual void dbg_step_into() {}
virtual void dbg_step_over() {}
virtual void dbg_run_to(pid_t pid, thid_t tid, ea_t ea) {qnotused(pid); qnotused(tid); qnotused(ea); }
virtual void dbg_step_until_ret() {}
virtual void dbg_bpt_changed(int bptev_code, bpt_t * bpt) {qnotused(bptev_code); qnotused(bpt); }
};

ssize_t idaapi DBG_Callback(void *ud, int notification_code, va_list va)
{
  // This hook gets called from the kernel. Ensure we hold the GIL.
  PYW_GIL_GET;

  class DBG_Hooks *proxy = (class DBG_Hooks *)ud;
  debug_event_t *event;
  ssize_t ret = 0;

  try
  {
    switch ( notification_code )
    {
      // hookgenDBG:notifications
case dbg_process_start:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_process_start(event->pid, event->tid, event->ea, event->modinfo().name.c_str(), event->modinfo().base, event->modinfo().size);
}
break;

case dbg_process_exit:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_process_exit(event->pid, event->tid, event->ea, event->exit_code());
}
break;

case dbg_process_attach:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_process_attach(event->pid, event->tid, event->ea, event->modinfo().name.c_str(), event->modinfo().base, event->modinfo().size);
}
break;

case dbg_process_detach:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_process_detach(event->pid, event->tid, event->ea);
}
break;

case dbg_thread_start:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_thread_start(event->pid, event->tid, event->ea);
}
break;

case dbg_thread_exit:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_thread_exit(event->pid, event->tid, event->ea, event->exit_code());
}
break;

case dbg_library_load:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_library_load(event->pid, event->tid, event->ea, event->modinfo().name.c_str(), event->modinfo().base, event->modinfo().size);
}
break;

case dbg_library_unload:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_library_unload(event->pid, event->tid, event->ea, event->info().c_str());
}
break;

case dbg_information:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_information(event->pid, event->tid, event->ea, event->info().c_str());
}
break;

case dbg_exception:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  int * warn = va_arg(va, int *);
  int _tmp = proxy->dbg_exception(event->pid, event->tid, event->ea, event->exc().code, event->exc().can_cont, event->exc().ea, event->exc().info.c_str());
  ret = DBG_Hooks::store_int(_tmp, event, warn);
}
break;

case dbg_suspend_process:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  qnotused(event);
  proxy->dbg_suspend_process();
}
break;

case dbg_bpt:
{
  thid_t tid = va_arg(va, thid_t);
  ea_t bptea = va_arg(va, ea_t);
  int * warn = va_arg(va, int *);
  int _tmp = proxy->dbg_bpt(tid, bptea);
  ret = DBG_Hooks::store_int(_tmp, tid, bptea, warn);
}
break;

case dbg_trace:
{
  thid_t tid = va_arg(va, thid_t);
  ea_t ip = va_arg(va, ea_t);
  ret = proxy->dbg_trace(tid, ip);
}
break;

case dbg_request_error:
{
  ui_notification_t failed_command = ui_notification_t(va_arg(va, int));
  dbg_notification_t failed_dbg_notification = dbg_notification_t(va_arg(va, int));
  proxy->dbg_request_error((int) failed_command, (int) failed_dbg_notification);
}
break;

case dbg_step_into:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  qnotused(event);
  proxy->dbg_step_into();
}
break;

case dbg_step_over:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  qnotused(event);
  proxy->dbg_step_over();
}
break;

case dbg_run_to:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  proxy->dbg_run_to(event->pid, event->tid, event->ea);
}
break;

case dbg_step_until_ret:
{
  const debug_event_t * event = va_arg(va, const debug_event_t *);
  qnotused(event);
  proxy->dbg_step_until_ret();
}
break;

case dbg_bpt_changed:
{
  int bptev_code = va_arg(va, int);
  bpt_t * bpt = va_arg(va, bpt_t *);
  proxy->dbg_bpt_changed(bptev_code, bpt);
}
break;

    }
  }
  catch (Swig::DirectorException &e)
  {
    msg("Exception in DBG Hook function: %s\n", e.getMessage());
    if ( PyErr_Occurred() )
      PyErr_Print();
  }
  return ret;
}

//------------------------------------------------------------------------
/*
#<pydoc>
def py_list_bptgrps():
    """
    Returns list of breakpoint group names
    @return: A list of strings or None on failure
    """
    pass
#</pydoc>
*/
static PyObject *py_list_bptgrps()
{
  PYW_GIL_CHECK_LOCKED_SCOPE();

  qstrvec_t args;
  if ( list_bptgrps(&args) == 0 )
    Py_RETURN_NONE;
  return qstrvec2pylist(args);
}

//------------------------------------------------------------------------
/*
#<pydoc>
def move_bpt_to_grp():
    """
    Sets new group for the breakpoint
    """
    pass
#</pydoc>
*/
static void move_bpt_to_grp(bpt_t *bpt, const char *grp_name)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  set_bpt_group(*bpt, grp_name);
}

/*
#<pydoc>
def internal_get_sreg_base():
    """
    Get the sreg base, for the given thread.

    @return: The sreg base, or BADADDR on failure.
    """
    pass
#</pydoc>
*/
static ea_t py_internal_get_sreg_base(thid_t tid, int sreg_value)
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  ea_t answer;
  return internal_get_sreg_base(&answer, tid, sreg_value) <= DRC_NONE
       ? BADADDR
       : answer;
}

//-------------------------------------------------------------------------
static ssize_t py_write_dbg_memory(ea_t ea, PyObject *py_buf, size_t size=size_t(-1))
{
  PYW_GIL_CHECK_LOCKED_SCOPE();
  if ( !dbg_can_query() || !IDAPyStr_Check(py_buf) )
    return -1;
  char *buf = NULL;
  Py_ssize_t sz;
  if ( IDAPyBytes_AsMemAndSize(py_buf, &buf, &sz) < 0 )
    return -1;
  if ( size == size_t(-1) )
    size = size_t(sz);
  return write_dbg_memory(ea, buf, size);
}

/*
#<pydoc>
def dbg_can_query():
    """
    This function can be used to check if the debugger can be queried:
      - debugger is loaded
      - process is suspended
      - process is not suspended but can take requests. In this case some requests like
        memory read/write, bpt management succeed and register querying will fail.
        Check if idaapi.get_process_state() < 0 to tell if the process is suspended
    @return: Boolean
    """
    pass
#</pydoc>
*/

//</inline(py_dbg)>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "dbg.h"

SwigDirector_DBG_Hooks::SwigDirector_DBG_Hooks(PyObject *self): DBG_Hooks(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((DBG_Hooks *)this, this); 
}




SwigDirector_DBG_Hooks::~SwigDirector_DBG_Hooks() {
}

void SwigDirector_DBG_Hooks::dbg_process_start(pid_t pid, thid_t tid, ea_t ea, char const *modinfo_name, ea_t modinfo_base, asize_t modinfo_size) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_FromCharPtr((const char *)modinfo_name);
  swig::SwigVar_PyObject obj4;
  obj4 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(modinfo_base));
  swig::SwigVar_PyObject obj5;
  obj5 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(modinfo_size));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "dbg_process_start";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_process_start");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_process_start'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_process_exit(pid_t pid, thid_t tid, ea_t ea, int exit_code) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_From_int(static_cast< int >(exit_code));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "dbg_process_exit";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_process_exit");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_process_exit'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_process_attach(pid_t pid, thid_t tid, ea_t ea, char const *modinfo_name, ea_t modinfo_base, asize_t modinfo_size) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_FromCharPtr((const char *)modinfo_name);
  swig::SwigVar_PyObject obj4;
  obj4 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(modinfo_base));
  swig::SwigVar_PyObject obj5;
  obj5 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(modinfo_size));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "dbg_process_attach";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_process_attach");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_process_attach'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_process_detach(pid_t pid, thid_t tid, ea_t ea) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "dbg_process_detach";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_process_detach");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_process_detach'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_thread_start(pid_t pid, thid_t tid, ea_t ea) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "dbg_thread_start";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_thread_start");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_thread_start'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_thread_exit(pid_t pid, thid_t tid, ea_t ea, int exit_code) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_From_int(static_cast< int >(exit_code));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "dbg_thread_exit";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_thread_exit");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_thread_exit'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_library_load(pid_t pid, thid_t tid, ea_t ea, char const *modinfo_name, ea_t modinfo_base, asize_t modinfo_size) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_FromCharPtr((const char *)modinfo_name);
  swig::SwigVar_PyObject obj4;
  obj4 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(modinfo_base));
  swig::SwigVar_PyObject obj5;
  obj5 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(modinfo_size));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char *const swig_method_name = "dbg_library_load";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_library_load");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_library_load'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_library_unload(pid_t pid, thid_t tid, ea_t ea, char const *info) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_FromCharPtr((const char *)info);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char *const swig_method_name = "dbg_library_unload";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_library_unload");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_library_unload'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_information(pid_t pid, thid_t tid, ea_t ea, char const *info) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_FromCharPtr((const char *)info);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char *const swig_method_name = "dbg_information";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_information");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_information'");
    }
  }
}


int SwigDirector_DBG_Hooks::dbg_exception(pid_t pid, thid_t tid, ea_t ea, int exc_code, bool exc_can_cont, ea_t exc_ea, char const *exc_info) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_From_int(static_cast< int >(exc_code));
  swig::SwigVar_PyObject obj4;
  obj4 = SWIG_From_bool(static_cast< bool >(exc_can_cont));
  swig::SwigVar_PyObject obj5;
  obj5 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(exc_ea));
  swig::SwigVar_PyObject obj6;
  obj6 = SWIG_FromCharPtr((const char *)exc_info);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 9;
  const char *const swig_method_name = "dbg_exception";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_exception");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_exception'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'dbg_exception'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


void SwigDirector_DBG_Hooks::dbg_suspend_process() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 10;
  const char *const swig_method_name = "dbg_suspend_process";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_suspend_process");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_suspend_process'");
    }
  }
}


int SwigDirector_DBG_Hooks::dbg_bpt(thid_t tid, ea_t bptea) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bptea));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 11;
  const char *const swig_method_name = "dbg_bpt";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_bpt");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_bpt'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'dbg_bpt'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_DBG_Hooks::dbg_trace(thid_t tid, ea_t ip) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ip));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 12;
  const char *const swig_method_name = "dbg_trace";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_trace");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_trace'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'" " in method 'dbg_trace'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


void SwigDirector_DBG_Hooks::dbg_request_error(int failed_command, int failed_dbg_notification) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(failed_command));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(failed_dbg_notification));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 13;
  const char *const swig_method_name = "dbg_request_error";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_request_error");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_request_error'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_step_into() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 14;
  const char *const swig_method_name = "dbg_step_into";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_step_into");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_step_into'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_step_over() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 15;
  const char *const swig_method_name = "dbg_step_over";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_step_over");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_step_over'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_run_to(pid_t pid, thid_t tid, ea_t ea) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(pid));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(tid));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ea));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 16;
  const char *const swig_method_name = "dbg_run_to";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_run_to");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_run_to'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_step_until_ret() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 17;
  const char *const swig_method_name = "dbg_step_until_ret";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_step_until_ret");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_step_until_ret'");
    }
  }
}


void SwigDirector_DBG_Hooks::dbg_bpt_changed(int bptev_code, bpt_t *bpt) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(bptev_code));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(bpt), SWIGTYPE_p_bpt_t,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DBG_Hooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 18;
  const char *const swig_method_name = "dbg_bpt_changed";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("dbg_bpt_changed");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'DBG_Hooks.dbg_bpt_changed'");
    }
  }
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_bpt_vec_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< bpt_t > *)new qvector< bpt_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_bpt_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bpt_vec_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< bpt_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_bpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_bpt_vec_t" "', argument " "1"" of type '" "qvector< bpt_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_bpt_vec_t" "', argument " "1"" of type '" "qvector< bpt_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = (qvector< bpt_t > *)new qvector< bpt_t >((qvector< bpt_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_bpt_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bpt_vec_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_bpt_vec_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_bpt_vec_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_bpt_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_bpt_vec_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_bpt_vec_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< bpt_t >::qvector()\n"
    "    qvector< bpt_t >::qvector(qvector< bpt_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_bpt_vec_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bpt_vec_t" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  bpt_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_push_back" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bpt_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_vec_t_push_back" "', argument " "2"" of type '" "bpt_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_vec_t_push_back" "', argument " "2"" of type '" "bpt_t const &""'"); 
  }
  arg2 = reinterpret_cast< bpt_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((bpt_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bpt_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_push_back" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = (bpt_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "bpt_vec_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_bpt_vec_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bpt_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bpt_vec_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'bpt_vec_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< bpt_t >::push_back(bpt_t const &)\n"
    "    qvector< bpt_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_pop_back" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_size" "', argument " "1"" of type '" "qvector< bpt_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = ((qvector< bpt_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_empty" "', argument " "1"" of type '" "qvector< bpt_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< bpt_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bpt_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_vec_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_at" "', argument " "1"" of type '" "qvector< bpt_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_vec_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (bpt_t *) &((qvector< bpt_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_qclear" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_clear" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  size_t arg2 ;
  bpt_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_resize" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_vec_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_bpt_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bpt_vec_t_resize" "', argument " "3"" of type '" "bpt_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_vec_t_resize" "', argument " "3"" of type '" "bpt_t const &""'"); 
  }
  arg3 = reinterpret_cast< bpt_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(bpt_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_resize" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_vec_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "bpt_vec_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_bpt_vec_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_bpt_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bpt_vec_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'bpt_vec_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< bpt_t >::resize(size_t,bpt_t const &)\n"
    "    qvector< bpt_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  bpt_t const &arg2_defvalue = bpt_t() ;
  bpt_t *arg2 = (bpt_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_vec_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_grow" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bpt_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_vec_t_grow" "', argument " "2"" of type '" "bpt_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_vec_t_grow" "', argument " "2"" of type '" "bpt_t const &""'"); 
    }
    arg2 = reinterpret_cast< bpt_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((bpt_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_capacity" "', argument " "1"" of type '" "qvector< bpt_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = ((qvector< bpt_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_vec_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_reserve" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_vec_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_truncate" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  qvector< bpt_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_vec_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_swap" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_bpt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_vec_t_swap" "', argument " "2"" of type '" "qvector< bpt_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_vec_t_swap" "', argument " "2"" of type '" "qvector< bpt_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< bpt_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bpt_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_extract" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = (bpt_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  bpt_t *arg2 = (bpt_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_vec_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_inject" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_vec_t_inject" "', argument " "2"" of type '" "bpt_t *""'"); 
  }
  arg2 = reinterpret_cast< bpt_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bpt_vec_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< bpt_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_begin" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = (qvector< bpt_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< bpt_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_end" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = (qvector< bpt_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< bpt_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_begin" "', argument " "1"" of type '" "qvector< bpt_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = (qvector< bpt_t >::const_iterator)((qvector< bpt_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "bpt_vec_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_bpt_vec_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_bpt_vec_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'bpt_vec_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< bpt_t >::begin()\n"
    "    qvector< bpt_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< bpt_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_end" "', argument " "1"" of type '" "qvector< bpt_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = (qvector< bpt_t >::const_iterator)((qvector< bpt_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "bpt_vec_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_bpt_vec_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_bpt_vec_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'bpt_vec_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< bpt_t >::end()\n"
    "    qvector< bpt_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  qvector< bpt_t >::iterator arg2 = (qvector< bpt_t >::iterator) 0 ;
  bpt_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< bpt_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_vec_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_insert" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_vec_t_insert" "', argument " "2"" of type '" "qvector< bpt_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< bpt_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_bpt_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bpt_vec_t_insert" "', argument " "3"" of type '" "bpt_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_vec_t_insert" "', argument " "3"" of type '" "bpt_t const &""'"); 
  }
  arg3 = reinterpret_cast< bpt_t * >(argp3);
  {
    try
    {
      result = (qvector< bpt_t >::iterator)(arg1)->insert(arg2,(bpt_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  qvector< bpt_t >::iterator arg2 = (qvector< bpt_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< bpt_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_erase" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_vec_t_erase" "', argument " "2"" of type '" "qvector< bpt_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< bpt_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< bpt_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  qvector< bpt_t >::iterator arg2 = (qvector< bpt_t >::iterator) 0 ;
  qvector< bpt_t >::iterator arg3 = (qvector< bpt_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< bpt_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t_erase" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_vec_t_erase" "', argument " "2"" of type '" "qvector< bpt_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< bpt_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bpt_vec_t_erase" "', argument " "3"" of type '" "qvector< bpt_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< bpt_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< bpt_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "bpt_vec_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bpt_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bpt_vec_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_bpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bpt_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_bpt_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bpt_vec_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'bpt_vec_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< bpt_t >::erase(qvector< bpt_t >::iterator)\n"
    "    qvector< bpt_t >::erase(qvector< bpt_t >::iterator,qvector< bpt_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t___len__" "', argument " "1"" of type '" "qvector< bpt_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_bpt_t_Sg____len__((qvector< bpt_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bpt_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_vec_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t___getitem__" "', argument " "1"" of type '" "qvector< bpt_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_vec_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (bpt_t *) &qvector_Sl_bpt_t_Sg____getitem__((qvector< bpt_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_vec_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< bpt_t > *arg1 = (qvector< bpt_t > *) 0 ;
  size_t arg2 ;
  bpt_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_vec_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_vec_t___setitem__" "', argument " "1"" of type '" "qvector< bpt_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< bpt_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_vec_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_bpt_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bpt_vec_t___setitem__" "', argument " "3"" of type '" "bpt_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_vec_t___setitem__" "', argument " "3"" of type '" "bpt_t const &""'"); 
  }
  arg3 = reinterpret_cast< bpt_t * >(argp3);
  {
    try
    {
      qvector_Sl_bpt_t_Sg____setitem__(arg1,arg2,(bpt_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bpt_vec_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_bpt_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *bpt_vec_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_tev_reg_values_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< tev_reg_value_t > *)new qvector< tev_reg_value_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_tev_reg_value_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tev_reg_values_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_reg_value_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_tev_reg_value_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tev_reg_values_t" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_tev_reg_values_t" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_reg_value_t > *)new qvector< tev_reg_value_t >((qvector< tev_reg_value_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_tev_reg_value_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tev_reg_values_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_tev_reg_values_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_tev_reg_values_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tev_reg_values_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_tev_reg_values_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_reg_value_t >::qvector()\n"
    "    qvector< tev_reg_value_t >::qvector(qvector< tev_reg_value_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_tev_reg_values_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tev_reg_values_t" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  tev_reg_value_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_push_back" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tev_reg_value_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_reg_values_t_push_back" "', argument " "2"" of type '" "tev_reg_value_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tev_reg_values_t_push_back" "', argument " "2"" of type '" "tev_reg_value_t const &""'"); 
  }
  arg2 = reinterpret_cast< tev_reg_value_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((tev_reg_value_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tev_reg_value_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_push_back" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = (tev_reg_value_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tev_reg_values_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tev_reg_values_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tev_reg_value_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_tev_reg_values_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tev_reg_values_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_reg_value_t >::push_back(tev_reg_value_t const &)\n"
    "    qvector< tev_reg_value_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_pop_back" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_size" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = ((qvector< tev_reg_value_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_empty" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< tev_reg_value_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  tev_reg_value_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_values_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_at" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tev_reg_values_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (tev_reg_value_t *) &((qvector< tev_reg_value_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_qclear" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_clear" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  size_t arg2 ;
  tev_reg_value_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_resize" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tev_reg_values_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tev_reg_value_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tev_reg_values_t_resize" "', argument " "3"" of type '" "tev_reg_value_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tev_reg_values_t_resize" "', argument " "3"" of type '" "tev_reg_value_t const &""'"); 
  }
  arg3 = reinterpret_cast< tev_reg_value_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(tev_reg_value_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_resize" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tev_reg_values_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tev_reg_values_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tev_reg_values_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tev_reg_value_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tev_reg_values_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tev_reg_values_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_reg_value_t >::resize(size_t,tev_reg_value_t const &)\n"
    "    qvector< tev_reg_value_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  tev_reg_value_t const &arg2_defvalue = tev_reg_value_t() ;
  tev_reg_value_t *arg2 = (tev_reg_value_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_values_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_grow" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tev_reg_value_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_reg_values_t_grow" "', argument " "2"" of type '" "tev_reg_value_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tev_reg_values_t_grow" "', argument " "2"" of type '" "tev_reg_value_t const &""'"); 
    }
    arg2 = reinterpret_cast< tev_reg_value_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((tev_reg_value_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_capacity" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = ((qvector< tev_reg_value_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_values_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_reserve" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tev_reg_values_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_truncate" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  qvector< tev_reg_value_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_values_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_swap" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_tev_reg_value_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_reg_values_t_swap" "', argument " "2"" of type '" "qvector< tev_reg_value_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tev_reg_values_t_swap" "', argument " "2"" of type '" "qvector< tev_reg_value_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tev_reg_value_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_extract" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = (tev_reg_value_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  tev_reg_value_t *arg2 = (tev_reg_value_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_values_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_inject" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_reg_values_t_inject" "', argument " "2"" of type '" "tev_reg_value_t *""'"); 
  }
  arg2 = reinterpret_cast< tev_reg_value_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tev_reg_values_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_reg_value_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_begin" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_reg_value_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_reg_value_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_end" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_reg_value_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_reg_value_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_begin" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_reg_value_t >::const_iterator)((qvector< tev_reg_value_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tev_reg_values_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tev_reg_values_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tev_reg_values_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tev_reg_values_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_reg_value_t >::begin()\n"
    "    qvector< tev_reg_value_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_reg_value_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_end" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_reg_value_t >::const_iterator)((qvector< tev_reg_value_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tev_reg_values_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tev_reg_values_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tev_reg_values_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tev_reg_values_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_reg_value_t >::end()\n"
    "    qvector< tev_reg_value_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  qvector< tev_reg_value_t >::iterator arg2 = (qvector< tev_reg_value_t >::iterator) 0 ;
  tev_reg_value_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< tev_reg_value_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_values_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_insert" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_reg_values_t_insert" "', argument " "2"" of type '" "qvector< tev_reg_value_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< tev_reg_value_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tev_reg_value_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tev_reg_values_t_insert" "', argument " "3"" of type '" "tev_reg_value_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tev_reg_values_t_insert" "', argument " "3"" of type '" "tev_reg_value_t const &""'"); 
  }
  arg3 = reinterpret_cast< tev_reg_value_t * >(argp3);
  {
    try
    {
      result = (qvector< tev_reg_value_t >::iterator)(arg1)->insert(arg2,(tev_reg_value_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  qvector< tev_reg_value_t >::iterator arg2 = (qvector< tev_reg_value_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< tev_reg_value_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_erase" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_reg_values_t_erase" "', argument " "2"" of type '" "qvector< tev_reg_value_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< tev_reg_value_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< tev_reg_value_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  qvector< tev_reg_value_t >::iterator arg2 = (qvector< tev_reg_value_t >::iterator) 0 ;
  qvector< tev_reg_value_t >::iterator arg3 = (qvector< tev_reg_value_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< tev_reg_value_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t_erase" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_reg_values_t_erase" "', argument " "2"" of type '" "qvector< tev_reg_value_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< tev_reg_value_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tev_reg_values_t_erase" "', argument " "3"" of type '" "qvector< tev_reg_value_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< tev_reg_value_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< tev_reg_value_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tev_reg_values_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_tev_reg_value_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_tev_reg_values_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_tev_reg_value_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_tev_reg_value_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tev_reg_values_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tev_reg_values_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_reg_value_t >::erase(qvector< tev_reg_value_t >::iterator)\n"
    "    qvector< tev_reg_value_t >::erase(qvector< tev_reg_value_t >::iterator,qvector< tev_reg_value_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t___len__" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_tev_reg_value_t_Sg____len__((qvector< tev_reg_value_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  tev_reg_value_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_values_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t___getitem__" "', argument " "1"" of type '" "qvector< tev_reg_value_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tev_reg_values_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (tev_reg_value_t *) &qvector_Sl_tev_reg_value_t_Sg____getitem__((qvector< tev_reg_value_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_values_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_reg_value_t > *arg1 = (qvector< tev_reg_value_t > *) 0 ;
  size_t arg2 ;
  tev_reg_value_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_values_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_values_t___setitem__" "', argument " "1"" of type '" "qvector< tev_reg_value_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_reg_value_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tev_reg_values_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tev_reg_value_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tev_reg_values_t___setitem__" "', argument " "3"" of type '" "tev_reg_value_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tev_reg_values_t___setitem__" "', argument " "3"" of type '" "tev_reg_value_t const &""'"); 
  }
  arg3 = reinterpret_cast< tev_reg_value_t * >(argp3);
  {
    try
    {
      qvector_Sl_tev_reg_value_t_Sg____setitem__(arg1,arg2,(tev_reg_value_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tev_reg_values_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_tev_reg_value_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *tev_reg_values_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_tevinforeg_vec_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< tev_info_reg_t > *)new qvector< tev_info_reg_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_tev_info_reg_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tevinforeg_vec_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_info_reg_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_tev_info_reg_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tevinforeg_vec_t" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_tevinforeg_vec_t" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_info_reg_t > *)new qvector< tev_info_reg_t >((qvector< tev_info_reg_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_tev_info_reg_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tevinforeg_vec_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_tevinforeg_vec_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_tevinforeg_vec_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tevinforeg_vec_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_tevinforeg_vec_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_info_reg_t >::qvector()\n"
    "    qvector< tev_info_reg_t >::qvector(qvector< tev_info_reg_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_tevinforeg_vec_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tevinforeg_vec_t" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  tev_info_reg_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_push_back" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tev_info_reg_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tevinforeg_vec_t_push_back" "', argument " "2"" of type '" "tev_info_reg_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tevinforeg_vec_t_push_back" "', argument " "2"" of type '" "tev_info_reg_t const &""'"); 
  }
  arg2 = reinterpret_cast< tev_info_reg_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((tev_info_reg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tev_info_reg_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_push_back" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = (tev_info_reg_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tevinforeg_vec_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tev_info_reg_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_tevinforeg_vec_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tevinforeg_vec_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_info_reg_t >::push_back(tev_info_reg_t const &)\n"
    "    qvector< tev_info_reg_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_pop_back" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_size" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = ((qvector< tev_info_reg_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_empty" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< tev_info_reg_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  tev_info_reg_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_at" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tevinforeg_vec_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (tev_info_reg_t *) &((qvector< tev_info_reg_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_qclear" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_clear" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  size_t arg2 ;
  tev_info_reg_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_resize" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tevinforeg_vec_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tev_info_reg_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tevinforeg_vec_t_resize" "', argument " "3"" of type '" "tev_info_reg_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tevinforeg_vec_t_resize" "', argument " "3"" of type '" "tev_info_reg_t const &""'"); 
  }
  arg3 = reinterpret_cast< tev_info_reg_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(tev_info_reg_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_resize" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tevinforeg_vec_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tevinforeg_vec_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tev_info_reg_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tevinforeg_vec_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tevinforeg_vec_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_info_reg_t >::resize(size_t,tev_info_reg_t const &)\n"
    "    qvector< tev_info_reg_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  tev_info_reg_t const &arg2_defvalue = tev_info_reg_t() ;
  tev_info_reg_t *arg2 = (tev_info_reg_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_grow" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tev_info_reg_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tevinforeg_vec_t_grow" "', argument " "2"" of type '" "tev_info_reg_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tevinforeg_vec_t_grow" "', argument " "2"" of type '" "tev_info_reg_t const &""'"); 
    }
    arg2 = reinterpret_cast< tev_info_reg_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((tev_info_reg_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_capacity" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = ((qvector< tev_info_reg_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_reserve" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tevinforeg_vec_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_truncate" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  qvector< tev_info_reg_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_swap" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_tev_info_reg_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tevinforeg_vec_t_swap" "', argument " "2"" of type '" "qvector< tev_info_reg_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tevinforeg_vec_t_swap" "', argument " "2"" of type '" "qvector< tev_info_reg_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tev_info_reg_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_extract" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = (tev_info_reg_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  tev_info_reg_t *arg2 = (tev_info_reg_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_inject" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tevinforeg_vec_t_inject" "', argument " "2"" of type '" "tev_info_reg_t *""'"); 
  }
  arg2 = reinterpret_cast< tev_info_reg_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tevinforeg_vec_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_info_reg_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_begin" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_info_reg_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_info_reg_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_end" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_info_reg_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_info_reg_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_begin" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_info_reg_t >::const_iterator)((qvector< tev_info_reg_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tevinforeg_vec_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tevinforeg_vec_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tevinforeg_vec_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_info_reg_t >::begin()\n"
    "    qvector< tev_info_reg_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< tev_info_reg_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_end" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = (qvector< tev_info_reg_t >::const_iterator)((qvector< tev_info_reg_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tevinforeg_vec_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tevinforeg_vec_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tevinforeg_vec_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_info_reg_t >::end()\n"
    "    qvector< tev_info_reg_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  qvector< tev_info_reg_t >::iterator arg2 = (qvector< tev_info_reg_t >::iterator) 0 ;
  tev_info_reg_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< tev_info_reg_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_insert" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tevinforeg_vec_t_insert" "', argument " "2"" of type '" "qvector< tev_info_reg_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< tev_info_reg_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tev_info_reg_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tevinforeg_vec_t_insert" "', argument " "3"" of type '" "tev_info_reg_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tevinforeg_vec_t_insert" "', argument " "3"" of type '" "tev_info_reg_t const &""'"); 
  }
  arg3 = reinterpret_cast< tev_info_reg_t * >(argp3);
  {
    try
    {
      result = (qvector< tev_info_reg_t >::iterator)(arg1)->insert(arg2,(tev_info_reg_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  qvector< tev_info_reg_t >::iterator arg2 = (qvector< tev_info_reg_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< tev_info_reg_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_erase" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tevinforeg_vec_t_erase" "', argument " "2"" of type '" "qvector< tev_info_reg_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< tev_info_reg_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< tev_info_reg_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  qvector< tev_info_reg_t >::iterator arg2 = (qvector< tev_info_reg_t >::iterator) 0 ;
  qvector< tev_info_reg_t >::iterator arg3 = (qvector< tev_info_reg_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< tev_info_reg_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t_erase" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tevinforeg_vec_t_erase" "', argument " "2"" of type '" "qvector< tev_info_reg_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< tev_info_reg_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tevinforeg_vec_t_erase" "', argument " "3"" of type '" "qvector< tev_info_reg_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< tev_info_reg_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< tev_info_reg_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_tev_info_reg_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_tevinforeg_vec_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_tev_info_reg_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_tev_info_reg_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tevinforeg_vec_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'tevinforeg_vec_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< tev_info_reg_t >::erase(qvector< tev_info_reg_t >::iterator)\n"
    "    qvector< tev_info_reg_t >::erase(qvector< tev_info_reg_t >::iterator,qvector< tev_info_reg_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t___len__" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_tev_info_reg_t_Sg____len__((qvector< tev_info_reg_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  tev_info_reg_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t___getitem__" "', argument " "1"" of type '" "qvector< tev_info_reg_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tevinforeg_vec_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (tev_info_reg_t *) &qvector_Sl_tev_info_reg_t_Sg____getitem__((qvector< tev_info_reg_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tevinforeg_vec_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< tev_info_reg_t > *arg1 = (qvector< tev_info_reg_t > *) 0 ;
  size_t arg2 ;
  tev_info_reg_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tevinforeg_vec_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tevinforeg_vec_t___setitem__" "', argument " "1"" of type '" "qvector< tev_info_reg_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< tev_info_reg_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tevinforeg_vec_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tev_info_reg_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tevinforeg_vec_t___setitem__" "', argument " "3"" of type '" "tev_info_reg_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tevinforeg_vec_t___setitem__" "', argument " "3"" of type '" "tev_info_reg_t const &""'"); 
  }
  arg3 = reinterpret_cast< tev_info_reg_t * >(argp3);
  {
    try
    {
      qvector_Sl_tev_info_reg_t_Sg____setitem__(arg1,arg2,(tev_info_reg_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tevinforeg_vec_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_tev_info_reg_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *tevinforeg_vec_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_memreg_infos_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (qvector< memreg_info_t > *)new qvector< memreg_info_t >();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_memreg_info_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_memreg_infos_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< memreg_info_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_qvectorT_memreg_info_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_memreg_infos_t" "', argument " "1"" of type '" "qvector< memreg_info_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_memreg_infos_t" "', argument " "1"" of type '" "qvector< memreg_info_t > const &""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< memreg_info_t > *)new qvector< memreg_info_t >((qvector< memreg_info_t > const &)*arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_memreg_info_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_memreg_infos_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_memreg_infos_t", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_memreg_infos_t__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qvectorT_memreg_info_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_memreg_infos_t__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_memreg_infos_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< memreg_info_t >::qvector()\n"
    "    qvector< memreg_info_t >::qvector(qvector< memreg_info_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_memreg_infos_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_memreg_infos_t" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  memreg_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_push_back" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_memreg_info_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memreg_infos_t_push_back" "', argument " "2"" of type '" "memreg_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "memreg_infos_t_push_back" "', argument " "2"" of type '" "memreg_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< memreg_info_t * >(argp2);
  {
    try
    {
      (arg1)->push_back((memreg_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memreg_info_t *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_push_back" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = (memreg_info_t *) &(arg1)->push_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_push_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "memreg_infos_t_push_back", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_memreg_infos_t_push_back__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_memreg_info_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_memreg_infos_t_push_back__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'memreg_infos_t_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< memreg_info_t >::push_back(memreg_info_t const &)\n"
    "    qvector< memreg_info_t >::push_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_pop_back" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_size" "', argument " "1"" of type '" "qvector< memreg_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = ((qvector< memreg_info_t > const *)arg1)->size();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_empty" "', argument " "1"" of type '" "qvector< memreg_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = (bool)((qvector< memreg_info_t > const *)arg1)->empty();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_at(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  memreg_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "memreg_infos_t_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_at" "', argument " "1"" of type '" "qvector< memreg_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "memreg_infos_t_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (memreg_info_t *) &((qvector< memreg_info_t > const *)arg1)->at(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_qclear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_qclear" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      (arg1)->qclear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_clear" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  size_t arg2 ;
  memreg_info_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_resize" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "memreg_infos_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_memreg_info_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "memreg_infos_t_resize" "', argument " "3"" of type '" "memreg_info_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "memreg_infos_t_resize" "', argument " "3"" of type '" "memreg_info_t const &""'"); 
  }
  arg3 = reinterpret_cast< memreg_info_t * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(memreg_info_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_resize" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "memreg_infos_t_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "memreg_infos_t_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_memreg_infos_t_resize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_memreg_info_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_memreg_infos_t_resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'memreg_infos_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< memreg_info_t >::resize(size_t,memreg_info_t const &)\n"
    "    qvector< memreg_info_t >::resize(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  memreg_info_t const &arg2_defvalue = memreg_info_t() ;
  memreg_info_t *arg2 = (memreg_info_t *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "memreg_infos_t_grow", 1, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_grow" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_memreg_info_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memreg_infos_t_grow" "', argument " "2"" of type '" "memreg_info_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "memreg_infos_t_grow" "', argument " "2"" of type '" "memreg_info_t const &""'"); 
    }
    arg2 = reinterpret_cast< memreg_info_t * >(argp2);
  }
  {
    try
    {
      (arg1)->grow((memreg_info_t const &)*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_capacity" "', argument " "1"" of type '" "qvector< memreg_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = ((qvector< memreg_info_t > const *)arg1)->capacity();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "memreg_infos_t_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_reserve" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "memreg_infos_t_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_truncate" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      (arg1)->truncate();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  qvector< memreg_info_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "memreg_infos_t_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_swap" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_qvectorT_memreg_info_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memreg_infos_t_swap" "', argument " "2"" of type '" "qvector< memreg_info_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "memreg_infos_t_swap" "', argument " "2"" of type '" "qvector< memreg_info_t > &""'"); 
  }
  arg2 = reinterpret_cast< qvector< memreg_info_t > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  memreg_info_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_extract" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = (memreg_info_t *)(arg1)->extract();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  memreg_info_t *arg2 = (memreg_info_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "memreg_infos_t_inject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_inject" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_memreg_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memreg_infos_t_inject" "', argument " "2"" of type '" "memreg_info_t *""'"); 
  }
  arg2 = reinterpret_cast< memreg_info_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "memreg_infos_t_inject" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      (arg1)->inject(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< memreg_info_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_begin" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< memreg_info_t >::iterator)(arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< memreg_info_t >::iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_end" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< memreg_info_t >::iterator)(arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< memreg_info_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_begin" "', argument " "1"" of type '" "qvector< memreg_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< memreg_info_t >::const_iterator)((qvector< memreg_info_t > const *)arg1)->begin();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "memreg_infos_t_begin", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_memreg_infos_t_begin__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_memreg_infos_t_begin__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'memreg_infos_t_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< memreg_info_t >::begin()\n"
    "    qvector< memreg_info_t >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qvector< memreg_info_t >::const_iterator result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_end" "', argument " "1"" of type '" "qvector< memreg_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = (qvector< memreg_info_t >::const_iterator)((qvector< memreg_info_t > const *)arg1)->end();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "memreg_infos_t_end", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_memreg_infos_t_end__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_memreg_infos_t_end__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'memreg_infos_t_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< memreg_info_t >::end()\n"
    "    qvector< memreg_info_t >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  qvector< memreg_info_t >::iterator arg2 = (qvector< memreg_info_t >::iterator) 0 ;
  memreg_info_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  qvector< memreg_info_t >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "memreg_infos_t_insert", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_insert" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_memreg_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memreg_infos_t_insert" "', argument " "2"" of type '" "qvector< memreg_info_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< memreg_info_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_memreg_info_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "memreg_infos_t_insert" "', argument " "3"" of type '" "memreg_info_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "memreg_infos_t_insert" "', argument " "3"" of type '" "memreg_info_t const &""'"); 
  }
  arg3 = reinterpret_cast< memreg_info_t * >(argp3);
  {
    try
    {
      result = (qvector< memreg_info_t >::iterator)(arg1)->insert(arg2,(memreg_info_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  qvector< memreg_info_t >::iterator arg2 = (qvector< memreg_info_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  qvector< memreg_info_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_erase" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_memreg_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memreg_infos_t_erase" "', argument " "2"" of type '" "qvector< memreg_info_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< memreg_info_t >::iterator >(argp2);
  {
    try
    {
      result = (qvector< memreg_info_t >::iterator)(arg1)->erase(arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  qvector< memreg_info_t >::iterator arg2 = (qvector< memreg_info_t >::iterator) 0 ;
  qvector< memreg_info_t >::iterator arg3 = (qvector< memreg_info_t >::iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  qvector< memreg_info_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t_erase" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_memreg_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memreg_infos_t_erase" "', argument " "2"" of type '" "qvector< memreg_info_t >::iterator""'"); 
  }
  arg2 = reinterpret_cast< qvector< memreg_info_t >::iterator >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_memreg_info_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "memreg_infos_t_erase" "', argument " "3"" of type '" "qvector< memreg_info_t >::iterator""'"); 
  }
  arg3 = reinterpret_cast< qvector< memreg_info_t >::iterator >(argp3);
  {
    try
    {
      result = (qvector< memreg_info_t >::iterator)(arg1)->erase(arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "memreg_infos_t_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_memreg_info_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_memreg_infos_t_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memreg_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_memreg_info_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_memreg_info_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_memreg_infos_t_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'memreg_infos_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    qvector< memreg_info_t >::erase(qvector< memreg_info_t >::iterator)\n"
    "    qvector< memreg_info_t >::erase(qvector< memreg_info_t >::iterator,qvector< memreg_info_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t___len__" "', argument " "1"" of type '" "qvector< memreg_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  {
    try
    {
      result = qvector_Sl_memreg_info_t_Sg____len__((qvector< memreg_info_t > const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  memreg_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "memreg_infos_t___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t___getitem__" "', argument " "1"" of type '" "qvector< memreg_info_t > const *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "memreg_infos_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (memreg_info_t *) &qvector_Sl_memreg_info_t_Sg____getitem__((qvector< memreg_info_t > const *)arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_infos_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qvector< memreg_info_t > *arg1 = (qvector< memreg_info_t > *) 0 ;
  size_t arg2 ;
  memreg_info_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "memreg_infos_t___setitem__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_infos_t___setitem__" "', argument " "1"" of type '" "qvector< memreg_info_t > *""'"); 
  }
  arg1 = reinterpret_cast< qvector< memreg_info_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "memreg_infos_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_memreg_info_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "memreg_infos_t___setitem__" "', argument " "3"" of type '" "memreg_info_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "memreg_infos_t___setitem__" "', argument " "3"" of type '" "memreg_info_t const &""'"); 
  }
  arg3 = reinterpret_cast< memreg_info_t * >(argp3);
  {
    try
    {
      qvector_Sl_memreg_info_t_Sg____setitem__(arg1,arg2,(memreg_info_t const &)*arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *memreg_infos_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_qvectorT_memreg_info_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *memreg_infos_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_run_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  pid_t arg2 = (pid_t) pid_t(-1) ;
  thid_t arg3 = (thid_t) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "run_to", 1, 3, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "run_to" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "run_to" "', argument " "2"" of type '" "pid_t""'");
    } 
    arg2 = static_cast< pid_t >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "run_to" "', argument " "3"" of type '" "thid_t""'");
    } 
    arg3 = static_cast< thid_t >(val3);
  }
  {
    try
    {
      result = (bool)run_to(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_run_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  pid_t arg2 = (pid_t) pid_t(-1) ;
  thid_t arg3 = (thid_t) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_run_to", 1, 3, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "request_run_to" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "request_run_to" "', argument " "2"" of type '" "pid_t""'");
    } 
    arg2 = static_cast< pid_t >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "request_run_to" "', argument " "3"" of type '" "thid_t""'");
    } 
    arg3 = static_cast< thid_t >(val3);
  }
  {
    try
    {
      result = (bool)request_run_to(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_debugger_event_cond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_debugger_event_cond" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    if ( arg1 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null pointer " "in method '" "set_debugger_event_cond" "', argument " "1"" of type '" "char const *""'");
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_debugger_event_cond((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_diff_trace_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "diff_trace_file" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    if ( arg1 == NULL )
    SWIG_exception_fail(SWIG_ValueError, "invalid null pointer " "in method '" "diff_trace_file" "', argument " "1"" of type '" "char const *""'");
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)diff_trace_file((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_run_requests(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "run_requests", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)run_requests();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_running_request(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ui_notification_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_running_request", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = get_running_request();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new ui_notification_t(static_cast< const ui_notification_t& >(result))), SWIGTYPE_p_ui_notification_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_request_running(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "is_request_running", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_request_running();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_running_notification(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  dbg_notification_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_running_notification", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (dbg_notification_t)get_running_notification();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clear_requests_queue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "clear_requests_queue", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        clear_requests_queue();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_process_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_process_state", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_process_state();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_process_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  thid_t *arg2 = (thid_t *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_process_state", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_process_state" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_process_state" "', argument " "2"" of type '" "thid_t *""'"); 
  }
  arg2 = reinterpret_cast< thid_t * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_process_state" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)set_process_state(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_invalidate_dbg_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "invalidate_dbg_state" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)invalidate_dbg_state(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_start_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) NULL ;
  char *arg2 = (char *) NULL ;
  char *arg3 = (char *) NULL ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "start_process", 0, 3, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "start_process" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
  }
  if (swig_obj[1]) {
    res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "start_process" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  if (swig_obj[2]) {
    res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "start_process" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)start_process((char const *)arg1,(char const *)arg2,(char const *)arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_start_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) NULL ;
  char *arg2 = (char *) NULL ;
  char *arg3 = (char *) NULL ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_start_process", 0, 3, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_start_process" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
  }
  if (swig_obj[1]) {
    res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "request_start_process" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  if (swig_obj[2]) {
    res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "request_start_process" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)request_start_process((char const *)arg1,(char const *)arg2,(char const *)arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_suspend_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "suspend_process", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)suspend_process();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_suspend_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_suspend_process", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_suspend_process();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_continue_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "continue_process", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)continue_process();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_continue_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_continue_process", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_continue_process();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_exit_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "exit_process", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)exit_process();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_exit_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_exit_process", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_exit_process();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_processes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  procinfo_vec_t *arg1 = (procinfo_vec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ssize_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_process_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_processes" "', argument " "1"" of type '" "procinfo_vec_t *""'"); 
  }
  arg1 = reinterpret_cast< procinfo_vec_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = get_processes(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_attach_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  pid_t arg1 = (pid_t) pid_t(-1) ;
  int arg2 = (int) -1 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "attach_process", 0, 2, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "attach_process" "', argument " "1"" of type '" "pid_t""'");
    } 
    arg1 = static_cast< pid_t >(val1);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "attach_process" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)attach_process(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_attach_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  pid_t arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_attach_process", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_attach_process" "', argument " "1"" of type '" "pid_t""'");
  } 
  arg1 = static_cast< pid_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "request_attach_process" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)request_attach_process(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_detach_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "detach_process", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)detach_process();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_detach_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_detach_process", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_detach_process();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_debugger_busy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "is_debugger_busy", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_debugger_busy();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_thread_qty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_thread_qty", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_thread_qty();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getn_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  thid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getn_thread" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (thid_t)getn_thread(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_current_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_current_thread", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (thid_t)get_current_thread();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getn_thread_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getn_thread_name" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (char *)getn_thread_name(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_select_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "select_thread" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)select_thread(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_select_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_select_thread" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_select_thread(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_suspend_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "suspend_thread" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)suspend_thread(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_suspend_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_suspend_thread" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)request_suspend_thread(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resume_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "resume_thread" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)resume_thread(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_resume_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_resume_thread" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)request_resume_thread(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_first_module(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  modinfo_t *arg1 = (modinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_modinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_first_module" "', argument " "1"" of type '" "modinfo_t *""'"); 
  }
  arg1 = reinterpret_cast< modinfo_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_first_module(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_next_module(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  modinfo_t *arg1 = (modinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_modinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_next_module" "', argument " "1"" of type '" "modinfo_t *""'"); 
  }
  arg1 = reinterpret_cast< modinfo_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_next_module(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_step_into(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "step_into", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)step_into();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_step_into(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_step_into", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_step_into();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_step_over(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "step_over", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)step_over();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_step_over(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_step_over", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_step_over();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_step_until_ret(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "step_until_ret", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)step_until_ret();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_step_until_ret(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_step_until_ret", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_step_until_ret();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_resume_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  resume_mode_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_resume_mode", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_resume_mode" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_resume_mode" "', argument " "2"" of type '" "resume_mode_t""'");
  } 
  arg2 = static_cast< resume_mode_t >(val2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)set_resume_mode(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_set_resume_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  resume_mode_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_set_resume_mode", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_set_resume_mode" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "request_set_resume_mode" "', argument " "2"" of type '" "resume_mode_t""'");
  } 
  arg2 = static_cast< resume_mode_t >(val2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_set_resume_mode(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_dbg_reg_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  register_info_t *arg2 = (register_info_t *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_dbg_reg_info", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_dbg_reg_info" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_register_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_dbg_reg_info" "', argument " "2"" of type '" "register_info_t *""'"); 
  }
  arg2 = reinterpret_cast< register_info_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_dbg_reg_info((char const *)arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_reg_val__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  regval_t *arg2 = (regval_t *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_reg_val" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_regval_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_reg_val" "', argument " "2"" of type '" "regval_t *""'"); 
  }
  arg2 = reinterpret_cast< regval_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_reg_val((char const *)arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_reg_val__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  uint64 *arg2 = (uint64 *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_reg_val" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_long_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_reg_val" "', argument " "2"" of type '" "uint64 *""'"); 
  }
  arg2 = reinterpret_cast< uint64 * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_reg_val((char const *)arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_reg_val(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "get_reg_val", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_regval_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_get_reg_val__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_get_reg_val__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'get_reg_val'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get_reg_val(char const *,regval_t *)\n"
    "    get_reg_val(char const *,uint64 *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_get_sp_val(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t *arg1 = (ea_t *) 0 ;
  uint32 temp1 ;
  bool result;
  
  {
    // %typemap(in,numinputs=0) uint32 *result
    arg1 = &temp1;
  }
  if (!SWIG_Python_UnpackTuple(args, "get_sp_val", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_sp_val(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // %typemap(argout) uint32 *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = PyLong_FromUnsignedLong(*(uint32 *) arg1);
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_ip_val(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t *arg1 = (ea_t *) 0 ;
  uint32 temp1 ;
  bool result;
  
  {
    // %typemap(in,numinputs=0) uint32 *result
    arg1 = &temp1;
  }
  if (!SWIG_Python_UnpackTuple(args, "get_ip_val", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_ip_val(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // %typemap(argout) uint32 *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = PyLong_FromUnsignedLong(*(uint32 *) arg1);
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_reg_val__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  regval_t *arg2 = (regval_t *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_reg_val" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_regval_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_reg_val" "', argument " "2"" of type '" "regval_t const *""'"); 
  }
  arg2 = reinterpret_cast< regval_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)set_reg_val((char const *)arg1,(regval_t const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_reg_val__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  uint64 arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_reg_val" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    // %typemap(in) uint64
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    {
      PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
      return NULL;
    }
    arg2 = arg2_temp;
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)set_reg_val((char const *)arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_set_reg_val(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  regval_t *arg2 = (regval_t *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_set_reg_val", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_set_reg_val" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_regval_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "request_set_reg_val" "', argument " "2"" of type '" "regval_t const *""'"); 
  }
  arg2 = reinterpret_cast< regval_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_set_reg_val((char const *)arg1,(regval_t const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_reg_integer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_reg_integer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_reg_integer((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_reg_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_reg_float" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_reg_float((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_reg_custom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_reg_custom" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_reg_custom((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_bptloc_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_bptloc_string" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)set_bptloc_string((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_bptloc_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_bptloc_string" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (char *)get_bptloc_string(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_info_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t_info_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_info_set" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "bpt_location_t_info_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->info = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_info_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_info_get" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (ea_t) ((arg1)->info);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_index_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t_index_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_index_set" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_location_t_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->index = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_index_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_index_get" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->index);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_loctype_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  bpt_loctype_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t_loctype_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_loctype_set" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_location_t_loctype_set" "', argument " "2"" of type '" "bpt_loctype_t""'");
  } 
  arg2 = static_cast< bpt_loctype_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->loctype = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_loctype_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bpt_loctype_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_loctype_get" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bpt_loctype_t) ((arg1)->loctype);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bpt_loctype_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_type" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bpt_loctype_t)((bpt_location_t const *)arg1)->type();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_is_empty_path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_is_empty_path" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_location_t const *)arg1)->is_empty_path();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_path" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (char *)((bpt_location_t const *)arg1)->path();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_symbol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_symbol" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (char *)((bpt_location_t const *)arg1)->symbol();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_lineno(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_lineno" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)((bpt_location_t const *)arg1)->lineno();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uval_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_offset" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (uval_t)((bpt_location_t const *)arg1)->offset();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_ea" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (ea_t)((bpt_location_t const *)arg1)->ea();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bpt_location_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_bpt_location_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bpt_location_t *)new bpt_location_t();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_location_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_set_abs_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t_set_abs_bpt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_set_abs_bpt" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "bpt_location_t_set_abs_bpt" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->set_abs_bpt(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_set_src_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t_set_src_bpt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_set_src_bpt" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t_set_src_bpt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bpt_location_t_set_src_bpt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->set_src_bpt((char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_set_sym_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  char *arg2 = (char *) 0 ;
  uval_t arg3 = (uval_t) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t_set_sym_bpt", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_set_sym_bpt" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t_set_sym_bpt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bpt_location_t_set_sym_bpt" "', argument " "3"" of type '" "uval_t""'");
    } 
    arg3 = static_cast< uval_t >(val3);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->set_sym_bpt((char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_set_rel_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  char *arg2 = (char *) 0 ;
  uval_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t_set_rel_bpt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_set_rel_bpt" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t_set_rel_bpt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bpt_location_t_set_rel_bpt" "', argument " "3"" of type '" "uval_t""'");
  } 
  arg3 = static_cast< uval_t >(val3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->set_rel_bpt((char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  bpt_location_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t_compare", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t_compare" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t_compare" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_location_t_compare" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  arg2 = reinterpret_cast< bpt_location_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)((bpt_location_t const *)arg1)->compare((bpt_location_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_location_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  bpt_location_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t___eq__" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t___eq__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_location_t___eq__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  arg2 = reinterpret_cast< bpt_location_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_location_t const *)arg1)->operator ==((bpt_location_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_bpt_location_t___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  bpt_location_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t___ne__" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t___ne__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_location_t___ne__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  arg2 = reinterpret_cast< bpt_location_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_location_t const *)arg1)->operator !=((bpt_location_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_bpt_location_t___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  bpt_location_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t___lt__" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t___lt__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_location_t___lt__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  arg2 = reinterpret_cast< bpt_location_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_location_t const *)arg1)->operator <((bpt_location_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_bpt_location_t___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  bpt_location_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t___gt__" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t___gt__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_location_t___gt__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  arg2 = reinterpret_cast< bpt_location_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_location_t const *)arg1)->operator >((bpt_location_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_bpt_location_t___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  bpt_location_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t___le__" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t___le__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_location_t___le__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  arg2 = reinterpret_cast< bpt_location_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_location_t const *)arg1)->operator <=((bpt_location_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_bpt_location_t___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  bpt_location_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_location_t___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_location_t___ge__" "', argument " "1"" of type '" "bpt_location_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_location_t___ge__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bpt_location_t___ge__" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  arg2 = reinterpret_cast< bpt_location_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_location_t const *)arg1)->operator >=((bpt_location_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_bpt_location_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_location_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bpt_location_t" "', argument " "1"" of type '" "bpt_location_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bpt_location_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bpt_location_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *bpt_location_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_bpt_t_cb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_cb_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_cb_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_cb_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->cb = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_cb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_cb_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result =  ((arg1)->cb);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_loc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  bpt_location_t *arg2 = (bpt_location_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_loc_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_loc_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bpt_location_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_t_loc_set" "', argument " "2"" of type '" "bpt_location_t *""'"); 
  }
  arg2 = reinterpret_cast< bpt_location_t * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->loc = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_loc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bpt_location_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_loc_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bpt_location_t *)& ((arg1)->loc);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_location_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_pid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  pid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_pid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_pid_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_pid_set" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->pid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_pid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  pid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_pid_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pid_t) ((arg1)->pid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_tid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  thid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_tid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_tid_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_tid_set" "', argument " "2"" of type '" "thid_t""'");
  } 
  arg2 = static_cast< thid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->tid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_tid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  thid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_tid_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (thid_t) ((arg1)->tid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_ea_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "bpt_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->ea = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_ea_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (ea_t) ((arg1)->ea);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  bpttype_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_type_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_type_set" "', argument " "2"" of type '" "bpttype_t""'");
  } 
  arg2 = static_cast< bpttype_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->type = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bpttype_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_type_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bpttype_t) ((arg1)->type);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_pass_count_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_pass_count_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_pass_count_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_pass_count_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->pass_count = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_pass_count_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_pass_count_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->pass_count);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_flags_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_flags_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_flags_set" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->flags = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_flags_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (uint32) ((arg1)->flags);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_props_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_props_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_props_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_props_set" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->props = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_props_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_props_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (uint32) ((arg1)->props);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_size_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_size_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->size = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_size_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->size);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_cndidx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_cndidx_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_cndidx_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_cndidx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->cndidx = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_cndidx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_cndidx_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->cndidx);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bpt_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_bpt_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bpt_t *)new bpt_t();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bpt_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_hwbpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_hwbpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_hwbpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_enabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_enabled" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->enabled();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_low_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_low_level" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_low_level();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_badbpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_badbpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->badbpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_listbpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_listbpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->listbpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_compiled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_compiled" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_compiled();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_active(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_active" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_active();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_partially_active(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_partially_active" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_partially_active();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_inactive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_inactive" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_inactive();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_page_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_page_bpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_page_bpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_get_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_get_size" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)((bpt_t const *)arg1)->get_size();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_set_abs_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_set_abs_bpt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_set_abs_bpt" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "bpt_t_set_abs_bpt" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->set_abs_bpt(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_set_src_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_set_src_bpt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_set_src_bpt" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_t_set_src_bpt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bpt_t_set_src_bpt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->set_src_bpt((char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_set_sym_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  char *arg2 = (char *) 0 ;
  uval_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_set_sym_bpt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_set_sym_bpt" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_t_set_sym_bpt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bpt_t_set_sym_bpt" "', argument " "3"" of type '" "uval_t""'");
  } 
  arg3 = static_cast< uval_t >(val3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->set_sym_bpt((char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_set_rel_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  char *arg2 = (char *) 0 ;
  uval_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_set_rel_bpt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_set_rel_bpt" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bpt_t_set_rel_bpt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bpt_t_set_rel_bpt" "', argument " "3"" of type '" "uval_t""'");
  } 
  arg3 = static_cast< uval_t >(val3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->set_rel_bpt((char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_absbpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_absbpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_absbpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_relbpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_relbpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_relbpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_symbpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_symbpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_symbpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_srcbpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_srcbpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_srcbpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_tracemodebpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_tracemodebpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_tracemodebpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_traceonbpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_traceonbpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_traceonbpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_is_traceoffbpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_is_traceoffbpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((bpt_t const *)arg1)->is_traceoffbpt();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_set_trace_action(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  bool arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_set_trace_action", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_set_trace_action" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bpt_t_set_trace_action" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bpt_t_set_trace_action" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)(arg1)->set_trace_action(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_get_cnd_elang_idx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_get_cnd_elang_idx" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((bpt_t const *)arg1)->get_cnd_elang_idx();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_condition_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_condition_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_condition_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  arg2 = swig_obj[1];
  {
    try
    {
      bpt_t_condition_set(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_condition_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_condition_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      result = (PyObject *)bpt_t_condition_get(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_elang_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "bpt_t_elang_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_elang_set" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  arg2 = swig_obj[1];
  {
    try
    {
      bpt_t_elang_set(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bpt_t_elang_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bpt_t_elang_get" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      result = (PyObject *)bpt_t_elang_get(arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_bpt_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bpt_t" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bpt_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bpt_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *bpt_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_get_bpt_qty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_bpt_qty", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_bpt_qty();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getn_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  bpt_t *arg2 = (bpt_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "getn_bpt", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getn_bpt" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getn_bpt" "', argument " "2"" of type '" "bpt_t *""'"); 
  }
  arg2 = reinterpret_cast< bpt_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)getn_bpt(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  bpt_t *arg2 = (bpt_t *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_bpt", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "get_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_bpt" "', argument " "2"" of type '" "bpt_t *""'"); 
  }
  arg2 = reinterpret_cast< bpt_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_bpt(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_exist_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "exist_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)exist_bpt(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_bpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  asize_t arg2 = (asize_t) 0 ;
  bpttype_t arg3 = (bpttype_t) BPT_DEFAULT ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "add_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_bpt" "', argument " "2"" of type '" "asize_t""'");
    } 
    arg2 = static_cast< asize_t >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_bpt" "', argument " "3"" of type '" "bpttype_t""'");
    } 
    arg3 = static_cast< bpttype_t >(val3);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)add_bpt(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_add_bpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  asize_t arg2 = (asize_t) 0 ;
  bpttype_t arg3 = (bpttype_t) BPT_DEFAULT ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "request_add_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "request_add_bpt" "', argument " "2"" of type '" "asize_t""'");
    } 
    arg2 = static_cast< asize_t >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "request_add_bpt" "', argument " "3"" of type '" "bpttype_t""'");
    } 
    arg3 = static_cast< bpttype_t >(val3);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_add_bpt(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_bpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_bpt" "', argument " "1"" of type '" "bpt_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_bpt" "', argument " "1"" of type '" "bpt_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)add_bpt((bpt_t const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_bpt(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "add_bpt", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bpt_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_add_bpt__SWIG_1(self, argc, argv);
    }
  }
  if ((argc >= 1) && (argc <= 3)) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_add_bpt__SWIG_0(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_add_bpt__SWIG_0(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_add_bpt__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'add_bpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    add_bpt(ea_t,asize_t,bpttype_t)\n"
    "    add_bpt(bpt_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_request_add_bpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_add_bpt" "', argument " "1"" of type '" "bpt_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "request_add_bpt" "', argument " "1"" of type '" "bpt_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_add_bpt((bpt_t const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_add_bpt(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "request_add_bpt", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bpt_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_request_add_bpt__SWIG_1(self, argc, argv);
    }
  }
  if ((argc >= 1) && (argc <= 3)) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_request_add_bpt__SWIG_0(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_request_add_bpt__SWIG_0(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_request_add_bpt__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'request_add_bpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    request_add_bpt(ea_t,asize_t,bpttype_t)\n"
    "    request_add_bpt(bpt_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_del_bpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "del_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)del_bpt(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_del_bpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "request_del_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_del_bpt(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_del_bpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "del_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "del_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)del_bpt((bpt_location_t const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_del_bpt(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "del_bpt", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bpt_location_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_del_bpt__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_del_bpt__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'del_bpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    del_bpt(ea_t)\n"
    "    del_bpt(bpt_location_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_request_del_bpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_del_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "request_del_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_del_bpt((bpt_location_t const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_del_bpt(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "request_del_bpt", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bpt_location_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_request_del_bpt__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_request_del_bpt__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'request_del_bpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    request_del_bpt(ea_t)\n"
    "    request_del_bpt(bpt_location_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_update_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bpt_t *arg1 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "update_bpt" "', argument " "1"" of type '" "bpt_t const *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)update_bpt((bpt_t const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_find_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bpt_location_t *arg1 = 0 ;
  bpt_t *arg2 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "find_bpt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "find_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "find_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "find_bpt" "', argument " "2"" of type '" "bpt_t *""'"); 
  }
  arg2 = reinterpret_cast< bpt_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)find_bpt((bpt_location_t const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enable_bpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  bool arg2 = (bool) true ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "enable_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "enable_bpt" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)enable_bpt(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enable_bpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "enable_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "enable_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "enable_bpt" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)enable_bpt((bpt_location_t const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enable_bpt(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "enable_bpt", 0, 2, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 2)) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bpt_location_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_enable_bpt__SWIG_1(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_enable_bpt__SWIG_1(self, argc, argv);
      }
    }
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_enable_bpt__SWIG_0(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_enable_bpt__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'enable_bpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    enable_bpt(ea_t,bool)\n"
    "    enable_bpt(bpt_location_t const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disable_bpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "disable_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)disable_bpt(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disable_bpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disable_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "disable_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)disable_bpt((bpt_location_t const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disable_bpt(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "disable_bpt", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bpt_location_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_disable_bpt__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_disable_bpt__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'disable_bpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    disable_bpt(ea_t)\n"
    "    disable_bpt(bpt_location_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_request_enable_bpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  bool arg2 = (bool) true ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "request_enable_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "request_enable_bpt" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_enable_bpt(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_enable_bpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_enable_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "request_enable_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "request_enable_bpt" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_enable_bpt((bpt_location_t const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_enable_bpt(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "request_enable_bpt", 0, 2, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 2)) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bpt_location_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_request_enable_bpt__SWIG_1(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_request_enable_bpt__SWIG_1(self, argc, argv);
      }
    }
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_request_enable_bpt__SWIG_0(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_request_enable_bpt__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'request_enable_bpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    request_enable_bpt(ea_t,bool)\n"
    "    request_enable_bpt(bpt_location_t const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_request_disable_bpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "request_disable_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_disable_bpt(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_disable_bpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bpt_location_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "request_disable_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "request_disable_bpt" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_disable_bpt((bpt_location_t const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_disable_bpt(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "request_disable_bpt", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bpt_location_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_request_disable_bpt__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_request_disable_bpt__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'request_disable_bpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    request_disable_bpt(ea_t)\n"
    "    request_disable_bpt(bpt_location_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_check_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "check_bpt" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)check_bpt(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_trace_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_trace_size" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)set_trace_size(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clear_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "clear_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        clear_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_clear_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "request_clear_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        request_clear_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_step_trace_enabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "is_step_trace_enabled", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_step_trace_enabled();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enable_step_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 = (int) true ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "enable_step_trace", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "enable_step_trace" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)enable_step_trace(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disable_step_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "disable_step_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)disable_step_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_enable_step_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 = (int) true ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_enable_step_trace", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_enable_step_trace" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_enable_step_trace(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_disable_step_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_disable_step_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_disable_step_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_step_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_step_trace_options", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_step_trace_options();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_step_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_step_trace_options" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_step_trace_options(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_set_step_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_set_step_trace_options" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        request_set_step_trace_options(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_insn_trace_enabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "is_insn_trace_enabled", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_insn_trace_enabled();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enable_insn_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool arg1 = (bool) true ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "enable_insn_trace", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "enable_insn_trace" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)enable_insn_trace(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disable_insn_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "disable_insn_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)disable_insn_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_enable_insn_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool arg1 = (bool) true ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_enable_insn_trace", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_enable_insn_trace" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_enable_insn_trace(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_disable_insn_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_disable_insn_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_disable_insn_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_insn_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_insn_trace_options", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_insn_trace_options();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_insn_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_insn_trace_options" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_insn_trace_options(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_set_insn_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_set_insn_trace_options" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        request_set_insn_trace_options(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_func_trace_enabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "is_func_trace_enabled", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_func_trace_enabled();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enable_func_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool arg1 = (bool) true ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "enable_func_trace", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "enable_func_trace" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)enable_func_trace(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disable_func_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "disable_func_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)disable_func_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_enable_func_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool arg1 = (bool) true ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_enable_func_trace", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_enable_func_trace" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_enable_func_trace(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_disable_func_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_disable_func_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_disable_func_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_func_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_func_trace_options", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_func_trace_options();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_func_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_func_trace_options" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_func_trace_options(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_set_func_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_set_func_trace_options" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        request_set_func_trace_options(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enable_bblk_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool arg1 = (bool) true ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "enable_bblk_trace", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "enable_bblk_trace" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)enable_bblk_trace(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disable_bblk_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "disable_bblk_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)disable_bblk_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_enable_bblk_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool arg1 = (bool) true ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_enable_bblk_trace", 0, 1, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_enable_bblk_trace" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_enable_bblk_trace(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_disable_bblk_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "request_disable_bblk_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)request_disable_bblk_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_bblk_trace_enabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "is_bblk_trace_enabled", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_bblk_trace_enabled();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_bblk_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_bblk_trace_options", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_bblk_trace_options();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_bblk_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_bblk_trace_options" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_bblk_trace_options(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_request_set_bblk_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "request_set_bblk_trace_options" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        request_set_bblk_trace_options(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_info_t_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_t *arg1 = (tev_info_t *) 0 ;
  tev_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_info_t_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_t_type_set" "', argument " "1"" of type '" "tev_info_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tev_info_t_type_set" "', argument " "2"" of type '" "tev_type_t""'");
  } 
  arg2 = static_cast< tev_type_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->type = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_info_t_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_t *arg1 = (tev_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tev_type_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_t_type_get" "', argument " "1"" of type '" "tev_info_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (tev_type_t) ((arg1)->type);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_info_t_tid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_t *arg1 = (tev_info_t *) 0 ;
  thid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_info_t_tid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_t_tid_set" "', argument " "1"" of type '" "tev_info_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tev_info_t_tid_set" "', argument " "2"" of type '" "thid_t""'");
  } 
  arg2 = static_cast< thid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->tid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_info_t_tid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_t *arg1 = (tev_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  thid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_t_tid_get" "', argument " "1"" of type '" "tev_info_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (thid_t) ((arg1)->tid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_info_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_t *arg1 = (tev_info_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_info_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_t_ea_set" "', argument " "1"" of type '" "tev_info_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "tev_info_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->ea = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_info_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_t *arg1 = (tev_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_t_ea_get" "', argument " "1"" of type '" "tev_info_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (ea_t) ((arg1)->ea);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tev_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_tev_info_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (tev_info_t *)new tev_info_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tev_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_t *arg1 = (tev_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tev_info_t" "', argument " "1"" of type '" "tev_info_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tev_info_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tev_info_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *tev_info_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_memreg_info_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  memreg_info_t *arg1 = (memreg_info_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "memreg_info_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_memreg_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_info_t_ea_set" "', argument " "1"" of type '" "memreg_info_t *""'"); 
  }
  arg1 = reinterpret_cast< memreg_info_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "memreg_info_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->ea = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_info_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  memreg_info_t *arg1 = (memreg_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_memreg_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_info_t_ea_get" "', argument " "1"" of type '" "memreg_info_t *""'"); 
  }
  arg1 = reinterpret_cast< memreg_info_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (ea_t) ((arg1)->ea);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memreg_info_t_get_bytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  memreg_info_t *arg1 = (memreg_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_memreg_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memreg_info_t_get_bytes" "', argument " "1"" of type '" "memreg_info_t const *""'"); 
  }
  arg1 = reinterpret_cast< memreg_info_t * >(argp1);
  {
    try
    {
      result = (PyObject *)memreg_info_t_get_bytes((memreg_info_t const *)arg1);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_memreg_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  memreg_info_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_memreg_info_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (memreg_info_t *)new memreg_info_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_memreg_info_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_memreg_info_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  memreg_info_t *arg1 = (memreg_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_memreg_info_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_memreg_info_t" "', argument " "1"" of type '" "memreg_info_t *""'"); 
  }
  arg1 = reinterpret_cast< memreg_info_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *memreg_info_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_memreg_info_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *memreg_info_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_get_tev_qty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_tev_qty", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_tev_qty();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_tev_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  tev_info_t *arg2 = (tev_info_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_tev_info", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_tev_info" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_tev_info" "', argument " "2"" of type '" "tev_info_t *""'"); 
  }
  arg2 = reinterpret_cast< tev_info_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_tev_info(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_insn_tev_reg_val(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  char *arg2 = (char *) 0 ;
  regval_t *arg3 = (regval_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_insn_tev_reg_val", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_insn_tev_reg_val" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_insn_tev_reg_val" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_regval_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_insn_tev_reg_val" "', argument " "3"" of type '" "regval_t *""'"); 
  }
  arg3 = reinterpret_cast< regval_t * >(argp3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_insn_tev_reg_val(arg1,(char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_insn_tev_reg_mem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  memreg_infos_t *arg2 = (memreg_infos_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_insn_tev_reg_mem", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_insn_tev_reg_mem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_memreg_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_insn_tev_reg_mem" "', argument " "2"" of type '" "memreg_infos_t *""'"); 
  }
  arg2 = reinterpret_cast< memreg_infos_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_insn_tev_reg_mem(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_insn_tev_reg_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  char *arg2 = (char *) 0 ;
  regval_t *arg3 = (regval_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_insn_tev_reg_result", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_insn_tev_reg_result" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_insn_tev_reg_result" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_regval_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_insn_tev_reg_result" "', argument " "3"" of type '" "regval_t *""'"); 
  }
  arg3 = reinterpret_cast< regval_t * >(argp3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_insn_tev_reg_result(arg1,(char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_call_tev_callee(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_call_tev_callee" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (ea_t)get_call_tev_callee(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_ret_tev_return(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_ret_tev_return" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (ea_t)get_ret_tev_return(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_bpt_tev_ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_bpt_tev_ea" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (ea_t)get_bpt_tev_ea(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_tev_memory_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  meminfo_vec_t *arg2 = (meminfo_vec_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_tev_memory_info", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_tev_memory_info" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_memory_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_tev_memory_info" "', argument " "2"" of type '" "meminfo_vec_t *""'"); 
  }
  arg2 = reinterpret_cast< meminfo_vec_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_tev_memory_info(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_tev_event(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  debug_event_t *arg2 = (debug_event_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_tev_event", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_tev_event" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_debug_event_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_tev_event" "', argument " "2"" of type '" "debug_event_t *""'"); 
  }
  arg2 = reinterpret_cast< debug_event_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_tev_event(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_trace_base_address(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_trace_base_address", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (ea_t)get_trace_base_address();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_trace_base_address(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "set_trace_base_address" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_trace_base_address(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_add_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbg_add_thread" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        dbg_add_thread(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_del_thread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbg_del_thread" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        dbg_del_thread(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_add_tev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tev_type_t arg1 ;
  thid_t arg2 ;
  ea_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "dbg_add_tev", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbg_add_tev" "', argument " "1"" of type '" "tev_type_t""'");
  } 
  arg1 = static_cast< tev_type_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dbg_add_tev" "', argument " "2"" of type '" "thid_t""'");
  } 
  arg2 = static_cast< thid_t >(val2);
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_add_tev" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        dbg_add_tev(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_value_t_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_reg_value_t *arg1 = (tev_reg_value_t *) 0 ;
  regval_t *arg2 = (regval_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_value_t_value_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_value_t_value_set" "', argument " "1"" of type '" "tev_reg_value_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_reg_value_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_regval_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_reg_value_t_value_set" "', argument " "2"" of type '" "regval_t *""'"); 
  }
  arg2 = reinterpret_cast< regval_t * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->value = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_value_t_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_reg_value_t *arg1 = (tev_reg_value_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  regval_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_value_t_value_get" "', argument " "1"" of type '" "tev_reg_value_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_reg_value_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (regval_t *)& ((arg1)->value);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_regval_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_value_t_reg_idx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_reg_value_t *arg1 = (tev_reg_value_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_reg_value_t_reg_idx_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_value_t_reg_idx_set" "', argument " "1"" of type '" "tev_reg_value_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_reg_value_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tev_reg_value_t_reg_idx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->reg_idx = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_reg_value_t_reg_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_reg_value_t *arg1 = (tev_reg_value_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_reg_value_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_reg_value_t_reg_idx_get" "', argument " "1"" of type '" "tev_reg_value_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_reg_value_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->reg_idx);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tev_reg_value_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) -1 ;
  uint64 arg2 = (uint64) uint64(-1) ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[2] ;
  tev_reg_value_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_tev_reg_value_t", 0, 2, swig_obj)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_tev_reg_value_t" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (swig_obj[1]) {
    {
      // %typemap(in) uint64
      uint64 arg2_temp;
      if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
      {
        PyErr_SetString(PyExc_TypeError, "Expected an uint64 type");
        return NULL;
      }
      arg2 = arg2_temp;
    }
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (tev_reg_value_t *)new tev_reg_value_t(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_reg_value_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tev_reg_value_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_reg_value_t *arg1 = (tev_reg_value_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_reg_value_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tev_reg_value_t" "', argument " "1"" of type '" "tev_reg_value_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_reg_value_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tev_reg_value_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tev_reg_value_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *tev_reg_value_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_tev_info_reg_t_info_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_reg_t *arg1 = (tev_info_reg_t *) 0 ;
  tev_info_t *arg2 = (tev_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_info_reg_t_info_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_reg_t_info_set" "', argument " "1"" of type '" "tev_info_reg_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_reg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tev_info_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_info_reg_t_info_set" "', argument " "2"" of type '" "tev_info_t *""'"); 
  }
  arg2 = reinterpret_cast< tev_info_t * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->info = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_info_reg_t_info_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_reg_t *arg1 = (tev_info_reg_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tev_info_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_reg_t_info_get" "', argument " "1"" of type '" "tev_info_reg_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_reg_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (tev_info_t *)& ((arg1)->info);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_info_reg_t_registers_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_reg_t *arg1 = (tev_info_reg_t *) 0 ;
  tev_reg_values_t *arg2 = (tev_reg_values_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "tev_info_reg_t_registers_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_reg_t_registers_set" "', argument " "1"" of type '" "tev_info_reg_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_reg_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tev_info_reg_t_registers_set" "', argument " "2"" of type '" "tev_reg_values_t *""'"); 
  }
  arg2 = reinterpret_cast< tev_reg_values_t * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->registers = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tev_info_reg_t_registers_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_reg_t *arg1 = (tev_info_reg_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tev_reg_values_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_reg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tev_info_reg_t_registers_get" "', argument " "1"" of type '" "tev_info_reg_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_reg_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (tev_reg_values_t *)& ((arg1)->registers);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_tev_reg_value_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tev_info_reg_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_reg_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_tev_info_reg_t", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (tev_info_reg_t *)new tev_info_reg_t();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tev_info_reg_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tev_info_reg_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tev_info_reg_t *arg1 = (tev_info_reg_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tev_info_reg_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tev_info_reg_t" "', argument " "1"" of type '" "tev_info_reg_t *""'"); 
  }
  arg1 = reinterpret_cast< tev_info_reg_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tev_info_reg_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tev_info_reg_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *tev_info_reg_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_dbg_add_many_tevs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  tevinforeg_vec_t *arg1 = (tevinforeg_vec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_tev_info_reg_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dbg_add_many_tevs" "', argument " "1"" of type '" "tevinforeg_vec_t *""'"); 
  }
  arg1 = reinterpret_cast< tevinforeg_vec_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)dbg_add_many_tevs(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_add_insn_tev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  ea_t arg2 ;
  save_reg_values_t arg3 = (save_reg_values_t) SAVE_DIFF ;
  int val1 ;
  int ecode1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "dbg_add_insn_tev", 2, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbg_add_insn_tev" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_add_insn_tev" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dbg_add_insn_tev" "', argument " "3"" of type '" "save_reg_values_t""'");
    } 
    arg3 = static_cast< save_reg_values_t >(val3);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)dbg_add_insn_tev(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_add_bpt_tev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  ea_t arg2 ;
  ea_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "dbg_add_bpt_tev", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbg_add_bpt_tev" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_add_bpt_tev" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_add_bpt_tev" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)dbg_add_bpt_tev(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_add_call_tev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  ea_t arg2 ;
  ea_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "dbg_add_call_tev", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbg_add_call_tev" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_add_call_tev" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_add_call_tev" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        dbg_add_call_tev(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_add_ret_tev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  ea_t arg2 ;
  ea_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "dbg_add_ret_tev", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dbg_add_ret_tev" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_add_ret_tev" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_add_ret_tev" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        dbg_add_ret_tev(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_add_debug_event(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  debug_event_t *arg1 = (debug_event_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_debug_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dbg_add_debug_event" "', argument " "1"" of type '" "debug_event_t *""'"); 
  }
  arg1 = reinterpret_cast< debug_event_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        dbg_add_debug_event(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_load_trace_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  char *arg2 = (char *) 0 ;
  qstring temp1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "load_trace_file" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)load_trace_file(arg1,(char const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_trace_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "save_trace_file", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_trace_file" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_trace_file" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)save_trace_file((char const *)arg1,(char const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_valid_trace_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_valid_trace_file" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_valid_trace_file((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_trace_file_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_trace_file_desc", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_trace_file_desc" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_trace_file_desc" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)set_trace_file_desc((char const *)arg1,(char const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_trace_file_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  char *arg2 = (char *) 0 ;
  qstring temp1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_trace_file_desc" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_trace_file_desc(arg1,(char const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_choose_trace_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  qstring temp1 ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!SWIG_Python_UnpackTuple(args, "choose_trace_file", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)choose_trace_file(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_graph_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "graph_trace", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)graph_trace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_highlight_trace_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool arg1 ;
  bgcolor_t arg2 ;
  bgcolor_t arg3 ;
  bool val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "set_highlight_trace_options", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_highlight_trace_options" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_highlight_trace_options" "', argument " "2"" of type '" "bgcolor_t""'");
  } 
  arg2 = static_cast< bgcolor_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_highlight_trace_options" "', argument " "3"" of type '" "bgcolor_t""'");
  } 
  arg3 = static_cast< bgcolor_t >(val3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_highlight_trace_options(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_trace_platform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_trace_platform" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_trace_platform((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_trace_platform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_trace_platform", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (char *)get_trace_platform();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wait_for_next_event(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  dbg_event_code_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "wait_for_next_event", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "wait_for_next_event" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wait_for_next_event" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (dbg_event_code_t)wait_for_next_event(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_debug_event(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  debug_event_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_debug_event", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (debug_event_t *)get_debug_event();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_debug_event_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_debugger_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  uint arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  uint result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_debugger_options" "', argument " "1"" of type '" "uint""'");
  } 
  arg1 = static_cast< uint >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (uint)set_debugger_options(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_remote_debugger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) -1 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "set_remote_debugger", 2, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_remote_debugger" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_remote_debugger" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_remote_debugger" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_remote_debugger((char const *)arg1,(char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_process_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  qstring *arg3 = (qstring *) 0 ;
  qstring *arg4 = (qstring *) 0 ;
  qstring *arg5 = (qstring *) 0 ;
  int *arg6 = (int *) 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_process_options", 6, 6, swig_obj)) SWIG_fail;
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[0]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[0], &buf, &length);
      arg1 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "get_process_options" "', argument " "1"" of type 'str'");
    }
  }
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[1]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[1], &buf, &length);
      arg2 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "get_process_options" "', argument " "2"" of type 'str'");
    }
  }
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[2]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[2], &buf, &length);
      arg3 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "get_process_options" "', argument " "3"" of type 'str'");
    }
  }
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[3]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[3], &buf, &length);
      arg4 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "get_process_options" "', argument " "4"" of type 'str'");
    }
  }
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[4]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[4], &buf, &length);
      arg5 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "get_process_options" "', argument " "5"" of type 'str'");
    }
  }
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "get_process_options" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        get_process_options(arg1,arg2,arg3,arg4,arg5,arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // bytes_container qstring * typemap(freearg)
    delete arg1;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg3;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg4;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg5;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg1;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg2;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg3;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg4;
  }
  {
    // bytes_container qstring * typemap(freearg)
    delete arg5;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_process_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  
  if (!SWIG_Python_UnpackTuple(args, "set_process_options", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_process_options" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_process_options" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_process_options" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "set_process_options" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "set_process_options" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "set_process_options" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_process_options((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_retrieve_exceptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  excvec_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "retrieve_exceptions", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (excvec_t *)retrieve_exceptions();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qvectorT_exception_info_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_store_exceptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "store_exceptions", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)store_exceptions();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_define_exception(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  uint arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "define_exception", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "define_exception" "', argument " "1"" of type '" "uint""'");
  } 
  arg1 = static_cast< uint >(val1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "define_exception" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "define_exception" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "define_exception" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (char *)define_exception(arg1,(char const *)arg2,(char const *)arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_eval_ctx_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  eval_ctx_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "new_eval_ctx_t" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (eval_ctx_t *)new eval_ctx_t(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eval_ctx_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_ctx_t_ea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eval_ctx_t *arg1 = (eval_ctx_t *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "eval_ctx_t_ea_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eval_ctx_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_ctx_t_ea_set" "', argument " "1"" of type '" "eval_ctx_t *""'"); 
  }
  arg1 = reinterpret_cast< eval_ctx_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "eval_ctx_t_ea_set" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->ea = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_ctx_t_ea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eval_ctx_t *arg1 = (eval_ctx_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eval_ctx_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_ctx_t_ea_get" "', argument " "1"" of type '" "eval_ctx_t *""'"); 
  }
  arg1 = reinterpret_cast< eval_ctx_t * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (ea_t) ((arg1)->ea);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_eval_ctx_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eval_ctx_t *arg1 = (eval_ctx_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eval_ctx_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_eval_ctx_t" "', argument " "1"" of type '" "eval_ctx_t *""'"); 
  }
  arg1 = reinterpret_cast< eval_ctx_t * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *eval_ctx_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_eval_ctx_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *eval_ctx_t_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_create_source_viewer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  TWidget **arg1 = (TWidget **) 0 ;
  TWidget *arg2 = (TWidget *) 0 ;
  TWidget *arg3 = (TWidget *) 0 ;
  SwigValueWrapper< qrefcnt_t< source_file_t > > arg4 ;
  strvec_t *arg5 = (strvec_t *) 0 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  source_view_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "create_source_viewer", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_source_viewer" "', argument " "1"" of type '" "TWidget **""'"); 
  }
  arg1 = reinterpret_cast< TWidget ** >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_source_viewer" "', argument " "2"" of type '" "TWidget *""'"); 
  }
  arg2 = reinterpret_cast< TWidget * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_TWidget, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "create_source_viewer" "', argument " "3"" of type '" "TWidget *""'"); 
  }
  arg3 = reinterpret_cast< TWidget * >(argp3);
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_qrefcnt_tT_source_file_t_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "create_source_viewer" "', argument " "4"" of type '" "source_file_ptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_source_viewer" "', argument " "4"" of type '" "source_file_ptr""'");
    } else {
      source_file_ptr * temp = reinterpret_cast< source_file_ptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_qvectorT_simpleline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "create_source_viewer" "', argument " "5"" of type '" "strvec_t *""'"); 
  }
  arg5 = reinterpret_cast< strvec_t * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "create_source_viewer" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "create_source_viewer" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "create_source_viewer" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (source_view_t *)create_source_viewer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_source_view_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_dbg_byte(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  uint32 *arg1 = (uint32 *) 0 ;
  ea_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_dbg_byte", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_dbg_byte" "', argument " "1"" of type '" "uint32 *""'"); 
  }
  arg1 = reinterpret_cast< uint32 * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "get_dbg_byte" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_dbg_byte(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_put_dbg_byte(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  uint32 arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "put_dbg_byte", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "put_dbg_byte" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "put_dbg_byte" "', argument " "2"" of type '" "uint32""'");
  } 
  arg2 = static_cast< uint32 >(val2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)put_dbg_byte(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_invalidate_dbgmem_config(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "invalidate_dbgmem_config", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        invalidate_dbgmem_config();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_invalidate_dbgmem_contents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  asize_t arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "invalidate_dbgmem_contents", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "invalidate_dbgmem_contents" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "invalidate_dbgmem_contents" "', argument " "2"" of type '" "asize_t""'");
  } 
  arg2 = static_cast< asize_t >(val2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        invalidate_dbgmem_contents(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_debugger_on(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "is_debugger_on", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_debugger_on();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_debugger_memory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "is_debugger_memory" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)is_debugger_memory(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_tev_ea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ea_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_tev_ea" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (ea_t)get_tev_ea(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_tev_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_tev_type" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_tev_type(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_tev_tid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_tev_tid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_tev_tid(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_module_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  modinfo_t *arg2 = (modinfo_t *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_module_info", 2, 2, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "get_module_info" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_modinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_module_info" "', argument " "2"" of type '" "modinfo_t *""'"); 
  }
  arg2 = reinterpret_cast< modinfo_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_module_info(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bring_debugger_to_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "bring_debugger_to_front", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        bring_debugger_to_front();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collect_stack_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  call_stack_t *arg2 = (call_stack_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "collect_stack_trace", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "collect_stack_trace" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_qvectorT_call_stack_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collect_stack_trace" "', argument " "2"" of type '" "call_stack_t *""'"); 
  }
  arg2 = reinterpret_cast< call_stack_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)collect_stack_trace(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_debugger_event_cond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_debugger_event_cond", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (char *)get_debugger_event_cond();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_load_debugger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  bool arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "load_debugger", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "load_debugger" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "load_debugger" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)load_debugger((char const *)arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_manual_regions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  meminfo_vec_t *arg1 = (meminfo_vec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memory_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_manual_regions" "', argument " "1"" of type '" "meminfo_vec_t *""'"); 
  }
  arg1 = reinterpret_cast< meminfo_vec_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        get_manual_regions(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_manual_regions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  meminfo_vec_t *arg1 = (meminfo_vec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memory_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_manual_regions" "', argument " "1"" of type '" "meminfo_vec_t const *""'"); 
  }
  arg1 = reinterpret_cast< meminfo_vec_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_manual_regions((qvector< memory_info_t > const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_edit_manual_regions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  
  if (!SWIG_Python_UnpackTuple(args, "edit_manual_regions", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        edit_manual_regions();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_enable_manual_regions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "enable_manual_regions" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        enable_manual_regions(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hide_all_bpts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "hide_all_bpts", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)hide_all_bpts();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_handle_debug_event(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  debug_event_t *arg1 = (debug_event_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "handle_debug_event", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_debug_event_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "handle_debug_event" "', argument " "1"" of type '" "debug_event_t const *""'"); 
  }
  arg1 = reinterpret_cast< debug_event_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "handle_debug_event" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)handle_debug_event((debug_event_t const *)arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_virt_module(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  modinfo_t *arg1 = (modinfo_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_modinfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_virt_module" "', argument " "1"" of type '" "modinfo_t const *""'"); 
  }
  arg1 = reinterpret_cast< modinfo_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)add_virt_module((modinfo_t const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_del_virt_module(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "del_virt_module" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)del_virt_module(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_ioctl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int arg1 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void **arg4 = (void **) 0 ;
  ssize_t *arg5 = (ssize_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "internal_ioctl", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "internal_ioctl" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "internal_ioctl" "', argument " "2"" of type '" "void const *""'");
  }  
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< size_t >(size2 - 1);
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "internal_ioctl" "', argument " "4"" of type '" "void **""'"); 
  }
  arg4 = reinterpret_cast< void ** >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[3], &argp5,SWIGTYPE_p_ssize_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "internal_ioctl" "', argument " "5"" of type '" "ssize_t *""'"); 
  }
  arg5 = reinterpret_cast< ssize_t * >(argp5);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)internal_ioctl(arg1,(void const *)arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_read_dbg_memory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int res2 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ssize_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "read_dbg_memory", 3, 3, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "read_dbg_memory" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "read_dbg_memory" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "read_dbg_memory" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = read_dbg_memory(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_reg_vals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int arg2 ;
  regval_t *arg3 = (regval_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_reg_vals", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_reg_vals" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_reg_vals" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_regval_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_reg_vals" "', argument " "3"" of type '" "regval_t *""'"); 
  }
  arg3 = reinterpret_cast< regval_t * >(argp3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_reg_vals(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_reg_val__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  thid_t arg1 ;
  int arg2 ;
  regval_t *arg3 = (regval_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_reg_val" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_reg_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_regval_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_reg_val" "', argument " "3"" of type '" "regval_t const *""'"); 
  }
  arg3 = reinterpret_cast< regval_t * >(argp3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)set_reg_val(arg1,arg2,(regval_t const *)arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_reg_val(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "set_reg_val", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_regval_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_set_reg_val__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_set_reg_val__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_regval_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_set_reg_val__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'set_reg_val'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    set_reg_val(char const *,regval_t const *)\n"
    "    set_reg_val(char const *,uint64)\n"
    "    set_reg_val(thid_t,int,regval_t const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_get_dbg_memory_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  meminfo_vec_t *arg1 = (meminfo_vec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_memory_info_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_dbg_memory_info" "', argument " "1"" of type '" "meminfo_vec_t *""'"); 
  }
  arg1 = reinterpret_cast< meminfo_vec_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_dbg_memory_info(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_bpt_group(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bpt_t *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "set_bpt_group", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_bpt_group" "', argument " "1"" of type '" "bpt_t &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_bpt_group" "', argument " "1"" of type '" "bpt_t &""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_bpt_group" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        set_bpt_group(*arg1,(char const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_bptloc_group(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bpt_location_t *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "set_bptloc_group", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_bptloc_group" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_bptloc_group" "', argument " "1"" of type '" "bpt_location_t const &""'"); 
  }
  arg1 = reinterpret_cast< bpt_location_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_bptloc_group" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)set_bptloc_group((bpt_location_t const &)*arg1,(char const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_bpt_group(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  bpt_location_t *arg2 = 0 ;
  qstring temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp1)
    arg1 = &temp1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_bpt_location_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_bpt_group" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_bpt_group" "', argument " "2"" of type '" "bpt_location_t const &""'"); 
  }
  arg2 = reinterpret_cast< bpt_location_t * >(argp2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_bpt_group(arg1,(bpt_location_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg1->c_str(), arg1->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_bptgrps__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  qstrvec_t *arg1 = (qstrvec_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT__qstringT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_bptgrps" "', argument " "1"" of type '" "qstrvec_t *""'"); 
  }
  arg1 = reinterpret_cast< qstrvec_t * >(argp1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = list_bptgrps(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rename_bptgrp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "rename_bptgrp", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rename_bptgrp" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rename_bptgrp" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)rename_bptgrp((char const *)arg1,(char const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_del_bptgrp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "del_bptgrp" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)del_bptgrp((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_grp_bpts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bpt_vec_t *arg1 = (bpt_vec_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  ssize_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_grp_bpts", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_qvectorT_bpt_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_grp_bpts" "', argument " "1"" of type '" "bpt_vec_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_vec_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_grp_bpts" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = get_grp_bpts(arg1,(char const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_srcinfo_provider(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  srcinfo_provider_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_srcinfo_provider" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (srcinfo_provider_t *)get_srcinfo_provider((char const *)arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_srcinfo_provider_t, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_global_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  srcinfo_provider_t *arg1 = (srcinfo_provider_t *) 0 ;
  ea_t arg2 ;
  char *arg3 = (char *) 0 ;
  source_item_ptr *arg4 = (source_item_ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_global_var", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_srcinfo_provider_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_global_var" "', argument " "1"" of type '" "srcinfo_provider_t *""'"); 
  }
  arg1 = reinterpret_cast< srcinfo_provider_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "get_global_var" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_global_var" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_qrefcnt_tT_source_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "get_global_var" "', argument " "4"" of type '" "source_item_ptr *""'"); 
  }
  arg4 = reinterpret_cast< source_item_ptr * >(argp4);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_global_var(arg1,arg2,(char const *)arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_local_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  srcinfo_provider_t *arg1 = (srcinfo_provider_t *) 0 ;
  ea_t arg2 ;
  char *arg3 = (char *) 0 ;
  source_item_ptr *arg4 = (source_item_ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_local_var", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_srcinfo_provider_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_local_var" "', argument " "1"" of type '" "srcinfo_provider_t *""'"); 
  }
  arg1 = reinterpret_cast< srcinfo_provider_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "get_local_var" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_local_var" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_qrefcnt_tT_source_item_t_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "get_local_var" "', argument " "4"" of type '" "source_item_ptr *""'"); 
  }
  arg4 = reinterpret_cast< source_item_ptr * >(argp4);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_local_var(arg1,arg2,(char const *)arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_local_vars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  srcinfo_provider_t *arg1 = (srcinfo_provider_t *) 0 ;
  ea_t arg2 ;
  source_items_t *arg3 = (source_items_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_local_vars", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_srcinfo_provider_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_local_vars" "', argument " "1"" of type '" "srcinfo_provider_t *""'"); 
  }
  arg1 = reinterpret_cast< srcinfo_provider_t * >(argp1);
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "get_local_vars" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_qvectorT_qrefcnt_tT_source_item_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_local_vars" "', argument " "3"" of type '" "source_items_t *""'"); 
  }
  arg3 = reinterpret_cast< source_items_t * >(argp3);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_local_vars(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_path_mapping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "add_path_mapping", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_path_mapping" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_path_mapping" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        add_path_mapping((char const *)arg1,(char const *)arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_current_source_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  qstring *arg1 = (qstring *) 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // bytes_container qstring *, qstring typemap(in)
    if ( IDAPyStr_Check(swig_obj[0]) )
    {
      // init properly, so ctor can't crash
      char *buf = NULL;
      Py_ssize_t length = 0;
      /*int success =*/ IDAPyBytes_AsMemAndSize(swig_obj[0], &buf, &length);
      arg1 = new qstring( buf, length); // build regardless of success
    }
    else
    {
      SWIG_exception_fail(
        SWIG_ValueError,
        "Expected string " "in method '" "get_current_source_file" "', argument " "1"" of type 'str'");
    }
  }
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)get_current_source_file(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    // bytes_container qstring * typemap(freearg)
    delete arg1;
  }
  return resultobj;
fail:
  {
    // bytes_container qstring * typemap(freearg)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_current_source_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_current_source_line", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)get_current_source_line();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_srcdbg_step_into(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "srcdbg_step_into", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)srcdbg_step_into();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_srcdbg_request_step_into(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "srcdbg_request_step_into", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)srcdbg_request_step_into();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_srcdbg_step_over(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "srcdbg_step_over", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)srcdbg_step_over();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_srcdbg_request_step_over(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "srcdbg_request_step_over", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)srcdbg_request_step_over();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_srcdbg_step_until_ret(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "srcdbg_step_until_ret", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)srcdbg_step_until_ret();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_srcdbg_request_step_until_ret(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "srcdbg_request_step_until_ret", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)srcdbg_request_step_until_ret();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_bin_search(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t *arg1 = (ea_t *) 0 ;
  ea_t arg2 ;
  ea_t arg3 ;
  compiled_binpat_vec_t *arg4 = 0 ;
  int arg5 ;
  qstring *arg6 = (qstring *) 0 ;
  uint32 temp1 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  qstring temp6 ;
  PyObject *swig_obj[4] ;
  drc_t result;
  
  {
    // %typemap(in,numinputs=0) uint32 *result
    arg1 = &temp1;
  }
  {
    // bytes_container typemap(in,numinputs=0) qstring *result (qstring temp6)
    arg6 = &temp6;
  }
  if (!SWIG_Python_UnpackTuple(args, "dbg_bin_search", 4, 4, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg2_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg2_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_bin_search" "', argument " "2"" of type 'ea_t'");
    arg2 = ea_t(arg2_temp);
  }
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[1], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "dbg_bin_search" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4, SWIGTYPE_p_qvectorT_compiled_binpat_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dbg_bin_search" "', argument " "4"" of type '" "compiled_binpat_vec_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dbg_bin_search" "', argument " "4"" of type '" "compiled_binpat_vec_t const &""'"); 
  }
  arg4 = reinterpret_cast< compiled_binpat_vec_t * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "dbg_bin_search" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (drc_t)dbg_bin_search(arg1,arg2,arg3,(qvector< compiled_binpat_t > const &)*arg4,arg5,arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    // %typemap(argout) uint32 *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = PyLong_FromUnsignedLong(*(uint32 *) arg1);
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(argout) qstring *result
    Py_XDECREF(resultobj);
    if (result > 0)
    {
      resultobj = IDAPyStr_FromUTF8AndSize((const char *) arg6->c_str(), arg6->length());
    }
    else
    {
      Py_INCREF(Py_None);
      resultobj = Py_None;
    }
  }
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return resultobj;
fail:
  {
    // bytes_container typemap(freearg) qstring *result
    // Nothing. We certainly don't want 'temp' to be deleted.
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_dbg_can_query(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "dbg_can_query", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)dbg_can_query();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_manual_regions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (PyObject *)py_get_manual_regions();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_manual_regions(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "get_manual_regions", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_get_manual_regions__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT_memory_info_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_get_manual_regions__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'get_manual_regions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get_manual_regions(meminfo_vec_t *)\n"
    "    py_get_manual_regions()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dbg_is_loaded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "dbg_is_loaded", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (bool)dbg_is_loaded();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_refresh_debugger_memory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "refresh_debugger_memory", 0, 0, 0)) SWIG_fail;
  {
    try
    {
      result = (PyObject *)refresh_debugger_memory();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DBG_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DBG_Hooks" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_hook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_hook" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->hook();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_unhook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_unhook" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->unhook();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_process_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  char *arg5 = (char *) 0 ;
  ea_t arg6 ;
  asize_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_process_start", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_process_start" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_process_start" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_process_start" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_process_start" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DBG_Hooks_dbg_process_start" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    // %typemap(in) ea_t
    uint64 arg6_temp;
    if ( !PyW_GetNumber(swig_obj[5], &arg6_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_process_start" "', argument " "6"" of type 'ea_t'");
    arg6 = ea_t(arg6_temp);
  }
  ecode7 = SWIG_AsVal_unsigned_SS_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DBG_Hooks_dbg_process_start" "', argument " "7"" of type '" "asize_t""'");
  } 
  arg7 = static_cast< asize_t >(val7);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_process_start(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
        } else {
          (arg1)->dbg_process_start(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_process_exit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_process_exit", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_process_exit" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_process_exit" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_process_exit" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_process_exit" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DBG_Hooks_dbg_process_exit" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_process_exit(arg2,arg3,arg4,arg5);
        } else {
          (arg1)->dbg_process_exit(arg2,arg3,arg4,arg5);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_process_attach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  char *arg5 = (char *) 0 ;
  ea_t arg6 ;
  asize_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_process_attach", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_process_attach" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_process_attach" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_process_attach" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_process_attach" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DBG_Hooks_dbg_process_attach" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    // %typemap(in) ea_t
    uint64 arg6_temp;
    if ( !PyW_GetNumber(swig_obj[5], &arg6_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_process_attach" "', argument " "6"" of type 'ea_t'");
    arg6 = ea_t(arg6_temp);
  }
  ecode7 = SWIG_AsVal_unsigned_SS_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DBG_Hooks_dbg_process_attach" "', argument " "7"" of type '" "asize_t""'");
  } 
  arg7 = static_cast< asize_t >(val7);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_process_attach(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
        } else {
          (arg1)->dbg_process_attach(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_process_detach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_process_detach", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_process_detach" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_process_detach" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_process_detach" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_process_detach" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_process_detach(arg2,arg3,arg4);
        } else {
          (arg1)->dbg_process_detach(arg2,arg3,arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_thread_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_thread_start", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_thread_start" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_thread_start" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_thread_start" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_thread_start" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_thread_start(arg2,arg3,arg4);
        } else {
          (arg1)->dbg_thread_start(arg2,arg3,arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_thread_exit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_thread_exit", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_thread_exit" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_thread_exit" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_thread_exit" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_thread_exit" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DBG_Hooks_dbg_thread_exit" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_thread_exit(arg2,arg3,arg4,arg5);
        } else {
          (arg1)->dbg_thread_exit(arg2,arg3,arg4,arg5);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_library_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  char *arg5 = (char *) 0 ;
  ea_t arg6 ;
  asize_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_library_load", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_library_load" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_library_load" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_library_load" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_library_load" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DBG_Hooks_dbg_library_load" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    // %typemap(in) ea_t
    uint64 arg6_temp;
    if ( !PyW_GetNumber(swig_obj[5], &arg6_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_library_load" "', argument " "6"" of type 'ea_t'");
    arg6 = ea_t(arg6_temp);
  }
  ecode7 = SWIG_AsVal_unsigned_SS_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DBG_Hooks_dbg_library_load" "', argument " "7"" of type '" "asize_t""'");
  } 
  arg7 = static_cast< asize_t >(val7);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_library_load(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
        } else {
          (arg1)->dbg_library_load(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_library_unload(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_library_unload", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_library_unload" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_library_unload" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_library_unload" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_library_unload" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DBG_Hooks_dbg_library_unload" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_library_unload(arg2,arg3,arg4,(char const *)arg5);
        } else {
          (arg1)->dbg_library_unload(arg2,arg3,arg4,(char const *)arg5);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_information(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_information", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_information" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_information" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_information" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_information" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DBG_Hooks_dbg_information" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_information(arg2,arg3,arg4,(char const *)arg5);
        } else {
          (arg1)->dbg_information(arg2,arg3,arg4,(char const *)arg5);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_exception(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  int arg5 ;
  bool arg6 ;
  ea_t arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  PyObject *swig_obj[8] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_exception", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_exception" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_exception" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_exception" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_exception" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DBG_Hooks_dbg_exception" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DBG_Hooks_dbg_exception" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    // %typemap(in) ea_t
    uint64 arg7_temp;
    if ( !PyW_GetNumber(swig_obj[6], &arg7_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_exception" "', argument " "7"" of type 'ea_t'");
    arg7 = ea_t(arg7_temp);
  }
  res8 = SWIG_AsCharPtrAndSize(swig_obj[7], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "DBG_Hooks_dbg_exception" "', argument " "8"" of type '" "char const *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->DBG_Hooks::dbg_exception(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
        } else {
          result = (int)(arg1)->dbg_exception(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_suspend_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_suspend_process" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_suspend_process();
        } else {
          (arg1)->dbg_suspend_process();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_bpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  thid_t arg2 ;
  ea_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_bpt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_bpt" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_bpt" "', argument " "2"" of type '" "thid_t""'");
  } 
  arg2 = static_cast< thid_t >(val2);
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_bpt" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->DBG_Hooks::dbg_bpt(arg2,arg3);
        } else {
          result = (int)(arg1)->dbg_bpt(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_trace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  thid_t arg2 ;
  ea_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_trace", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_trace" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_trace" "', argument " "2"" of type '" "thid_t""'");
  } 
  arg2 = static_cast< thid_t >(val2);
  {
    // %typemap(in) ea_t
    uint64 arg3_temp;
    if ( !PyW_GetNumber(swig_obj[2], &arg3_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_trace" "', argument " "3"" of type 'ea_t'");
    arg3 = ea_t(arg3_temp);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          result = (int)(arg1)->DBG_Hooks::dbg_trace(arg2,arg3);
        } else {
          result = (int)(arg1)->dbg_trace(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_request_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_request_error", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_request_error" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_request_error" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_request_error" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_request_error(arg2,arg3);
        } else {
          (arg1)->dbg_request_error(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_step_into(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_step_into" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_step_into();
        } else {
          (arg1)->dbg_step_into();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_step_over(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_step_over" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_step_over();
        } else {
          (arg1)->dbg_step_over();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_run_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  pid_t arg2 ;
  thid_t arg3 ;
  ea_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_run_to", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_run_to" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_run_to" "', argument " "2"" of type '" "pid_t""'");
  } 
  arg2 = static_cast< pid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DBG_Hooks_dbg_run_to" "', argument " "3"" of type '" "thid_t""'");
  } 
  arg3 = static_cast< thid_t >(val3);
  {
    // %typemap(in) ea_t
    uint64 arg4_temp;
    if ( !PyW_GetNumber(swig_obj[3], &arg4_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "DBG_Hooks_dbg_run_to" "', argument " "4"" of type 'ea_t'");
    arg4 = ea_t(arg4_temp);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_run_to(arg2,arg3,arg4);
        } else {
          (arg1)->dbg_run_to(arg2,arg3,arg4);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_step_until_ret(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_step_until_ret" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_step_until_ret();
        } else {
          (arg1)->dbg_step_until_ret();
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DBG_Hooks_dbg_bpt_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  int arg2 ;
  bpt_t *arg3 = (bpt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "DBG_Hooks_dbg_bpt_changed", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DBG_Hooks_dbg_bpt_changed" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DBG_Hooks_dbg_bpt_changed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DBG_Hooks_dbg_bpt_changed" "', argument " "3"" of type '" "bpt_t *""'"); 
  }
  arg3 = reinterpret_cast< bpt_t * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try
      {
        if (upcall) {
          (arg1)->DBG_Hooks::dbg_bpt_changed(arg2,arg3);
        } else {
          (arg1)->dbg_bpt_changed(arg2,arg3);
        }
      }
      catch ( const std::bad_alloc &ba ) {
        __raise_ba(ba); SWIG_fail; 
      }
      catch ( const std::out_of_range &e ) {
        __raise_oor(e); SWIG_fail; 
      }
      catch ( const interr_exc_t &e ) {
        __raise_ie(e); SWIG_fail; 
      }
      catch ( const std::exception &e ) {
        __raise_e(e); SWIG_fail; 
      }
      catch ( const Swig::DirectorException &e ) {
        __raise_de(e); SWIG_fail; 
      }
      catch ( ... ) {
        __raise_u(); SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DBG_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  DBG_Hooks *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try
    {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (DBG_Hooks *)new SwigDirector_DBG_Hooks(arg1); 
      } else {
        result = (DBG_Hooks *)new DBG_Hooks(); 
      }
      
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DBG_Hooks, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_DBG_Hooks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DBG_Hooks *arg1 = (DBG_Hooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DBG_Hooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_DBG_Hooks" "', argument " "1"" of type '" "DBG_Hooks *""'"); 
  }
  arg1 = reinterpret_cast< DBG_Hooks * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DBG_Hooks_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DBG_Hooks, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DBG_Hooks_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_list_bptgrps__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try
    {
      result = (PyObject *)py_list_bptgrps();
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_bptgrps(PyObject *self, PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  Py_ssize_t argc;

  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "list_bptgrps", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_list_bptgrps__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_qvectorT__qstringT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_list_bptgrps__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'list_bptgrps'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list_bptgrps(qstrvec_t *)\n"
    "    py_list_bptgrps()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_move_bpt_to_grp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bpt_t *arg1 = (bpt_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "move_bpt_to_grp", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_bpt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_bpt_to_grp" "', argument " "1"" of type '" "bpt_t *""'"); 
  }
  arg1 = reinterpret_cast< bpt_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "move_bpt_to_grp" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      move_bpt_to_grp(arg1,(char const *)arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_get_sreg_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  thid_t arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ea_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "internal_get_sreg_base", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "internal_get_sreg_base" "', argument " "1"" of type '" "thid_t""'");
  } 
  arg1 = static_cast< thid_t >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "internal_get_sreg_base" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (ea_t)py_internal_get_sreg_base(arg1,arg2);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = PyLong_FromUnsignedLongLong(result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_write_dbg_memory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  if ( !__chkthr() ) return NULL; // patched by patch_codegen.py
  PyObject *resultobj = 0;

  ea_t arg1 ;
  PyObject *arg2 = (PyObject *) 0 ;
  size_t arg3 = (size_t) size_t(-1) ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ssize_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "write_dbg_memory", 2, 3, swig_obj)) SWIG_fail;
  {
    // %typemap(in) ea_t
    uint64 arg1_temp;
    if ( !PyW_GetNumber(swig_obj[0], &arg1_temp) )
    SWIG_exception_fail(
      SWIG_TypeError,
      "in method '" "write_dbg_memory" "', argument " "1"" of type 'ea_t'");
    arg1 = ea_t(arg1_temp);
  }
  arg2 = swig_obj[1];
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "write_dbg_memory" "', argument " "3"" of type '" "size_t""'");
    } 
    arg3 = static_cast< size_t >(val3);
  }
  {
    try
    {
      result = py_write_dbg_memory(arg1,arg2,arg3);
    }
    catch ( const std::bad_alloc &ba ) {
      __raise_ba(ba); SWIG_fail; 
    }
    catch ( const std::out_of_range &e ) {
      __raise_oor(e); SWIG_fail; 
    }
    catch ( const interr_exc_t &e ) {
      __raise_ie(e); SWIG_fail; 
    }
    catch ( const std::exception &e ) {
      __raise_e(e); SWIG_fail; 
    }
    catch ( const Swig::DirectorException &e ) {
      __raise_de(e); SWIG_fail; 
    }
    catch ( ... ) {
      __raise_u(); SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "new_bpt_vec_t", _wrap_new_bpt_vec_t, METH_VARARGS, "\n"
		"bpt_vec_t()\n"
		"new_bpt_vec_t(x) -> bpt_vec_t\n"
		""},
	 { "delete_bpt_vec_t", _wrap_delete_bpt_vec_t, METH_O, "delete_bpt_vec_t(self)"},
	 { "bpt_vec_t_push_back", _wrap_bpt_vec_t_push_back, METH_VARARGS, "\n"
		"bpt_vec_t_push_back(self, x)\n"
		"bpt_vec_t_push_back(self) -> bpt_t\n"
		""},
	 { "bpt_vec_t_pop_back", _wrap_bpt_vec_t_pop_back, METH_O, "bpt_vec_t_pop_back(self)"},
	 { "bpt_vec_t_size", _wrap_bpt_vec_t_size, METH_O, "bpt_vec_t_size(self) -> size_t"},
	 { "bpt_vec_t_empty", _wrap_bpt_vec_t_empty, METH_O, "bpt_vec_t_empty(self) -> bool"},
	 { "bpt_vec_t_at", _wrap_bpt_vec_t_at, METH_VARARGS, "bpt_vec_t_at(self, _idx) -> bpt_t"},
	 { "bpt_vec_t_qclear", _wrap_bpt_vec_t_qclear, METH_O, "bpt_vec_t_qclear(self)"},
	 { "bpt_vec_t_clear", _wrap_bpt_vec_t_clear, METH_O, "bpt_vec_t_clear(self)"},
	 { "bpt_vec_t_resize", _wrap_bpt_vec_t_resize, METH_VARARGS, "\n"
		"bpt_vec_t_resize(self, _newsize, x)\n"
		"bpt_vec_t_resize(self, _newsize)\n"
		""},
	 { "bpt_vec_t_grow", _wrap_bpt_vec_t_grow, METH_VARARGS, "bpt_vec_t_grow(self, x=bpt_t())"},
	 { "bpt_vec_t_capacity", _wrap_bpt_vec_t_capacity, METH_O, "bpt_vec_t_capacity(self) -> size_t"},
	 { "bpt_vec_t_reserve", _wrap_bpt_vec_t_reserve, METH_VARARGS, "bpt_vec_t_reserve(self, cnt)"},
	 { "bpt_vec_t_truncate", _wrap_bpt_vec_t_truncate, METH_O, "bpt_vec_t_truncate(self)"},
	 { "bpt_vec_t_swap", _wrap_bpt_vec_t_swap, METH_VARARGS, "bpt_vec_t_swap(self, r)"},
	 { "bpt_vec_t_extract", _wrap_bpt_vec_t_extract, METH_O, "bpt_vec_t_extract(self) -> bpt_t"},
	 { "bpt_vec_t_inject", _wrap_bpt_vec_t_inject, METH_VARARGS, "bpt_vec_t_inject(self, s, len)"},
	 { "bpt_vec_t_begin", _wrap_bpt_vec_t_begin, METH_VARARGS, "\n"
		"bpt_vec_t_begin(self) -> bpt_t\n"
		"bpt_vec_t_begin(self) -> bpt_t\n"
		""},
	 { "bpt_vec_t_end", _wrap_bpt_vec_t_end, METH_VARARGS, "\n"
		"bpt_vec_t_end(self) -> bpt_t\n"
		"bpt_vec_t_end(self) -> bpt_t\n"
		""},
	 { "bpt_vec_t_insert", _wrap_bpt_vec_t_insert, METH_VARARGS, "bpt_vec_t_insert(self, it, x) -> bpt_t"},
	 { "bpt_vec_t_erase", _wrap_bpt_vec_t_erase, METH_VARARGS, "\n"
		"bpt_vec_t_erase(self, it) -> bpt_t\n"
		"bpt_vec_t_erase(self, first, last) -> bpt_t\n"
		""},
	 { "bpt_vec_t___len__", _wrap_bpt_vec_t___len__, METH_O, "bpt_vec_t___len__(self) -> size_t"},
	 { "bpt_vec_t___getitem__", _wrap_bpt_vec_t___getitem__, METH_VARARGS, "bpt_vec_t___getitem__(self, i) -> bpt_t"},
	 { "bpt_vec_t___setitem__", _wrap_bpt_vec_t___setitem__, METH_VARARGS, "bpt_vec_t___setitem__(self, i, v)"},
	 { "bpt_vec_t_swigregister", bpt_vec_t_swigregister, METH_O, NULL},
	 { "bpt_vec_t_swiginit", bpt_vec_t_swiginit, METH_VARARGS, NULL},
	 { "new_tev_reg_values_t", _wrap_new_tev_reg_values_t, METH_VARARGS, "\n"
		"tev_reg_values_t()\n"
		"new_tev_reg_values_t(x) -> tev_reg_values_t\n"
		""},
	 { "delete_tev_reg_values_t", _wrap_delete_tev_reg_values_t, METH_O, "delete_tev_reg_values_t(self)"},
	 { "tev_reg_values_t_push_back", _wrap_tev_reg_values_t_push_back, METH_VARARGS, "\n"
		"tev_reg_values_t_push_back(self, x)\n"
		"tev_reg_values_t_push_back(self) -> tev_reg_value_t\n"
		""},
	 { "tev_reg_values_t_pop_back", _wrap_tev_reg_values_t_pop_back, METH_O, "tev_reg_values_t_pop_back(self)"},
	 { "tev_reg_values_t_size", _wrap_tev_reg_values_t_size, METH_O, "tev_reg_values_t_size(self) -> size_t"},
	 { "tev_reg_values_t_empty", _wrap_tev_reg_values_t_empty, METH_O, "tev_reg_values_t_empty(self) -> bool"},
	 { "tev_reg_values_t_at", _wrap_tev_reg_values_t_at, METH_VARARGS, "tev_reg_values_t_at(self, _idx) -> tev_reg_value_t"},
	 { "tev_reg_values_t_qclear", _wrap_tev_reg_values_t_qclear, METH_O, "tev_reg_values_t_qclear(self)"},
	 { "tev_reg_values_t_clear", _wrap_tev_reg_values_t_clear, METH_O, "tev_reg_values_t_clear(self)"},
	 { "tev_reg_values_t_resize", _wrap_tev_reg_values_t_resize, METH_VARARGS, "\n"
		"tev_reg_values_t_resize(self, _newsize, x)\n"
		"tev_reg_values_t_resize(self, _newsize)\n"
		""},
	 { "tev_reg_values_t_grow", _wrap_tev_reg_values_t_grow, METH_VARARGS, "tev_reg_values_t_grow(self, x=tev_reg_value_t())"},
	 { "tev_reg_values_t_capacity", _wrap_tev_reg_values_t_capacity, METH_O, "tev_reg_values_t_capacity(self) -> size_t"},
	 { "tev_reg_values_t_reserve", _wrap_tev_reg_values_t_reserve, METH_VARARGS, "tev_reg_values_t_reserve(self, cnt)"},
	 { "tev_reg_values_t_truncate", _wrap_tev_reg_values_t_truncate, METH_O, "tev_reg_values_t_truncate(self)"},
	 { "tev_reg_values_t_swap", _wrap_tev_reg_values_t_swap, METH_VARARGS, "tev_reg_values_t_swap(self, r)"},
	 { "tev_reg_values_t_extract", _wrap_tev_reg_values_t_extract, METH_O, "tev_reg_values_t_extract(self) -> tev_reg_value_t"},
	 { "tev_reg_values_t_inject", _wrap_tev_reg_values_t_inject, METH_VARARGS, "tev_reg_values_t_inject(self, s, len)"},
	 { "tev_reg_values_t_begin", _wrap_tev_reg_values_t_begin, METH_VARARGS, "\n"
		"tev_reg_values_t_begin(self) -> tev_reg_value_t\n"
		"tev_reg_values_t_begin(self) -> tev_reg_value_t\n"
		""},
	 { "tev_reg_values_t_end", _wrap_tev_reg_values_t_end, METH_VARARGS, "\n"
		"tev_reg_values_t_end(self) -> tev_reg_value_t\n"
		"tev_reg_values_t_end(self) -> tev_reg_value_t\n"
		""},
	 { "tev_reg_values_t_insert", _wrap_tev_reg_values_t_insert, METH_VARARGS, "tev_reg_values_t_insert(self, it, x) -> tev_reg_value_t"},
	 { "tev_reg_values_t_erase", _wrap_tev_reg_values_t_erase, METH_VARARGS, "\n"
		"tev_reg_values_t_erase(self, it) -> tev_reg_value_t\n"
		"tev_reg_values_t_erase(self, first, last) -> tev_reg_value_t\n"
		""},
	 { "tev_reg_values_t___len__", _wrap_tev_reg_values_t___len__, METH_O, "tev_reg_values_t___len__(self) -> size_t"},
	 { "tev_reg_values_t___getitem__", _wrap_tev_reg_values_t___getitem__, METH_VARARGS, "tev_reg_values_t___getitem__(self, i) -> tev_reg_value_t"},
	 { "tev_reg_values_t___setitem__", _wrap_tev_reg_values_t___setitem__, METH_VARARGS, "tev_reg_values_t___setitem__(self, i, v)"},
	 { "tev_reg_values_t_swigregister", tev_reg_values_t_swigregister, METH_O, NULL},
	 { "tev_reg_values_t_swiginit", tev_reg_values_t_swiginit, METH_VARARGS, NULL},
	 { "new_tevinforeg_vec_t", _wrap_new_tevinforeg_vec_t, METH_VARARGS, "\n"
		"tevinforeg_vec_t()\n"
		"new_tevinforeg_vec_t(x) -> tevinforeg_vec_t\n"
		""},
	 { "delete_tevinforeg_vec_t", _wrap_delete_tevinforeg_vec_t, METH_O, "delete_tevinforeg_vec_t(self)"},
	 { "tevinforeg_vec_t_push_back", _wrap_tevinforeg_vec_t_push_back, METH_VARARGS, "\n"
		"tevinforeg_vec_t_push_back(self, x)\n"
		"tevinforeg_vec_t_push_back(self) -> tev_info_reg_t\n"
		""},
	 { "tevinforeg_vec_t_pop_back", _wrap_tevinforeg_vec_t_pop_back, METH_O, "tevinforeg_vec_t_pop_back(self)"},
	 { "tevinforeg_vec_t_size", _wrap_tevinforeg_vec_t_size, METH_O, "tevinforeg_vec_t_size(self) -> size_t"},
	 { "tevinforeg_vec_t_empty", _wrap_tevinforeg_vec_t_empty, METH_O, "tevinforeg_vec_t_empty(self) -> bool"},
	 { "tevinforeg_vec_t_at", _wrap_tevinforeg_vec_t_at, METH_VARARGS, "tevinforeg_vec_t_at(self, _idx) -> tev_info_reg_t"},
	 { "tevinforeg_vec_t_qclear", _wrap_tevinforeg_vec_t_qclear, METH_O, "tevinforeg_vec_t_qclear(self)"},
	 { "tevinforeg_vec_t_clear", _wrap_tevinforeg_vec_t_clear, METH_O, "tevinforeg_vec_t_clear(self)"},
	 { "tevinforeg_vec_t_resize", _wrap_tevinforeg_vec_t_resize, METH_VARARGS, "\n"
		"tevinforeg_vec_t_resize(self, _newsize, x)\n"
		"tevinforeg_vec_t_resize(self, _newsize)\n"
		""},
	 { "tevinforeg_vec_t_grow", _wrap_tevinforeg_vec_t_grow, METH_VARARGS, "tevinforeg_vec_t_grow(self, x=tev_info_reg_t())"},
	 { "tevinforeg_vec_t_capacity", _wrap_tevinforeg_vec_t_capacity, METH_O, "tevinforeg_vec_t_capacity(self) -> size_t"},
	 { "tevinforeg_vec_t_reserve", _wrap_tevinforeg_vec_t_reserve, METH_VARARGS, "tevinforeg_vec_t_reserve(self, cnt)"},
	 { "tevinforeg_vec_t_truncate", _wrap_tevinforeg_vec_t_truncate, METH_O, "tevinforeg_vec_t_truncate(self)"},
	 { "tevinforeg_vec_t_swap", _wrap_tevinforeg_vec_t_swap, METH_VARARGS, "tevinforeg_vec_t_swap(self, r)"},
	 { "tevinforeg_vec_t_extract", _wrap_tevinforeg_vec_t_extract, METH_O, "tevinforeg_vec_t_extract(self) -> tev_info_reg_t"},
	 { "tevinforeg_vec_t_inject", _wrap_tevinforeg_vec_t_inject, METH_VARARGS, "tevinforeg_vec_t_inject(self, s, len)"},
	 { "tevinforeg_vec_t_begin", _wrap_tevinforeg_vec_t_begin, METH_VARARGS, "\n"
		"tevinforeg_vec_t_begin(self) -> tev_info_reg_t\n"
		"tevinforeg_vec_t_begin(self) -> tev_info_reg_t\n"
		""},
	 { "tevinforeg_vec_t_end", _wrap_tevinforeg_vec_t_end, METH_VARARGS, "\n"
		"tevinforeg_vec_t_end(self) -> tev_info_reg_t\n"
		"tevinforeg_vec_t_end(self) -> tev_info_reg_t\n"
		""},
	 { "tevinforeg_vec_t_insert", _wrap_tevinforeg_vec_t_insert, METH_VARARGS, "tevinforeg_vec_t_insert(self, it, x) -> tev_info_reg_t"},
	 { "tevinforeg_vec_t_erase", _wrap_tevinforeg_vec_t_erase, METH_VARARGS, "\n"
		"tevinforeg_vec_t_erase(self, it) -> tev_info_reg_t\n"
		"tevinforeg_vec_t_erase(self, first, last) -> tev_info_reg_t\n"
		""},
	 { "tevinforeg_vec_t___len__", _wrap_tevinforeg_vec_t___len__, METH_O, "tevinforeg_vec_t___len__(self) -> size_t"},
	 { "tevinforeg_vec_t___getitem__", _wrap_tevinforeg_vec_t___getitem__, METH_VARARGS, "tevinforeg_vec_t___getitem__(self, i) -> tev_info_reg_t"},
	 { "tevinforeg_vec_t___setitem__", _wrap_tevinforeg_vec_t___setitem__, METH_VARARGS, "tevinforeg_vec_t___setitem__(self, i, v)"},
	 { "tevinforeg_vec_t_swigregister", tevinforeg_vec_t_swigregister, METH_O, NULL},
	 { "tevinforeg_vec_t_swiginit", tevinforeg_vec_t_swiginit, METH_VARARGS, NULL},
	 { "new_memreg_infos_t", _wrap_new_memreg_infos_t, METH_VARARGS, "\n"
		"memreg_infos_t()\n"
		"new_memreg_infos_t(x) -> memreg_infos_t\n"
		""},
	 { "delete_memreg_infos_t", _wrap_delete_memreg_infos_t, METH_O, "delete_memreg_infos_t(self)"},
	 { "memreg_infos_t_push_back", _wrap_memreg_infos_t_push_back, METH_VARARGS, "\n"
		"memreg_infos_t_push_back(self, x)\n"
		"memreg_infos_t_push_back(self) -> memreg_info_t\n"
		""},
	 { "memreg_infos_t_pop_back", _wrap_memreg_infos_t_pop_back, METH_O, "memreg_infos_t_pop_back(self)"},
	 { "memreg_infos_t_size", _wrap_memreg_infos_t_size, METH_O, "memreg_infos_t_size(self) -> size_t"},
	 { "memreg_infos_t_empty", _wrap_memreg_infos_t_empty, METH_O, "memreg_infos_t_empty(self) -> bool"},
	 { "memreg_infos_t_at", _wrap_memreg_infos_t_at, METH_VARARGS, "memreg_infos_t_at(self, _idx) -> memreg_info_t"},
	 { "memreg_infos_t_qclear", _wrap_memreg_infos_t_qclear, METH_O, "memreg_infos_t_qclear(self)"},
	 { "memreg_infos_t_clear", _wrap_memreg_infos_t_clear, METH_O, "memreg_infos_t_clear(self)"},
	 { "memreg_infos_t_resize", _wrap_memreg_infos_t_resize, METH_VARARGS, "\n"
		"memreg_infos_t_resize(self, _newsize, x)\n"
		"memreg_infos_t_resize(self, _newsize)\n"
		""},
	 { "memreg_infos_t_grow", _wrap_memreg_infos_t_grow, METH_VARARGS, "memreg_infos_t_grow(self, x=memreg_info_t())"},
	 { "memreg_infos_t_capacity", _wrap_memreg_infos_t_capacity, METH_O, "memreg_infos_t_capacity(self) -> size_t"},
	 { "memreg_infos_t_reserve", _wrap_memreg_infos_t_reserve, METH_VARARGS, "memreg_infos_t_reserve(self, cnt)"},
	 { "memreg_infos_t_truncate", _wrap_memreg_infos_t_truncate, METH_O, "memreg_infos_t_truncate(self)"},
	 { "memreg_infos_t_swap", _wrap_memreg_infos_t_swap, METH_VARARGS, "memreg_infos_t_swap(self, r)"},
	 { "memreg_infos_t_extract", _wrap_memreg_infos_t_extract, METH_O, "memreg_infos_t_extract(self) -> memreg_info_t"},
	 { "memreg_infos_t_inject", _wrap_memreg_infos_t_inject, METH_VARARGS, "memreg_infos_t_inject(self, s, len)"},
	 { "memreg_infos_t_begin", _wrap_memreg_infos_t_begin, METH_VARARGS, "\n"
		"memreg_infos_t_begin(self) -> memreg_info_t\n"
		"memreg_infos_t_begin(self) -> memreg_info_t\n"
		""},
	 { "memreg_infos_t_end", _wrap_memreg_infos_t_end, METH_VARARGS, "\n"
		"memreg_infos_t_end(self) -> memreg_info_t\n"
		"memreg_infos_t_end(self) -> memreg_info_t\n"
		""},
	 { "memreg_infos_t_insert", _wrap_memreg_infos_t_insert, METH_VARARGS, "memreg_infos_t_insert(self, it, x) -> memreg_info_t"},
	 { "memreg_infos_t_erase", _wrap_memreg_infos_t_erase, METH_VARARGS, "\n"
		"memreg_infos_t_erase(self, it) -> memreg_info_t\n"
		"memreg_infos_t_erase(self, first, last) -> memreg_info_t\n"
		""},
	 { "memreg_infos_t___len__", _wrap_memreg_infos_t___len__, METH_O, "memreg_infos_t___len__(self) -> size_t"},
	 { "memreg_infos_t___getitem__", _wrap_memreg_infos_t___getitem__, METH_VARARGS, "memreg_infos_t___getitem__(self, i) -> memreg_info_t"},
	 { "memreg_infos_t___setitem__", _wrap_memreg_infos_t___setitem__, METH_VARARGS, "memreg_infos_t___setitem__(self, i, v)"},
	 { "memreg_infos_t_swigregister", memreg_infos_t_swigregister, METH_O, NULL},
	 { "memreg_infos_t_swiginit", memreg_infos_t_swiginit, METH_VARARGS, NULL},
	 { "run_to", _wrap_run_to, METH_VARARGS, "run_to(ea, pid=pid_t(-1), tid=0) -> bool"},
	 { "request_run_to", _wrap_request_run_to, METH_VARARGS, "request_run_to(ea, pid=pid_t(-1), tid=0) -> bool"},
	 { "set_debugger_event_cond", _wrap_set_debugger_event_cond, METH_O, "set_debugger_event_cond(nonnul_cond)"},
	 { "diff_trace_file", _wrap_diff_trace_file, METH_O, "diff_trace_file(nonnul_filename) -> bool"},
	 { "run_requests", _wrap_run_requests, METH_NOARGS, "run_requests() -> bool"},
	 { "get_running_request", _wrap_get_running_request, METH_NOARGS, "get_running_request() -> ui_notification_t"},
	 { "is_request_running", _wrap_is_request_running, METH_NOARGS, "is_request_running() -> bool"},
	 { "get_running_notification", _wrap_get_running_notification, METH_NOARGS, "get_running_notification() -> dbg_notification_t"},
	 { "clear_requests_queue", _wrap_clear_requests_queue, METH_NOARGS, "clear_requests_queue()"},
	 { "get_process_state", _wrap_get_process_state, METH_NOARGS, "get_process_state() -> int"},
	 { "set_process_state", _wrap_set_process_state, METH_VARARGS, "set_process_state(newstate, p_thid, dbginv) -> int"},
	 { "invalidate_dbg_state", _wrap_invalidate_dbg_state, METH_O, "invalidate_dbg_state(dbginv) -> int"},
	 { "start_process", _wrap_start_process, METH_VARARGS, "start_process(path=None, args=None, sdir=None) -> int"},
	 { "request_start_process", _wrap_request_start_process, METH_VARARGS, "request_start_process(path=None, args=None, sdir=None) -> int"},
	 { "suspend_process", _wrap_suspend_process, METH_NOARGS, "suspend_process() -> bool"},
	 { "request_suspend_process", _wrap_request_suspend_process, METH_NOARGS, "request_suspend_process() -> bool"},
	 { "continue_process", _wrap_continue_process, METH_NOARGS, "continue_process() -> bool"},
	 { "request_continue_process", _wrap_request_continue_process, METH_NOARGS, "request_continue_process() -> bool"},
	 { "exit_process", _wrap_exit_process, METH_NOARGS, "exit_process() -> bool"},
	 { "request_exit_process", _wrap_request_exit_process, METH_NOARGS, "request_exit_process() -> bool"},
	 { "get_processes", _wrap_get_processes, METH_O, "get_processes(proclist) -> ssize_t"},
	 { "attach_process", _wrap_attach_process, METH_VARARGS, "attach_process(pid=pid_t(-1), event_id=-1) -> int"},
	 { "request_attach_process", _wrap_request_attach_process, METH_VARARGS, "request_attach_process(pid, event_id) -> int"},
	 { "detach_process", _wrap_detach_process, METH_NOARGS, "detach_process() -> bool"},
	 { "request_detach_process", _wrap_request_detach_process, METH_NOARGS, "request_detach_process() -> bool"},
	 { "is_debugger_busy", _wrap_is_debugger_busy, METH_NOARGS, "is_debugger_busy() -> bool"},
	 { "get_thread_qty", _wrap_get_thread_qty, METH_NOARGS, "get_thread_qty() -> int"},
	 { "getn_thread", _wrap_getn_thread, METH_O, "getn_thread(n) -> thid_t"},
	 { "get_current_thread", _wrap_get_current_thread, METH_NOARGS, "get_current_thread() -> thid_t"},
	 { "getn_thread_name", _wrap_getn_thread_name, METH_O, "getn_thread_name(n) -> char const *"},
	 { "select_thread", _wrap_select_thread, METH_O, "select_thread(tid) -> bool"},
	 { "request_select_thread", _wrap_request_select_thread, METH_O, "request_select_thread(tid) -> bool"},
	 { "suspend_thread", _wrap_suspend_thread, METH_O, "suspend_thread(tid) -> int"},
	 { "request_suspend_thread", _wrap_request_suspend_thread, METH_O, "request_suspend_thread(tid) -> int"},
	 { "resume_thread", _wrap_resume_thread, METH_O, "resume_thread(tid) -> int"},
	 { "request_resume_thread", _wrap_request_resume_thread, METH_O, "request_resume_thread(tid) -> int"},
	 { "get_first_module", _wrap_get_first_module, METH_O, "get_first_module(modinfo) -> bool"},
	 { "get_next_module", _wrap_get_next_module, METH_O, "get_next_module(modinfo) -> bool"},
	 { "step_into", _wrap_step_into, METH_NOARGS, "step_into() -> bool"},
	 { "request_step_into", _wrap_request_step_into, METH_NOARGS, "request_step_into() -> bool"},
	 { "step_over", _wrap_step_over, METH_NOARGS, "step_over() -> bool"},
	 { "request_step_over", _wrap_request_step_over, METH_NOARGS, "request_step_over() -> bool"},
	 { "step_until_ret", _wrap_step_until_ret, METH_NOARGS, "step_until_ret() -> bool"},
	 { "request_step_until_ret", _wrap_request_step_until_ret, METH_NOARGS, "request_step_until_ret() -> bool"},
	 { "set_resume_mode", _wrap_set_resume_mode, METH_VARARGS, "set_resume_mode(tid, mode) -> bool"},
	 { "request_set_resume_mode", _wrap_request_set_resume_mode, METH_VARARGS, "request_set_resume_mode(tid, mode) -> bool"},
	 { "get_dbg_reg_info", _wrap_get_dbg_reg_info, METH_VARARGS, "get_dbg_reg_info(regname, ri) -> bool"},
	 { "get_reg_val", _wrap_get_reg_val, METH_VARARGS, "\n"
		"get_reg_val(regname, regval) -> bool\n"
		"get_reg_val(regname, ival) -> bool\n"
		""},
	 { "get_sp_val", _wrap_get_sp_val, METH_NOARGS, "get_sp_val() -> bool"},
	 { "get_ip_val", _wrap_get_ip_val, METH_NOARGS, "get_ip_val() -> bool"},
	 { "request_set_reg_val", _wrap_request_set_reg_val, METH_VARARGS, "request_set_reg_val(regname, regval) -> bool"},
	 { "is_reg_integer", _wrap_is_reg_integer, METH_O, "is_reg_integer(regname) -> bool"},
	 { "is_reg_float", _wrap_is_reg_float, METH_O, "is_reg_float(regname) -> bool"},
	 { "is_reg_custom", _wrap_is_reg_custom, METH_O, "is_reg_custom(regname) -> bool"},
	 { "set_bptloc_string", _wrap_set_bptloc_string, METH_O, "set_bptloc_string(s) -> int"},
	 { "get_bptloc_string", _wrap_get_bptloc_string, METH_O, "get_bptloc_string(i) -> char const *"},
	 { "bpt_location_t_info_set", _wrap_bpt_location_t_info_set, METH_VARARGS, "bpt_location_t_info_set(self, info)"},
	 { "bpt_location_t_info_get", _wrap_bpt_location_t_info_get, METH_O, "bpt_location_t_info_get(self) -> ea_t"},
	 { "bpt_location_t_index_set", _wrap_bpt_location_t_index_set, METH_VARARGS, "bpt_location_t_index_set(self, index)"},
	 { "bpt_location_t_index_get", _wrap_bpt_location_t_index_get, METH_O, "bpt_location_t_index_get(self) -> int"},
	 { "bpt_location_t_loctype_set", _wrap_bpt_location_t_loctype_set, METH_VARARGS, "bpt_location_t_loctype_set(self, loctype)"},
	 { "bpt_location_t_loctype_get", _wrap_bpt_location_t_loctype_get, METH_O, "bpt_location_t_loctype_get(self) -> bpt_loctype_t"},
	 { "bpt_location_t_type", _wrap_bpt_location_t_type, METH_O, "bpt_location_t_type(self) -> bpt_loctype_t"},
	 { "bpt_location_t_is_empty_path", _wrap_bpt_location_t_is_empty_path, METH_O, "bpt_location_t_is_empty_path(self) -> bool"},
	 { "bpt_location_t_path", _wrap_bpt_location_t_path, METH_O, "bpt_location_t_path(self) -> char const *"},
	 { "bpt_location_t_symbol", _wrap_bpt_location_t_symbol, METH_O, "bpt_location_t_symbol(self) -> char const *"},
	 { "bpt_location_t_lineno", _wrap_bpt_location_t_lineno, METH_O, "bpt_location_t_lineno(self) -> int"},
	 { "bpt_location_t_offset", _wrap_bpt_location_t_offset, METH_O, "bpt_location_t_offset(self) -> uval_t"},
	 { "bpt_location_t_ea", _wrap_bpt_location_t_ea, METH_O, "bpt_location_t_ea(self) -> ea_t"},
	 { "new_bpt_location_t", _wrap_new_bpt_location_t, METH_NOARGS, "new_bpt_location_t() -> bpt_location_t"},
	 { "bpt_location_t_set_abs_bpt", _wrap_bpt_location_t_set_abs_bpt, METH_VARARGS, "bpt_location_t_set_abs_bpt(self, a)"},
	 { "bpt_location_t_set_src_bpt", _wrap_bpt_location_t_set_src_bpt, METH_VARARGS, "bpt_location_t_set_src_bpt(self, fn, _lineno)"},
	 { "bpt_location_t_set_sym_bpt", _wrap_bpt_location_t_set_sym_bpt, METH_VARARGS, "bpt_location_t_set_sym_bpt(self, _symbol, _offset=0)"},
	 { "bpt_location_t_set_rel_bpt", _wrap_bpt_location_t_set_rel_bpt, METH_VARARGS, "bpt_location_t_set_rel_bpt(self, mod, _offset)"},
	 { "bpt_location_t_compare", _wrap_bpt_location_t_compare, METH_VARARGS, "bpt_location_t_compare(self, r) -> int"},
	 { "bpt_location_t___eq__", _wrap_bpt_location_t___eq__, METH_VARARGS, "bpt_location_t___eq__(self, r) -> bool"},
	 { "bpt_location_t___ne__", _wrap_bpt_location_t___ne__, METH_VARARGS, "bpt_location_t___ne__(self, r) -> bool"},
	 { "bpt_location_t___lt__", _wrap_bpt_location_t___lt__, METH_VARARGS, "bpt_location_t___lt__(self, r) -> bool"},
	 { "bpt_location_t___gt__", _wrap_bpt_location_t___gt__, METH_VARARGS, "bpt_location_t___gt__(self, r) -> bool"},
	 { "bpt_location_t___le__", _wrap_bpt_location_t___le__, METH_VARARGS, "bpt_location_t___le__(self, r) -> bool"},
	 { "bpt_location_t___ge__", _wrap_bpt_location_t___ge__, METH_VARARGS, "bpt_location_t___ge__(self, r) -> bool"},
	 { "delete_bpt_location_t", _wrap_delete_bpt_location_t, METH_O, "delete_bpt_location_t(self)"},
	 { "bpt_location_t_swigregister", bpt_location_t_swigregister, METH_O, NULL},
	 { "bpt_location_t_swiginit", bpt_location_t_swiginit, METH_VARARGS, NULL},
	 { "bpt_t_cb_set", _wrap_bpt_t_cb_set, METH_VARARGS, "bpt_t_cb_set(self, cb)"},
	 { "bpt_t_cb_get", _wrap_bpt_t_cb_get, METH_O, "bpt_t_cb_get(self) -> size_t"},
	 { "bpt_t_loc_set", _wrap_bpt_t_loc_set, METH_VARARGS, "bpt_t_loc_set(self, loc)"},
	 { "bpt_t_loc_get", _wrap_bpt_t_loc_get, METH_O, "bpt_t_loc_get(self) -> bpt_location_t"},
	 { "bpt_t_pid_set", _wrap_bpt_t_pid_set, METH_VARARGS, "bpt_t_pid_set(self, pid)"},
	 { "bpt_t_pid_get", _wrap_bpt_t_pid_get, METH_O, "bpt_t_pid_get(self) -> pid_t"},
	 { "bpt_t_tid_set", _wrap_bpt_t_tid_set, METH_VARARGS, "bpt_t_tid_set(self, tid)"},
	 { "bpt_t_tid_get", _wrap_bpt_t_tid_get, METH_O, "bpt_t_tid_get(self) -> thid_t"},
	 { "bpt_t_ea_set", _wrap_bpt_t_ea_set, METH_VARARGS, "bpt_t_ea_set(self, ea)"},
	 { "bpt_t_ea_get", _wrap_bpt_t_ea_get, METH_O, "bpt_t_ea_get(self) -> ea_t"},
	 { "bpt_t_type_set", _wrap_bpt_t_type_set, METH_VARARGS, "bpt_t_type_set(self, type)"},
	 { "bpt_t_type_get", _wrap_bpt_t_type_get, METH_O, "bpt_t_type_get(self) -> bpttype_t"},
	 { "bpt_t_pass_count_set", _wrap_bpt_t_pass_count_set, METH_VARARGS, "bpt_t_pass_count_set(self, pass_count)"},
	 { "bpt_t_pass_count_get", _wrap_bpt_t_pass_count_get, METH_O, "bpt_t_pass_count_get(self) -> int"},
	 { "bpt_t_flags_set", _wrap_bpt_t_flags_set, METH_VARARGS, "bpt_t_flags_set(self, flags)"},
	 { "bpt_t_flags_get", _wrap_bpt_t_flags_get, METH_O, "bpt_t_flags_get(self) -> uint32"},
	 { "bpt_t_props_set", _wrap_bpt_t_props_set, METH_VARARGS, "bpt_t_props_set(self, props)"},
	 { "bpt_t_props_get", _wrap_bpt_t_props_get, METH_O, "bpt_t_props_get(self) -> uint32"},
	 { "bpt_t_size_set", _wrap_bpt_t_size_set, METH_VARARGS, "bpt_t_size_set(self, size)"},
	 { "bpt_t_size_get", _wrap_bpt_t_size_get, METH_O, "bpt_t_size_get(self) -> int"},
	 { "bpt_t_cndidx_set", _wrap_bpt_t_cndidx_set, METH_VARARGS, "bpt_t_cndidx_set(self, cndidx)"},
	 { "bpt_t_cndidx_get", _wrap_bpt_t_cndidx_get, METH_O, "bpt_t_cndidx_get(self) -> int"},
	 { "new_bpt_t", _wrap_new_bpt_t, METH_NOARGS, "new_bpt_t() -> bpt_t"},
	 { "bpt_t_is_hwbpt", _wrap_bpt_t_is_hwbpt, METH_O, "bpt_t_is_hwbpt(self) -> bool"},
	 { "bpt_t_enabled", _wrap_bpt_t_enabled, METH_O, "bpt_t_enabled(self) -> bool"},
	 { "bpt_t_is_low_level", _wrap_bpt_t_is_low_level, METH_O, "bpt_t_is_low_level(self) -> bool"},
	 { "bpt_t_badbpt", _wrap_bpt_t_badbpt, METH_O, "bpt_t_badbpt(self) -> bool"},
	 { "bpt_t_listbpt", _wrap_bpt_t_listbpt, METH_O, "bpt_t_listbpt(self) -> bool"},
	 { "bpt_t_is_compiled", _wrap_bpt_t_is_compiled, METH_O, "bpt_t_is_compiled(self) -> bool"},
	 { "bpt_t_is_active", _wrap_bpt_t_is_active, METH_O, "bpt_t_is_active(self) -> bool"},
	 { "bpt_t_is_partially_active", _wrap_bpt_t_is_partially_active, METH_O, "bpt_t_is_partially_active(self) -> bool"},
	 { "bpt_t_is_inactive", _wrap_bpt_t_is_inactive, METH_O, "bpt_t_is_inactive(self) -> bool"},
	 { "bpt_t_is_page_bpt", _wrap_bpt_t_is_page_bpt, METH_O, "bpt_t_is_page_bpt(self) -> bool"},
	 { "bpt_t_get_size", _wrap_bpt_t_get_size, METH_O, "bpt_t_get_size(self) -> int"},
	 { "bpt_t_set_abs_bpt", _wrap_bpt_t_set_abs_bpt, METH_VARARGS, "bpt_t_set_abs_bpt(self, a)"},
	 { "bpt_t_set_src_bpt", _wrap_bpt_t_set_src_bpt, METH_VARARGS, "bpt_t_set_src_bpt(self, fn, lineno)"},
	 { "bpt_t_set_sym_bpt", _wrap_bpt_t_set_sym_bpt, METH_VARARGS, "bpt_t_set_sym_bpt(self, sym, o)"},
	 { "bpt_t_set_rel_bpt", _wrap_bpt_t_set_rel_bpt, METH_VARARGS, "bpt_t_set_rel_bpt(self, mod, o)"},
	 { "bpt_t_is_absbpt", _wrap_bpt_t_is_absbpt, METH_O, "bpt_t_is_absbpt(self) -> bool"},
	 { "bpt_t_is_relbpt", _wrap_bpt_t_is_relbpt, METH_O, "bpt_t_is_relbpt(self) -> bool"},
	 { "bpt_t_is_symbpt", _wrap_bpt_t_is_symbpt, METH_O, "bpt_t_is_symbpt(self) -> bool"},
	 { "bpt_t_is_srcbpt", _wrap_bpt_t_is_srcbpt, METH_O, "bpt_t_is_srcbpt(self) -> bool"},
	 { "bpt_t_is_tracemodebpt", _wrap_bpt_t_is_tracemodebpt, METH_O, "bpt_t_is_tracemodebpt(self) -> bool"},
	 { "bpt_t_is_traceonbpt", _wrap_bpt_t_is_traceonbpt, METH_O, "bpt_t_is_traceonbpt(self) -> bool"},
	 { "bpt_t_is_traceoffbpt", _wrap_bpt_t_is_traceoffbpt, METH_O, "bpt_t_is_traceoffbpt(self) -> bool"},
	 { "bpt_t_set_trace_action", _wrap_bpt_t_set_trace_action, METH_VARARGS, "bpt_t_set_trace_action(self, enable, trace_types) -> bool"},
	 { "bpt_t_get_cnd_elang_idx", _wrap_bpt_t_get_cnd_elang_idx, METH_O, "bpt_t_get_cnd_elang_idx(self) -> size_t"},
	 { "bpt_t_condition_set", _wrap_bpt_t_condition_set, METH_VARARGS, "bpt_t_condition_set(self, condition)"},
	 { "bpt_t_condition_get", _wrap_bpt_t_condition_get, METH_O, "bpt_t_condition_get(self) -> PyObject *"},
	 { "bpt_t_elang_set", _wrap_bpt_t_elang_set, METH_VARARGS, "bpt_t_elang_set(self, elang)"},
	 { "bpt_t_elang_get", _wrap_bpt_t_elang_get, METH_O, "bpt_t_elang_get(self) -> PyObject *"},
	 { "delete_bpt_t", _wrap_delete_bpt_t, METH_O, "delete_bpt_t(self)"},
	 { "bpt_t_swigregister", bpt_t_swigregister, METH_O, NULL},
	 { "bpt_t_swiginit", bpt_t_swiginit, METH_VARARGS, NULL},
	 { "get_bpt_qty", _wrap_get_bpt_qty, METH_NOARGS, "get_bpt_qty() -> int"},
	 { "getn_bpt", _wrap_getn_bpt, METH_VARARGS, "getn_bpt(n, bpt) -> bool"},
	 { "get_bpt", _wrap_get_bpt, METH_VARARGS, "get_bpt(ea, bpt) -> bool"},
	 { "exist_bpt", _wrap_exist_bpt, METH_O, "exist_bpt(ea) -> bool"},
	 { "add_bpt", _wrap_add_bpt, METH_VARARGS, "\n"
		"add_bpt(ea, size=0, type=BPT_DEFAULT) -> bool\n"
		"add_bpt(bpt) -> bool\n"
		""},
	 { "request_add_bpt", _wrap_request_add_bpt, METH_VARARGS, "\n"
		"request_add_bpt(ea, size=0, type=BPT_DEFAULT) -> bool\n"
		"request_add_bpt(bpt) -> bool\n"
		""},
	 { "del_bpt", _wrap_del_bpt, METH_VARARGS, "\n"
		"del_bpt(ea) -> bool\n"
		"del_bpt(bptloc) -> bool\n"
		""},
	 { "request_del_bpt", _wrap_request_del_bpt, METH_VARARGS, "\n"
		"request_del_bpt(ea) -> bool\n"
		"request_del_bpt(bptloc) -> bool\n"
		""},
	 { "update_bpt", _wrap_update_bpt, METH_O, "update_bpt(bpt) -> bool"},
	 { "find_bpt", _wrap_find_bpt, METH_VARARGS, "find_bpt(bptloc, bpt) -> bool"},
	 { "enable_bpt", _wrap_enable_bpt, METH_VARARGS, "\n"
		"enable_bpt(ea, enable=True) -> bool\n"
		"enable_bpt(bptloc, enable=True) -> bool\n"
		""},
	 { "disable_bpt", _wrap_disable_bpt, METH_VARARGS, "\n"
		"disable_bpt(ea) -> bool\n"
		"disable_bpt(bptloc) -> bool\n"
		""},
	 { "request_enable_bpt", _wrap_request_enable_bpt, METH_VARARGS, "\n"
		"request_enable_bpt(ea, enable=True) -> bool\n"
		"request_enable_bpt(bptloc, enable=True) -> bool\n"
		""},
	 { "request_disable_bpt", _wrap_request_disable_bpt, METH_VARARGS, "\n"
		"request_disable_bpt(ea) -> bool\n"
		"request_disable_bpt(bptloc) -> bool\n"
		""},
	 { "check_bpt", _wrap_check_bpt, METH_O, "check_bpt(ea) -> int"},
	 { "set_trace_size", _wrap_set_trace_size, METH_O, "set_trace_size(size) -> bool"},
	 { "clear_trace", _wrap_clear_trace, METH_NOARGS, "clear_trace()"},
	 { "request_clear_trace", _wrap_request_clear_trace, METH_NOARGS, "request_clear_trace()"},
	 { "is_step_trace_enabled", _wrap_is_step_trace_enabled, METH_NOARGS, "is_step_trace_enabled() -> bool"},
	 { "enable_step_trace", _wrap_enable_step_trace, METH_VARARGS, "enable_step_trace(enable=True) -> bool"},
	 { "disable_step_trace", _wrap_disable_step_trace, METH_NOARGS, "disable_step_trace() -> bool"},
	 { "request_enable_step_trace", _wrap_request_enable_step_trace, METH_VARARGS, "request_enable_step_trace(enable=True) -> bool"},
	 { "request_disable_step_trace", _wrap_request_disable_step_trace, METH_NOARGS, "request_disable_step_trace() -> bool"},
	 { "get_step_trace_options", _wrap_get_step_trace_options, METH_NOARGS, "get_step_trace_options() -> int"},
	 { "set_step_trace_options", _wrap_set_step_trace_options, METH_O, "set_step_trace_options(options)"},
	 { "request_set_step_trace_options", _wrap_request_set_step_trace_options, METH_O, "request_set_step_trace_options(options)"},
	 { "is_insn_trace_enabled", _wrap_is_insn_trace_enabled, METH_NOARGS, "is_insn_trace_enabled() -> bool"},
	 { "enable_insn_trace", _wrap_enable_insn_trace, METH_VARARGS, "enable_insn_trace(enable=True) -> bool"},
	 { "disable_insn_trace", _wrap_disable_insn_trace, METH_NOARGS, "disable_insn_trace() -> bool"},
	 { "request_enable_insn_trace", _wrap_request_enable_insn_trace, METH_VARARGS, "request_enable_insn_trace(enable=True) -> bool"},
	 { "request_disable_insn_trace", _wrap_request_disable_insn_trace, METH_NOARGS, "request_disable_insn_trace() -> bool"},
	 { "get_insn_trace_options", _wrap_get_insn_trace_options, METH_NOARGS, "get_insn_trace_options() -> int"},
	 { "set_insn_trace_options", _wrap_set_insn_trace_options, METH_O, "set_insn_trace_options(options)"},
	 { "request_set_insn_trace_options", _wrap_request_set_insn_trace_options, METH_O, "request_set_insn_trace_options(options)"},
	 { "is_func_trace_enabled", _wrap_is_func_trace_enabled, METH_NOARGS, "is_func_trace_enabled() -> bool"},
	 { "enable_func_trace", _wrap_enable_func_trace, METH_VARARGS, "enable_func_trace(enable=True) -> bool"},
	 { "disable_func_trace", _wrap_disable_func_trace, METH_NOARGS, "disable_func_trace() -> bool"},
	 { "request_enable_func_trace", _wrap_request_enable_func_trace, METH_VARARGS, "request_enable_func_trace(enable=True) -> bool"},
	 { "request_disable_func_trace", _wrap_request_disable_func_trace, METH_NOARGS, "request_disable_func_trace() -> bool"},
	 { "get_func_trace_options", _wrap_get_func_trace_options, METH_NOARGS, "get_func_trace_options() -> int"},
	 { "set_func_trace_options", _wrap_set_func_trace_options, METH_O, "set_func_trace_options(options)"},
	 { "request_set_func_trace_options", _wrap_request_set_func_trace_options, METH_O, "request_set_func_trace_options(options)"},
	 { "enable_bblk_trace", _wrap_enable_bblk_trace, METH_VARARGS, "enable_bblk_trace(enable=True) -> bool"},
	 { "disable_bblk_trace", _wrap_disable_bblk_trace, METH_NOARGS, "disable_bblk_trace() -> bool"},
	 { "request_enable_bblk_trace", _wrap_request_enable_bblk_trace, METH_VARARGS, "request_enable_bblk_trace(enable=True) -> bool"},
	 { "request_disable_bblk_trace", _wrap_request_disable_bblk_trace, METH_NOARGS, "request_disable_bblk_trace() -> bool"},
	 { "is_bblk_trace_enabled", _wrap_is_bblk_trace_enabled, METH_NOARGS, "is_bblk_trace_enabled() -> bool"},
	 { "get_bblk_trace_options", _wrap_get_bblk_trace_options, METH_NOARGS, "get_bblk_trace_options() -> int"},
	 { "set_bblk_trace_options", _wrap_set_bblk_trace_options, METH_O, "set_bblk_trace_options(options)"},
	 { "request_set_bblk_trace_options", _wrap_request_set_bblk_trace_options, METH_O, "request_set_bblk_trace_options(options)"},
	 { "tev_info_t_type_set", _wrap_tev_info_t_type_set, METH_VARARGS, "tev_info_t_type_set(self, type)"},
	 { "tev_info_t_type_get", _wrap_tev_info_t_type_get, METH_O, "tev_info_t_type_get(self) -> tev_type_t"},
	 { "tev_info_t_tid_set", _wrap_tev_info_t_tid_set, METH_VARARGS, "tev_info_t_tid_set(self, tid)"},
	 { "tev_info_t_tid_get", _wrap_tev_info_t_tid_get, METH_O, "tev_info_t_tid_get(self) -> thid_t"},
	 { "tev_info_t_ea_set", _wrap_tev_info_t_ea_set, METH_VARARGS, "tev_info_t_ea_set(self, ea)"},
	 { "tev_info_t_ea_get", _wrap_tev_info_t_ea_get, METH_O, "tev_info_t_ea_get(self) -> ea_t"},
	 { "new_tev_info_t", _wrap_new_tev_info_t, METH_NOARGS, "new_tev_info_t() -> tev_info_t"},
	 { "delete_tev_info_t", _wrap_delete_tev_info_t, METH_O, "delete_tev_info_t(self)"},
	 { "tev_info_t_swigregister", tev_info_t_swigregister, METH_O, NULL},
	 { "tev_info_t_swiginit", tev_info_t_swiginit, METH_VARARGS, NULL},
	 { "memreg_info_t_ea_set", _wrap_memreg_info_t_ea_set, METH_VARARGS, "memreg_info_t_ea_set(self, ea)"},
	 { "memreg_info_t_ea_get", _wrap_memreg_info_t_ea_get, METH_O, "memreg_info_t_ea_get(self) -> ea_t"},
	 { "memreg_info_t_get_bytes", _wrap_memreg_info_t_get_bytes, METH_O, "memreg_info_t_get_bytes(self) -> PyObject *"},
	 { "new_memreg_info_t", _wrap_new_memreg_info_t, METH_NOARGS, "new_memreg_info_t() -> memreg_info_t"},
	 { "delete_memreg_info_t", _wrap_delete_memreg_info_t, METH_O, "delete_memreg_info_t(self)"},
	 { "memreg_info_t_swigregister", memreg_info_t_swigregister, METH_O, NULL},
	 { "memreg_info_t_swiginit", memreg_info_t_swiginit, METH_VARARGS, NULL},
	 { "get_tev_qty", _wrap_get_tev_qty, METH_NOARGS, "get_tev_qty() -> int"},
	 { "get_tev_info", _wrap_get_tev_info, METH_VARARGS, "get_tev_info(n, tev_info) -> bool"},
	 { "get_insn_tev_reg_val", _wrap_get_insn_tev_reg_val, METH_VARARGS, "get_insn_tev_reg_val(n, regname, regval) -> bool"},
	 { "get_insn_tev_reg_mem", _wrap_get_insn_tev_reg_mem, METH_VARARGS, "get_insn_tev_reg_mem(n, memmap) -> bool"},
	 { "get_insn_tev_reg_result", _wrap_get_insn_tev_reg_result, METH_VARARGS, "get_insn_tev_reg_result(n, regname, regval) -> bool"},
	 { "get_call_tev_callee", _wrap_get_call_tev_callee, METH_O, "get_call_tev_callee(n) -> ea_t"},
	 { "get_ret_tev_return", _wrap_get_ret_tev_return, METH_O, "get_ret_tev_return(n) -> ea_t"},
	 { "get_bpt_tev_ea", _wrap_get_bpt_tev_ea, METH_O, "get_bpt_tev_ea(n) -> ea_t"},
	 { "get_tev_memory_info", _wrap_get_tev_memory_info, METH_VARARGS, "get_tev_memory_info(n, mi) -> bool"},
	 { "get_tev_event", _wrap_get_tev_event, METH_VARARGS, "get_tev_event(n, d) -> bool"},
	 { "get_trace_base_address", _wrap_get_trace_base_address, METH_NOARGS, "get_trace_base_address() -> ea_t"},
	 { "set_trace_base_address", _wrap_set_trace_base_address, METH_O, "set_trace_base_address(ea)"},
	 { "dbg_add_thread", _wrap_dbg_add_thread, METH_O, "dbg_add_thread(tid)"},
	 { "dbg_del_thread", _wrap_dbg_del_thread, METH_O, "dbg_del_thread(tid)"},
	 { "dbg_add_tev", _wrap_dbg_add_tev, METH_VARARGS, "dbg_add_tev(type, tid, address)"},
	 { "tev_reg_value_t_value_set", _wrap_tev_reg_value_t_value_set, METH_VARARGS, "tev_reg_value_t_value_set(self, value)"},
	 { "tev_reg_value_t_value_get", _wrap_tev_reg_value_t_value_get, METH_O, "tev_reg_value_t_value_get(self) -> regval_t"},
	 { "tev_reg_value_t_reg_idx_set", _wrap_tev_reg_value_t_reg_idx_set, METH_VARARGS, "tev_reg_value_t_reg_idx_set(self, reg_idx)"},
	 { "tev_reg_value_t_reg_idx_get", _wrap_tev_reg_value_t_reg_idx_get, METH_O, "tev_reg_value_t_reg_idx_get(self) -> int"},
	 { "new_tev_reg_value_t", _wrap_new_tev_reg_value_t, METH_VARARGS, "new_tev_reg_value_t(_reg_idx=-1, _value=uint64(-1)) -> tev_reg_value_t"},
	 { "delete_tev_reg_value_t", _wrap_delete_tev_reg_value_t, METH_O, "delete_tev_reg_value_t(self)"},
	 { "tev_reg_value_t_swigregister", tev_reg_value_t_swigregister, METH_O, NULL},
	 { "tev_reg_value_t_swiginit", tev_reg_value_t_swiginit, METH_VARARGS, NULL},
	 { "tev_info_reg_t_info_set", _wrap_tev_info_reg_t_info_set, METH_VARARGS, "tev_info_reg_t_info_set(self, info)"},
	 { "tev_info_reg_t_info_get", _wrap_tev_info_reg_t_info_get, METH_O, "tev_info_reg_t_info_get(self) -> tev_info_t"},
	 { "tev_info_reg_t_registers_set", _wrap_tev_info_reg_t_registers_set, METH_VARARGS, "tev_info_reg_t_registers_set(self, registers)"},
	 { "tev_info_reg_t_registers_get", _wrap_tev_info_reg_t_registers_get, METH_O, "tev_info_reg_t_registers_get(self) -> tev_reg_values_t"},
	 { "new_tev_info_reg_t", _wrap_new_tev_info_reg_t, METH_NOARGS, "new_tev_info_reg_t() -> tev_info_reg_t"},
	 { "delete_tev_info_reg_t", _wrap_delete_tev_info_reg_t, METH_O, "delete_tev_info_reg_t(self)"},
	 { "tev_info_reg_t_swigregister", tev_info_reg_t_swigregister, METH_O, NULL},
	 { "tev_info_reg_t_swiginit", tev_info_reg_t_swiginit, METH_VARARGS, NULL},
	 { "dbg_add_many_tevs", _wrap_dbg_add_many_tevs, METH_O, "dbg_add_many_tevs(new_tevs) -> bool"},
	 { "dbg_add_insn_tev", _wrap_dbg_add_insn_tev, METH_VARARGS, "dbg_add_insn_tev(tid, ea, save=SAVE_DIFF) -> bool"},
	 { "dbg_add_bpt_tev", _wrap_dbg_add_bpt_tev, METH_VARARGS, "dbg_add_bpt_tev(tid, ea, bp) -> bool"},
	 { "dbg_add_call_tev", _wrap_dbg_add_call_tev, METH_VARARGS, "dbg_add_call_tev(tid, caller, callee)"},
	 { "dbg_add_ret_tev", _wrap_dbg_add_ret_tev, METH_VARARGS, "dbg_add_ret_tev(tid, ret_insn, return_to)"},
	 { "dbg_add_debug_event", _wrap_dbg_add_debug_event, METH_O, "dbg_add_debug_event(event)"},
	 { "load_trace_file", _wrap_load_trace_file, METH_O, "load_trace_file(filename) -> bool"},
	 { "save_trace_file", _wrap_save_trace_file, METH_VARARGS, "save_trace_file(filename, description) -> bool"},
	 { "is_valid_trace_file", _wrap_is_valid_trace_file, METH_O, "is_valid_trace_file(filename) -> bool"},
	 { "set_trace_file_desc", _wrap_set_trace_file_desc, METH_VARARGS, "set_trace_file_desc(filename, description) -> bool"},
	 { "get_trace_file_desc", _wrap_get_trace_file_desc, METH_O, "get_trace_file_desc(filename) -> bool"},
	 { "choose_trace_file", _wrap_choose_trace_file, METH_NOARGS, "choose_trace_file() -> bool"},
	 { "graph_trace", _wrap_graph_trace, METH_NOARGS, "graph_trace() -> bool"},
	 { "set_highlight_trace_options", _wrap_set_highlight_trace_options, METH_VARARGS, "set_highlight_trace_options(hilight, color, diff)"},
	 { "set_trace_platform", _wrap_set_trace_platform, METH_O, "set_trace_platform(platform)"},
	 { "get_trace_platform", _wrap_get_trace_platform, METH_NOARGS, "get_trace_platform() -> char const *"},
	 { "wait_for_next_event", _wrap_wait_for_next_event, METH_VARARGS, "wait_for_next_event(wfne, timeout) -> dbg_event_code_t"},
	 { "get_debug_event", _wrap_get_debug_event, METH_NOARGS, "get_debug_event() -> debug_event_t"},
	 { "set_debugger_options", _wrap_set_debugger_options, METH_O, "set_debugger_options(options) -> uint"},
	 { "set_remote_debugger", _wrap_set_remote_debugger, METH_VARARGS, "set_remote_debugger(host, _pass, port=-1)"},
	 { "get_process_options", _wrap_get_process_options, METH_VARARGS, "get_process_options(path, args, sdir, host, _pass, port)"},
	 { "set_process_options", _wrap_set_process_options, METH_VARARGS, "set_process_options(path, args, sdir, host, _pass, port)"},
	 { "retrieve_exceptions", _wrap_retrieve_exceptions, METH_NOARGS, "retrieve_exceptions() -> excvec_t"},
	 { "store_exceptions", _wrap_store_exceptions, METH_NOARGS, "store_exceptions() -> bool"},
	 { "define_exception", _wrap_define_exception, METH_VARARGS, "define_exception(code, name, desc, flags) -> char const *"},
	 { "new_eval_ctx_t", _wrap_new_eval_ctx_t, METH_O, "new_eval_ctx_t(_ea) -> eval_ctx_t"},
	 { "eval_ctx_t_ea_set", _wrap_eval_ctx_t_ea_set, METH_VARARGS, "eval_ctx_t_ea_set(self, ea)"},
	 { "eval_ctx_t_ea_get", _wrap_eval_ctx_t_ea_get, METH_O, "eval_ctx_t_ea_get(self) -> ea_t"},
	 { "delete_eval_ctx_t", _wrap_delete_eval_ctx_t, METH_O, "delete_eval_ctx_t(self)"},
	 { "eval_ctx_t_swigregister", eval_ctx_t_swigregister, METH_O, NULL},
	 { "eval_ctx_t_swiginit", eval_ctx_t_swiginit, METH_VARARGS, NULL},
	 { "create_source_viewer", _wrap_create_source_viewer, METH_VARARGS, "create_source_viewer(out_ccv, parent, custview, sf, lines, lnnum, colnum, flags) -> source_view_t *"},
	 { "get_dbg_byte", _wrap_get_dbg_byte, METH_VARARGS, "get_dbg_byte(x, ea) -> bool"},
	 { "put_dbg_byte", _wrap_put_dbg_byte, METH_VARARGS, "put_dbg_byte(ea, x) -> bool"},
	 { "invalidate_dbgmem_config", _wrap_invalidate_dbgmem_config, METH_NOARGS, "invalidate_dbgmem_config()"},
	 { "invalidate_dbgmem_contents", _wrap_invalidate_dbgmem_contents, METH_VARARGS, "invalidate_dbgmem_contents(ea, size)"},
	 { "is_debugger_on", _wrap_is_debugger_on, METH_NOARGS, "is_debugger_on() -> bool"},
	 { "is_debugger_memory", _wrap_is_debugger_memory, METH_O, "is_debugger_memory(ea) -> bool"},
	 { "get_tev_ea", _wrap_get_tev_ea, METH_O, "get_tev_ea(n) -> ea_t"},
	 { "get_tev_type", _wrap_get_tev_type, METH_O, "get_tev_type(n) -> int"},
	 { "get_tev_tid", _wrap_get_tev_tid, METH_O, "get_tev_tid(n) -> int"},
	 { "get_module_info", _wrap_get_module_info, METH_VARARGS, "get_module_info(ea, modinfo) -> bool"},
	 { "bring_debugger_to_front", _wrap_bring_debugger_to_front, METH_NOARGS, "bring_debugger_to_front()"},
	 { "collect_stack_trace", _wrap_collect_stack_trace, METH_VARARGS, "collect_stack_trace(tid, trace) -> bool"},
	 { "get_debugger_event_cond", _wrap_get_debugger_event_cond, METH_NOARGS, "get_debugger_event_cond() -> char const *"},
	 { "load_debugger", _wrap_load_debugger, METH_VARARGS, "load_debugger(dbgname, use_remote) -> bool"},
	 { "set_manual_regions", _wrap_set_manual_regions, METH_O, "set_manual_regions(ranges)"},
	 { "edit_manual_regions", _wrap_edit_manual_regions, METH_NOARGS, "edit_manual_regions()"},
	 { "enable_manual_regions", _wrap_enable_manual_regions, METH_O, "enable_manual_regions(enable)"},
	 { "hide_all_bpts", _wrap_hide_all_bpts, METH_NOARGS, "hide_all_bpts() -> int"},
	 { "handle_debug_event", _wrap_handle_debug_event, METH_VARARGS, "handle_debug_event(ev, rqflags) -> int"},
	 { "add_virt_module", _wrap_add_virt_module, METH_O, "add_virt_module(mod) -> bool"},
	 { "del_virt_module", _wrap_del_virt_module, METH_O, "del_virt_module(base) -> bool"},
	 { "internal_ioctl", _wrap_internal_ioctl, METH_VARARGS, "internal_ioctl(fn, buf, poutbuf, poutsize) -> int"},
	 { "read_dbg_memory", _wrap_read_dbg_memory, METH_VARARGS, "read_dbg_memory(ea, buffer, size) -> ssize_t"},
	 { "get_reg_vals", _wrap_get_reg_vals, METH_VARARGS, "get_reg_vals(tid, clsmask, values) -> int"},
	 { "set_reg_val", _wrap_set_reg_val, METH_VARARGS, "\n"
		"set_reg_val(regname, regval) -> bool\n"
		"set_reg_val(regname, ival) -> bool\n"
		"set_reg_val(tid, regidx, value) -> int\n"
		""},
	 { "get_dbg_memory_info", _wrap_get_dbg_memory_info, METH_O, "get_dbg_memory_info(ranges) -> int"},
	 { "set_bpt_group", _wrap_set_bpt_group, METH_VARARGS, "set_bpt_group(bpt, grp_name)"},
	 { "set_bptloc_group", _wrap_set_bptloc_group, METH_VARARGS, "set_bptloc_group(bptloc, grp_name) -> bool"},
	 { "get_bpt_group", _wrap_get_bpt_group, METH_O, "get_bpt_group(bptloc) -> bool"},
	 { "rename_bptgrp", _wrap_rename_bptgrp, METH_VARARGS, "rename_bptgrp(old_name, new_name) -> bool"},
	 { "del_bptgrp", _wrap_del_bptgrp, METH_O, "del_bptgrp(name) -> bool"},
	 { "get_grp_bpts", _wrap_get_grp_bpts, METH_VARARGS, "get_grp_bpts(bpts, grp_name) -> ssize_t"},
	 { "get_srcinfo_provider", _wrap_get_srcinfo_provider, METH_O, "get_srcinfo_provider(name) -> srcinfo_provider_t *"},
	 { "get_global_var", _wrap_get_global_var, METH_VARARGS, "get_global_var(prov, ea, name, out) -> bool"},
	 { "get_local_var", _wrap_get_local_var, METH_VARARGS, "get_local_var(prov, ea, name, out) -> bool"},
	 { "get_local_vars", _wrap_get_local_vars, METH_VARARGS, "get_local_vars(prov, ea, out) -> bool"},
	 { "add_path_mapping", _wrap_add_path_mapping, METH_VARARGS, "add_path_mapping(src, dst)"},
	 { "get_current_source_file", _wrap_get_current_source_file, METH_O, "get_current_source_file(path) -> bool"},
	 { "get_current_source_line", _wrap_get_current_source_line, METH_NOARGS, "get_current_source_line() -> int"},
	 { "srcdbg_step_into", _wrap_srcdbg_step_into, METH_NOARGS, "srcdbg_step_into() -> bool"},
	 { "srcdbg_request_step_into", _wrap_srcdbg_request_step_into, METH_NOARGS, "srcdbg_request_step_into() -> bool"},
	 { "srcdbg_step_over", _wrap_srcdbg_step_over, METH_NOARGS, "srcdbg_step_over() -> bool"},
	 { "srcdbg_request_step_over", _wrap_srcdbg_request_step_over, METH_NOARGS, "srcdbg_request_step_over() -> bool"},
	 { "srcdbg_step_until_ret", _wrap_srcdbg_step_until_ret, METH_NOARGS, "srcdbg_step_until_ret() -> bool"},
	 { "srcdbg_request_step_until_ret", _wrap_srcdbg_request_step_until_ret, METH_NOARGS, "srcdbg_request_step_until_ret() -> bool"},
	 { "dbg_bin_search", _wrap_dbg_bin_search, METH_VARARGS, "dbg_bin_search(start_ea, end_ea, data, srch_flags) -> drc_t"},
	 { "dbg_can_query", _wrap_dbg_can_query, METH_NOARGS, "dbg_can_query() -> bool"},
	 { "get_manual_regions", _wrap_get_manual_regions, METH_VARARGS, "\n"
		"get_manual_regions(ranges)\n"
		"get_manual_regions() -> PyObject *\n"
		""},
	 { "dbg_is_loaded", _wrap_dbg_is_loaded, METH_NOARGS, "dbg_is_loaded() -> bool"},
	 { "refresh_debugger_memory", _wrap_refresh_debugger_memory, METH_NOARGS, "refresh_debugger_memory() -> PyObject *"},
	 { "delete_DBG_Hooks", _wrap_delete_DBG_Hooks, METH_O, "delete_DBG_Hooks(self)"},
	 { "DBG_Hooks_hook", _wrap_DBG_Hooks_hook, METH_O, "DBG_Hooks_hook(self) -> bool"},
	 { "DBG_Hooks_unhook", _wrap_DBG_Hooks_unhook, METH_O, "DBG_Hooks_unhook(self) -> bool"},
	 { "DBG_Hooks_dbg_process_start", _wrap_DBG_Hooks_dbg_process_start, METH_VARARGS, "DBG_Hooks_dbg_process_start(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)"},
	 { "DBG_Hooks_dbg_process_exit", _wrap_DBG_Hooks_dbg_process_exit, METH_VARARGS, "DBG_Hooks_dbg_process_exit(self, pid, tid, ea, exit_code)"},
	 { "DBG_Hooks_dbg_process_attach", _wrap_DBG_Hooks_dbg_process_attach, METH_VARARGS, "DBG_Hooks_dbg_process_attach(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)"},
	 { "DBG_Hooks_dbg_process_detach", _wrap_DBG_Hooks_dbg_process_detach, METH_VARARGS, "DBG_Hooks_dbg_process_detach(self, pid, tid, ea)"},
	 { "DBG_Hooks_dbg_thread_start", _wrap_DBG_Hooks_dbg_thread_start, METH_VARARGS, "DBG_Hooks_dbg_thread_start(self, pid, tid, ea)"},
	 { "DBG_Hooks_dbg_thread_exit", _wrap_DBG_Hooks_dbg_thread_exit, METH_VARARGS, "DBG_Hooks_dbg_thread_exit(self, pid, tid, ea, exit_code)"},
	 { "DBG_Hooks_dbg_library_load", _wrap_DBG_Hooks_dbg_library_load, METH_VARARGS, "DBG_Hooks_dbg_library_load(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)"},
	 { "DBG_Hooks_dbg_library_unload", _wrap_DBG_Hooks_dbg_library_unload, METH_VARARGS, "DBG_Hooks_dbg_library_unload(self, pid, tid, ea, info)"},
	 { "DBG_Hooks_dbg_information", _wrap_DBG_Hooks_dbg_information, METH_VARARGS, "DBG_Hooks_dbg_information(self, pid, tid, ea, info)"},
	 { "DBG_Hooks_dbg_exception", _wrap_DBG_Hooks_dbg_exception, METH_VARARGS, "DBG_Hooks_dbg_exception(self, pid, tid, ea, exc_code, exc_can_cont, exc_ea, exc_info) -> int"},
	 { "DBG_Hooks_dbg_suspend_process", _wrap_DBG_Hooks_dbg_suspend_process, METH_O, "DBG_Hooks_dbg_suspend_process(self)"},
	 { "DBG_Hooks_dbg_bpt", _wrap_DBG_Hooks_dbg_bpt, METH_VARARGS, "DBG_Hooks_dbg_bpt(self, tid, bptea) -> int"},
	 { "DBG_Hooks_dbg_trace", _wrap_DBG_Hooks_dbg_trace, METH_VARARGS, "DBG_Hooks_dbg_trace(self, tid, ip) -> int"},
	 { "DBG_Hooks_dbg_request_error", _wrap_DBG_Hooks_dbg_request_error, METH_VARARGS, "DBG_Hooks_dbg_request_error(self, failed_command, failed_dbg_notification)"},
	 { "DBG_Hooks_dbg_step_into", _wrap_DBG_Hooks_dbg_step_into, METH_O, "DBG_Hooks_dbg_step_into(self)"},
	 { "DBG_Hooks_dbg_step_over", _wrap_DBG_Hooks_dbg_step_over, METH_O, "DBG_Hooks_dbg_step_over(self)"},
	 { "DBG_Hooks_dbg_run_to", _wrap_DBG_Hooks_dbg_run_to, METH_VARARGS, "DBG_Hooks_dbg_run_to(self, pid, tid, ea)"},
	 { "DBG_Hooks_dbg_step_until_ret", _wrap_DBG_Hooks_dbg_step_until_ret, METH_O, "DBG_Hooks_dbg_step_until_ret(self)"},
	 { "DBG_Hooks_dbg_bpt_changed", _wrap_DBG_Hooks_dbg_bpt_changed, METH_VARARGS, "DBG_Hooks_dbg_bpt_changed(self, bptev_code, bpt)"},
	 { "new_DBG_Hooks", _wrap_new_DBG_Hooks, METH_O, "new_DBG_Hooks(_self) -> DBG_Hooks"},
	 { "disown_DBG_Hooks", _wrap_disown_DBG_Hooks, METH_O, NULL},
	 { "DBG_Hooks_swigregister", DBG_Hooks_swigregister, METH_O, NULL},
	 { "DBG_Hooks_swiginit", DBG_Hooks_swiginit, METH_VARARGS, NULL},
	 { "list_bptgrps", _wrap_list_bptgrps, METH_VARARGS, "\n"
		"list_bptgrps(bptgrps) -> size_t\n"
		"list_bptgrps() -> PyObject *\n"
		""},
	 { "move_bpt_to_grp", _wrap_move_bpt_to_grp, METH_VARARGS, "move_bpt_to_grp(bpt, grp_name)"},
	 { "internal_get_sreg_base", _wrap_internal_get_sreg_base, METH_VARARGS, "internal_get_sreg_base(tid, sreg_value) -> ea_t"},
	 { "write_dbg_memory", _wrap_write_dbg_memory, METH_VARARGS, "write_dbg_memory(ea, py_buf, size=size_t(-1)) -> ssize_t"},
	 { NULL, NULL, 0, NULL }
};

#ifndef Py_LIMITED_API
static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_source_item_tTo_p_qrefcnt_obj_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qrefcnt_obj_t *)  ((source_item_t *) x));
}
static void *_p_source_file_tTo_p_qrefcnt_obj_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qrefcnt_obj_t *)  ((source_file_t *) x));
}
static void *_p_relobj_tTo_p_qvectorT_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< unsigned char > *) (bytevec_t *) ((relobj_t *) x));
}
static void *_p_bytevec_tTo_p_qvectorT_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< unsigned char > *)  ((bytevec_t *) x));
}
static void *_p_reloc_info_tTo_p_qvectorT_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qvector< unsigned char > *) (bytevec_t *) ((reloc_info_t *) x));
}
static swig_type_info _swigt__p_DBG_Hooks = {"_p_DBG_Hooks", "DBG_Hooks *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TWidget = {"_p_TWidget", "TWidget *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__qstringT_char_t = {"_p__qstringT_char_t", "_qstring< char > *|qstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__qstringT_unsigned_char_t = {"_p__qstringT_unsigned_char_t", "qtype *|_qstring< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__qstringT_unsigned_short_t = {"_p__qstringT_unsigned_short_t", "_qstring< unsigned short > *|qwstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_action_ctx_base_t = {"_p_action_ctx_base_t", "action_ctx_base_t *|action_update_ctx_t *|action_activation_ctx_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_biggest_t = {"_p_biggest_t", "biggest_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bpt_location_t = {"_p_bpt_location_t", "bpt_location_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bpt_t = {"_p_bpt_t", "bpt_t *|qvector< bpt_t >::iterator|qvector< bpt_t >::const_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_debug_event_t = {"_p_debug_event_t", "debug_event_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eval_ctx_t = {"_p_eval_ctx_t", "eval_ctx_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_int_int_p_void__bool = {"_p_f_p_TWidget_int_int_p_void__bool", "custom_viewer_keydown_t *|bool (*)(TWidget *,int,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void = {"_p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void", "void (*)(TWidget *,int,view_mouse_event_t *,void *)|custom_viewer_mouse_moved_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_int_p_void__bool = {"_p_f_p_TWidget_int_p_void__bool", "custom_viewer_click_t *|custom_viewer_dblclick_t *|bool (*)(TWidget *,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_lochist_entry_t_p_void__void = {"_p_f_p_TWidget_p_lochist_entry_t_p_void__void", "custom_viewer_adjust_place_t *|void (*)(TWidget *,lochist_entry_t *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void = {"_p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void", "void (*)(TWidget *,lochist_entry_t const *,lochist_entry_t const *,locchange_md_t const &,void *)|custom_viewer_location_changed_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int = {"_p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int", "custom_viewer_can_navigate_t *|int (*)(TWidget *,lochist_entry_t const *,locchange_md_t const &,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void = {"_p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void", "code_viewer_lines_click_t *|void (*)(TWidget *,place_t const *,int,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int = {"_p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int", "code_viewer_lines_icon_t *|int (*)(TWidget *,place_t const *,int *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int = {"_p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int", "custom_viewer_get_place_xcoord_t *|int (*)(TWidget *,place_t const *,place_t const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool = {"_p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool", "code_viewer_lines_linenum_t *|bool (*)(TWidget *,place_t const *,unsigned int *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_void__int = {"_p_f_p_TWidget_p_void__int", "custom_viewer_help_t *|int (*)(TWidget *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_TWidget_p_void__void = {"_p_f_p_TWidget_p_void__void", "custom_viewer_popup_t *|custom_viewer_close_t *|custom_viewer_curpos_t *|void (*)(TWidget *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t = {"_p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t", "chooser_base_t::cbres_t (*)(chooser_multi_t *,sizevec_t *)|chooser_multi_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t = {"_p_f_p_chooser_t_ssize_t__chooser_t__cbret_t", "chooser_t::cbret_t (*)(chooser_t *,ssize_t)|chooser_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool = {"_p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool", "bool (*)(lochist_entry_t *,lochist_entry_t const &,TWidget *)|lochist_entry_cvt_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_p_void__void = {"_p_f_p_q_const__char_p_void__void", "void (*)(char const *,void *)|ss_restore_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int = {"_p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int", "h2ti_type_cb *|int (*)(char const *,tinfo_t const &,char const *,unsigned long long const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_v_______int = {"_p_f_p_q_const__char_v_______int", "int (*)(char const *,...)|printer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int_va_list__ssize_t = {"_p_f_p_void_int_va_list__ssize_t", "ssize_t (*)(void *,int,va_list)|hook_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__insn_t_p_int_p_int__bool = {"_p_f_r_q_const__insn_t_p_int_p_int__bool", "bool (*)(insn_t const &,int *,int *)|is_stkarg_load_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool = {"_p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool", "bool (*)(insn_t const &,op_t const &,tinfo_t const &,char const *)|set_op_tinfo_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int__bool = {"_p_f_unsigned_int__bool", "bool (*)(unsigned int)|has_delay_slot_t *|may_destroy_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int = {"_p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int", "int (*)(unsigned int,char const *,unsigned int,void *)|import_enum_cb_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_p_void__bool = {"_p_f_unsigned_int_p_void__bool", "testf_t *|bool (*)(unsigned int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int = {"_p_f_unsigned_int_r_q_const__tinfo_t_p_void__int", "local_tinfo_predicate_t *|int (*)(unsigned int,tinfo_t const &,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_unsigned_int__unsigned_int = {"_p_f_unsigned_int_unsigned_int__unsigned_int", "unsigned int (*)(unsigned int,unsigned int)|nav_colorizer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "adiff_t *|int *|error_t *|thid_t *|pid_t *|argloc_type_t *|twidget_type_t *|atype_t *|bpttype_t *|int32 *|type_sign_t *|view_event_state_t *|idastate_t *|sval_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_location_t = {"_p_location_t", "location_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64 *|longlong *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_memreg_info_t = {"_p_memreg_info_t", "memreg_info_t *|qvector< memreg_info_t >::iterator|qvector< memreg_info_t >::const_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_modinfo_t = {"_p_modinfo_t", "modinfo_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_TWidget = {"_p_p_TWidget", "TWidget **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qiteratorT_qrefcnt_tT_source_file_t_t_t = {"_p_qiteratorT_qrefcnt_tT_source_file_t_t_t", "qiterator< qrefcnt_t< source_file_t > > *|_source_file_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qiteratorT_qrefcnt_tT_source_item_t_t_t = {"_p_qiteratorT_qrefcnt_tT_source_item_t_t_t", "qiterator< qrefcnt_t< source_item_t > > *|_source_item_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qrefcnt_obj_t = {"_p_qrefcnt_obj_t", "qrefcnt_obj_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_source_item_t = {"_p_source_item_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_source_file_t = {"_p_source_file_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_file_t_t_t_t = {"_p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_file_t_t_t_t", "qrefcnt_t< qiterator< qrefcnt_t< source_file_t > > > *|source_file_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_item_t_t_t_t = {"_p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_item_t_t_t_t", "qrefcnt_t< qiterator< qrefcnt_t< source_item_t > > > *|source_item_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qrefcnt_tT_source_file_t_t = {"_p_qrefcnt_tT_source_file_t_t", "source_file_ptr *|qrefcnt_t< source_file_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qrefcnt_tT_source_item_t_t = {"_p_qrefcnt_tT_source_item_t_t", "source_item_ptr *|qrefcnt_t< source_item_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT__qstringT_char_t_t = {"_p_qvectorT__qstringT_char_t_t", "qvector< _qstring< char > > *|qstrvec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT__qstringT_unsigned_short_t_t = {"_p_qvectorT__qstringT_unsigned_short_t_t", "qvector< _qstring< unsigned short > > *|qwstrvec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_argloc_t_t = {"_p_qvectorT_argloc_t_t", "qvector< argloc_t > *|arglocs_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_bool_t = {"_p_qvectorT_bool_t", "boolvec_t *|qvector< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_bpt_t_t = {"_p_qvectorT_bpt_t_t", "bpt_vec_t *|qvector< bpt_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_call_stack_info_t_t = {"_p_qvectorT_call_stack_info_t_t", "call_stack_t *|qvector< call_stack_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_channel_redir_t_t = {"_p_qvectorT_channel_redir_t_t", "qvector< channel_redir_t > *|channel_redirs_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_compiled_binpat_t_t = {"_p_qvectorT_compiled_binpat_t_t", "compiled_binpat_vec_t *|qvector< compiled_binpat_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_debug_event_t_t = {"_p_qvectorT_debug_event_t_t", "dbgevt_vec_t *|qvector< debug_event_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_exception_info_t_t = {"_p_qvectorT_exception_info_t_t", "excvec_t *|qvector< exception_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_funcarg_t_t = {"_p_qvectorT_funcarg_t_t", "funcargvec_t *|qvector< funcarg_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_int_t = {"_p_qvectorT_int_t", "svalvec_t *|intvec_t *|qvector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_memory_info_t_t = {"_p_qvectorT_memory_info_t_t", "meminfo_vec_t *|qvector< memory_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_memreg_info_t_t = {"_p_qvectorT_memreg_info_t_t", "memreg_infos_t *|qvector< memreg_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_modinfo_t_t = {"_p_qvectorT_modinfo_t_t", "modinfovec_t *|qvector< modinfo_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_movbpt_code_t_t = {"_p_qvectorT_movbpt_code_t_t", "movbpt_codes_t *|qvector< enum movbpt_code_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_movbpt_info_t_t = {"_p_qvectorT_movbpt_info_t_t", "movbpt_infos_t *|qvector< movbpt_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_process_info_t_t = {"_p_qvectorT_process_info_t_t", "procinfo_vec_t *|qvector< process_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_qrefcnt_tT_source_item_t_t_t = {"_p_qvectorT_qrefcnt_tT_source_item_t_t_t", "qvector< qrefcnt_t< source_item_t > > *|source_items_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_range_t_t = {"_p_qvectorT_range_t_t", "rangevec_base_t *|qvector< range_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_rangeset_t_const_p_t = {"_p_qvectorT_rangeset_t_const_p_t", "rangeset_crefvec_t *|qvector< rangeset_t const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_rangeset_t_t = {"_p_qvectorT_rangeset_t_t", "qvector< rangeset_t > *|array_of_rangesets *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_refinfo_desc_t_t = {"_p_qvectorT_refinfo_desc_t_t", "refinfo_desc_vec_t *|qvector< refinfo_desc_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_regval_t_t = {"_p_qvectorT_regval_t_t", "regvals_t *|qvector< regval_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_scattered_segm_t_t = {"_p_qvectorT_scattered_segm_t_t", "qvector< scattered_segm_t > *|scattered_image_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_simd_info_t_t = {"_p_qvectorT_simd_info_t_t", "simd_info_vec_t *|qvector< simd_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_simpleline_t_t = {"_p_qvectorT_simpleline_t_t", "strvec_t *|qvector< simpleline_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_size_t_t = {"_p_qvectorT_size_t_t", "sizevec_t *|qvector< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_tev_info_reg_t_t = {"_p_qvectorT_tev_info_reg_t_t", "tevinforeg_vec_t *|qvector< tev_info_reg_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_tev_info_t_t = {"_p_qvectorT_tev_info_t_t", "tevinfo_vec_t *|qvector< tev_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_tev_reg_value_t_t = {"_p_qvectorT_tev_reg_value_t_t", "tev_reg_values_t *|qvector< tev_reg_value_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_thread_name_t_t = {"_p_qvectorT_thread_name_t_t", "thread_name_vec_t *|qvector< thread_name_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_tinfo_t_t = {"_p_qvectorT_tinfo_t_t", "tinfovec_t *|qvector< tinfo_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_type_attr_t_t = {"_p_qvectorT_type_attr_t_t", "type_attrs_t *|qvector< type_attr_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_udt_member_t_t = {"_p_qvectorT_udt_member_t_t", "udtmembervec_t *|qvector< udt_member_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qvectorT_unsigned_char_t = {"_p_qvectorT_unsigned_char_t", "qvector< unsigned char > *|compvec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_relobj_t = {"_p_relobj_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_bytevec_t = {"_p_bytevec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_reloc_info_t = {"_p_reloc_info_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_qvectorT_unsigned_int_t = {"_p_qvectorT_unsigned_int_t", "eavec_t *|ordvec_t *|uvalvec_t *|qvector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_register_info_t = {"_p_register_info_t", "register_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_regval_t = {"_p_regval_t", "regval_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|sint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_source_view_t = {"_p_source_view_t", "source_view_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_srcinfo_provider_t = {"_p_srcinfo_provider_t", "srcinfo_provider_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ssize_t = {"_p_ssize_t", "ssize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tev_info_reg_t = {"_p_tev_info_reg_t", "tev_info_reg_t *|qvector< tev_info_reg_t >::iterator|qvector< tev_info_reg_t >::const_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tev_info_t = {"_p_tev_info_t", "tev_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tev_reg_value_t = {"_p_tev_reg_value_t", "qvector< tev_reg_value_t >::iterator|qvector< tev_reg_value_t >::const_iterator|tev_reg_value_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ui_notification_t = {"_p_ui_notification_t", "ui_notification_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uchar *|unsigned char *|register_class_t *|cm_t *|uint8 *|op_dtype_t *|type_t *|p_list *|reftype_t *|color_t *|bte_t *|p_string *|comp_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "bgcolor_t *|enum_t *|tid_t *|bmask_t *|uint *|uint32 *|flags_t *|wchar32_t *|asize_t *|const_t *|sel_t *|nodeidx_t *|unsigned int *|uval_t *|ea_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64 *|ulonglong *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16 *|unsigned short *|ushort *|wchar16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DBG_Hooks,
  &_swigt__p_TWidget,
  &_swigt__p__qstringT_char_t,
  &_swigt__p__qstringT_unsigned_char_t,
  &_swigt__p__qstringT_unsigned_short_t,
  &_swigt__p_action_ctx_base_t,
  &_swigt__p_biggest_t,
  &_swigt__p_bpt_location_t,
  &_swigt__p_bpt_t,
  &_swigt__p_bytevec_t,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_debug_event_t,
  &_swigt__p_eval_ctx_t,
  &_swigt__p_f_p_TWidget_int_int_p_void__bool,
  &_swigt__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void,
  &_swigt__p_f_p_TWidget_int_p_void__bool,
  &_swigt__p_f_p_TWidget_p_lochist_entry_t_p_void__void,
  &_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void,
  &_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int,
  &_swigt__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool,
  &_swigt__p_f_p_TWidget_p_void__int,
  &_swigt__p_f_p_TWidget_p_void__void,
  &_swigt__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t,
  &_swigt__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t,
  &_swigt__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool,
  &_swigt__p_f_p_q_const__char_p_void__void,
  &_swigt__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int,
  &_swigt__p_f_p_q_const__char_v_______int,
  &_swigt__p_f_p_void_int_va_list__ssize_t,
  &_swigt__p_f_r_q_const__insn_t_p_int_p_int__bool,
  &_swigt__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool,
  &_swigt__p_f_unsigned_int__bool,
  &_swigt__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int,
  &_swigt__p_f_unsigned_int_p_void__bool,
  &_swigt__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int,
  &_swigt__p_f_unsigned_int_unsigned_int__unsigned_int,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_location_t,
  &_swigt__p_long_long,
  &_swigt__p_memreg_info_t,
  &_swigt__p_modinfo_t,
  &_swigt__p_p_TWidget,
  &_swigt__p_p_void,
  &_swigt__p_qiteratorT_qrefcnt_tT_source_file_t_t_t,
  &_swigt__p_qiteratorT_qrefcnt_tT_source_item_t_t_t,
  &_swigt__p_qrefcnt_obj_t,
  &_swigt__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_file_t_t_t_t,
  &_swigt__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_item_t_t_t_t,
  &_swigt__p_qrefcnt_tT_source_file_t_t,
  &_swigt__p_qrefcnt_tT_source_item_t_t,
  &_swigt__p_qvectorT__qstringT_char_t_t,
  &_swigt__p_qvectorT__qstringT_unsigned_short_t_t,
  &_swigt__p_qvectorT_argloc_t_t,
  &_swigt__p_qvectorT_bool_t,
  &_swigt__p_qvectorT_bpt_t_t,
  &_swigt__p_qvectorT_call_stack_info_t_t,
  &_swigt__p_qvectorT_channel_redir_t_t,
  &_swigt__p_qvectorT_compiled_binpat_t_t,
  &_swigt__p_qvectorT_debug_event_t_t,
  &_swigt__p_qvectorT_exception_info_t_t,
  &_swigt__p_qvectorT_funcarg_t_t,
  &_swigt__p_qvectorT_int_t,
  &_swigt__p_qvectorT_memory_info_t_t,
  &_swigt__p_qvectorT_memreg_info_t_t,
  &_swigt__p_qvectorT_modinfo_t_t,
  &_swigt__p_qvectorT_movbpt_code_t_t,
  &_swigt__p_qvectorT_movbpt_info_t_t,
  &_swigt__p_qvectorT_process_info_t_t,
  &_swigt__p_qvectorT_qrefcnt_tT_source_item_t_t_t,
  &_swigt__p_qvectorT_range_t_t,
  &_swigt__p_qvectorT_rangeset_t_const_p_t,
  &_swigt__p_qvectorT_rangeset_t_t,
  &_swigt__p_qvectorT_refinfo_desc_t_t,
  &_swigt__p_qvectorT_regval_t_t,
  &_swigt__p_qvectorT_scattered_segm_t_t,
  &_swigt__p_qvectorT_simd_info_t_t,
  &_swigt__p_qvectorT_simpleline_t_t,
  &_swigt__p_qvectorT_size_t_t,
  &_swigt__p_qvectorT_tev_info_reg_t_t,
  &_swigt__p_qvectorT_tev_info_t_t,
  &_swigt__p_qvectorT_tev_reg_value_t_t,
  &_swigt__p_qvectorT_thread_name_t_t,
  &_swigt__p_qvectorT_tinfo_t_t,
  &_swigt__p_qvectorT_type_attr_t_t,
  &_swigt__p_qvectorT_udt_member_t_t,
  &_swigt__p_qvectorT_unsigned_char_t,
  &_swigt__p_qvectorT_unsigned_int_t,
  &_swigt__p_register_info_t,
  &_swigt__p_regval_t,
  &_swigt__p_relobj_t,
  &_swigt__p_reloc_info_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_source_file_t,
  &_swigt__p_source_item_t,
  &_swigt__p_source_view_t,
  &_swigt__p_srcinfo_provider_t,
  &_swigt__p_ssize_t,
  &_swigt__p_tev_info_reg_t,
  &_swigt__p_tev_info_t,
  &_swigt__p_tev_reg_value_t,
  &_swigt__p_ui_notification_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_DBG_Hooks[] = {  {&_swigt__p_DBG_Hooks, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TWidget[] = {  {&_swigt__p_TWidget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__qstringT_char_t[] = {  {&_swigt__p__qstringT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__qstringT_unsigned_char_t[] = {  {&_swigt__p__qstringT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__qstringT_unsigned_short_t[] = {  {&_swigt__p__qstringT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_action_ctx_base_t[] = {  {&_swigt__p_action_ctx_base_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_biggest_t[] = {  {&_swigt__p_biggest_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bpt_location_t[] = {  {&_swigt__p_bpt_location_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bpt_t[] = {  {&_swigt__p_bpt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_debug_event_t[] = {  {&_swigt__p_debug_event_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eval_ctx_t[] = {  {&_swigt__p_eval_ctx_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_int_int_p_void__bool[] = {  {&_swigt__p_f_p_TWidget_int_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void[] = {  {&_swigt__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_int_p_void__bool[] = {  {&_swigt__p_f_p_TWidget_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_lochist_entry_t_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_lochist_entry_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool[] = {  {&_swigt__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_void__int[] = {  {&_swigt__p_f_p_TWidget_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_TWidget_p_void__void[] = {  {&_swigt__p_f_p_TWidget_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t[] = {  {&_swigt__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t[] = {  {&_swigt__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool[] = {  {&_swigt__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_p_void__void[] = {  {&_swigt__p_f_p_q_const__char_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int[] = {  {&_swigt__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_v_______int[] = {  {&_swigt__p_f_p_q_const__char_v_______int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int_va_list__ssize_t[] = {  {&_swigt__p_f_p_void_int_va_list__ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__insn_t_p_int_p_int__bool[] = {  {&_swigt__p_f_r_q_const__insn_t_p_int_p_int__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool[] = {  {&_swigt__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int__bool[] = {  {&_swigt__p_f_unsigned_int__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int[] = {  {&_swigt__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_p_void__bool[] = {  {&_swigt__p_f_unsigned_int_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int[] = {  {&_swigt__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_unsigned_int__unsigned_int[] = {  {&_swigt__p_f_unsigned_int_unsigned_int__unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_location_t[] = {  {&_swigt__p_location_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_memreg_info_t[] = {  {&_swigt__p_memreg_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_modinfo_t[] = {  {&_swigt__p_modinfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_TWidget[] = {  {&_swigt__p_p_TWidget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qiteratorT_qrefcnt_tT_source_file_t_t_t[] = {  {&_swigt__p_qiteratorT_qrefcnt_tT_source_file_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qiteratorT_qrefcnt_tT_source_item_t_t_t[] = {  {&_swigt__p_qiteratorT_qrefcnt_tT_source_item_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_source_item_t[] = {{&_swigt__p_source_item_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_source_file_t[] = {{&_swigt__p_source_file_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qrefcnt_obj_t[] = {  {&_swigt__p_source_item_t, _p_source_item_tTo_p_qrefcnt_obj_t, 0, 0},  {&_swigt__p_qrefcnt_obj_t, 0, 0, 0},  {&_swigt__p_source_file_t, _p_source_file_tTo_p_qrefcnt_obj_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_file_t_t_t_t[] = {  {&_swigt__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_file_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_item_t_t_t_t[] = {  {&_swigt__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_item_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qrefcnt_tT_source_file_t_t[] = {  {&_swigt__p_qrefcnt_tT_source_file_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qrefcnt_tT_source_item_t_t[] = {  {&_swigt__p_qrefcnt_tT_source_item_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT__qstringT_char_t_t[] = {  {&_swigt__p_qvectorT__qstringT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT__qstringT_unsigned_short_t_t[] = {  {&_swigt__p_qvectorT__qstringT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_argloc_t_t[] = {  {&_swigt__p_qvectorT_argloc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_bool_t[] = {  {&_swigt__p_qvectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_bpt_t_t[] = {  {&_swigt__p_qvectorT_bpt_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_call_stack_info_t_t[] = {  {&_swigt__p_qvectorT_call_stack_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_channel_redir_t_t[] = {  {&_swigt__p_qvectorT_channel_redir_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_compiled_binpat_t_t[] = {  {&_swigt__p_qvectorT_compiled_binpat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_debug_event_t_t[] = {  {&_swigt__p_qvectorT_debug_event_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_exception_info_t_t[] = {  {&_swigt__p_qvectorT_exception_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_funcarg_t_t[] = {  {&_swigt__p_qvectorT_funcarg_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_int_t[] = {  {&_swigt__p_qvectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_memory_info_t_t[] = {  {&_swigt__p_qvectorT_memory_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_memreg_info_t_t[] = {  {&_swigt__p_qvectorT_memreg_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_modinfo_t_t[] = {  {&_swigt__p_qvectorT_modinfo_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_movbpt_code_t_t[] = {  {&_swigt__p_qvectorT_movbpt_code_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_movbpt_info_t_t[] = {  {&_swigt__p_qvectorT_movbpt_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_process_info_t_t[] = {  {&_swigt__p_qvectorT_process_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_qrefcnt_tT_source_item_t_t_t[] = {  {&_swigt__p_qvectorT_qrefcnt_tT_source_item_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_range_t_t[] = {  {&_swigt__p_qvectorT_range_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_rangeset_t_const_p_t[] = {  {&_swigt__p_qvectorT_rangeset_t_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_rangeset_t_t[] = {  {&_swigt__p_qvectorT_rangeset_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_refinfo_desc_t_t[] = {  {&_swigt__p_qvectorT_refinfo_desc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_regval_t_t[] = {  {&_swigt__p_qvectorT_regval_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_scattered_segm_t_t[] = {  {&_swigt__p_qvectorT_scattered_segm_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_simd_info_t_t[] = {  {&_swigt__p_qvectorT_simd_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_simpleline_t_t[] = {  {&_swigt__p_qvectorT_simpleline_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_size_t_t[] = {  {&_swigt__p_qvectorT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_tev_info_reg_t_t[] = {  {&_swigt__p_qvectorT_tev_info_reg_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_tev_info_t_t[] = {  {&_swigt__p_qvectorT_tev_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_tev_reg_value_t_t[] = {  {&_swigt__p_qvectorT_tev_reg_value_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_thread_name_t_t[] = {  {&_swigt__p_qvectorT_thread_name_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_tinfo_t_t[] = {  {&_swigt__p_qvectorT_tinfo_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_type_attr_t_t[] = {  {&_swigt__p_qvectorT_type_attr_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_udt_member_t_t[] = {  {&_swigt__p_qvectorT_udt_member_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_relobj_t[] = {{&_swigt__p_relobj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bytevec_t[] = {{&_swigt__p_bytevec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reloc_info_t[] = {{&_swigt__p_reloc_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_unsigned_char_t[] = {  {&_swigt__p_relobj_t, _p_relobj_tTo_p_qvectorT_unsigned_char_t, 0, 0},  {&_swigt__p_qvectorT_unsigned_char_t, 0, 0, 0},  {&_swigt__p_bytevec_t, _p_bytevec_tTo_p_qvectorT_unsigned_char_t, 0, 0},  {&_swigt__p_reloc_info_t, _p_reloc_info_tTo_p_qvectorT_unsigned_char_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qvectorT_unsigned_int_t[] = {  {&_swigt__p_qvectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_register_info_t[] = {  {&_swigt__p_register_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_regval_t[] = {  {&_swigt__p_regval_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_source_view_t[] = {  {&_swigt__p_source_view_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_srcinfo_provider_t[] = {  {&_swigt__p_srcinfo_provider_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ssize_t[] = {  {&_swigt__p_ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tev_info_reg_t[] = {  {&_swigt__p_tev_info_reg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tev_info_t[] = {  {&_swigt__p_tev_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tev_reg_value_t[] = {  {&_swigt__p_tev_reg_value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ui_notification_t[] = {  {&_swigt__p_ui_notification_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DBG_Hooks,
  _swigc__p_TWidget,
  _swigc__p__qstringT_char_t,
  _swigc__p__qstringT_unsigned_char_t,
  _swigc__p__qstringT_unsigned_short_t,
  _swigc__p_action_ctx_base_t,
  _swigc__p_biggest_t,
  _swigc__p_bpt_location_t,
  _swigc__p_bpt_t,
  _swigc__p_bytevec_t,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_debug_event_t,
  _swigc__p_eval_ctx_t,
  _swigc__p_f_p_TWidget_int_int_p_void__bool,
  _swigc__p_f_p_TWidget_int_p_view_mouse_event_t_p_void__void,
  _swigc__p_f_p_TWidget_int_p_void__bool,
  _swigc__p_f_p_TWidget_p_lochist_entry_t_p_void__void,
  _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__void,
  _swigc__p_f_p_TWidget_p_q_const__lochist_entry_t_r_q_const__locchange_md_t_p_void__int,
  _swigc__p_f_p_TWidget_p_q_const__place_t_int_int_p_void__void,
  _swigc__p_f_p_TWidget_p_q_const__place_t_p_int_p_void__int,
  _swigc__p_f_p_TWidget_p_q_const__place_t_p_q_const__place_t_p_void__int,
  _swigc__p_f_p_TWidget_p_q_const__place_t_p_unsigned_int_p_void__bool,
  _swigc__p_f_p_TWidget_p_void__int,
  _swigc__p_f_p_TWidget_p_void__void,
  _swigc__p_f_p_chooser_multi_t_p_sizevec_t__chooser_base_t__cbres_t,
  _swigc__p_f_p_chooser_t_ssize_t__chooser_t__cbret_t,
  _swigc__p_f_p_lochist_entry_t_r_q_const__lochist_entry_t_p_TWidget__bool,
  _swigc__p_f_p_q_const__char_p_void__void,
  _swigc__p_f_p_q_const__char_r_q_const__tinfo_t_p_q_const__char_p_q_const__unsigned_long_long_p_void__int,
  _swigc__p_f_p_q_const__char_v_______int,
  _swigc__p_f_p_void_int_va_list__ssize_t,
  _swigc__p_f_r_q_const__insn_t_p_int_p_int__bool,
  _swigc__p_f_r_q_const__insn_t_r_q_const__op_t_r_q_const__tinfo_t_p_q_const__char__bool,
  _swigc__p_f_unsigned_int__bool,
  _swigc__p_f_unsigned_int_p_q_const__char_unsigned_int_p_void__int,
  _swigc__p_f_unsigned_int_p_void__bool,
  _swigc__p_f_unsigned_int_r_q_const__tinfo_t_p_void__int,
  _swigc__p_f_unsigned_int_unsigned_int__unsigned_int,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_location_t,
  _swigc__p_long_long,
  _swigc__p_memreg_info_t,
  _swigc__p_modinfo_t,
  _swigc__p_p_TWidget,
  _swigc__p_p_void,
  _swigc__p_qiteratorT_qrefcnt_tT_source_file_t_t_t,
  _swigc__p_qiteratorT_qrefcnt_tT_source_item_t_t_t,
  _swigc__p_qrefcnt_obj_t,
  _swigc__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_file_t_t_t_t,
  _swigc__p_qrefcnt_tT_qiteratorT_qrefcnt_tT_source_item_t_t_t_t,
  _swigc__p_qrefcnt_tT_source_file_t_t,
  _swigc__p_qrefcnt_tT_source_item_t_t,
  _swigc__p_qvectorT__qstringT_char_t_t,
  _swigc__p_qvectorT__qstringT_unsigned_short_t_t,
  _swigc__p_qvectorT_argloc_t_t,
  _swigc__p_qvectorT_bool_t,
  _swigc__p_qvectorT_bpt_t_t,
  _swigc__p_qvectorT_call_stack_info_t_t,
  _swigc__p_qvectorT_channel_redir_t_t,
  _swigc__p_qvectorT_compiled_binpat_t_t,
  _swigc__p_qvectorT_debug_event_t_t,
  _swigc__p_qvectorT_exception_info_t_t,
  _swigc__p_qvectorT_funcarg_t_t,
  _swigc__p_qvectorT_int_t,
  _swigc__p_qvectorT_memory_info_t_t,
  _swigc__p_qvectorT_memreg_info_t_t,
  _swigc__p_qvectorT_modinfo_t_t,
  _swigc__p_qvectorT_movbpt_code_t_t,
  _swigc__p_qvectorT_movbpt_info_t_t,
  _swigc__p_qvectorT_process_info_t_t,
  _swigc__p_qvectorT_qrefcnt_tT_source_item_t_t_t,
  _swigc__p_qvectorT_range_t_t,
  _swigc__p_qvectorT_rangeset_t_const_p_t,
  _swigc__p_qvectorT_rangeset_t_t,
  _swigc__p_qvectorT_refinfo_desc_t_t,
  _swigc__p_qvectorT_regval_t_t,
  _swigc__p_qvectorT_scattered_segm_t_t,
  _swigc__p_qvectorT_simd_info_t_t,
  _swigc__p_qvectorT_simpleline_t_t,
  _swigc__p_qvectorT_size_t_t,
  _swigc__p_qvectorT_tev_info_reg_t_t,
  _swigc__p_qvectorT_tev_info_t_t,
  _swigc__p_qvectorT_tev_reg_value_t_t,
  _swigc__p_qvectorT_thread_name_t_t,
  _swigc__p_qvectorT_tinfo_t_t,
  _swigc__p_qvectorT_type_attr_t_t,
  _swigc__p_qvectorT_udt_member_t_t,
  _swigc__p_qvectorT_unsigned_char_t,
  _swigc__p_qvectorT_unsigned_int_t,
  _swigc__p_register_info_t,
  _swigc__p_regval_t,
  _swigc__p_relobj_t,
  _swigc__p_reloc_info_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_source_file_t,
  _swigc__p_source_item_t,
  _swigc__p_source_view_t,
  _swigc__p_srcinfo_provider_t,
  _swigc__p_ssize_t,
  _swigc__p_tev_info_reg_t,
  _swigc__p_tev_info_t,
  _swigc__p_tev_reg_value_t,
  _swigc__p_ui_notification_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
#ifndef Py_LIMITED_API  
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
#else
    PyType_Slot slots[] = {
      {
        Py_tp_dealloc, (void*)swig_varlink_dealloc 
      },
      {
        Py_tp_getattr, (void*)swig_varlink_getattr 
      },
      {
        Py_tp_setattr, (void*)swig_varlink_setattr 
      },
      {
        Py_tp_repr, (void*)swig_varlink_repr 
      },
      {
        Py_tp_str, (void*)swig_varlink_str 
      },
      {
        Py_tp_doc, (void*)varlink__doc__ 
      },
      {
        0, NULL 
      }
    };
    PyType_Spec spec = {
      
    };
    spec.name = "swigvarlink";
    spec.basicsize = sizeof(swig_varlinkobject);
    spec.flags = Py_TPFLAGS_DEFAULT;
    spec.slots = slots;
    return (PyTypeObject*)PyType_FromSpec(&spec);
#endif  
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
#ifndef Py_LIMITED_API
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#endif // Py_LIMITED_API
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __NT__
#pragma warning(disable: 4883)
#endif // __NT__
#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "BPT_ELANG_MASK",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0xF0000000u)));
  
  /* Initialize threading */

/* 'SetConstant' replacement */

static const ida_local struct ci_t
{
    const char *name;
    int  val;
} cis[121] = {
	{ "dbg_null", static_cast< int >(dbg_null)},
	{ "dbg_process_start", static_cast< int >(dbg_process_start)},
	{ "dbg_process_exit", static_cast< int >(dbg_process_exit)},
	{ "dbg_process_attach", static_cast< int >(dbg_process_attach)},
	{ "dbg_process_detach", static_cast< int >(dbg_process_detach)},
	{ "dbg_thread_start", static_cast< int >(dbg_thread_start)},
	{ "dbg_thread_exit", static_cast< int >(dbg_thread_exit)},
	{ "dbg_library_load", static_cast< int >(dbg_library_load)},
	{ "dbg_library_unload", static_cast< int >(dbg_library_unload)},
	{ "dbg_information", static_cast< int >(dbg_information)},
	{ "dbg_exception", static_cast< int >(dbg_exception)},
	{ "dbg_suspend_process", static_cast< int >(dbg_suspend_process)},
	{ "dbg_bpt", static_cast< int >(dbg_bpt)},
	{ "dbg_trace", static_cast< int >(dbg_trace)},
	{ "dbg_request_error", static_cast< int >(dbg_request_error)},
	{ "dbg_step_into", static_cast< int >(dbg_step_into)},
	{ "dbg_step_over", static_cast< int >(dbg_step_over)},
	{ "dbg_run_to", static_cast< int >(dbg_run_to)},
	{ "dbg_step_until_ret", static_cast< int >(dbg_step_until_ret)},
	{ "dbg_bpt_changed", static_cast< int >(dbg_bpt_changed)},
	{ "dbg_last", static_cast< int >(dbg_last)},
	{ "BPTEV_ADDED", static_cast< int >(0)},
	{ "BPTEV_REMOVED", static_cast< int >(1)},
	{ "BPTEV_CHANGED", static_cast< int >(2)},
	{ "DSTATE_SUSP", static_cast< int >(-1)},
	{ "DSTATE_NOTASK", static_cast< int >(0)},
	{ "DSTATE_RUN", static_cast< int >(1)},
	{ "DBGINV_MEMORY", static_cast< int >(0x0001)},
	{ "DBGINV_MEMCFG", static_cast< int >(0x0002)},
	{ "DBGINV_REGS", static_cast< int >(0x0004)},
	{ "DBGINV_ALL", static_cast< int >(0x7FFF)},
	{ "DBGINV_REDRAW", static_cast< int >(0x8000)},
	{ "DBGINV_NONE", static_cast< int >(0)},
	{ "BPLT_ABS", static_cast< int >(BPLT_ABS)},
	{ "BPLT_REL", static_cast< int >(BPLT_REL)},
	{ "BPLT_SYM", static_cast< int >(BPLT_SYM)},
	{ "BPLT_SRC", static_cast< int >(BPLT_SRC)},
	{ "BPT_BRK", static_cast< int >(0x001)},
	{ "BPT_TRACE", static_cast< int >(0x002)},
	{ "BPT_UPDMEM", static_cast< int >(0x004)},
	{ "BPT_ENABLED", static_cast< int >(0x008)},
	{ "BPT_LOWCND", static_cast< int >(0x010)},
	{ "BPT_TRACEON", static_cast< int >(0x020)},
	{ "BPT_TRACE_INSN", static_cast< int >(0x040)},
	{ "BPT_TRACE_FUNC", static_cast< int >(0x080)},
	{ "BPT_TRACE_BBLK", static_cast< int >(0x100)},
	{ "BPT_TRACE_TYPES", static_cast< int >((0x040|0x080|0x100))},
	{ "BPT_ELANG_SHIFT", static_cast< int >(28)},
	{ "BKPT_BADBPT", static_cast< int >(0x01)},
	{ "BKPT_LISTBPT", static_cast< int >(0x02)},
	{ "BKPT_TRACE", static_cast< int >(0x04)},
	{ "BKPT_ACTIVE", static_cast< int >(0x08)},
	{ "BKPT_PARTIAL", static_cast< int >(0x10)},
	{ "BKPT_CNDREADY", static_cast< int >(0x20)},
	{ "BKPT_FAKEPEND", static_cast< int >(0x40)},
	{ "BKPT_PAGE", static_cast< int >(0x80)},
	{ "MOVBPT_OK", static_cast< int >(MOVBPT_OK)},
	{ "MOVBPT_NOT_FOUND", static_cast< int >(MOVBPT_NOT_FOUND)},
	{ "MOVBPT_DEST_BUSY", static_cast< int >(MOVBPT_DEST_BUSY)},
	{ "MOVBPT_BAD_TYPE", static_cast< int >(MOVBPT_BAD_TYPE)},
	{ "BPTCK_NONE", static_cast< int >(-1)},
	{ "BPTCK_NO", static_cast< int >(0)},
	{ "BPTCK_YES", static_cast< int >(1)},
	{ "BPTCK_ACT", static_cast< int >(2)},
	{ "ST_OVER_DEBUG_SEG", static_cast< int >(0x01)},
	{ "ST_OVER_LIB_FUNC", static_cast< int >(0x02)},
	{ "ST_ALREADY_LOGGED", static_cast< int >(0x04)},
	{ "ST_SKIP_LOOPS", static_cast< int >(0x08)},
	{ "ST_DIFFERENTIAL", static_cast< int >(0x10)},
	{ "ST_OPTIONS_MASK", static_cast< int >((0x01|0x02|0x04|0x08|0x10))},
	{ "ST_OPTIONS_DEFAULT", static_cast< int >((0x01|0x02))},
	{ "FT_LOG_RET", static_cast< int >(0x01)},
	{ "BT_LOG_INSTS", static_cast< int >(0x0001)},
	{ "IT_LOG_SAME_IP", static_cast< int >(0x01)},
	{ "tev_none", static_cast< int >(tev_none)},
	{ "tev_insn", static_cast< int >(tev_insn)},
	{ "tev_call", static_cast< int >(tev_call)},
	{ "tev_ret", static_cast< int >(tev_ret)},
	{ "tev_bpt", static_cast< int >(tev_bpt)},
	{ "tev_mem", static_cast< int >(tev_mem)},
	{ "tev_event", static_cast< int >(tev_event)},
	{ "tev_max", static_cast< int >(tev_max)},
	{ "SAVE_ALL_VALUES", static_cast< int >(SAVE_ALL_VALUES)},
	{ "SAVE_DIFF", static_cast< int >(SAVE_DIFF)},
	{ "SAVE_NONE", static_cast< int >(SAVE_NONE)},
	{ "DEC_NOTASK", static_cast< int >(DEC_NOTASK)},
	{ "DEC_ERROR", static_cast< int >(DEC_ERROR)},
	{ "DEC_TIMEOUT", static_cast< int >(DEC_TIMEOUT)},
	{ "WFNE_ANY", static_cast< int >(0x0001)},
	{ "WFNE_SUSP", static_cast< int >(0x0002)},
	{ "WFNE_SILENT", static_cast< int >(0x0004)},
	{ "WFNE_CONT", static_cast< int >(0x0008)},
	{ "WFNE_NOWAIT", static_cast< int >(0x0010)},
	{ "WFNE_USEC", static_cast< int >(0x0020)},
	{ "DOPT_SEGM_MSGS", static_cast< int >(0x00000001)},
	{ "DOPT_START_BPT", static_cast< int >(0x00000002)},
	{ "DOPT_THREAD_MSGS", static_cast< int >(0x00000004)},
	{ "DOPT_THREAD_BPT", static_cast< int >(0x00000008)},
	{ "DOPT_BPT_MSGS", static_cast< int >(0x00000010)},
	{ "DOPT_LIB_MSGS", static_cast< int >(0x00000040)},
	{ "DOPT_LIB_BPT", static_cast< int >(0x00000080)},
	{ "DOPT_INFO_MSGS", static_cast< int >(0x00000100)},
	{ "DOPT_INFO_BPT", static_cast< int >(0x00000200)},
	{ "DOPT_REAL_MEMORY", static_cast< int >(0x00000400)},
	{ "DOPT_REDO_STACK", static_cast< int >(0x00000800)},
	{ "DOPT_ENTRY_BPT", static_cast< int >(0x00001000)},
	{ "DOPT_EXCDLG", static_cast< int >(0x00006000)},
	{ "EXCDLG_NEVER", static_cast< int >(0x00000000)},
	{ "EXCDLG_UNKNOWN", static_cast< int >(0x00002000)},
	{ "EXCDLG_ALWAYS", static_cast< int >(0x00006000)},
	{ "DOPT_LOAD_DINFO", static_cast< int >(0x00008000)},
	{ "DOPT_END_BPT", static_cast< int >(0x00010000)},
	{ "DOPT_TEMP_HWBPT", static_cast< int >(0x00020000)},
	{ "SRCIT_NONE", static_cast< int >(SRCIT_NONE)},
	{ "SRCIT_MODULE", static_cast< int >(SRCIT_MODULE)},
	{ "SRCIT_FUNC", static_cast< int >(SRCIT_FUNC)},
	{ "SRCIT_STMT", static_cast< int >(SRCIT_STMT)},
	{ "SRCIT_EXPR", static_cast< int >(SRCIT_EXPR)},
	{ "SRCIT_STTVAR", static_cast< int >(SRCIT_STTVAR)},
	{ "SRCIT_LOCVAR", static_cast< int >(SRCIT_LOCVAR)},
	{ "SRCDBG_PROV_VERSION", static_cast< int >(4)},

};

for ( size_t _cidx = 0; _cidx < qnumber(cis); ++_cidx )
{
  const ci_t &ci = cis[_cidx];
  PyObject *o = SWIG_From_int(static_cast< int >(ci.val));
  SWIG_Python_SetConstant(d, ci.name, o);
}
  SWIG_PYTHON_INITIALIZE_THREADS;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

