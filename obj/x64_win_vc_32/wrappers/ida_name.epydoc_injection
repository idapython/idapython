

ida_name.FUNC_IMPORT_PREFIX
"""
Name prefix used by IDA for the imported functions.
"""

ida_name.GETN_APPZERO
"""
append a struct field name if the field offset is zero?

meaningful only if the name refers to a structure.
"""

ida_name.GETN_NODUMMY
"""
do not create a new dummy name but pretend it exists
"""

ida_name.GETN_NOFIXUP
"""
ignore the fixup information when producing the name
"""

ida_name.GNCN_NOCOLOR
"""
generate an uncolored name
"""

ida_name.GNCN_NODBGNM
"""
don't use debug names
"""

ida_name.GNCN_NOFUNC
"""
don't generate funcname+... expressions
"""

ida_name.GNCN_NOLABEL
"""
don't generate labels
"""

ida_name.GNCN_NOSEG
"""
ignore the segment prefix when producing the name
"""

ida_name.GNCN_PREFDBG
"""
if using debug names, prefer debug names over function names
"""

ida_name.GNCN_REQFUNC
"""
return 0 if the address does not belong to a function
"""

ida_name.GNCN_REQNAME
"""
return 0 if the address can only be represented as a hex number
"""

ida_name.GNCN_SEGNUM
"""
segment part is displayed as a hex number
"""

ida_name.GNCN_SEG_FUNC
"""
generate both segment and function names (default is to omit segment
name if a function name is present)
"""

ida_name.GN_COLORED
"""
return colored name
"""

ida_name.GN_DEMANGLED
"""
return demangled name
"""

ida_name.GN_ISRET
"""
for dummy names: use retloc
"""

ida_name.GN_LOCAL
"""
try to get local name first; if failed, get global
"""

ida_name.GN_LONG
"""
use long form of demangled name
"""

ida_name.GN_NOT_DUMMY
"""
do not return a dummy name
"""

ida_name.GN_NOT_ISRET
"""
for dummy names: do not use retloc
"""

ida_name.GN_SHORT
"""
use short form of demangled name
"""

ida_name.GN_STRICT
"""
fail if can not demangle
"""

ida_name.GN_VISIBLE
"""
replace forbidden characters by SUBSTCHAR
"""

ida_name.MAXNAMELEN
"""
Maximum length of a name in IDA (with the trailing zero)
"""

ida_name.NT_ABS
"""
name is absolute symbol ( 'SEG_ABSSYM' )
"""

ida_name.NT_BMASK
"""
name is a bit group mask name
"""

ida_name.NT_BYTE
"""
name is byte name (regular name)
"""

ida_name.NT_ENUM
"""
name is symbolic constant
"""

ida_name.NT_LOCAL
"""
name is local label
"""

ida_name.NT_NONE
"""
name doesn't exist or has no value
"""

ida_name.NT_REGVAR
"""
name is a renamed register (*value is idx into pfn->regvars)
"""

ida_name.NT_SEG
"""
name is segment or segment register name
"""

ida_name.NT_STKVAR
"""
name is stack variable name
"""

ida_name.NT_STROFF
"""
name is structure member
"""

ida_name.SN_AUTO
"""
if set, make name autogenerated
"""

ida_name.SN_FORCE
"""
if the specified name is already present in the database, try
variations with a numerical suffix like "_123"
"""

ida_name.SN_IDBENC
"""
non-ASCII bytes will be decoded accordingly

the name is given in the IDB encoding;
"""

ida_name.SN_LOCAL
"""
create local name. a function should exist. local names can't be
public or weak. also they are not included into the list of names they
can't have dummy prefixes.
"""

ida_name.SN_NOCHECK
"""
Don't fail if the name contains invalid characters. If this bit is
clear, all invalid chars (those !is_ident_cp()) will be replaced by
SUBSTCHAR List of valid characters is defined in ida.cfg
"""

ida_name.SN_NOLIST
"""
if set, exclude name from the list. if not set, then include the name
into the list (however, if other bits are set, the name might be
immediately excluded from the list).
"""

ida_name.SN_NON_AUTO
"""
if set, make name non-autogenerated
"""

ida_name.SN_NON_PUBLIC
"""
if set, make name non-public
"""

ida_name.SN_NON_WEAK
"""
if set, make name non-weak
"""

ida_name.SN_NOWARN
"""
don't display a warning if failed
"""

ida_name.SN_PUBLIC
"""
if set, make name public
"""

ida_name.SN_WEAK
"""
if set, make name weak
"""